{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { getAddress } from \"@ethersproject/address\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { arrayify, concat, hexDataSlice, isHexString, joinSignature } from \"@ethersproject/bytes\";\nimport { hashMessage, _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { defaultPath, HDNode, entropyToMnemonic } from \"@ethersproject/hdnode\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, resolveProperties } from \"@ethersproject/properties\";\nimport { randomBytes } from \"@ethersproject/random\";\nimport { SigningKey } from \"@ethersproject/signing-key\";\nimport { decryptJsonWallet, decryptJsonWalletSync, encryptKeystore } from \"@ethersproject/json-wallets\";\nimport { computeAddress, recoverAddress, serialize } from \"@ethersproject/transactions\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nfunction isAccount(value) {\n  return value != null && isHexString(value.privateKey, 32) && value.address != null;\n}\nfunction hasMnemonic(value) {\n  const mnemonic = value.mnemonic;\n  return mnemonic && mnemonic.phrase;\n}\nexport class Wallet extends Signer {\n  constructor(privateKey, provider) {\n    super();\n    if (isAccount(privateKey)) {\n      const signingKey = new SigningKey(privateKey.privateKey);\n      defineReadOnly(this, \"_signingKey\", () => signingKey);\n      defineReadOnly(this, \"address\", computeAddress(this.publicKey));\n      if (this.address !== getAddress(privateKey.address)) {\n        logger.throwArgumentError(\"privateKey/address mismatch\", \"privateKey\", \"[REDACTED]\");\n      }\n      if (hasMnemonic(privateKey)) {\n        const srcMnemonic = privateKey.mnemonic;\n        defineReadOnly(this, \"_mnemonic\", () => ({\n          phrase: srcMnemonic.phrase,\n          path: srcMnemonic.path || defaultPath,\n          locale: srcMnemonic.locale || \"en\"\n        }));\n        const mnemonic = this.mnemonic;\n        const node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path);\n        if (computeAddress(node.privateKey) !== this.address) {\n          logger.throwArgumentError(\"mnemonic/address mismatch\", \"privateKey\", \"[REDACTED]\");\n        }\n      } else {\n        defineReadOnly(this, \"_mnemonic\", () => null);\n      }\n    } else {\n      if (SigningKey.isSigningKey(privateKey)) {\n        /* istanbul ignore if */\n        if (privateKey.curve !== \"secp256k1\") {\n          logger.throwArgumentError(\"unsupported curve; must be secp256k1\", \"privateKey\", \"[REDACTED]\");\n        }\n        defineReadOnly(this, \"_signingKey\", () => privateKey);\n      } else {\n        // A lot of common tools do not prefix private keys with a 0x (see: #1166)\n        if (typeof privateKey === \"string\") {\n          if (privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {\n            privateKey = \"0x\" + privateKey;\n          }\n        }\n        const signingKey = new SigningKey(privateKey);\n        defineReadOnly(this, \"_signingKey\", () => signingKey);\n      }\n      defineReadOnly(this, \"_mnemonic\", () => null);\n      defineReadOnly(this, \"address\", computeAddress(this.publicKey));\n    }\n    /* istanbul ignore if */\n    if (provider && !Provider.isProvider(provider)) {\n      logger.throwArgumentError(\"invalid provider\", \"provider\", provider);\n    }\n    defineReadOnly(this, \"provider\", provider || null);\n  }\n  get mnemonic() {\n    return this._mnemonic();\n  }\n  get privateKey() {\n    return this._signingKey().privateKey;\n  }\n  get publicKey() {\n    return this._signingKey().publicKey;\n  }\n  getAddress() {\n    return Promise.resolve(this.address);\n  }\n  connect(provider) {\n    return new Wallet(this, provider);\n  }\n  signTransaction(transaction) {\n    return resolveProperties(transaction).then(tx => {\n      if (tx.from != null) {\n        if (getAddress(tx.from) !== this.address) {\n          logger.throwArgumentError(\"transaction from address mismatch\", \"transaction.from\", transaction.from);\n        }\n        delete tx.from;\n      }\n      const signature = this._signingKey().signDigest(keccak256(serialize(tx)));\n      return serialize(tx, signature);\n    });\n  }\n  signMessage(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return joinSignature(this._signingKey().signDigest(hashMessage(message)));\n    });\n  }\n  _signTypedData(domain, types, value) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Populate any ENS names\n      const populated = yield _TypedDataEncoder.resolveNames(domain, types, value, name => {\n        if (this.provider == null) {\n          logger.throwError(\"cannot resolve ENS names without a provider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"resolveName\",\n            value: name\n          });\n        }\n        return this.provider.resolveName(name);\n      });\n      return joinSignature(this._signingKey().signDigest(_TypedDataEncoder.hash(populated.domain, types, populated.value)));\n    });\n  }\n  encrypt(password, options, progressCallback) {\n    if (typeof options === \"function\" && !progressCallback) {\n      progressCallback = options;\n      options = {};\n    }\n    if (progressCallback && typeof progressCallback !== \"function\") {\n      throw new Error(\"invalid callback\");\n    }\n    if (!options) {\n      options = {};\n    }\n    return encryptKeystore(this, password, options, progressCallback);\n  }\n  /**\n   *  Static methods to create Wallet instances.\n   */\n  static createRandom(options) {\n    let entropy = randomBytes(16);\n    if (!options) {\n      options = {};\n    }\n    if (options.extraEntropy) {\n      entropy = arrayify(hexDataSlice(keccak256(concat([entropy, options.extraEntropy])), 0, 16));\n    }\n    const mnemonic = entropyToMnemonic(entropy, options.locale);\n    return Wallet.fromMnemonic(mnemonic, options.path, options.locale);\n  }\n  static fromEncryptedJson(json, password, progressCallback) {\n    return decryptJsonWallet(json, password, progressCallback).then(account => {\n      return new Wallet(account);\n    });\n  }\n  static fromEncryptedJsonSync(json, password) {\n    return new Wallet(decryptJsonWalletSync(json, password));\n  }\n  static fromMnemonic(mnemonic, path, wordlist) {\n    if (!path) {\n      path = defaultPath;\n    }\n    return new Wallet(HDNode.fromMnemonic(mnemonic, null, wordlist).derivePath(path));\n  }\n}\nexport function verifyMessage(message, signature) {\n  return recoverAddress(hashMessage(message), signature);\n}\nexport function verifyTypedData(domain, types, value, signature) {\n  return recoverAddress(_TypedDataEncoder.hash(domain, types, value), signature);\n}","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","getAddress","Provider","Signer","arrayify","concat","hexDataSlice","isHexString","joinSignature","hashMessage","_TypedDataEncoder","defaultPath","HDNode","entropyToMnemonic","keccak256","defineReadOnly","resolveProperties","randomBytes","SigningKey","decryptJsonWallet","decryptJsonWalletSync","encryptKeystore","computeAddress","recoverAddress","serialize","Logger","version","logger","isAccount","privateKey","address","hasMnemonic","mnemonic","phrase","Wallet","constructor","provider","signingKey","publicKey","throwArgumentError","srcMnemonic","path","locale","node","fromMnemonic","derivePath","isSigningKey","curve","match","length","isProvider","_mnemonic","_signingKey","connect","signTransaction","transaction","tx","from","signature","signDigest","signMessage","message","_signTypedData","domain","types","populated","resolveNames","name","throwError","errors","UNSUPPORTED_OPERATION","operation","resolveName","hash","encrypt","password","options","progressCallback","Error","createRandom","entropy","extraEntropy","fromEncryptedJson","json","account","fromEncryptedJsonSync","wordlist","verifyMessage","verifyTypedData"],"sources":["F:/DDesktop/MEAN_BC/mean-stack-authentication-authorization-master/angular-15-client/node_modules/@ethersproject/wallet/lib.esm/index.js"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { getAddress } from \"@ethersproject/address\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { arrayify, concat, hexDataSlice, isHexString, joinSignature } from \"@ethersproject/bytes\";\nimport { hashMessage, _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { defaultPath, HDNode, entropyToMnemonic } from \"@ethersproject/hdnode\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, resolveProperties } from \"@ethersproject/properties\";\nimport { randomBytes } from \"@ethersproject/random\";\nimport { SigningKey } from \"@ethersproject/signing-key\";\nimport { decryptJsonWallet, decryptJsonWalletSync, encryptKeystore } from \"@ethersproject/json-wallets\";\nimport { computeAddress, recoverAddress, serialize } from \"@ethersproject/transactions\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nfunction isAccount(value) {\n    return (value != null && isHexString(value.privateKey, 32) && value.address != null);\n}\nfunction hasMnemonic(value) {\n    const mnemonic = value.mnemonic;\n    return (mnemonic && mnemonic.phrase);\n}\nexport class Wallet extends Signer {\n    constructor(privateKey, provider) {\n        super();\n        if (isAccount(privateKey)) {\n            const signingKey = new SigningKey(privateKey.privateKey);\n            defineReadOnly(this, \"_signingKey\", () => signingKey);\n            defineReadOnly(this, \"address\", computeAddress(this.publicKey));\n            if (this.address !== getAddress(privateKey.address)) {\n                logger.throwArgumentError(\"privateKey/address mismatch\", \"privateKey\", \"[REDACTED]\");\n            }\n            if (hasMnemonic(privateKey)) {\n                const srcMnemonic = privateKey.mnemonic;\n                defineReadOnly(this, \"_mnemonic\", () => ({\n                    phrase: srcMnemonic.phrase,\n                    path: srcMnemonic.path || defaultPath,\n                    locale: srcMnemonic.locale || \"en\"\n                }));\n                const mnemonic = this.mnemonic;\n                const node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path);\n                if (computeAddress(node.privateKey) !== this.address) {\n                    logger.throwArgumentError(\"mnemonic/address mismatch\", \"privateKey\", \"[REDACTED]\");\n                }\n            }\n            else {\n                defineReadOnly(this, \"_mnemonic\", () => null);\n            }\n        }\n        else {\n            if (SigningKey.isSigningKey(privateKey)) {\n                /* istanbul ignore if */\n                if (privateKey.curve !== \"secp256k1\") {\n                    logger.throwArgumentError(\"unsupported curve; must be secp256k1\", \"privateKey\", \"[REDACTED]\");\n                }\n                defineReadOnly(this, \"_signingKey\", () => privateKey);\n            }\n            else {\n                // A lot of common tools do not prefix private keys with a 0x (see: #1166)\n                if (typeof (privateKey) === \"string\") {\n                    if (privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {\n                        privateKey = \"0x\" + privateKey;\n                    }\n                }\n                const signingKey = new SigningKey(privateKey);\n                defineReadOnly(this, \"_signingKey\", () => signingKey);\n            }\n            defineReadOnly(this, \"_mnemonic\", () => null);\n            defineReadOnly(this, \"address\", computeAddress(this.publicKey));\n        }\n        /* istanbul ignore if */\n        if (provider && !Provider.isProvider(provider)) {\n            logger.throwArgumentError(\"invalid provider\", \"provider\", provider);\n        }\n        defineReadOnly(this, \"provider\", provider || null);\n    }\n    get mnemonic() { return this._mnemonic(); }\n    get privateKey() { return this._signingKey().privateKey; }\n    get publicKey() { return this._signingKey().publicKey; }\n    getAddress() {\n        return Promise.resolve(this.address);\n    }\n    connect(provider) {\n        return new Wallet(this, provider);\n    }\n    signTransaction(transaction) {\n        return resolveProperties(transaction).then((tx) => {\n            if (tx.from != null) {\n                if (getAddress(tx.from) !== this.address) {\n                    logger.throwArgumentError(\"transaction from address mismatch\", \"transaction.from\", transaction.from);\n                }\n                delete tx.from;\n            }\n            const signature = this._signingKey().signDigest(keccak256(serialize(tx)));\n            return serialize(tx, signature);\n        });\n    }\n    signMessage(message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return joinSignature(this._signingKey().signDigest(hashMessage(message)));\n        });\n    }\n    _signTypedData(domain, types, value) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Populate any ENS names\n            const populated = yield _TypedDataEncoder.resolveNames(domain, types, value, (name) => {\n                if (this.provider == null) {\n                    logger.throwError(\"cannot resolve ENS names without a provider\", Logger.errors.UNSUPPORTED_OPERATION, {\n                        operation: \"resolveName\",\n                        value: name\n                    });\n                }\n                return this.provider.resolveName(name);\n            });\n            return joinSignature(this._signingKey().signDigest(_TypedDataEncoder.hash(populated.domain, types, populated.value)));\n        });\n    }\n    encrypt(password, options, progressCallback) {\n        if (typeof (options) === \"function\" && !progressCallback) {\n            progressCallback = options;\n            options = {};\n        }\n        if (progressCallback && typeof (progressCallback) !== \"function\") {\n            throw new Error(\"invalid callback\");\n        }\n        if (!options) {\n            options = {};\n        }\n        return encryptKeystore(this, password, options, progressCallback);\n    }\n    /**\n     *  Static methods to create Wallet instances.\n     */\n    static createRandom(options) {\n        let entropy = randomBytes(16);\n        if (!options) {\n            options = {};\n        }\n        if (options.extraEntropy) {\n            entropy = arrayify(hexDataSlice(keccak256(concat([entropy, options.extraEntropy])), 0, 16));\n        }\n        const mnemonic = entropyToMnemonic(entropy, options.locale);\n        return Wallet.fromMnemonic(mnemonic, options.path, options.locale);\n    }\n    static fromEncryptedJson(json, password, progressCallback) {\n        return decryptJsonWallet(json, password, progressCallback).then((account) => {\n            return new Wallet(account);\n        });\n    }\n    static fromEncryptedJsonSync(json, password) {\n        return new Wallet(decryptJsonWalletSync(json, password));\n    }\n    static fromMnemonic(mnemonic, path, wordlist) {\n        if (!path) {\n            path = defaultPath;\n        }\n        return new Wallet(HDNode.fromMnemonic(mnemonic, null, wordlist).derivePath(path));\n    }\n}\nexport function verifyMessage(message, signature) {\n    return recoverAddress(hashMessage(message), signature);\n}\nexport function verifyTypedData(domain, types, value, signature) {\n    return recoverAddress(_TypedDataEncoder.hash(domain, types, value), signature);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}