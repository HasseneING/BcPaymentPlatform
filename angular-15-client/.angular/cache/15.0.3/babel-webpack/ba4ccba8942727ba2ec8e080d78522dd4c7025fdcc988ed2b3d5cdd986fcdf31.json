{"ast":null,"code":"\"use strict\";\n\nimport { arrayify, hexlify } from \"@ethersproject/bytes\";\nimport { computeHmac } from \"@ethersproject/sha2\";\nexport function pbkdf2(password, salt, iterations, keylen, hashAlgorithm) {\n  password = arrayify(password);\n  salt = arrayify(salt);\n  let hLen;\n  let l = 1;\n  const DK = new Uint8Array(keylen);\n  const block1 = new Uint8Array(salt.length + 4);\n  block1.set(salt);\n  //salt.copy(block1, 0, 0, salt.length)\n  let r;\n  let T;\n  for (let i = 1; i <= l; i++) {\n    //block1.writeUInt32BE(i, salt.length)\n    block1[salt.length] = i >> 24 & 0xff;\n    block1[salt.length + 1] = i >> 16 & 0xff;\n    block1[salt.length + 2] = i >> 8 & 0xff;\n    block1[salt.length + 3] = i & 0xff;\n    //let U = createHmac(password).update(block1).digest();\n    let U = arrayify(computeHmac(hashAlgorithm, password, block1));\n    if (!hLen) {\n      hLen = U.length;\n      T = new Uint8Array(hLen);\n      l = Math.ceil(keylen / hLen);\n      r = keylen - (l - 1) * hLen;\n    }\n    //U.copy(T, 0, 0, hLen)\n    T.set(U);\n    for (let j = 1; j < iterations; j++) {\n      //U = createHmac(password).update(U).digest();\n      U = arrayify(computeHmac(hashAlgorithm, password, U));\n      for (let k = 0; k < hLen; k++) T[k] ^= U[k];\n    }\n    const destPos = (i - 1) * hLen;\n    const len = i === l ? r : hLen;\n    //T.copy(DK, destPos, 0, len)\n    DK.set(arrayify(T).slice(0, len), destPos);\n  }\n  return hexlify(DK);\n}","map":{"version":3,"names":["arrayify","hexlify","computeHmac","pbkdf2","password","salt","iterations","keylen","hashAlgorithm","hLen","l","DK","Uint8Array","block1","length","set","r","T","i","U","Math","ceil","j","k","destPos","len","slice"],"sources":["F:/DDesktop/MEAN_BC/mean-stack-authentication-authorization-master/angular-15-client/node_modules/@ethersproject/pbkdf2/lib.esm/pbkdf2.js"],"sourcesContent":["\"use strict\";\nimport { arrayify, hexlify } from \"@ethersproject/bytes\";\nimport { computeHmac } from \"@ethersproject/sha2\";\nexport function pbkdf2(password, salt, iterations, keylen, hashAlgorithm) {\n    password = arrayify(password);\n    salt = arrayify(salt);\n    let hLen;\n    let l = 1;\n    const DK = new Uint8Array(keylen);\n    const block1 = new Uint8Array(salt.length + 4);\n    block1.set(salt);\n    //salt.copy(block1, 0, 0, salt.length)\n    let r;\n    let T;\n    for (let i = 1; i <= l; i++) {\n        //block1.writeUInt32BE(i, salt.length)\n        block1[salt.length] = (i >> 24) & 0xff;\n        block1[salt.length + 1] = (i >> 16) & 0xff;\n        block1[salt.length + 2] = (i >> 8) & 0xff;\n        block1[salt.length + 3] = i & 0xff;\n        //let U = createHmac(password).update(block1).digest();\n        let U = arrayify(computeHmac(hashAlgorithm, password, block1));\n        if (!hLen) {\n            hLen = U.length;\n            T = new Uint8Array(hLen);\n            l = Math.ceil(keylen / hLen);\n            r = keylen - (l - 1) * hLen;\n        }\n        //U.copy(T, 0, 0, hLen)\n        T.set(U);\n        for (let j = 1; j < iterations; j++) {\n            //U = createHmac(password).update(U).digest();\n            U = arrayify(computeHmac(hashAlgorithm, password, U));\n            for (let k = 0; k < hLen; k++)\n                T[k] ^= U[k];\n        }\n        const destPos = (i - 1) * hLen;\n        const len = (i === l ? r : hLen);\n        //T.copy(DK, destPos, 0, len)\n        DK.set(arrayify(T).slice(0, len), destPos);\n    }\n    return hexlify(DK);\n}\n"],"mappings":"AAAA,YAAY;;AACZ,SAASA,QAAQ,EAAEC,OAAO,QAAQ,sBAAsB;AACxD,SAASC,WAAW,QAAQ,qBAAqB;AACjD,OAAO,SAASC,MAAM,CAACC,QAAQ,EAAEC,IAAI,EAAEC,UAAU,EAAEC,MAAM,EAAEC,aAAa,EAAE;EACtEJ,QAAQ,GAAGJ,QAAQ,CAACI,QAAQ,CAAC;EAC7BC,IAAI,GAAGL,QAAQ,CAACK,IAAI,CAAC;EACrB,IAAII,IAAI;EACR,IAAIC,CAAC,GAAG,CAAC;EACT,MAAMC,EAAE,GAAG,IAAIC,UAAU,CAACL,MAAM,CAAC;EACjC,MAAMM,MAAM,GAAG,IAAID,UAAU,CAACP,IAAI,CAACS,MAAM,GAAG,CAAC,CAAC;EAC9CD,MAAM,CAACE,GAAG,CAACV,IAAI,CAAC;EAChB;EACA,IAAIW,CAAC;EACL,IAAIC,CAAC;EACL,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIR,CAAC,EAAEQ,CAAC,EAAE,EAAE;IACzB;IACAL,MAAM,CAACR,IAAI,CAACS,MAAM,CAAC,GAAII,CAAC,IAAI,EAAE,GAAI,IAAI;IACtCL,MAAM,CAACR,IAAI,CAACS,MAAM,GAAG,CAAC,CAAC,GAAII,CAAC,IAAI,EAAE,GAAI,IAAI;IAC1CL,MAAM,CAACR,IAAI,CAACS,MAAM,GAAG,CAAC,CAAC,GAAII,CAAC,IAAI,CAAC,GAAI,IAAI;IACzCL,MAAM,CAACR,IAAI,CAACS,MAAM,GAAG,CAAC,CAAC,GAAGI,CAAC,GAAG,IAAI;IAClC;IACA,IAAIC,CAAC,GAAGnB,QAAQ,CAACE,WAAW,CAACM,aAAa,EAAEJ,QAAQ,EAAES,MAAM,CAAC,CAAC;IAC9D,IAAI,CAACJ,IAAI,EAAE;MACPA,IAAI,GAAGU,CAAC,CAACL,MAAM;MACfG,CAAC,GAAG,IAAIL,UAAU,CAACH,IAAI,CAAC;MACxBC,CAAC,GAAGU,IAAI,CAACC,IAAI,CAACd,MAAM,GAAGE,IAAI,CAAC;MAC5BO,CAAC,GAAGT,MAAM,GAAG,CAACG,CAAC,GAAG,CAAC,IAAID,IAAI;IAC/B;IACA;IACAQ,CAAC,CAACF,GAAG,CAACI,CAAC,CAAC;IACR,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGhB,UAAU,EAAEgB,CAAC,EAAE,EAAE;MACjC;MACAH,CAAC,GAAGnB,QAAQ,CAACE,WAAW,CAACM,aAAa,EAAEJ,QAAQ,EAAEe,CAAC,CAAC,CAAC;MACrD,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGd,IAAI,EAAEc,CAAC,EAAE,EACzBN,CAAC,CAACM,CAAC,CAAC,IAAIJ,CAAC,CAACI,CAAC,CAAC;IACpB;IACA,MAAMC,OAAO,GAAG,CAACN,CAAC,GAAG,CAAC,IAAIT,IAAI;IAC9B,MAAMgB,GAAG,GAAIP,CAAC,KAAKR,CAAC,GAAGM,CAAC,GAAGP,IAAK;IAChC;IACAE,EAAE,CAACI,GAAG,CAACf,QAAQ,CAACiB,CAAC,CAAC,CAACS,KAAK,CAAC,CAAC,EAAED,GAAG,CAAC,EAAED,OAAO,CAAC;EAC9C;EACA,OAAOvB,OAAO,CAACU,EAAE,CAAC;AACtB"},"metadata":{},"sourceType":"module","externalDependencies":[]}