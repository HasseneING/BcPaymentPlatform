{"ast":null,"code":"import _asyncToGenerator from \"F:/DDesktop/MEAN_BC/mean-stack-authentication-authorization-master/angular-15-client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport Web3 from 'web3';\nimport { getWalletSOL } from '../contracts/contractABIs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../_services/user.service\";\nimport * as i2 from \"../_services/storage.service\";\nimport * as i3 from \"@angular/forms\";\nconst alchemy = require(\"alchemy-sdk\");\nexport class BoardUserComponent {\n  constructor(userService, StorageService) {\n    var _this = this;\n    this.userService = userService;\n    this.StorageService = StorageService;\n    this.depositForm = {\n      ethValue: null\n    };\n    this.walletConnected = false;\n    this.walletId = '';\n    this.walletBalance = '';\n    this.forwarderAddress = '';\n    this.connectToWallet = () => {\n      this.userService.connectWallet();\n    };\n    this.checkWalletConnected = /*#__PURE__*/_asyncToGenerator(function* () {\n      const accounts = yield _this.userService.checkWalletConnected();\n      if (accounts.length > 0) {\n        _this.walletConnected = true;\n        _this.walletId = accounts[0];\n        console.log(_this.walletId);\n      }\n    });\n    const provider = \"https://sepolia.infura.io/v3/acaa2699bfc84be092239f5676e3192a\"; //HAVE TO ADD .ENV FILE \n    var web3Provider = new Web3.providers.HttpProvider(provider);\n    this.web3 = new Web3(web3Provider);\n    this.contractInst = new this.web3.eth.Contract(this.userService.abiContract, this.userService.contractAddress);\n    this.walletContractInstance = new this.web3.eth.Contract(getWalletSOL().abi, getWalletSOL().address, {\n      from: '0xa11C30ef3bA37BEF5c86089bb8f7EB2eb90aB052'\n    }); //I NEED ENV FILE\n  }\n\n  ngOnInit() {\n    this.connectToWallet();\n    this.userService.getUserBoard().subscribe({\n      next: data => {\n        this.content = data;\n      },\n      error: err => {\n        if (err.error) {\n          try {\n            const res = JSON.parse(err.error);\n            this.content = res.message;\n          } catch {\n            this.content = `Error with status: ${err.status} - ${err.statusText}`;\n          }\n        } else {\n          this.content = `Error with status: ${err.status}`;\n        }\n      }\n    });\n  }\n  getContractBalance() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      let contractBalance = _this2.contractInst.methods.getContractBalance().call();\n      return contractBalance;\n    })();\n  }\n  getDepositedBalance() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      let depositedBalance = _this3.contractInst.methods.getContractBalance().call();\n    })();\n  }\n  getWalletId() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      let balance2 = yield _this4.web3.eth.getBalance(_this4.walletId).then(res => {\n        _this4.walletBalance = res;\n      });\n    })();\n  }\n  deployForwarder() {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      console.log(\"yoooo\");\n      let forwarderCall = _this5.walletContractInstance.methods.createForwarder().call().then(res => {\n        console.log(res);\n      });\n      //stuck here\n      console.log(_this5.forwarderAddress);\n      //we dont need to deploy wallet.sol it's already deployed, we create a forwarder from here some how xd\n      //A FORWARDER THAT'S GHONNA BE ATTACHED TO THIS USERID USING THE PRIVATE KEY OF WALLET.SOL\n    })();\n  }\n\n  updateForwarder() {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      let truth = false;\n      _this6.deployForwarder();\n      console.log('ID' + _this6.forwarderAddress);\n      _this6.userService.update(_this6.forwarderAddress, _this6.StorageService.getUser().id).subscribe({\n        next: data => {\n          console.log(data);\n          truth = true;\n        },\n        error: err => {\n          console.log(err.error.message);\n        }\n      });\n      return truth;\n    })();\n  }\n  onSubmit() {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      _this7.checkWalletConnected();\n      let balance;\n      balance = _this7.getContractBalance().then(res => {\n        console.log(_this7.web3.utils.fromWei(res, \"ether\"), \"eth\");\n      });\n      console.log(_this7.depositForm);\n      console.log(_this7.walletId);\n      var accounts = yield _this7.web3.eth.getAccounts().then(console.log);\n      let balance2 = yield _this7.web3.eth.getBalance(_this7.walletId).then(res => {\n        _this7.walletBalance = res;\n      });\n      const transaction = _this7.web3.utils.toWei(String(_this7.depositForm.ethValue));\n      console.log(transaction, \"wei\");\n      var receiver = _this7.userService.contractAddress;\n      var sender = _this7.walletId;\n      //https://docs.metamask.io/wallet/reference/provider-api/#ethereum-request-args\n      /*if (this.StorageService.getUser().forwarderAddress!='0x0') {\r\n        console.log(\"0x0\");\r\n        this.userService.transactToAddress(this.walletId, this.StorageService.getUser().forwarderAddress, this.depositForm.ethValue)\r\n      }\r\n      else{\r\n        console.log(\"not 0x0\");\r\n        this.updateForwarder()\r\n        .then(res =>this.userService\r\n          .transactToAddress(this.walletId, this.StorageService.getUser().forwarderAddress, this.depositForm.ethValue))\r\n      }*/\n    })();\n  }\n}\n\nBoardUserComponent.ɵfac = function BoardUserComponent_Factory(t) {\n  return new (t || BoardUserComponent)(i0.ɵɵdirectiveInject(i1.UserService), i0.ɵɵdirectiveInject(i2.StorageService));\n};\nBoardUserComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: BoardUserComponent,\n  selectors: [[\"app-board-user\"]],\n  decls: 12,\n  vars: 3,\n  consts: [[1, \"container\"], [1, \"jumbotron\"], [\"name\", \"depositForm\", 1, \"form-group\", 3, \"ngSubmit\"], [\"f\", \"ngForm\"], [\"for\", \"ethValue\"], [\"type\", \"number\", \"name\", \"ethValue\", 1, \"ethValue\", 3, \"ngModel\", \"ngModelChange\"], [1, \"btn\", \"btn-primary\", \"btn-block\"], [1, \"btn\", \"btn-primary\", \"btn-block\", 3, \"click\"]],\n  template: function BoardUserComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"header\", 1)(2, \"form\", 2, 3);\n      i0.ɵɵlistener(\"ngSubmit\", function BoardUserComponent_Template_form_ngSubmit_2_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(4, \"label\", 4);\n      i0.ɵɵtext(5, \"Value:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"input\", 5);\n      i0.ɵɵlistener(\"ngModelChange\", function BoardUserComponent_Template_input_ngModelChange_6_listener($event) {\n        return ctx.depositForm.ethValue = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"button\", 6);\n      i0.ɵɵtext(8, \"Deposit here\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(9, \"button\", 7);\n      i0.ɵɵlistener(\"click\", function BoardUserComponent_Template_button_click_9_listener() {\n        return ctx.deployForwarder();\n      });\n      i0.ɵɵtext(10, \"Deploy Forwarder\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(11);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngModel\", ctx.depositForm.ethValue);\n      i0.ɵɵadvance(5);\n      i0.ɵɵtextInterpolate2(\" \", ctx.walletId, \" \", ctx.walletBalance + \" eth\", \" \");\n    }\n  },\n  dependencies: [i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NumberValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.NgModel, i3.NgForm],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";AAGA,OAAOA,IAAI,MAAM,MAAM;AAEvB,SAAwBC,YAAY,QAAO,2BAA2B;;;;;AAEtE,MAAMC,OAAO,GAAGC,OAAO,CAAC,aAAa,CAAC;AAOtC,OAAM,MAAOC,kBAAkB;EAa7BC,YAAoBC,WAAwB,EAAUC,cAA8B;IAAA;IAAhE,gBAAW,GAAXD,WAAW;IAAuB,mBAAc,GAAdC,cAAc;IAXpE,gBAAW,GAAQ;MACjBC,QAAQ,EAAE;KACX;IAEM,oBAAe,GAAY,KAAK;IAChC,aAAQ,GAAW,EAAE;IACrB,kBAAa,GAAW,EAAE;IAGzB,qBAAgB,GAAW,EAAE;IAkCrC,oBAAe,GAAG,MAAK;MACrB,IAAI,CAACF,WAAW,CAACG,aAAa,EAAE;IAClC,CAAC;IACD,yBAAoB,kCAAG,aAAW;MAChC,MAAMC,QAAQ,SAAS,KAAI,CAACJ,WAAW,CAACK,oBAAoB,EAAE;MAC9D,IAAID,QAAQ,CAACE,MAAM,GAAG,CAAC,EAAE;QACvB,KAAI,CAACC,eAAe,GAAG,IAAI;QAC3B,KAAI,CAACC,QAAQ,GAAGJ,QAAQ,CAAC,CAAC,CAAC;QAC3BK,OAAO,CAACC,GAAG,CAAC,KAAI,CAACF,QAAQ,CAAC;;IAE9B,CAAC;IAvCC,MAAMG,QAAQ,GAAG,+DAA+D,EAAC;IACjF,IAAIC,YAAY,GAAG,IAAIlB,IAAI,CAACmB,SAAS,CAACC,YAAY,CAACH,QAAQ,CAAC;IAC5D,IAAI,CAACI,IAAI,GAAG,IAAIrB,IAAI,CAACkB,YAAY,CAAC;IAClC,IAAI,CAACI,YAAY,GAAG,IAAI,IAAI,CAACD,IAAI,CAACE,GAAG,CAACC,QAAQ,CAAC,IAAI,CAAClB,WAAW,CAACmB,WAAwB,EAAE,IAAI,CAACnB,WAAW,CAACoB,eAAe,CAAC;IAC3H,IAAI,CAACC,sBAAsB,GAAE,IAAI,IAAI,CAACN,IAAI,CAACE,GAAG,CAACC,QAAQ,CAACvB,YAAY,EAAE,CAAC2B,GAAG,EAAC3B,YAAY,EAAE,CAAC4B,OAAO,EAAC;MAACC,IAAI,EAAC;IAA4C,CAAC,CAAC,CAAC,CAAC;EAC1J;;EAEAC,QAAQ;IAEN,IAAI,CAACC,eAAe,EAAE;IACtB,IAAI,CAAC1B,WAAW,CAAC2B,YAAY,EAAE,CAACC,SAAS,CAAC;MACxCC,IAAI,EAAEC,IAAI,IAAG;QACX,IAAI,CAACC,OAAO,GAAGD,IAAI;MACrB,CAAC;MACDE,KAAK,EAAEC,GAAG,IAAG;QACX,IAAIA,GAAG,CAACD,KAAK,EAAE;UACb,IAAI;YACF,MAAME,GAAG,GAAGC,IAAI,CAACC,KAAK,CAACH,GAAG,CAACD,KAAK,CAAC;YACjC,IAAI,CAACD,OAAO,GAAGG,GAAG,CAACG,OAAO;WAC3B,CAAC,MAAM;YACN,IAAI,CAACN,OAAO,GAAG,sBAAsBE,GAAG,CAACK,MAAM,MAAML,GAAG,CAACM,UAAU,EAAE;;SAExE,MAAM;UACL,IAAI,CAACR,OAAO,GAAG,sBAAsBE,GAAG,CAACK,MAAM,EAAE;;MAErD;KACD,CAAC;EACJ;EAaME,kBAAkB;IAAA;IAAA;MACtB,IAAIC,eAAe,GAAG,MAAI,CAACzB,YAAY,CAAC0B,OAAO,CAACF,kBAAkB,EAAE,CACjEG,IAAI,EAAE;MACT,OAAOF,eAAe;IAAC;EACzB;EACMG,mBAAmB;IAAA;IAAA;MACvB,IAAIC,gBAAgB,GAAG,MAAI,CAAC7B,YAAY,CAAC0B,OAAO,CAACF,kBAAkB,EAAE,CAClEG,IAAI,EAAE;IAAC;EACZ;EACMG,WAAW;IAAA;IAAA;MAEf,IAAIC,QAAQ,SAAS,MAAI,CAAChC,IAAI,CAACE,GAAG,CAAC+B,UAAU,CAAC,MAAI,CAACxC,QAAQ,CAAC,CAACyC,IAAI,CAACf,GAAG,IAAG;QAAG,MAAI,CAACgB,aAAa,GAAGhB,GAAG;MAAC,CAAC,CAAC;IAAC;EACzG;EACMiB,eAAe;IAAA;IAAA;MACnB1C,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;MACpB,IAAI0C,aAAa,GAAC,MAAI,CAAC/B,sBAAsB,CAACqB,OAAO,CAACW,eAAe,EAAE,CAACV,IAAI,EAAE,CAC7EM,IAAI,CAAEf,GAAO,IAAG;QAACzB,OAAO,CAACC,GAAG,CAAEwB,GAAG,CAAC;MAAA,CAAC,CAAC;MACpC;MACDzB,OAAO,CAACC,GAAG,CAAC,MAAI,CAAC4C,gBAAgB,CAAC;MAChC;MACA;IAAA;EACJ;;EACMC,eAAe;IAAA;IAAA;MACnB,IAAIC,KAAK,GAAG,KAAK;MACjB,MAAI,CAACL,eAAe,EAAE;MACtB1C,OAAO,CAACC,GAAG,CAAC,IAAI,GAAG,MAAI,CAAC4C,gBAAgB,CAAC;MACzC,MAAI,CAACtD,WAAW,CAACyD,MAAM,CAAC,MAAI,CAACH,gBAAgB,EAAE,MAAI,CAACrD,cAAc,CAACyD,OAAO,EAAE,CAACC,EAAE,CAAC,CAAC/B,SAAS,CAAC;QACzFC,IAAI,EAAEC,IAAI,IAAG;UACXrB,OAAO,CAACC,GAAG,CAACoB,IAAI,CAAC;UACjB0B,KAAK,GAAG,IAAI;QACd,CAAC;QACDxB,KAAK,EAAEC,GAAG,IAAG;UACXxB,OAAO,CAACC,GAAG,CAACuB,GAAG,CAACD,KAAK,CAACK,OAAO,CAAC;QAChC;OACD,CAAC;MACF,OAAOmB,KAAK;IAAC;EACf;EACMI,QAAQ;IAAA;IAAA;MACZ,MAAI,CAACvD,oBAAoB,EAAE;MAC3B,IAAIwD,OAAO;MACXA,OAAO,GAAG,MAAI,CAACrB,kBAAkB,EAAE,CAACS,IAAI,CAACf,GAAG,IAAG;QAAGzB,OAAO,CAACC,GAAG,CAAC,MAAI,CAACK,IAAI,CAAC+C,KAAK,CAACC,OAAO,CAAC7B,GAAG,EAAE,OAAO,CAAC,EAAE,KAAK,CAAC;MAAC,CAAC,CAAC;MAC9GzB,OAAO,CAACC,GAAG,CAAC,MAAI,CAACsD,WAAW,CAAC;MAC7BvD,OAAO,CAACC,GAAG,CAAC,MAAI,CAACF,QAAQ,CAAC;MAC1B,IAAIJ,QAAQ,SAAS,MAAI,CAACW,IAAI,CAACE,GAAG,CAACgD,WAAW,EAAE,CAAChB,IAAI,CAACxC,OAAO,CAACC,GAAG,CAAC;MAClE,IAAIqC,QAAQ,SAAS,MAAI,CAAChC,IAAI,CAACE,GAAG,CAAC+B,UAAU,CAAC,MAAI,CAACxC,QAAQ,CAAC,CAACyC,IAAI,CAACf,GAAG,IAAG;QAAG,MAAI,CAACgB,aAAa,GAAGhB,GAAG;MAAC,CAAC,CAAC;MACtG,MAAMgC,WAAW,GAAG,MAAI,CAACnD,IAAI,CAAC+C,KAAK,CAACK,KAAK,CAACC,MAAM,CAAC,MAAI,CAACJ,WAAW,CAAC9D,QAAQ,CAAC,CAAC;MAC5EO,OAAO,CAACC,GAAG,CAACwD,WAAW,EAAE,KAAK,CAAC;MAC/B,IAAIG,QAAQ,GAAG,MAAI,CAACrE,WAAW,CAACoB,eAAe;MAC/C,IAAIkD,MAAM,GAAG,MAAI,CAAC9D,QAAQ;MAC1B;MACA;;;;;;;;;;IAAA;EAUF;;;AApHWV,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;QAAlBA,kBAAkB;EAAAyE;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCd/BC,8BAAuB;MAKnBA;QAAA,OAAYC,cAAU;MAAA,EAAC;MAErBD,gCAAsB;MAAAA,sBAAM;MAAAA,iBAAQ;MACpCA,gCAGC;MAFDA;QAAA;MAAA,EAAkC;MADlCA,iBAGC;MACDA,iCAA0C;MAAAA,4BAAY;MAAAA,iBAAS;MAEjEA,iCAAsE;MAA5BA;QAAA,OAASC,qBAAiB;MAAA,EAAC;MAACD,iCAAgB;MAAAA,iBAAS;MAE/FA,aAEF;MAAAA,iBAAS;;;MATLA,eAAkC;MAAlCA,kDAAkC;MAOpCA,eAEF;MAFEA,8EAEF","names":["Web3","getWalletSOL","alchemy","require","BoardUserComponent","constructor","userService","StorageService","ethValue","connectWallet","accounts","checkWalletConnected","length","walletConnected","walletId","console","log","provider","web3Provider","providers","HttpProvider","web3","contractInst","eth","Contract","abiContract","contractAddress","walletContractInstance","abi","address","from","ngOnInit","connectToWallet","getUserBoard","subscribe","next","data","content","error","err","res","JSON","parse","message","status","statusText","getContractBalance","contractBalance","methods","call","getDepositedBalance","depositedBalance","getWalletId","balance2","getBalance","then","walletBalance","deployForwarder","forwarderCall","createForwarder","forwarderAddress","updateForwarder","truth","update","getUser","id","onSubmit","balance","utils","fromWei","depositForm","getAccounts","transaction","toWei","String","receiver","sender","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["F:\\DDesktop\\MEAN_BC\\mean-stack-authentication-authorization-master\\angular-15-client\\src\\app\\board-user\\board-user.component.ts","F:\\DDesktop\\MEAN_BC\\mean-stack-authentication-authorization-master\\angular-15-client\\src\\app\\board-user\\board-user.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { UserService } from '../_services/user.service';\nimport { StorageService } from '../_services/storage.service';\nimport Web3 from 'web3';\nimport { AbiItem } from 'web3-utils'\nimport {getForwarderSOL,getWalletSOL} from '../contracts/contractABIs';\nimport { from } from 'rxjs';\nconst alchemy = require(\"alchemy-sdk\");\n\n@Component({\n  selector: 'app-board-user',\n  templateUrl: './board-user.component.html',\n  styleUrls: ['./board-user.component.css']\n})\nexport class BoardUserComponent implements OnInit {\n  content?: string;\n  depositForm: any = {\n    ethValue: null,\n  };\n  private web3: Web3;\n  public walletConnected: boolean = false;\n  public walletId: string = '';\n  public walletBalance: string = '';\n  private contractInst: any;\n  private walletContractInstance:any;\n  private forwarderAddress: string = '';\n\n  constructor(private userService: UserService, private StorageService: StorageService,\n  ) {\n\n    const provider = \"https://sepolia.infura.io/v3/acaa2699bfc84be092239f5676e3192a\" //HAVE TO ADD .ENV FILE \n    var web3Provider = new Web3.providers.HttpProvider(provider);\n    this.web3 = new Web3(web3Provider);\n    this.contractInst = new this.web3.eth.Contract(this.userService.abiContract as AbiItem[], this.userService.contractAddress);\n    this.walletContractInstance= new this.web3.eth.Contract(getWalletSOL().abi,getWalletSOL().address,{from:'0xa11C30ef3bA37BEF5c86089bb8f7EB2eb90aB052'}); //I NEED ENV FILE\n  }\n\n  ngOnInit(): void {\n\n    this.connectToWallet();\n    this.userService.getUserBoard().subscribe({\n      next: data => {\n        this.content = data;\n      },\n      error: err => {\n        if (err.error) {\n          try {\n            const res = JSON.parse(err.error);\n            this.content = res.message;\n          } catch {\n            this.content = `Error with status: ${err.status} - ${err.statusText}`;\n          }\n        } else {\n          this.content = `Error with status: ${err.status}`;\n        }\n      }\n    });\n  }\n\n  connectToWallet = () => {\n    this.userService.connectWallet();\n  }\n  checkWalletConnected = async () => {\n    const accounts = await this.userService.checkWalletConnected();\n    if (accounts.length > 0) {\n      this.walletConnected = true;\n      this.walletId = accounts[0];\n      console.log(this.walletId);\n    }\n  }\n  async getContractBalance() {\n    let contractBalance = this.contractInst.methods.getContractBalance()\n      .call();\n    return contractBalance;\n  }\n  async getDepositedBalance() {\n    let depositedBalance = this.contractInst.methods.getContractBalance()\n      .call();\n  }\n  async getWalletId() {\n  \n    let balance2 = await this.web3.eth.getBalance(this.walletId).then(res => { this.walletBalance = res });\n  }\n  async deployForwarder() {\n    console.log(\"yoooo\");\n    let forwarderCall=this.walletContractInstance.methods.createForwarder().call()\n    .then((res:any)=>{console.log (res)});\n     //stuck here\n    console.log(this.forwarderAddress);\n      //we dont need to deploy wallet.sol it's already deployed, we create a forwarder from here some how xd\n      //A FORWARDER THAT'S GHONNA BE ATTACHED TO THIS USERID USING THE PRIVATE KEY OF WALLET.SOL\n  }\n  async updateForwarder() {\n    let truth = false;\n    this.deployForwarder();\n    console.log('ID' + this.forwarderAddress);\n    this.userService.update(this.forwarderAddress, this.StorageService.getUser().id).subscribe({\n      next: data => {\n        console.log(data);\n        truth = true;\n      },\n      error: err => {\n        console.log(err.error.message);\n      }\n    });\n    return truth;\n  }\n  async onSubmit(): Promise<void> {\n    this.checkWalletConnected();\n    let balance;\n    balance = this.getContractBalance().then(res => { console.log(this.web3.utils.fromWei(res, \"ether\"), \"eth\") });\n    console.log(this.depositForm);\n    console.log(this.walletId);\n    var accounts = await this.web3.eth.getAccounts().then(console.log);\n    let balance2 = await this.web3.eth.getBalance(this.walletId).then(res => { this.walletBalance = res });\n    const transaction = this.web3.utils.toWei(String(this.depositForm.ethValue));\n    console.log(transaction, \"wei\");\n    var receiver = this.userService.contractAddress;\n    var sender = this.walletId;\n    //https://docs.metamask.io/wallet/reference/provider-api/#ethereum-request-args\n    /*if (this.StorageService.getUser().forwarderAddress!='0x0') {\n      console.log(\"0x0\");\n      this.userService.transactToAddress(this.walletId, this.StorageService.getUser().forwarderAddress, this.depositForm.ethValue)\n    }\n    else{\n      console.log(\"not 0x0\");\n      this.updateForwarder()\n      .then(res =>this.userService\n        .transactToAddress(this.walletId, this.StorageService.getUser().forwarderAddress, this.depositForm.ethValue))\n    }*/\n  }\n}\n","<div class=\"container\">\n  <header class=\"jumbotron\">\n    <form class=\"form-group\"     \n    name=\"depositForm\"\n    #f=\"ngForm\" \n    (ngSubmit)=\"onSubmit()\">\n\n      <label for=\"ethValue\">Value:</label>\n      <input type=\"number\" class=\"ethValue\"           \n      [(ngModel)]=\"depositForm.ethValue\"\n      name=\"ethValue\"\n      >    \n      <button class=\"btn btn-primary btn-block\">Deposit here</button>\n    </form>\n    <button class=\"btn btn-primary btn-block\" (click)=\"deployForwarder()\">Deploy Forwarder</button>\n\n    {{walletId}}\n    {{walletBalance+\" eth\"}} \n  </header>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}