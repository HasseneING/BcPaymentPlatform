{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { checkProperties, deepCopy, defineReadOnly, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { BaseProvider } from \"./base-provider\";\nconst errorGas = [\"call\", \"estimateGas\"];\nfunction spelunk(value, requireData) {\n  if (value == null) {\n    return null;\n  }\n  // These *are* the droids we're looking for.\n  if (typeof value.message === \"string\" && value.message.match(\"reverted\")) {\n    const data = isHexString(value.data) ? value.data : null;\n    if (!requireData || data) {\n      return {\n        message: value.message,\n        data\n      };\n    }\n  }\n  // Spelunk further...\n  if (typeof value === \"object\") {\n    for (const key in value) {\n      const result = spelunk(value[key], requireData);\n      if (result) {\n        return result;\n      }\n    }\n    return null;\n  }\n  // Might be a JSON string we can further descend...\n  if (typeof value === \"string\") {\n    try {\n      return spelunk(JSON.parse(value), requireData);\n    } catch (error) {}\n  }\n  return null;\n}\nfunction checkError(method, error, params) {\n  const transaction = params.transaction || params.signedTransaction;\n  // Undo the \"convenience\" some nodes are attempting to prevent backwards\n  // incompatibility; maybe for v6 consider forwarding reverts as errors\n  if (method === \"call\") {\n    const result = spelunk(error, true);\n    if (result) {\n      return result.data;\n    }\n    // Nothing descriptive..\n    logger.throwError(\"missing revert data in call exception; Transaction reverted without a reason string\", Logger.errors.CALL_EXCEPTION, {\n      data: \"0x\",\n      transaction,\n      error\n    });\n  }\n  if (method === \"estimateGas\") {\n    // Try to find something, with a preference on SERVER_ERROR body\n    let result = spelunk(error.body, false);\n    if (result == null) {\n      result = spelunk(error, false);\n    }\n    // Found \"reverted\", this is a CALL_EXCEPTION\n    if (result) {\n      logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n        reason: result.message,\n        method,\n        transaction,\n        error\n      });\n    }\n  }\n  // @TODO: Should we spelunk for message too?\n  let message = error.message;\n  if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof error.error.message === \"string\") {\n    message = error.error.message;\n  } else if (typeof error.body === \"string\") {\n    message = error.body;\n  } else if (typeof error.responseText === \"string\") {\n    message = error.responseText;\n  }\n  message = (message || \"\").toLowerCase();\n  // \"insufficient funds for gas * price + value + cost(data)\"\n  if (message.match(/insufficient funds|base fee exceeds gas limit|InsufficientFunds/i)) {\n    logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n      error,\n      method,\n      transaction\n    });\n  }\n  // \"nonce too low\"\n  if (message.match(/nonce (is )?too low/i)) {\n    logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n      error,\n      method,\n      transaction\n    });\n  }\n  // \"replacement transaction underpriced\"\n  if (message.match(/replacement transaction underpriced|transaction gas price.*too low/i)) {\n    logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n      error,\n      method,\n      transaction\n    });\n  }\n  // \"replacement transaction underpriced\"\n  if (message.match(/only replay-protected/i)) {\n    logger.throwError(\"legacy pre-eip-155 transactions not supported\", Logger.errors.UNSUPPORTED_OPERATION, {\n      error,\n      method,\n      transaction\n    });\n  }\n  if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted|revert/)) {\n    logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n      error,\n      method,\n      transaction\n    });\n  }\n  throw error;\n}\nfunction timer(timeout) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, timeout);\n  });\n}\nfunction getResult(payload) {\n  if (payload.error) {\n    // @TODO: not any\n    const error = new Error(payload.error.message);\n    error.code = payload.error.code;\n    error.data = payload.error.data;\n    throw error;\n  }\n  return payload.result;\n}\nfunction getLowerCase(value) {\n  if (value) {\n    return value.toLowerCase();\n  }\n  return value;\n}\nconst _constructorGuard = {};\nexport class JsonRpcSigner extends Signer {\n  constructor(constructorGuard, provider, addressOrIndex) {\n    super();\n    if (constructorGuard !== _constructorGuard) {\n      throw new Error(\"do not call the JsonRpcSigner constructor directly; use provider.getSigner\");\n    }\n    defineReadOnly(this, \"provider\", provider);\n    if (addressOrIndex == null) {\n      addressOrIndex = 0;\n    }\n    if (typeof addressOrIndex === \"string\") {\n      defineReadOnly(this, \"_address\", this.provider.formatter.address(addressOrIndex));\n      defineReadOnly(this, \"_index\", null);\n    } else if (typeof addressOrIndex === \"number\") {\n      defineReadOnly(this, \"_index\", addressOrIndex);\n      defineReadOnly(this, \"_address\", null);\n    } else {\n      logger.throwArgumentError(\"invalid address or index\", \"addressOrIndex\", addressOrIndex);\n    }\n  }\n  connect(provider) {\n    return logger.throwError(\"cannot alter JSON-RPC Signer connection\", Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"connect\"\n    });\n  }\n  connectUnchecked() {\n    return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);\n  }\n  getAddress() {\n    if (this._address) {\n      return Promise.resolve(this._address);\n    }\n    return this.provider.send(\"eth_accounts\", []).then(accounts => {\n      if (accounts.length <= this._index) {\n        logger.throwError(\"unknown account #\" + this._index, Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"getAddress\"\n        });\n      }\n      return this.provider.formatter.address(accounts[this._index]);\n    });\n  }\n  sendUncheckedTransaction(transaction) {\n    transaction = shallowCopy(transaction);\n    const fromAddress = this.getAddress().then(address => {\n      if (address) {\n        address = address.toLowerCase();\n      }\n      return address;\n    });\n    // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n    // wishes to use this, it is easy to specify explicitly, otherwise\n    // we look it up for them.\n    if (transaction.gasLimit == null) {\n      const estimate = shallowCopy(transaction);\n      estimate.from = fromAddress;\n      transaction.gasLimit = this.provider.estimateGas(estimate);\n    }\n    if (transaction.to != null) {\n      transaction.to = Promise.resolve(transaction.to).then(to => __awaiter(this, void 0, void 0, function* () {\n        if (to == null) {\n          return null;\n        }\n        const address = yield this.provider.resolveName(to);\n        if (address == null) {\n          logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n        }\n        return address;\n      }));\n    }\n    return resolveProperties({\n      tx: resolveProperties(transaction),\n      sender: fromAddress\n    }).then(({\n      tx,\n      sender\n    }) => {\n      if (tx.from != null) {\n        if (tx.from.toLowerCase() !== sender) {\n          logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n        }\n      } else {\n        tx.from = sender;\n      }\n      const hexTx = this.provider.constructor.hexlifyTransaction(tx, {\n        from: true\n      });\n      return this.provider.send(\"eth_sendTransaction\", [hexTx]).then(hash => {\n        return hash;\n      }, error => {\n        if (typeof error.message === \"string\" && error.message.match(/user denied/i)) {\n          logger.throwError(\"user rejected transaction\", Logger.errors.ACTION_REJECTED, {\n            action: \"sendTransaction\",\n            transaction: tx\n          });\n        }\n        return checkError(\"sendTransaction\", error, hexTx);\n      });\n    });\n  }\n  signTransaction(transaction) {\n    return logger.throwError(\"signing transactions is unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"signTransaction\"\n    });\n  }\n  sendTransaction(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // This cannot be mined any earlier than any recent block\n      const blockNumber = yield this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval);\n      // Send the transaction\n      const hash = yield this.sendUncheckedTransaction(transaction);\n      try {\n        // Unfortunately, JSON-RPC only provides and opaque transaction hash\n        // for a response, and we need the actual transaction, so we poll\n        // for it; it should show up very quickly\n        return yield poll(() => __awaiter(this, void 0, void 0, function* () {\n          const tx = yield this.provider.getTransaction(hash);\n          if (tx === null) {\n            return undefined;\n          }\n          return this.provider._wrapTransaction(tx, hash, blockNumber);\n        }), {\n          oncePoll: this.provider\n        });\n      } catch (error) {\n        error.transactionHash = hash;\n        throw error;\n      }\n    });\n  }\n  signMessage(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const data = typeof message === \"string\" ? toUtf8Bytes(message) : message;\n      const address = yield this.getAddress();\n      try {\n        return yield this.provider.send(\"personal_sign\", [hexlify(data), address.toLowerCase()]);\n      } catch (error) {\n        if (typeof error.message === \"string\" && error.message.match(/user denied/i)) {\n          logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n            action: \"signMessage\",\n            from: address,\n            messageData: message\n          });\n        }\n        throw error;\n      }\n    });\n  }\n  _legacySignMessage(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const data = typeof message === \"string\" ? toUtf8Bytes(message) : message;\n      const address = yield this.getAddress();\n      try {\n        // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n        return yield this.provider.send(\"eth_sign\", [address.toLowerCase(), hexlify(data)]);\n      } catch (error) {\n        if (typeof error.message === \"string\" && error.message.match(/user denied/i)) {\n          logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n            action: \"_legacySignMessage\",\n            from: address,\n            messageData: message\n          });\n        }\n        throw error;\n      }\n    });\n  }\n  _signTypedData(domain, types, value) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Populate any ENS names (in-place)\n      const populated = yield _TypedDataEncoder.resolveNames(domain, types, value, name => {\n        return this.provider.resolveName(name);\n      });\n      const address = yield this.getAddress();\n      try {\n        return yield this.provider.send(\"eth_signTypedData_v4\", [address.toLowerCase(), JSON.stringify(_TypedDataEncoder.getPayload(populated.domain, types, populated.value))]);\n      } catch (error) {\n        if (typeof error.message === \"string\" && error.message.match(/user denied/i)) {\n          logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n            action: \"_signTypedData\",\n            from: address,\n            messageData: {\n              domain: populated.domain,\n              types,\n              value: populated.value\n            }\n          });\n        }\n        throw error;\n      }\n    });\n  }\n  unlock(password) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const provider = this.provider;\n      const address = yield this.getAddress();\n      return provider.send(\"personal_unlockAccount\", [address.toLowerCase(), password, null]);\n    });\n  }\n}\nclass UncheckedJsonRpcSigner extends JsonRpcSigner {\n  sendTransaction(transaction) {\n    return this.sendUncheckedTransaction(transaction).then(hash => {\n      return {\n        hash: hash,\n        nonce: null,\n        gasLimit: null,\n        gasPrice: null,\n        data: null,\n        value: null,\n        chainId: null,\n        confirmations: 0,\n        from: null,\n        wait: confirmations => {\n          return this.provider.waitForTransaction(hash, confirmations);\n        }\n      };\n    });\n  }\n}\nconst allowedTransactionKeys = {\n  chainId: true,\n  data: true,\n  gasLimit: true,\n  gasPrice: true,\n  nonce: true,\n  to: true,\n  value: true,\n  type: true,\n  accessList: true,\n  maxFeePerGas: true,\n  maxPriorityFeePerGas: true\n};\nexport class JsonRpcProvider extends BaseProvider {\n  constructor(url, network) {\n    let networkOrReady = network;\n    // The network is unknown, query the JSON-RPC for it\n    if (networkOrReady == null) {\n      networkOrReady = new Promise((resolve, reject) => {\n        setTimeout(() => {\n          this.detectNetwork().then(network => {\n            resolve(network);\n          }, error => {\n            reject(error);\n          });\n        }, 0);\n      });\n    }\n    super(networkOrReady);\n    // Default URL\n    if (!url) {\n      url = getStatic(this.constructor, \"defaultUrl\")();\n    }\n    if (typeof url === \"string\") {\n      defineReadOnly(this, \"connection\", Object.freeze({\n        url: url\n      }));\n    } else {\n      defineReadOnly(this, \"connection\", Object.freeze(shallowCopy(url)));\n    }\n    this._nextId = 42;\n  }\n  get _cache() {\n    if (this._eventLoopCache == null) {\n      this._eventLoopCache = {};\n    }\n    return this._eventLoopCache;\n  }\n  static defaultUrl() {\n    return \"http:/\\/localhost:8545\";\n  }\n  detectNetwork() {\n    if (!this._cache[\"detectNetwork\"]) {\n      this._cache[\"detectNetwork\"] = this._uncachedDetectNetwork();\n      // Clear this cache at the beginning of the next event loop\n      setTimeout(() => {\n        this._cache[\"detectNetwork\"] = null;\n      }, 0);\n    }\n    return this._cache[\"detectNetwork\"];\n  }\n  _uncachedDetectNetwork() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield timer(0);\n      let chainId = null;\n      try {\n        chainId = yield this.send(\"eth_chainId\", []);\n      } catch (error) {\n        try {\n          chainId = yield this.send(\"net_version\", []);\n        } catch (error) {}\n      }\n      if (chainId != null) {\n        const getNetwork = getStatic(this.constructor, \"getNetwork\");\n        try {\n          return getNetwork(BigNumber.from(chainId).toNumber());\n        } catch (error) {\n          return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n            chainId: chainId,\n            event: \"invalidNetwork\",\n            serverError: error\n          });\n        }\n      }\n      return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n        event: \"noNetwork\"\n      });\n    });\n  }\n  getSigner(addressOrIndex) {\n    return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);\n  }\n  getUncheckedSigner(addressOrIndex) {\n    return this.getSigner(addressOrIndex).connectUnchecked();\n  }\n  listAccounts() {\n    return this.send(\"eth_accounts\", []).then(accounts => {\n      return accounts.map(a => this.formatter.address(a));\n    });\n  }\n  send(method, params) {\n    const request = {\n      method: method,\n      params: params,\n      id: this._nextId++,\n      jsonrpc: \"2.0\"\n    };\n    this.emit(\"debug\", {\n      action: \"request\",\n      request: deepCopy(request),\n      provider: this\n    });\n    // We can expand this in the future to any call, but for now these\n    // are the biggest wins and do not require any serializing parameters.\n    const cache = [\"eth_chainId\", \"eth_blockNumber\"].indexOf(method) >= 0;\n    if (cache && this._cache[method]) {\n      return this._cache[method];\n    }\n    const result = fetchJson(this.connection, JSON.stringify(request), getResult).then(result => {\n      this.emit(\"debug\", {\n        action: \"response\",\n        request: request,\n        response: result,\n        provider: this\n      });\n      return result;\n    }, error => {\n      this.emit(\"debug\", {\n        action: \"response\",\n        error: error,\n        request: request,\n        provider: this\n      });\n      throw error;\n    });\n    // Cache the fetch, but clear it on the next event loop\n    if (cache) {\n      this._cache[method] = result;\n      setTimeout(() => {\n        this._cache[method] = null;\n      }, 0);\n    }\n    return result;\n  }\n  prepareRequest(method, params) {\n    switch (method) {\n      case \"getBlockNumber\":\n        return [\"eth_blockNumber\", []];\n      case \"getGasPrice\":\n        return [\"eth_gasPrice\", []];\n      case \"getBalance\":\n        return [\"eth_getBalance\", [getLowerCase(params.address), params.blockTag]];\n      case \"getTransactionCount\":\n        return [\"eth_getTransactionCount\", [getLowerCase(params.address), params.blockTag]];\n      case \"getCode\":\n        return [\"eth_getCode\", [getLowerCase(params.address), params.blockTag]];\n      case \"getStorageAt\":\n        return [\"eth_getStorageAt\", [getLowerCase(params.address), hexZeroPad(params.position, 32), params.blockTag]];\n      case \"sendTransaction\":\n        return [\"eth_sendRawTransaction\", [params.signedTransaction]];\n      case \"getBlock\":\n        if (params.blockTag) {\n          return [\"eth_getBlockByNumber\", [params.blockTag, !!params.includeTransactions]];\n        } else if (params.blockHash) {\n          return [\"eth_getBlockByHash\", [params.blockHash, !!params.includeTransactions]];\n        }\n        return null;\n      case \"getTransaction\":\n        return [\"eth_getTransactionByHash\", [params.transactionHash]];\n      case \"getTransactionReceipt\":\n        return [\"eth_getTransactionReceipt\", [params.transactionHash]];\n      case \"call\":\n        {\n          const hexlifyTransaction = getStatic(this.constructor, \"hexlifyTransaction\");\n          return [\"eth_call\", [hexlifyTransaction(params.transaction, {\n            from: true\n          }), params.blockTag]];\n        }\n      case \"estimateGas\":\n        {\n          const hexlifyTransaction = getStatic(this.constructor, \"hexlifyTransaction\");\n          return [\"eth_estimateGas\", [hexlifyTransaction(params.transaction, {\n            from: true\n          })]];\n        }\n      case \"getLogs\":\n        if (params.filter && params.filter.address != null) {\n          params.filter.address = getLowerCase(params.filter.address);\n        }\n        return [\"eth_getLogs\", [params.filter]];\n      default:\n        break;\n    }\n    return null;\n  }\n  perform(method, params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Legacy networks do not like the type field being passed along (which\n      // is fair), so we delete type if it is 0 and a non-EIP-1559 network\n      if (method === \"call\" || method === \"estimateGas\") {\n        const tx = params.transaction;\n        if (tx && tx.type != null && BigNumber.from(tx.type).isZero()) {\n          // If there are no EIP-1559 properties, it might be non-EIP-1559\n          if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\n            const feeData = yield this.getFeeData();\n            if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n              // Network doesn't know about EIP-1559 (and hence type)\n              params = shallowCopy(params);\n              params.transaction = shallowCopy(tx);\n              delete params.transaction.type;\n            }\n          }\n        }\n      }\n      const args = this.prepareRequest(method, params);\n      if (args == null) {\n        logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, {\n          operation: method\n        });\n      }\n      try {\n        return yield this.send(args[0], args[1]);\n      } catch (error) {\n        return checkError(method, error, params);\n      }\n    });\n  }\n  _startEvent(event) {\n    if (event.tag === \"pending\") {\n      this._startPending();\n    }\n    super._startEvent(event);\n  }\n  _startPending() {\n    if (this._pendingFilter != null) {\n      return;\n    }\n    const self = this;\n    const pendingFilter = this.send(\"eth_newPendingTransactionFilter\", []);\n    this._pendingFilter = pendingFilter;\n    pendingFilter.then(function (filterId) {\n      function poll() {\n        self.send(\"eth_getFilterChanges\", [filterId]).then(function (hashes) {\n          if (self._pendingFilter != pendingFilter) {\n            return null;\n          }\n          let seq = Promise.resolve();\n          hashes.forEach(function (hash) {\n            // @TODO: This should be garbage collected at some point... How? When?\n            self._emitted[\"t:\" + hash.toLowerCase()] = \"pending\";\n            seq = seq.then(function () {\n              return self.getTransaction(hash).then(function (tx) {\n                self.emit(\"pending\", tx);\n                return null;\n              });\n            });\n          });\n          return seq.then(function () {\n            return timer(1000);\n          });\n        }).then(function () {\n          if (self._pendingFilter != pendingFilter) {\n            self.send(\"eth_uninstallFilter\", [filterId]);\n            return;\n          }\n          setTimeout(function () {\n            poll();\n          }, 0);\n          return null;\n        }).catch(error => {});\n      }\n      poll();\n      return filterId;\n    }).catch(error => {});\n  }\n  _stopEvent(event) {\n    if (event.tag === \"pending\" && this.listenerCount(\"pending\") === 0) {\n      this._pendingFilter = null;\n    }\n    super._stopEvent(event);\n  }\n  // Convert an ethers.js transaction into a JSON-RPC transaction\n  //  - gasLimit => gas\n  //  - All values hexlified\n  //  - All numeric values zero-striped\n  //  - All addresses are lowercased\n  // NOTE: This allows a TransactionRequest, but all values should be resolved\n  //       before this is called\n  // @TODO: This will likely be removed in future versions and prepareRequest\n  //        will be the preferred method for this.\n  static hexlifyTransaction(transaction, allowExtra) {\n    // Check only allowed properties are given\n    const allowed = shallowCopy(allowedTransactionKeys);\n    if (allowExtra) {\n      for (const key in allowExtra) {\n        if (allowExtra[key]) {\n          allowed[key] = true;\n        }\n      }\n    }\n    checkProperties(transaction, allowed);\n    const result = {};\n    // JSON-RPC now requires numeric values to be \"quantity\" values\n    [\"chainId\", \"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach(function (key) {\n      if (transaction[key] == null) {\n        return;\n      }\n      const value = hexValue(BigNumber.from(transaction[key]));\n      if (key === \"gasLimit\") {\n        key = \"gas\";\n      }\n      result[key] = value;\n    });\n    [\"from\", \"to\", \"data\"].forEach(function (key) {\n      if (transaction[key] == null) {\n        return;\n      }\n      result[key] = hexlify(transaction[key]);\n    });\n    if (transaction.accessList) {\n      result[\"accessList\"] = accessListify(transaction.accessList);\n    }\n    return result;\n  }\n}","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Signer","BigNumber","hexlify","hexValue","hexZeroPad","isHexString","_TypedDataEncoder","checkProperties","deepCopy","defineReadOnly","getStatic","resolveProperties","shallowCopy","toUtf8Bytes","accessListify","fetchJson","poll","Logger","version","logger","BaseProvider","errorGas","spelunk","requireData","message","match","data","key","JSON","parse","error","checkError","method","params","transaction","signedTransaction","throwError","errors","CALL_EXCEPTION","body","UNPREDICTABLE_GAS_LIMIT","reason","code","SERVER_ERROR","responseText","toLowerCase","INSUFFICIENT_FUNDS","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","UNSUPPORTED_OPERATION","indexOf","timer","timeout","setTimeout","getResult","payload","Error","getLowerCase","_constructorGuard","JsonRpcSigner","constructor","constructorGuard","provider","addressOrIndex","formatter","address","throwArgumentError","connect","operation","connectUnchecked","UncheckedJsonRpcSigner","_address","_index","getAddress","send","accounts","length","sendUncheckedTransaction","fromAddress","gasLimit","estimate","from","estimateGas","to","resolveName","tx","sender","hexTx","hexlifyTransaction","hash","ACTION_REJECTED","action","signTransaction","sendTransaction","blockNumber","_getInternalBlockNumber","pollingInterval","getTransaction","undefined","_wrapTransaction","oncePoll","transactionHash","signMessage","messageData","_legacySignMessage","_signTypedData","domain","types","populated","resolveNames","name","stringify","getPayload","unlock","password","nonce","gasPrice","chainId","confirmations","wait","waitForTransaction","allowedTransactionKeys","type","accessList","maxFeePerGas","maxPriorityFeePerGas","JsonRpcProvider","url","network","networkOrReady","detectNetwork","Object","freeze","_nextId","_cache","_eventLoopCache","defaultUrl","_uncachedDetectNetwork","getNetwork","toNumber","NETWORK_ERROR","event","serverError","getSigner","getUncheckedSigner","listAccounts","map","a","request","id","jsonrpc","emit","cache","connection","response","prepareRequest","blockTag","position","includeTransactions","blockHash","filter","perform","isZero","feeData","getFeeData","args","NOT_IMPLEMENTED","_startEvent","tag","_startPending","_pendingFilter","self","pendingFilter","filterId","hashes","seq","forEach","_emitted","catch","_stopEvent","listenerCount","allowExtra","allowed"],"sources":["F:/DDesktop/MEAN_BC/mean-stack-authentication-authorization-master/angular-15-client/node_modules/@ethersproject/providers/lib.esm/json-rpc-provider.js"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { checkProperties, deepCopy, defineReadOnly, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { BaseProvider } from \"./base-provider\";\nconst errorGas = [\"call\", \"estimateGas\"];\nfunction spelunk(value, requireData) {\n    if (value == null) {\n        return null;\n    }\n    // These *are* the droids we're looking for.\n    if (typeof (value.message) === \"string\" && value.message.match(\"reverted\")) {\n        const data = isHexString(value.data) ? value.data : null;\n        if (!requireData || data) {\n            return { message: value.message, data };\n        }\n    }\n    // Spelunk further...\n    if (typeof (value) === \"object\") {\n        for (const key in value) {\n            const result = spelunk(value[key], requireData);\n            if (result) {\n                return result;\n            }\n        }\n        return null;\n    }\n    // Might be a JSON string we can further descend...\n    if (typeof (value) === \"string\") {\n        try {\n            return spelunk(JSON.parse(value), requireData);\n        }\n        catch (error) { }\n    }\n    return null;\n}\nfunction checkError(method, error, params) {\n    const transaction = params.transaction || params.signedTransaction;\n    // Undo the \"convenience\" some nodes are attempting to prevent backwards\n    // incompatibility; maybe for v6 consider forwarding reverts as errors\n    if (method === \"call\") {\n        const result = spelunk(error, true);\n        if (result) {\n            return result.data;\n        }\n        // Nothing descriptive..\n        logger.throwError(\"missing revert data in call exception; Transaction reverted without a reason string\", Logger.errors.CALL_EXCEPTION, {\n            data: \"0x\", transaction, error\n        });\n    }\n    if (method === \"estimateGas\") {\n        // Try to find something, with a preference on SERVER_ERROR body\n        let result = spelunk(error.body, false);\n        if (result == null) {\n            result = spelunk(error, false);\n        }\n        // Found \"reverted\", this is a CALL_EXCEPTION\n        if (result) {\n            logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n                reason: result.message, method, transaction, error\n            });\n        }\n    }\n    // @TODO: Should we spelunk for message too?\n    let message = error.message;\n    if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof (error.error.message) === \"string\") {\n        message = error.error.message;\n    }\n    else if (typeof (error.body) === \"string\") {\n        message = error.body;\n    }\n    else if (typeof (error.responseText) === \"string\") {\n        message = error.responseText;\n    }\n    message = (message || \"\").toLowerCase();\n    // \"insufficient funds for gas * price + value + cost(data)\"\n    if (message.match(/insufficient funds|base fee exceeds gas limit|InsufficientFunds/i)) {\n        logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n            error, method, transaction\n        });\n    }\n    // \"nonce too low\"\n    if (message.match(/nonce (is )?too low/i)) {\n        logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n            error, method, transaction\n        });\n    }\n    // \"replacement transaction underpriced\"\n    if (message.match(/replacement transaction underpriced|transaction gas price.*too low/i)) {\n        logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n            error, method, transaction\n        });\n    }\n    // \"replacement transaction underpriced\"\n    if (message.match(/only replay-protected/i)) {\n        logger.throwError(\"legacy pre-eip-155 transactions not supported\", Logger.errors.UNSUPPORTED_OPERATION, {\n            error, method, transaction\n        });\n    }\n    if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted|revert/)) {\n        logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error, method, transaction\n        });\n    }\n    throw error;\n}\nfunction timer(timeout) {\n    return new Promise(function (resolve) {\n        setTimeout(resolve, timeout);\n    });\n}\nfunction getResult(payload) {\n    if (payload.error) {\n        // @TODO: not any\n        const error = new Error(payload.error.message);\n        error.code = payload.error.code;\n        error.data = payload.error.data;\n        throw error;\n    }\n    return payload.result;\n}\nfunction getLowerCase(value) {\n    if (value) {\n        return value.toLowerCase();\n    }\n    return value;\n}\nconst _constructorGuard = {};\nexport class JsonRpcSigner extends Signer {\n    constructor(constructorGuard, provider, addressOrIndex) {\n        super();\n        if (constructorGuard !== _constructorGuard) {\n            throw new Error(\"do not call the JsonRpcSigner constructor directly; use provider.getSigner\");\n        }\n        defineReadOnly(this, \"provider\", provider);\n        if (addressOrIndex == null) {\n            addressOrIndex = 0;\n        }\n        if (typeof (addressOrIndex) === \"string\") {\n            defineReadOnly(this, \"_address\", this.provider.formatter.address(addressOrIndex));\n            defineReadOnly(this, \"_index\", null);\n        }\n        else if (typeof (addressOrIndex) === \"number\") {\n            defineReadOnly(this, \"_index\", addressOrIndex);\n            defineReadOnly(this, \"_address\", null);\n        }\n        else {\n            logger.throwArgumentError(\"invalid address or index\", \"addressOrIndex\", addressOrIndex);\n        }\n    }\n    connect(provider) {\n        return logger.throwError(\"cannot alter JSON-RPC Signer connection\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"connect\"\n        });\n    }\n    connectUnchecked() {\n        return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);\n    }\n    getAddress() {\n        if (this._address) {\n            return Promise.resolve(this._address);\n        }\n        return this.provider.send(\"eth_accounts\", []).then((accounts) => {\n            if (accounts.length <= this._index) {\n                logger.throwError(\"unknown account #\" + this._index, Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"getAddress\"\n                });\n            }\n            return this.provider.formatter.address(accounts[this._index]);\n        });\n    }\n    sendUncheckedTransaction(transaction) {\n        transaction = shallowCopy(transaction);\n        const fromAddress = this.getAddress().then((address) => {\n            if (address) {\n                address = address.toLowerCase();\n            }\n            return address;\n        });\n        // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n        // wishes to use this, it is easy to specify explicitly, otherwise\n        // we look it up for them.\n        if (transaction.gasLimit == null) {\n            const estimate = shallowCopy(transaction);\n            estimate.from = fromAddress;\n            transaction.gasLimit = this.provider.estimateGas(estimate);\n        }\n        if (transaction.to != null) {\n            transaction.to = Promise.resolve(transaction.to).then((to) => __awaiter(this, void 0, void 0, function* () {\n                if (to == null) {\n                    return null;\n                }\n                const address = yield this.provider.resolveName(to);\n                if (address == null) {\n                    logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n                }\n                return address;\n            }));\n        }\n        return resolveProperties({\n            tx: resolveProperties(transaction),\n            sender: fromAddress\n        }).then(({ tx, sender }) => {\n            if (tx.from != null) {\n                if (tx.from.toLowerCase() !== sender) {\n                    logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n                }\n            }\n            else {\n                tx.from = sender;\n            }\n            const hexTx = this.provider.constructor.hexlifyTransaction(tx, { from: true });\n            return this.provider.send(\"eth_sendTransaction\", [hexTx]).then((hash) => {\n                return hash;\n            }, (error) => {\n                if (typeof (error.message) === \"string\" && error.message.match(/user denied/i)) {\n                    logger.throwError(\"user rejected transaction\", Logger.errors.ACTION_REJECTED, {\n                        action: \"sendTransaction\",\n                        transaction: tx\n                    });\n                }\n                return checkError(\"sendTransaction\", error, hexTx);\n            });\n        });\n    }\n    signTransaction(transaction) {\n        return logger.throwError(\"signing transactions is unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"signTransaction\"\n        });\n    }\n    sendTransaction(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // This cannot be mined any earlier than any recent block\n            const blockNumber = yield this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval);\n            // Send the transaction\n            const hash = yield this.sendUncheckedTransaction(transaction);\n            try {\n                // Unfortunately, JSON-RPC only provides and opaque transaction hash\n                // for a response, and we need the actual transaction, so we poll\n                // for it; it should show up very quickly\n                return yield poll(() => __awaiter(this, void 0, void 0, function* () {\n                    const tx = yield this.provider.getTransaction(hash);\n                    if (tx === null) {\n                        return undefined;\n                    }\n                    return this.provider._wrapTransaction(tx, hash, blockNumber);\n                }), { oncePoll: this.provider });\n            }\n            catch (error) {\n                error.transactionHash = hash;\n                throw error;\n            }\n        });\n    }\n    signMessage(message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = ((typeof (message) === \"string\") ? toUtf8Bytes(message) : message);\n            const address = yield this.getAddress();\n            try {\n                return yield this.provider.send(\"personal_sign\", [hexlify(data), address.toLowerCase()]);\n            }\n            catch (error) {\n                if (typeof (error.message) === \"string\" && error.message.match(/user denied/i)) {\n                    logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n                        action: \"signMessage\",\n                        from: address,\n                        messageData: message\n                    });\n                }\n                throw error;\n            }\n        });\n    }\n    _legacySignMessage(message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = ((typeof (message) === \"string\") ? toUtf8Bytes(message) : message);\n            const address = yield this.getAddress();\n            try {\n                // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n                return yield this.provider.send(\"eth_sign\", [address.toLowerCase(), hexlify(data)]);\n            }\n            catch (error) {\n                if (typeof (error.message) === \"string\" && error.message.match(/user denied/i)) {\n                    logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n                        action: \"_legacySignMessage\",\n                        from: address,\n                        messageData: message\n                    });\n                }\n                throw error;\n            }\n        });\n    }\n    _signTypedData(domain, types, value) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Populate any ENS names (in-place)\n            const populated = yield _TypedDataEncoder.resolveNames(domain, types, value, (name) => {\n                return this.provider.resolveName(name);\n            });\n            const address = yield this.getAddress();\n            try {\n                return yield this.provider.send(\"eth_signTypedData_v4\", [\n                    address.toLowerCase(),\n                    JSON.stringify(_TypedDataEncoder.getPayload(populated.domain, types, populated.value))\n                ]);\n            }\n            catch (error) {\n                if (typeof (error.message) === \"string\" && error.message.match(/user denied/i)) {\n                    logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n                        action: \"_signTypedData\",\n                        from: address,\n                        messageData: { domain: populated.domain, types, value: populated.value }\n                    });\n                }\n                throw error;\n            }\n        });\n    }\n    unlock(password) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const provider = this.provider;\n            const address = yield this.getAddress();\n            return provider.send(\"personal_unlockAccount\", [address.toLowerCase(), password, null]);\n        });\n    }\n}\nclass UncheckedJsonRpcSigner extends JsonRpcSigner {\n    sendTransaction(transaction) {\n        return this.sendUncheckedTransaction(transaction).then((hash) => {\n            return {\n                hash: hash,\n                nonce: null,\n                gasLimit: null,\n                gasPrice: null,\n                data: null,\n                value: null,\n                chainId: null,\n                confirmations: 0,\n                from: null,\n                wait: (confirmations) => { return this.provider.waitForTransaction(hash, confirmations); }\n            };\n        });\n    }\n}\nconst allowedTransactionKeys = {\n    chainId: true, data: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true,\n    type: true, accessList: true,\n    maxFeePerGas: true, maxPriorityFeePerGas: true\n};\nexport class JsonRpcProvider extends BaseProvider {\n    constructor(url, network) {\n        let networkOrReady = network;\n        // The network is unknown, query the JSON-RPC for it\n        if (networkOrReady == null) {\n            networkOrReady = new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    this.detectNetwork().then((network) => {\n                        resolve(network);\n                    }, (error) => {\n                        reject(error);\n                    });\n                }, 0);\n            });\n        }\n        super(networkOrReady);\n        // Default URL\n        if (!url) {\n            url = getStatic(this.constructor, \"defaultUrl\")();\n        }\n        if (typeof (url) === \"string\") {\n            defineReadOnly(this, \"connection\", Object.freeze({\n                url: url\n            }));\n        }\n        else {\n            defineReadOnly(this, \"connection\", Object.freeze(shallowCopy(url)));\n        }\n        this._nextId = 42;\n    }\n    get _cache() {\n        if (this._eventLoopCache == null) {\n            this._eventLoopCache = {};\n        }\n        return this._eventLoopCache;\n    }\n    static defaultUrl() {\n        return \"http:/\\/localhost:8545\";\n    }\n    detectNetwork() {\n        if (!this._cache[\"detectNetwork\"]) {\n            this._cache[\"detectNetwork\"] = this._uncachedDetectNetwork();\n            // Clear this cache at the beginning of the next event loop\n            setTimeout(() => {\n                this._cache[\"detectNetwork\"] = null;\n            }, 0);\n        }\n        return this._cache[\"detectNetwork\"];\n    }\n    _uncachedDetectNetwork() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield timer(0);\n            let chainId = null;\n            try {\n                chainId = yield this.send(\"eth_chainId\", []);\n            }\n            catch (error) {\n                try {\n                    chainId = yield this.send(\"net_version\", []);\n                }\n                catch (error) { }\n            }\n            if (chainId != null) {\n                const getNetwork = getStatic(this.constructor, \"getNetwork\");\n                try {\n                    return getNetwork(BigNumber.from(chainId).toNumber());\n                }\n                catch (error) {\n                    return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n                        chainId: chainId,\n                        event: \"invalidNetwork\",\n                        serverError: error\n                    });\n                }\n            }\n            return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n                event: \"noNetwork\"\n            });\n        });\n    }\n    getSigner(addressOrIndex) {\n        return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);\n    }\n    getUncheckedSigner(addressOrIndex) {\n        return this.getSigner(addressOrIndex).connectUnchecked();\n    }\n    listAccounts() {\n        return this.send(\"eth_accounts\", []).then((accounts) => {\n            return accounts.map((a) => this.formatter.address(a));\n        });\n    }\n    send(method, params) {\n        const request = {\n            method: method,\n            params: params,\n            id: (this._nextId++),\n            jsonrpc: \"2.0\"\n        };\n        this.emit(\"debug\", {\n            action: \"request\",\n            request: deepCopy(request),\n            provider: this\n        });\n        // We can expand this in the future to any call, but for now these\n        // are the biggest wins and do not require any serializing parameters.\n        const cache = ([\"eth_chainId\", \"eth_blockNumber\"].indexOf(method) >= 0);\n        if (cache && this._cache[method]) {\n            return this._cache[method];\n        }\n        const result = fetchJson(this.connection, JSON.stringify(request), getResult).then((result) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                request: request,\n                response: result,\n                provider: this\n            });\n            return result;\n        }, (error) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                error: error,\n                request: request,\n                provider: this\n            });\n            throw error;\n        });\n        // Cache the fetch, but clear it on the next event loop\n        if (cache) {\n            this._cache[method] = result;\n            setTimeout(() => {\n                this._cache[method] = null;\n            }, 0);\n        }\n        return result;\n    }\n    prepareRequest(method, params) {\n        switch (method) {\n            case \"getBlockNumber\":\n                return [\"eth_blockNumber\", []];\n            case \"getGasPrice\":\n                return [\"eth_gasPrice\", []];\n            case \"getBalance\":\n                return [\"eth_getBalance\", [getLowerCase(params.address), params.blockTag]];\n            case \"getTransactionCount\":\n                return [\"eth_getTransactionCount\", [getLowerCase(params.address), params.blockTag]];\n            case \"getCode\":\n                return [\"eth_getCode\", [getLowerCase(params.address), params.blockTag]];\n            case \"getStorageAt\":\n                return [\"eth_getStorageAt\", [getLowerCase(params.address), hexZeroPad(params.position, 32), params.blockTag]];\n            case \"sendTransaction\":\n                return [\"eth_sendRawTransaction\", [params.signedTransaction]];\n            case \"getBlock\":\n                if (params.blockTag) {\n                    return [\"eth_getBlockByNumber\", [params.blockTag, !!params.includeTransactions]];\n                }\n                else if (params.blockHash) {\n                    return [\"eth_getBlockByHash\", [params.blockHash, !!params.includeTransactions]];\n                }\n                return null;\n            case \"getTransaction\":\n                return [\"eth_getTransactionByHash\", [params.transactionHash]];\n            case \"getTransactionReceipt\":\n                return [\"eth_getTransactionReceipt\", [params.transactionHash]];\n            case \"call\": {\n                const hexlifyTransaction = getStatic(this.constructor, \"hexlifyTransaction\");\n                return [\"eth_call\", [hexlifyTransaction(params.transaction, { from: true }), params.blockTag]];\n            }\n            case \"estimateGas\": {\n                const hexlifyTransaction = getStatic(this.constructor, \"hexlifyTransaction\");\n                return [\"eth_estimateGas\", [hexlifyTransaction(params.transaction, { from: true })]];\n            }\n            case \"getLogs\":\n                if (params.filter && params.filter.address != null) {\n                    params.filter.address = getLowerCase(params.filter.address);\n                }\n                return [\"eth_getLogs\", [params.filter]];\n            default:\n                break;\n        }\n        return null;\n    }\n    perform(method, params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Legacy networks do not like the type field being passed along (which\n            // is fair), so we delete type if it is 0 and a non-EIP-1559 network\n            if (method === \"call\" || method === \"estimateGas\") {\n                const tx = params.transaction;\n                if (tx && tx.type != null && BigNumber.from(tx.type).isZero()) {\n                    // If there are no EIP-1559 properties, it might be non-EIP-1559\n                    if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\n                        const feeData = yield this.getFeeData();\n                        if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n                            // Network doesn't know about EIP-1559 (and hence type)\n                            params = shallowCopy(params);\n                            params.transaction = shallowCopy(tx);\n                            delete params.transaction.type;\n                        }\n                    }\n                }\n            }\n            const args = this.prepareRequest(method, params);\n            if (args == null) {\n                logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n            }\n            try {\n                return yield this.send(args[0], args[1]);\n            }\n            catch (error) {\n                return checkError(method, error, params);\n            }\n        });\n    }\n    _startEvent(event) {\n        if (event.tag === \"pending\") {\n            this._startPending();\n        }\n        super._startEvent(event);\n    }\n    _startPending() {\n        if (this._pendingFilter != null) {\n            return;\n        }\n        const self = this;\n        const pendingFilter = this.send(\"eth_newPendingTransactionFilter\", []);\n        this._pendingFilter = pendingFilter;\n        pendingFilter.then(function (filterId) {\n            function poll() {\n                self.send(\"eth_getFilterChanges\", [filterId]).then(function (hashes) {\n                    if (self._pendingFilter != pendingFilter) {\n                        return null;\n                    }\n                    let seq = Promise.resolve();\n                    hashes.forEach(function (hash) {\n                        // @TODO: This should be garbage collected at some point... How? When?\n                        self._emitted[\"t:\" + hash.toLowerCase()] = \"pending\";\n                        seq = seq.then(function () {\n                            return self.getTransaction(hash).then(function (tx) {\n                                self.emit(\"pending\", tx);\n                                return null;\n                            });\n                        });\n                    });\n                    return seq.then(function () {\n                        return timer(1000);\n                    });\n                }).then(function () {\n                    if (self._pendingFilter != pendingFilter) {\n                        self.send(\"eth_uninstallFilter\", [filterId]);\n                        return;\n                    }\n                    setTimeout(function () { poll(); }, 0);\n                    return null;\n                }).catch((error) => { });\n            }\n            poll();\n            return filterId;\n        }).catch((error) => { });\n    }\n    _stopEvent(event) {\n        if (event.tag === \"pending\" && this.listenerCount(\"pending\") === 0) {\n            this._pendingFilter = null;\n        }\n        super._stopEvent(event);\n    }\n    // Convert an ethers.js transaction into a JSON-RPC transaction\n    //  - gasLimit => gas\n    //  - All values hexlified\n    //  - All numeric values zero-striped\n    //  - All addresses are lowercased\n    // NOTE: This allows a TransactionRequest, but all values should be resolved\n    //       before this is called\n    // @TODO: This will likely be removed in future versions and prepareRequest\n    //        will be the preferred method for this.\n    static hexlifyTransaction(transaction, allowExtra) {\n        // Check only allowed properties are given\n        const allowed = shallowCopy(allowedTransactionKeys);\n        if (allowExtra) {\n            for (const key in allowExtra) {\n                if (allowExtra[key]) {\n                    allowed[key] = true;\n                }\n            }\n        }\n        checkProperties(transaction, allowed);\n        const result = {};\n        // JSON-RPC now requires numeric values to be \"quantity\" values\n        [\"chainId\", \"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach(function (key) {\n            if (transaction[key] == null) {\n                return;\n            }\n            const value = hexValue(BigNumber.from(transaction[key]));\n            if (key === \"gasLimit\") {\n                key = \"gas\";\n            }\n            result[key] = value;\n        });\n        [\"from\", \"to\", \"data\"].forEach(function (key) {\n            if (transaction[key] == null) {\n                return;\n            }\n            result[key] = hexlify(transaction[key]);\n        });\n        if (transaction.accessList) {\n            result[\"accessList\"] = accessListify(transaction.accessList);\n        }\n        return result;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}