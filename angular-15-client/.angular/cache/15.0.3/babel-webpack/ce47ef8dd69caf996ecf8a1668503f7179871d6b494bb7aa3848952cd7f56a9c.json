{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { ForkEvent, Provider } from \"@ethersproject/abstract-provider\";\nimport { encode as base64Encode } from \"@ethersproject/base64\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexConcat, hexDataLength, hexDataSlice, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { HashZero } from \"@ethersproject/constants\";\nimport { dnsEncode, namehash } from \"@ethersproject/hash\";\nimport { getNetwork } from \"@ethersproject/networks\";\nimport { defineReadOnly, getStatic, resolveProperties } from \"@ethersproject/properties\";\nimport { sha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\nimport bech32 from \"bech32\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { Formatter } from \"./formatter\";\nconst MAX_CCIP_REDIRECTS = 10;\n//////////////////////////////\n// Event Serializeing\nfunction checkTopic(topic) {\n  if (topic == null) {\n    return \"null\";\n  }\n  if (hexDataLength(topic) !== 32) {\n    logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n  }\n  return topic.toLowerCase();\n}\nfunction serializeTopics(topics) {\n  // Remove trailing null AND-topics; they are redundant\n  topics = topics.slice();\n  while (topics.length > 0 && topics[topics.length - 1] == null) {\n    topics.pop();\n  }\n  return topics.map(topic => {\n    if (Array.isArray(topic)) {\n      // Only track unique OR-topics\n      const unique = {};\n      topic.forEach(topic => {\n        unique[checkTopic(topic)] = true;\n      });\n      // The order of OR-topics does not matter\n      const sorted = Object.keys(unique);\n      sorted.sort();\n      return sorted.join(\"|\");\n    } else {\n      return checkTopic(topic);\n    }\n  }).join(\"&\");\n}\nfunction deserializeTopics(data) {\n  if (data === \"\") {\n    return [];\n  }\n  return data.split(/&/g).map(topic => {\n    if (topic === \"\") {\n      return [];\n    }\n    const comps = topic.split(\"|\").map(topic => {\n      return topic === \"null\" ? null : topic;\n    });\n    return comps.length === 1 ? comps[0] : comps;\n  });\n}\nfunction getEventTag(eventName) {\n  if (typeof eventName === \"string\") {\n    eventName = eventName.toLowerCase();\n    if (hexDataLength(eventName) === 32) {\n      return \"tx:\" + eventName;\n    }\n    if (eventName.indexOf(\":\") === -1) {\n      return eventName;\n    }\n  } else if (Array.isArray(eventName)) {\n    return \"filter:*:\" + serializeTopics(eventName);\n  } else if (ForkEvent.isForkEvent(eventName)) {\n    logger.warn(\"not implemented\");\n    throw new Error(\"not implemented\");\n  } else if (eventName && typeof eventName === \"object\") {\n    return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n  }\n  throw new Error(\"invalid event - \" + eventName);\n}\n//////////////////////////////\n// Helper Object\nfunction getTime() {\n  return new Date().getTime();\n}\nfunction stall(duration) {\n  return new Promise(resolve => {\n    setTimeout(resolve, duration);\n  });\n}\n//////////////////////////////\n// Provider Object\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\nconst PollableEvents = [\"block\", \"network\", \"pending\", \"poll\"];\nexport class Event {\n  constructor(tag, listener, once) {\n    defineReadOnly(this, \"tag\", tag);\n    defineReadOnly(this, \"listener\", listener);\n    defineReadOnly(this, \"once\", once);\n    this._lastBlockNumber = -2;\n    this._inflight = false;\n  }\n  get event() {\n    switch (this.type) {\n      case \"tx\":\n        return this.hash;\n      case \"filter\":\n        return this.filter;\n    }\n    return this.tag;\n  }\n  get type() {\n    return this.tag.split(\":\")[0];\n  }\n  get hash() {\n    const comps = this.tag.split(\":\");\n    if (comps[0] !== \"tx\") {\n      return null;\n    }\n    return comps[1];\n  }\n  get filter() {\n    const comps = this.tag.split(\":\");\n    if (comps[0] !== \"filter\") {\n      return null;\n    }\n    const address = comps[1];\n    const topics = deserializeTopics(comps[2]);\n    const filter = {};\n    if (topics.length > 0) {\n      filter.topics = topics;\n    }\n    if (address && address !== \"*\") {\n      filter.address = address;\n    }\n    return filter;\n  }\n  pollable() {\n    return this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0;\n  }\n}\n;\n// https://github.com/satoshilabs/slips/blob/master/slip-0044.md\nconst coinInfos = {\n  \"0\": {\n    symbol: \"btc\",\n    p2pkh: 0x00,\n    p2sh: 0x05,\n    prefix: \"bc\"\n  },\n  \"2\": {\n    symbol: \"ltc\",\n    p2pkh: 0x30,\n    p2sh: 0x32,\n    prefix: \"ltc\"\n  },\n  \"3\": {\n    symbol: \"doge\",\n    p2pkh: 0x1e,\n    p2sh: 0x16\n  },\n  \"60\": {\n    symbol: \"eth\",\n    ilk: \"eth\"\n  },\n  \"61\": {\n    symbol: \"etc\",\n    ilk: \"eth\"\n  },\n  \"700\": {\n    symbol: \"xdai\",\n    ilk: \"eth\"\n  }\n};\nfunction bytes32ify(value) {\n  return hexZeroPad(BigNumber.from(value).toHexString(), 32);\n}\n// Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\nfunction base58Encode(data) {\n  return Base58.encode(concat([data, hexDataSlice(sha256(sha256(data)), 0, 4)]));\n}\nconst matcherIpfs = new RegExp(\"^(ipfs):/\\/(.*)$\", \"i\");\nconst matchers = [new RegExp(\"^(https):/\\/(.*)$\", \"i\"), new RegExp(\"^(data):(.*)$\", \"i\"), matcherIpfs, new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\")];\nfunction _parseString(result, start) {\n  try {\n    return toUtf8String(_parseBytes(result, start));\n  } catch (error) {}\n  return null;\n}\nfunction _parseBytes(result, start) {\n  if (result === \"0x\") {\n    return null;\n  }\n  const offset = BigNumber.from(hexDataSlice(result, start, start + 32)).toNumber();\n  const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();\n  return hexDataSlice(result, offset + 32, offset + 32 + length);\n}\n// Trim off the ipfs:// prefix and return the default gateway URL\nfunction getIpfsLink(link) {\n  if (link.match(/^ipfs:\\/\\/ipfs\\//i)) {\n    link = link.substring(12);\n  } else if (link.match(/^ipfs:\\/\\//i)) {\n    link = link.substring(7);\n  } else {\n    logger.throwArgumentError(\"unsupported IPFS format\", \"link\", link);\n  }\n  return `https:/\\/gateway.ipfs.io/ipfs/${link}`;\n}\nfunction numPad(value) {\n  const result = arrayify(value);\n  if (result.length > 32) {\n    throw new Error(\"internal; should not happen\");\n  }\n  const padded = new Uint8Array(32);\n  padded.set(result, 32 - result.length);\n  return padded;\n}\nfunction bytesPad(value) {\n  if (value.length % 32 === 0) {\n    return value;\n  }\n  const result = new Uint8Array(Math.ceil(value.length / 32) * 32);\n  result.set(value);\n  return result;\n}\n// ABI Encodes a series of (bytes, bytes, ...)\nfunction encodeBytes(datas) {\n  const result = [];\n  let byteCount = 0;\n  // Add place-holders for pointers as we add items\n  for (let i = 0; i < datas.length; i++) {\n    result.push(null);\n    byteCount += 32;\n  }\n  for (let i = 0; i < datas.length; i++) {\n    const data = arrayify(datas[i]);\n    // Update the bytes offset\n    result[i] = numPad(byteCount);\n    // The length and padded value of data\n    result.push(numPad(data.length));\n    result.push(bytesPad(data));\n    byteCount += 32 + Math.ceil(data.length / 32) * 32;\n  }\n  return hexConcat(result);\n}\nexport class Resolver {\n  // The resolvedAddress is only for creating a ReverseLookup resolver\n  constructor(provider, address, name, resolvedAddress) {\n    defineReadOnly(this, \"provider\", provider);\n    defineReadOnly(this, \"name\", name);\n    defineReadOnly(this, \"address\", provider.formatter.address(address));\n    defineReadOnly(this, \"_resolvedAddress\", resolvedAddress);\n  }\n  supportsWildcard() {\n    if (!this._supportsEip2544) {\n      // supportsInterface(bytes4 = selector(\"resolve(bytes,bytes)\"))\n      this._supportsEip2544 = this.provider.call({\n        to: this.address,\n        data: \"0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000\"\n      }).then(result => {\n        return BigNumber.from(result).eq(1);\n      }).catch(error => {\n        if (error.code === Logger.errors.CALL_EXCEPTION) {\n          return false;\n        }\n        // Rethrow the error: link is down, etc. Let future attempts retry.\n        this._supportsEip2544 = null;\n        throw error;\n      });\n    }\n    return this._supportsEip2544;\n  }\n  _fetch(selector, parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // e.g. keccak256(\"addr(bytes32,uint256)\")\n      const tx = {\n        to: this.address,\n        ccipReadEnabled: true,\n        data: hexConcat([selector, namehash(this.name), parameters || \"0x\"])\n      };\n      // Wildcard support; use EIP-2544 to resolve the request\n      let parseBytes = false;\n      if (yield this.supportsWildcard()) {\n        parseBytes = true;\n        // selector(\"resolve(bytes,bytes)\")\n        tx.data = hexConcat([\"0x9061b923\", encodeBytes([dnsEncode(this.name), tx.data])]);\n      }\n      try {\n        let result = yield this.provider.call(tx);\n        if (arrayify(result).length % 32 === 4) {\n          logger.throwError(\"resolver threw error\", Logger.errors.CALL_EXCEPTION, {\n            transaction: tx,\n            data: result\n          });\n        }\n        if (parseBytes) {\n          result = _parseBytes(result, 0);\n        }\n        return result;\n      } catch (error) {\n        if (error.code === Logger.errors.CALL_EXCEPTION) {\n          return null;\n        }\n        throw error;\n      }\n    });\n  }\n  _fetchBytes(selector, parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield this._fetch(selector, parameters);\n      if (result != null) {\n        return _parseBytes(result, 0);\n      }\n      return null;\n    });\n  }\n  _getAddress(coinType, hexBytes) {\n    const coinInfo = coinInfos[String(coinType)];\n    if (coinInfo == null) {\n      logger.throwError(`unsupported coin type: ${coinType}`, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: `getAddress(${coinType})`\n      });\n    }\n    if (coinInfo.ilk === \"eth\") {\n      return this.provider.formatter.address(hexBytes);\n    }\n    const bytes = arrayify(hexBytes);\n    // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n    if (coinInfo.p2pkh != null) {\n      const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n      if (p2pkh) {\n        const length = parseInt(p2pkh[1], 16);\n        if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n          return base58Encode(concat([[coinInfo.p2pkh], \"0x\" + p2pkh[2]]));\n        }\n      }\n    }\n    // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n    if (coinInfo.p2sh != null) {\n      const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n      if (p2sh) {\n        const length = parseInt(p2sh[1], 16);\n        if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {\n          return base58Encode(concat([[coinInfo.p2sh], \"0x\" + p2sh[2]]));\n        }\n      }\n    }\n    // Bech32\n    if (coinInfo.prefix != null) {\n      const length = bytes[1];\n      // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n      let version = bytes[0];\n      if (version === 0x00) {\n        if (length !== 20 && length !== 32) {\n          version = -1;\n        }\n      } else {\n        version = -1;\n      }\n      if (version >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {\n        const words = bech32.toWords(bytes.slice(2));\n        words.unshift(version);\n        return bech32.encode(coinInfo.prefix, words);\n      }\n    }\n    return null;\n  }\n  getAddress(coinType) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (coinType == null) {\n        coinType = 60;\n      }\n      // If Ethereum, use the standard `addr(bytes32)`\n      if (coinType === 60) {\n        try {\n          // keccak256(\"addr(bytes32)\")\n          const result = yield this._fetch(\"0x3b3b57de\");\n          // No address\n          if (result === \"0x\" || result === HashZero) {\n            return null;\n          }\n          return this.provider.formatter.callAddress(result);\n        } catch (error) {\n          if (error.code === Logger.errors.CALL_EXCEPTION) {\n            return null;\n          }\n          throw error;\n        }\n      }\n      // keccak256(\"addr(bytes32,uint256\")\n      const hexBytes = yield this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType));\n      // No address\n      if (hexBytes == null || hexBytes === \"0x\") {\n        return null;\n      }\n      // Compute the address\n      const address = this._getAddress(coinType, hexBytes);\n      if (address == null) {\n        logger.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: `getAddress(${coinType})`,\n          coinType: coinType,\n          data: hexBytes\n        });\n      }\n      return address;\n    });\n  }\n  getAvatar() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const linkage = [{\n        type: \"name\",\n        content: this.name\n      }];\n      try {\n        // test data for ricmoo.eth\n        //const avatar = \"eip155:1/erc721:0x265385c7f4132228A0d54EB1A9e7460b91c0cC68/29233\";\n        const avatar = yield this.getText(\"avatar\");\n        if (avatar == null) {\n          return null;\n        }\n        for (let i = 0; i < matchers.length; i++) {\n          const match = avatar.match(matchers[i]);\n          if (match == null) {\n            continue;\n          }\n          const scheme = match[1].toLowerCase();\n          switch (scheme) {\n            case \"https\":\n              linkage.push({\n                type: \"url\",\n                content: avatar\n              });\n              return {\n                linkage,\n                url: avatar\n              };\n            case \"data\":\n              linkage.push({\n                type: \"data\",\n                content: avatar\n              });\n              return {\n                linkage,\n                url: avatar\n              };\n            case \"ipfs\":\n              linkage.push({\n                type: \"ipfs\",\n                content: avatar\n              });\n              return {\n                linkage,\n                url: getIpfsLink(avatar)\n              };\n            case \"erc721\":\n            case \"erc1155\":\n              {\n                // Depending on the ERC type, use tokenURI(uint256) or url(uint256)\n                const selector = scheme === \"erc721\" ? \"0xc87b56dd\" : \"0x0e89341c\";\n                linkage.push({\n                  type: scheme,\n                  content: avatar\n                });\n                // The owner of this name\n                const owner = this._resolvedAddress || (yield this.getAddress());\n                const comps = (match[2] || \"\").split(\"/\");\n                if (comps.length !== 2) {\n                  return null;\n                }\n                const addr = yield this.provider.formatter.address(comps[0]);\n                const tokenId = hexZeroPad(BigNumber.from(comps[1]).toHexString(), 32);\n                // Check that this account owns the token\n                if (scheme === \"erc721\") {\n                  // ownerOf(uint256 tokenId)\n                  const tokenOwner = this.provider.formatter.callAddress(yield this.provider.call({\n                    to: addr,\n                    data: hexConcat([\"0x6352211e\", tokenId])\n                  }));\n                  if (owner !== tokenOwner) {\n                    return null;\n                  }\n                  linkage.push({\n                    type: \"owner\",\n                    content: tokenOwner\n                  });\n                } else if (scheme === \"erc1155\") {\n                  // balanceOf(address owner, uint256 tokenId)\n                  const balance = BigNumber.from(yield this.provider.call({\n                    to: addr,\n                    data: hexConcat([\"0x00fdd58e\", hexZeroPad(owner, 32), tokenId])\n                  }));\n                  if (balance.isZero()) {\n                    return null;\n                  }\n                  linkage.push({\n                    type: \"balance\",\n                    content: balance.toString()\n                  });\n                }\n                // Call the token contract for the metadata URL\n                const tx = {\n                  to: this.provider.formatter.address(comps[0]),\n                  data: hexConcat([selector, tokenId])\n                };\n                let metadataUrl = _parseString(yield this.provider.call(tx), 0);\n                if (metadataUrl == null) {\n                  return null;\n                }\n                linkage.push({\n                  type: \"metadata-url-base\",\n                  content: metadataUrl\n                });\n                // ERC-1155 allows a generic {id} in the URL\n                if (scheme === \"erc1155\") {\n                  metadataUrl = metadataUrl.replace(\"{id}\", tokenId.substring(2));\n                  linkage.push({\n                    type: \"metadata-url-expanded\",\n                    content: metadataUrl\n                  });\n                }\n                // Transform IPFS metadata links\n                if (metadataUrl.match(/^ipfs:/i)) {\n                  metadataUrl = getIpfsLink(metadataUrl);\n                }\n                linkage.push({\n                  type: \"metadata-url\",\n                  content: metadataUrl\n                });\n                // Get the token metadata\n                const metadata = yield fetchJson(metadataUrl);\n                if (!metadata) {\n                  return null;\n                }\n                linkage.push({\n                  type: \"metadata\",\n                  content: JSON.stringify(metadata)\n                });\n                // Pull the image URL out\n                let imageUrl = metadata.image;\n                if (typeof imageUrl !== \"string\") {\n                  return null;\n                }\n                if (imageUrl.match(/^(https:\\/\\/|data:)/i)) {\n                  // Allow\n                } else {\n                  // Transform IPFS link to gateway\n                  const ipfs = imageUrl.match(matcherIpfs);\n                  if (ipfs == null) {\n                    return null;\n                  }\n                  linkage.push({\n                    type: \"url-ipfs\",\n                    content: imageUrl\n                  });\n                  imageUrl = getIpfsLink(imageUrl);\n                }\n                linkage.push({\n                  type: \"url\",\n                  content: imageUrl\n                });\n                return {\n                  linkage,\n                  url: imageUrl\n                };\n              }\n          }\n        }\n      } catch (error) {}\n      return null;\n    });\n  }\n  getContentHash() {\n    return __awaiter(this, void 0, void 0, function* () {\n      // keccak256(\"contenthash()\")\n      const hexBytes = yield this._fetchBytes(\"0xbc1c58d1\");\n      // No contenthash\n      if (hexBytes == null || hexBytes === \"0x\") {\n        return null;\n      }\n      // IPFS (CID: 1, Type: DAG-PB)\n      const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n      if (ipfs) {\n        const length = parseInt(ipfs[3], 16);\n        if (ipfs[4].length === length * 2) {\n          return \"ipfs:/\\/\" + Base58.encode(\"0x\" + ipfs[1]);\n        }\n      }\n      // IPNS (CID: 1, Type: libp2p-key)\n      const ipns = hexBytes.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n      if (ipns) {\n        const length = parseInt(ipns[3], 16);\n        if (ipns[4].length === length * 2) {\n          return \"ipns:/\\/\" + Base58.encode(\"0x\" + ipns[1]);\n        }\n      }\n      // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n      const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);\n      if (swarm) {\n        if (swarm[1].length === 32 * 2) {\n          return \"bzz:/\\/\" + swarm[1];\n        }\n      }\n      const skynet = hexBytes.match(/^0x90b2c605([0-9a-f]*)$/);\n      if (skynet) {\n        if (skynet[1].length === 34 * 2) {\n          // URL Safe base64; https://datatracker.ietf.org/doc/html/rfc4648#section-5\n          const urlSafe = {\n            \"=\": \"\",\n            \"+\": \"-\",\n            \"/\": \"_\"\n          };\n          const hash = base64Encode(\"0x\" + skynet[1]).replace(/[=+\\/]/g, a => urlSafe[a]);\n          return \"sia:/\\/\" + hash;\n        }\n      }\n      return logger.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"getContentHash()\",\n        data: hexBytes\n      });\n    });\n  }\n  getText(key) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // The key encoded as parameter to fetchBytes\n      let keyBytes = toUtf8Bytes(key);\n      // The nodehash consumes the first slot, so the string pointer targets\n      // offset 64, with the length at offset 64 and data starting at offset 96\n      keyBytes = concat([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]);\n      // Pad to word-size (32 bytes)\n      if (keyBytes.length % 32 !== 0) {\n        keyBytes = concat([keyBytes, hexZeroPad(\"0x\", 32 - key.length % 32)]);\n      }\n      const hexBytes = yield this._fetchBytes(\"0x59d1d43c\", hexlify(keyBytes));\n      if (hexBytes == null || hexBytes === \"0x\") {\n        return null;\n      }\n      return toUtf8String(hexBytes);\n    });\n  }\n}\nlet defaultFormatter = null;\nlet nextPollId = 1;\nexport class BaseProvider extends Provider {\n  /**\n   *  ready\n   *\n   *  A Promise<Network> that resolves only once the provider is ready.\n   *\n   *  Sub-classes that call the super with a network without a chainId\n   *  MUST set this. Standard named networks have a known chainId.\n   *\n   */\n  constructor(network) {\n    super();\n    // Events being listened to\n    this._events = [];\n    this._emitted = {\n      block: -2\n    };\n    this.disableCcipRead = false;\n    this.formatter = new.target.getFormatter();\n    // If network is any, this Provider allows the underlying\n    // network to change dynamically, and we auto-detect the\n    // current network\n    defineReadOnly(this, \"anyNetwork\", network === \"any\");\n    if (this.anyNetwork) {\n      network = this.detectNetwork();\n    }\n    if (network instanceof Promise) {\n      this._networkPromise = network;\n      // Squash any \"unhandled promise\" errors; that do not need to be handled\n      network.catch(error => {});\n      // Trigger initial network setting (async)\n      this._ready().catch(error => {});\n    } else {\n      const knownNetwork = getStatic(new.target, \"getNetwork\")(network);\n      if (knownNetwork) {\n        defineReadOnly(this, \"_network\", knownNetwork);\n        this.emit(\"network\", knownNetwork, null);\n      } else {\n        logger.throwArgumentError(\"invalid network\", \"network\", network);\n      }\n    }\n    this._maxInternalBlockNumber = -1024;\n    this._lastBlockNumber = -2;\n    this._maxFilterBlockRange = 10;\n    this._pollingInterval = 4000;\n    this._fastQueryDate = 0;\n  }\n  _ready() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this._network == null) {\n        let network = null;\n        if (this._networkPromise) {\n          try {\n            network = yield this._networkPromise;\n          } catch (error) {}\n        }\n        // Try the Provider's network detection (this MUST throw if it cannot)\n        if (network == null) {\n          network = yield this.detectNetwork();\n        }\n        // This should never happen; every Provider sub-class should have\n        // suggested a network by here (or have thrown).\n        if (!network) {\n          logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, {});\n        }\n        // Possible this call stacked so do not call defineReadOnly again\n        if (this._network == null) {\n          if (this.anyNetwork) {\n            this._network = network;\n          } else {\n            defineReadOnly(this, \"_network\", network);\n          }\n          this.emit(\"network\", network, null);\n        }\n      }\n      return this._network;\n    });\n  }\n  // This will always return the most recently established network.\n  // For \"any\", this can change (a \"network\" event is emitted before\n  // any change is reflected); otherwise this cannot change\n  get ready() {\n    return poll(() => {\n      return this._ready().then(network => {\n        return network;\n      }, error => {\n        // If the network isn't running yet, we will wait\n        if (error.code === Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n          return undefined;\n        }\n        throw error;\n      });\n    });\n  }\n  // @TODO: Remove this and just create a singleton formatter\n  static getFormatter() {\n    if (defaultFormatter == null) {\n      defaultFormatter = new Formatter();\n    }\n    return defaultFormatter;\n  }\n  // @TODO: Remove this and just use getNetwork\n  static getNetwork(network) {\n    return getNetwork(network == null ? \"homestead\" : network);\n  }\n  ccipReadFetch(tx, calldata, urls) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.disableCcipRead || urls.length === 0) {\n        return null;\n      }\n      const sender = tx.to.toLowerCase();\n      const data = calldata.toLowerCase();\n      const errorMessages = [];\n      for (let i = 0; i < urls.length; i++) {\n        const url = urls[i];\n        // URL expansion\n        const href = url.replace(\"{sender}\", sender).replace(\"{data}\", data);\n        // If no {data} is present, use POST; otherwise GET\n        const json = url.indexOf(\"{data}\") >= 0 ? null : JSON.stringify({\n          data,\n          sender\n        });\n        const result = yield fetchJson({\n          url: href,\n          errorPassThrough: true\n        }, json, (value, response) => {\n          value.status = response.statusCode;\n          return value;\n        });\n        if (result.data) {\n          return result.data;\n        }\n        const errorMessage = result.message || \"unknown error\";\n        // 4xx indicates the result is not present; stop\n        if (result.status >= 400 && result.status < 500) {\n          return logger.throwError(`response not found during CCIP fetch: ${errorMessage}`, Logger.errors.SERVER_ERROR, {\n            url,\n            errorMessage\n          });\n        }\n        // 5xx indicates server issue; try the next url\n        errorMessages.push(errorMessage);\n      }\n      return logger.throwError(`error encountered during CCIP fetch: ${errorMessages.map(m => JSON.stringify(m)).join(\", \")}`, Logger.errors.SERVER_ERROR, {\n        urls,\n        errorMessages\n      });\n    });\n  }\n  // Fetches the blockNumber, but will reuse any result that is less\n  // than maxAge old or has been requested since the last request\n  _getInternalBlockNumber(maxAge) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this._ready();\n      // Allowing stale data up to maxAge old\n      if (maxAge > 0) {\n        // While there are pending internal block requests...\n        while (this._internalBlockNumber) {\n          // ...\"remember\" which fetch we started with\n          const internalBlockNumber = this._internalBlockNumber;\n          try {\n            // Check the result is not too stale\n            const result = yield internalBlockNumber;\n            if (getTime() - result.respTime <= maxAge) {\n              return result.blockNumber;\n            }\n            // Too old; fetch a new value\n            break;\n          } catch (error) {\n            // The fetch rejected; if we are the first to get the\n            // rejection, drop through so we replace it with a new\n            // fetch; all others blocked will then get that fetch\n            // which won't match the one they \"remembered\" and loop\n            if (this._internalBlockNumber === internalBlockNumber) {\n              break;\n            }\n          }\n        }\n      }\n      const reqTime = getTime();\n      const checkInternalBlockNumber = resolveProperties({\n        blockNumber: this.perform(\"getBlockNumber\", {}),\n        networkError: this.getNetwork().then(network => null, error => error)\n      }).then(({\n        blockNumber,\n        networkError\n      }) => {\n        if (networkError) {\n          // Unremember this bad internal block number\n          if (this._internalBlockNumber === checkInternalBlockNumber) {\n            this._internalBlockNumber = null;\n          }\n          throw networkError;\n        }\n        const respTime = getTime();\n        blockNumber = BigNumber.from(blockNumber).toNumber();\n        if (blockNumber < this._maxInternalBlockNumber) {\n          blockNumber = this._maxInternalBlockNumber;\n        }\n        this._maxInternalBlockNumber = blockNumber;\n        this._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n        return {\n          blockNumber,\n          reqTime,\n          respTime\n        };\n      });\n      this._internalBlockNumber = checkInternalBlockNumber;\n      // Swallow unhandled exceptions; if needed they are handled else where\n      checkInternalBlockNumber.catch(error => {\n        // Don't null the dead (rejected) fetch, if it has already been updated\n        if (this._internalBlockNumber === checkInternalBlockNumber) {\n          this._internalBlockNumber = null;\n        }\n      });\n      return (yield checkInternalBlockNumber).blockNumber;\n    });\n  }\n  poll() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const pollId = nextPollId++;\n      // Track all running promises, so we can trigger a post-poll once they are complete\n      const runners = [];\n      let blockNumber = null;\n      try {\n        blockNumber = yield this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n      } catch (error) {\n        this.emit(\"error\", error);\n        return;\n      }\n      this._setFastBlockNumber(blockNumber);\n      // Emit a poll event after we have the latest (fast) block number\n      this.emit(\"poll\", pollId, blockNumber);\n      // If the block has not changed, meh.\n      if (blockNumber === this._lastBlockNumber) {\n        this.emit(\"didPoll\", pollId);\n        return;\n      }\n      // First polling cycle, trigger a \"block\" events\n      if (this._emitted.block === -2) {\n        this._emitted.block = blockNumber - 1;\n      }\n      if (Math.abs(this._emitted.block - blockNumber) > 1000) {\n        logger.warn(`network block skew detected; skipping block events (emitted=${this._emitted.block} blockNumber${blockNumber})`);\n        this.emit(\"error\", logger.makeError(\"network block skew detected\", Logger.errors.NETWORK_ERROR, {\n          blockNumber: blockNumber,\n          event: \"blockSkew\",\n          previousBlockNumber: this._emitted.block\n        }));\n        this.emit(\"block\", blockNumber);\n      } else {\n        // Notify all listener for each block that has passed\n        for (let i = this._emitted.block + 1; i <= blockNumber; i++) {\n          this.emit(\"block\", i);\n        }\n      }\n      // The emitted block was updated, check for obsolete events\n      if (this._emitted.block !== blockNumber) {\n        this._emitted.block = blockNumber;\n        Object.keys(this._emitted).forEach(key => {\n          // The block event does not expire\n          if (key === \"block\") {\n            return;\n          }\n          // The block we were at when we emitted this event\n          const eventBlockNumber = this._emitted[key];\n          // We cannot garbage collect pending transactions or blocks here\n          // They should be garbage collected by the Provider when setting\n          // \"pending\" events\n          if (eventBlockNumber === \"pending\") {\n            return;\n          }\n          // Evict any transaction hashes or block hashes over 12 blocks\n          // old, since they should not return null anyways\n          if (blockNumber - eventBlockNumber > 12) {\n            delete this._emitted[key];\n          }\n        });\n      }\n      // First polling cycle\n      if (this._lastBlockNumber === -2) {\n        this._lastBlockNumber = blockNumber - 1;\n      }\n      // Find all transaction hashes we are waiting on\n      this._events.forEach(event => {\n        switch (event.type) {\n          case \"tx\":\n            {\n              const hash = event.hash;\n              let runner = this.getTransactionReceipt(hash).then(receipt => {\n                if (!receipt || receipt.blockNumber == null) {\n                  return null;\n                }\n                this._emitted[\"t:\" + hash] = receipt.blockNumber;\n                this.emit(hash, receipt);\n                return null;\n              }).catch(error => {\n                this.emit(\"error\", error);\n              });\n              runners.push(runner);\n              break;\n            }\n          case \"filter\":\n            {\n              // We only allow a single getLogs to be in-flight at a time\n              if (!event._inflight) {\n                event._inflight = true;\n                // This is the first filter for this event, so we want to\n                // restrict events to events that happened no earlier than now\n                if (event._lastBlockNumber === -2) {\n                  event._lastBlockNumber = blockNumber - 1;\n                }\n                // Filter from the last *known* event; due to load-balancing\n                // and some nodes returning updated block numbers before\n                // indexing events, a logs result with 0 entries cannot be\n                // trusted and we must retry a range which includes it again\n                const filter = event.filter;\n                filter.fromBlock = event._lastBlockNumber + 1;\n                filter.toBlock = blockNumber;\n                // Prevent fitler ranges from growing too wild, since it is quite\n                // likely there just haven't been any events to move the lastBlockNumber.\n                const minFromBlock = filter.toBlock - this._maxFilterBlockRange;\n                if (minFromBlock > filter.fromBlock) {\n                  filter.fromBlock = minFromBlock;\n                }\n                if (filter.fromBlock < 0) {\n                  filter.fromBlock = 0;\n                }\n                const runner = this.getLogs(filter).then(logs => {\n                  // Allow the next getLogs\n                  event._inflight = false;\n                  if (logs.length === 0) {\n                    return;\n                  }\n                  logs.forEach(log => {\n                    // Only when we get an event for a given block number\n                    // can we trust the events are indexed\n                    if (log.blockNumber > event._lastBlockNumber) {\n                      event._lastBlockNumber = log.blockNumber;\n                    }\n                    // Make sure we stall requests to fetch blocks and txs\n                    this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                    this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n                    this.emit(filter, log);\n                  });\n                }).catch(error => {\n                  this.emit(\"error\", error);\n                  // Allow another getLogs (the range was not updated)\n                  event._inflight = false;\n                });\n                runners.push(runner);\n              }\n              break;\n            }\n        }\n      });\n      this._lastBlockNumber = blockNumber;\n      // Once all events for this loop have been processed, emit \"didPoll\"\n      Promise.all(runners).then(() => {\n        this.emit(\"didPoll\", pollId);\n      }).catch(error => {\n        this.emit(\"error\", error);\n      });\n      return;\n    });\n  }\n  // Deprecated; do not use this\n  resetEventsBlock(blockNumber) {\n    this._lastBlockNumber = blockNumber - 1;\n    if (this.polling) {\n      this.poll();\n    }\n  }\n  get network() {\n    return this._network;\n  }\n  // This method should query the network if the underlying network\n  // can change, such as when connected to a JSON-RPC backend\n  detectNetwork() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return logger.throwError(\"provider does not support network detection\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"provider.detectNetwork\"\n      });\n    });\n  }\n  getNetwork() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const network = yield this._ready();\n      // Make sure we are still connected to the same network; this is\n      // only an external call for backends which can have the underlying\n      // network change spontaneously\n      const currentNetwork = yield this.detectNetwork();\n      if (network.chainId !== currentNetwork.chainId) {\n        // We are allowing network changes, things can get complex fast;\n        // make sure you know what you are doing if you use \"any\"\n        if (this.anyNetwork) {\n          this._network = currentNetwork;\n          // Reset all internal block number guards and caches\n          this._lastBlockNumber = -2;\n          this._fastBlockNumber = null;\n          this._fastBlockNumberPromise = null;\n          this._fastQueryDate = 0;\n          this._emitted.block = -2;\n          this._maxInternalBlockNumber = -1024;\n          this._internalBlockNumber = null;\n          // The \"network\" event MUST happen before this method resolves\n          // so any events have a chance to unregister, so we stall an\n          // additional event loop before returning from /this/ call\n          this.emit(\"network\", currentNetwork, network);\n          yield stall(0);\n          return this._network;\n        }\n        const error = logger.makeError(\"underlying network changed\", Logger.errors.NETWORK_ERROR, {\n          event: \"changed\",\n          network: network,\n          detectedNetwork: currentNetwork\n        });\n        this.emit(\"error\", error);\n        throw error;\n      }\n      return network;\n    });\n  }\n  get blockNumber() {\n    this._getInternalBlockNumber(100 + this.pollingInterval / 2).then(blockNumber => {\n      this._setFastBlockNumber(blockNumber);\n    }, error => {});\n    return this._fastBlockNumber != null ? this._fastBlockNumber : -1;\n  }\n  get polling() {\n    return this._poller != null;\n  }\n  set polling(value) {\n    if (value && !this._poller) {\n      this._poller = setInterval(() => {\n        this.poll();\n      }, this.pollingInterval);\n      if (!this._bootstrapPoll) {\n        this._bootstrapPoll = setTimeout(() => {\n          this.poll();\n          // We block additional polls until the polling interval\n          // is done, to prevent overwhelming the poll function\n          this._bootstrapPoll = setTimeout(() => {\n            // If polling was disabled, something may require a poke\n            // since starting the bootstrap poll and it was disabled\n            if (!this._poller) {\n              this.poll();\n            }\n            // Clear out the bootstrap so we can do another\n            this._bootstrapPoll = null;\n          }, this.pollingInterval);\n        }, 0);\n      }\n    } else if (!value && this._poller) {\n      clearInterval(this._poller);\n      this._poller = null;\n    }\n  }\n  get pollingInterval() {\n    return this._pollingInterval;\n  }\n  set pollingInterval(value) {\n    if (typeof value !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n      throw new Error(\"invalid polling interval\");\n    }\n    this._pollingInterval = value;\n    if (this._poller) {\n      clearInterval(this._poller);\n      this._poller = setInterval(() => {\n        this.poll();\n      }, this._pollingInterval);\n    }\n  }\n  _getFastBlockNumber() {\n    const now = getTime();\n    // Stale block number, request a newer value\n    if (now - this._fastQueryDate > 2 * this._pollingInterval) {\n      this._fastQueryDate = now;\n      this._fastBlockNumberPromise = this.getBlockNumber().then(blockNumber => {\n        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n          this._fastBlockNumber = blockNumber;\n        }\n        return this._fastBlockNumber;\n      });\n    }\n    return this._fastBlockNumberPromise;\n  }\n  _setFastBlockNumber(blockNumber) {\n    // Older block, maybe a stale request\n    if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {\n      return;\n    }\n    // Update the time we updated the blocknumber\n    this._fastQueryDate = getTime();\n    // Newer block number, use  it\n    if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n      this._fastBlockNumber = blockNumber;\n      this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n    }\n  }\n  waitForTransaction(transactionHash, confirmations, timeout) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._waitForTransaction(transactionHash, confirmations == null ? 1 : confirmations, timeout || 0, null);\n    });\n  }\n  _waitForTransaction(transactionHash, confirmations, timeout, replaceable) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const receipt = yield this.getTransactionReceipt(transactionHash);\n      // Receipt is already good\n      if ((receipt ? receipt.confirmations : 0) >= confirmations) {\n        return receipt;\n      }\n      // Poll until the receipt is good...\n      return new Promise((resolve, reject) => {\n        const cancelFuncs = [];\n        let done = false;\n        const alreadyDone = function () {\n          if (done) {\n            return true;\n          }\n          done = true;\n          cancelFuncs.forEach(func => {\n            func();\n          });\n          return false;\n        };\n        const minedHandler = receipt => {\n          if (receipt.confirmations < confirmations) {\n            return;\n          }\n          if (alreadyDone()) {\n            return;\n          }\n          resolve(receipt);\n        };\n        this.on(transactionHash, minedHandler);\n        cancelFuncs.push(() => {\n          this.removeListener(transactionHash, minedHandler);\n        });\n        if (replaceable) {\n          let lastBlockNumber = replaceable.startBlock;\n          let scannedBlock = null;\n          const replaceHandler = blockNumber => __awaiter(this, void 0, void 0, function* () {\n            if (done) {\n              return;\n            }\n            // Wait 1 second; this is only used in the case of a fault, so\n            // we will trade off a little bit of latency for more consistent\n            // results and fewer JSON-RPC calls\n            yield stall(1000);\n            this.getTransactionCount(replaceable.from).then(nonce => __awaiter(this, void 0, void 0, function* () {\n              if (done) {\n                return;\n              }\n              if (nonce <= replaceable.nonce) {\n                lastBlockNumber = blockNumber;\n              } else {\n                // First check if the transaction was mined\n                {\n                  const mined = yield this.getTransaction(transactionHash);\n                  if (mined && mined.blockNumber != null) {\n                    return;\n                  }\n                }\n                // First time scanning. We start a little earlier for some\n                // wiggle room here to handle the eventually consistent nature\n                // of blockchain (e.g. the getTransactionCount was for a\n                // different block)\n                if (scannedBlock == null) {\n                  scannedBlock = lastBlockNumber - 3;\n                  if (scannedBlock < replaceable.startBlock) {\n                    scannedBlock = replaceable.startBlock;\n                  }\n                }\n                while (scannedBlock <= blockNumber) {\n                  if (done) {\n                    return;\n                  }\n                  const block = yield this.getBlockWithTransactions(scannedBlock);\n                  for (let ti = 0; ti < block.transactions.length; ti++) {\n                    const tx = block.transactions[ti];\n                    // Successfully mined!\n                    if (tx.hash === transactionHash) {\n                      return;\n                    }\n                    // Matches our transaction from and nonce; its a replacement\n                    if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {\n                      if (done) {\n                        return;\n                      }\n                      // Get the receipt of the replacement\n                      const receipt = yield this.waitForTransaction(tx.hash, confirmations);\n                      // Already resolved or rejected (prolly a timeout)\n                      if (alreadyDone()) {\n                        return;\n                      }\n                      // The reason we were replaced\n                      let reason = \"replaced\";\n                      if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {\n                        reason = \"repriced\";\n                      } else if (tx.data === \"0x\" && tx.from === tx.to && tx.value.isZero()) {\n                        reason = \"cancelled\";\n                      }\n                      // Explain why we were replaced\n                      reject(logger.makeError(\"transaction was replaced\", Logger.errors.TRANSACTION_REPLACED, {\n                        cancelled: reason === \"replaced\" || reason === \"cancelled\",\n                        reason,\n                        replacement: this._wrapTransaction(tx),\n                        hash: transactionHash,\n                        receipt\n                      }));\n                      return;\n                    }\n                  }\n                  scannedBlock++;\n                }\n              }\n              if (done) {\n                return;\n              }\n              this.once(\"block\", replaceHandler);\n            }), error => {\n              if (done) {\n                return;\n              }\n              this.once(\"block\", replaceHandler);\n            });\n          });\n          if (done) {\n            return;\n          }\n          this.once(\"block\", replaceHandler);\n          cancelFuncs.push(() => {\n            this.removeListener(\"block\", replaceHandler);\n          });\n        }\n        if (typeof timeout === \"number\" && timeout > 0) {\n          const timer = setTimeout(() => {\n            if (alreadyDone()) {\n              return;\n            }\n            reject(logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, {\n              timeout: timeout\n            }));\n          }, timeout);\n          if (timer.unref) {\n            timer.unref();\n          }\n          cancelFuncs.push(() => {\n            clearTimeout(timer);\n          });\n        }\n      });\n    });\n  }\n  getBlockNumber() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._getInternalBlockNumber(0);\n    });\n  }\n  getGasPrice() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const result = yield this.perform(\"getGasPrice\", {});\n      try {\n        return BigNumber.from(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getGasPrice\",\n          result,\n          error\n        });\n      }\n    });\n  }\n  getBalance(addressOrName, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag)\n      });\n      const result = yield this.perform(\"getBalance\", params);\n      try {\n        return BigNumber.from(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getBalance\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n  getTransactionCount(addressOrName, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag)\n      });\n      const result = yield this.perform(\"getTransactionCount\", params);\n      try {\n        return BigNumber.from(result).toNumber();\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getTransactionCount\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n  getCode(addressOrName, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag)\n      });\n      const result = yield this.perform(\"getCode\", params);\n      try {\n        return hexlify(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getCode\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n  getStorageAt(addressOrName, position, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag),\n        position: Promise.resolve(position).then(p => hexValue(p))\n      });\n      const result = yield this.perform(\"getStorageAt\", params);\n      try {\n        return hexlify(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getStorageAt\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n  // This should be called by any subclass wrapping a TransactionResponse\n  _wrapTransaction(tx, hash, startBlock) {\n    if (hash != null && hexDataLength(hash) !== 32) {\n      throw new Error(\"invalid response - sendTransaction\");\n    }\n    const result = tx;\n    // Check the hash we expect is the same as the hash the server reported\n    if (hash != null && tx.hash !== hash) {\n      logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, {\n        expectedHash: tx.hash,\n        returnedHash: hash\n      });\n    }\n    result.wait = (confirms, timeout) => __awaiter(this, void 0, void 0, function* () {\n      if (confirms == null) {\n        confirms = 1;\n      }\n      if (timeout == null) {\n        timeout = 0;\n      }\n      // Get the details to detect replacement\n      let replacement = undefined;\n      if (confirms !== 0 && startBlock != null) {\n        replacement = {\n          data: tx.data,\n          from: tx.from,\n          nonce: tx.nonce,\n          to: tx.to,\n          value: tx.value,\n          startBlock\n        };\n      }\n      const receipt = yield this._waitForTransaction(tx.hash, confirms, timeout, replacement);\n      if (receipt == null && confirms === 0) {\n        return null;\n      }\n      // No longer pending, allow the polling loop to garbage collect this\n      this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n      if (receipt.status === 0) {\n        logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n          transactionHash: tx.hash,\n          transaction: tx,\n          receipt: receipt\n        });\n      }\n      return receipt;\n    });\n    return result;\n  }\n  sendTransaction(signedTransaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const hexTx = yield Promise.resolve(signedTransaction).then(t => hexlify(t));\n      const tx = this.formatter.transaction(signedTransaction);\n      if (tx.confirmations == null) {\n        tx.confirmations = 0;\n      }\n      const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n      try {\n        const hash = yield this.perform(\"sendTransaction\", {\n          signedTransaction: hexTx\n        });\n        return this._wrapTransaction(tx, hash, blockNumber);\n      } catch (error) {\n        error.transaction = tx;\n        error.transactionHash = tx.hash;\n        throw error;\n      }\n    });\n  }\n  _getTransactionRequest(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const values = yield transaction;\n      const tx = {};\n      [\"from\", \"to\"].forEach(key => {\n        if (values[key] == null) {\n          return;\n        }\n        tx[key] = Promise.resolve(values[key]).then(v => v ? this._getAddress(v) : null);\n      });\n      [\"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"value\"].forEach(key => {\n        if (values[key] == null) {\n          return;\n        }\n        tx[key] = Promise.resolve(values[key]).then(v => v ? BigNumber.from(v) : null);\n      });\n      [\"type\"].forEach(key => {\n        if (values[key] == null) {\n          return;\n        }\n        tx[key] = Promise.resolve(values[key]).then(v => v != null ? v : null);\n      });\n      if (values.accessList) {\n        tx.accessList = this.formatter.accessList(values.accessList);\n      }\n      [\"data\"].forEach(key => {\n        if (values[key] == null) {\n          return;\n        }\n        tx[key] = Promise.resolve(values[key]).then(v => v ? hexlify(v) : null);\n      });\n      return this.formatter.transactionRequest(yield resolveProperties(tx));\n    });\n  }\n  _getFilter(filter) {\n    return __awaiter(this, void 0, void 0, function* () {\n      filter = yield filter;\n      const result = {};\n      if (filter.address != null) {\n        result.address = this._getAddress(filter.address);\n      }\n      [\"blockHash\", \"topics\"].forEach(key => {\n        if (filter[key] == null) {\n          return;\n        }\n        result[key] = filter[key];\n      });\n      [\"fromBlock\", \"toBlock\"].forEach(key => {\n        if (filter[key] == null) {\n          return;\n        }\n        result[key] = this._getBlockTag(filter[key]);\n      });\n      return this.formatter.filter(yield resolveProperties(result));\n    });\n  }\n  _call(transaction, blockTag, attempt) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (attempt >= MAX_CCIP_REDIRECTS) {\n        logger.throwError(\"CCIP read exceeded maximum redirections\", Logger.errors.SERVER_ERROR, {\n          redirects: attempt,\n          transaction\n        });\n      }\n      const txSender = transaction.to;\n      const result = yield this.perform(\"call\", {\n        transaction,\n        blockTag\n      });\n      // CCIP Read request via OffchainLookup(address,string[],bytes,bytes4,bytes)\n      if (attempt >= 0 && blockTag === \"latest\" && txSender != null && result.substring(0, 10) === \"0x556f1830\" && hexDataLength(result) % 32 === 4) {\n        try {\n          const data = hexDataSlice(result, 4);\n          // Check the sender of the OffchainLookup matches the transaction\n          const sender = hexDataSlice(data, 0, 32);\n          if (!BigNumber.from(sender).eq(txSender)) {\n            logger.throwError(\"CCIP Read sender did not match\", Logger.errors.CALL_EXCEPTION, {\n              name: \"OffchainLookup\",\n              signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n              transaction,\n              data: result\n            });\n          }\n          // Read the URLs from the response\n          const urls = [];\n          const urlsOffset = BigNumber.from(hexDataSlice(data, 32, 64)).toNumber();\n          const urlsLength = BigNumber.from(hexDataSlice(data, urlsOffset, urlsOffset + 32)).toNumber();\n          const urlsData = hexDataSlice(data, urlsOffset + 32);\n          for (let u = 0; u < urlsLength; u++) {\n            const url = _parseString(urlsData, u * 32);\n            if (url == null) {\n              logger.throwError(\"CCIP Read contained corrupt URL string\", Logger.errors.CALL_EXCEPTION, {\n                name: \"OffchainLookup\",\n                signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                transaction,\n                data: result\n              });\n            }\n            urls.push(url);\n          }\n          // Get the CCIP calldata to forward\n          const calldata = _parseBytes(data, 64);\n          // Get the callbackSelector (bytes4)\n          if (!BigNumber.from(hexDataSlice(data, 100, 128)).isZero()) {\n            logger.throwError(\"CCIP Read callback selector included junk\", Logger.errors.CALL_EXCEPTION, {\n              name: \"OffchainLookup\",\n              signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n              transaction,\n              data: result\n            });\n          }\n          const callbackSelector = hexDataSlice(data, 96, 100);\n          // Get the extra data to send back to the contract as context\n          const extraData = _parseBytes(data, 128);\n          const ccipResult = yield this.ccipReadFetch(transaction, calldata, urls);\n          if (ccipResult == null) {\n            logger.throwError(\"CCIP Read disabled or provided no URLs\", Logger.errors.CALL_EXCEPTION, {\n              name: \"OffchainLookup\",\n              signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n              transaction,\n              data: result\n            });\n          }\n          const tx = {\n            to: txSender,\n            data: hexConcat([callbackSelector, encodeBytes([ccipResult, extraData])])\n          };\n          return this._call(tx, blockTag, attempt + 1);\n        } catch (error) {\n          if (error.code === Logger.errors.SERVER_ERROR) {\n            throw error;\n          }\n        }\n      }\n      try {\n        return hexlify(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"call\",\n          params: {\n            transaction,\n            blockTag\n          },\n          result,\n          error\n        });\n      }\n    });\n  }\n  call(transaction, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const resolved = yield resolveProperties({\n        transaction: this._getTransactionRequest(transaction),\n        blockTag: this._getBlockTag(blockTag),\n        ccipReadEnabled: Promise.resolve(transaction.ccipReadEnabled)\n      });\n      return this._call(resolved.transaction, resolved.blockTag, resolved.ccipReadEnabled ? 0 : -1);\n    });\n  }\n  estimateGas(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        transaction: this._getTransactionRequest(transaction)\n      });\n      const result = yield this.perform(\"estimateGas\", params);\n      try {\n        return BigNumber.from(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"estimateGas\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n  _getAddress(addressOrName) {\n    return __awaiter(this, void 0, void 0, function* () {\n      addressOrName = yield addressOrName;\n      if (typeof addressOrName !== \"string\") {\n        logger.throwArgumentError(\"invalid address or ENS name\", \"name\", addressOrName);\n      }\n      const address = yield this.resolveName(addressOrName);\n      if (address == null) {\n        logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: `resolveName(${JSON.stringify(addressOrName)})`\n        });\n      }\n      return address;\n    });\n  }\n  _getBlock(blockHashOrBlockTag, includeTransactions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      blockHashOrBlockTag = yield blockHashOrBlockTag;\n      // If blockTag is a number (not \"latest\", etc), this is the block number\n      let blockNumber = -128;\n      const params = {\n        includeTransactions: !!includeTransactions\n      };\n      if (isHexString(blockHashOrBlockTag, 32)) {\n        params.blockHash = blockHashOrBlockTag;\n      } else {\n        try {\n          params.blockTag = yield this._getBlockTag(blockHashOrBlockTag);\n          if (isHexString(params.blockTag)) {\n            blockNumber = parseInt(params.blockTag.substring(2), 16);\n          }\n        } catch (error) {\n          logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n        }\n      }\n      return poll(() => __awaiter(this, void 0, void 0, function* () {\n        const block = yield this.perform(\"getBlock\", params);\n        // Block was not found\n        if (block == null) {\n          // For blockhashes, if we didn't say it existed, that blockhash may\n          // not exist. If we did see it though, perhaps from a log, we know\n          // it exists, and this node is just not caught up yet.\n          if (params.blockHash != null) {\n            if (this._emitted[\"b:\" + params.blockHash] == null) {\n              return null;\n            }\n          }\n          // For block tags, if we are asking for a future block, we return null\n          if (params.blockTag != null) {\n            if (blockNumber > this._emitted.block) {\n              return null;\n            }\n          }\n          // Retry on the next block\n          return undefined;\n        }\n        // Add transactions\n        if (includeTransactions) {\n          let blockNumber = null;\n          for (let i = 0; i < block.transactions.length; i++) {\n            const tx = block.transactions[i];\n            if (tx.blockNumber == null) {\n              tx.confirmations = 0;\n            } else if (tx.confirmations == null) {\n              if (blockNumber == null) {\n                blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n              }\n              // Add the confirmations using the fast block number (pessimistic)\n              let confirmations = blockNumber - tx.blockNumber + 1;\n              if (confirmations <= 0) {\n                confirmations = 1;\n              }\n              tx.confirmations = confirmations;\n            }\n          }\n          const blockWithTxs = this.formatter.blockWithTransactions(block);\n          blockWithTxs.transactions = blockWithTxs.transactions.map(tx => this._wrapTransaction(tx));\n          return blockWithTxs;\n        }\n        return this.formatter.block(block);\n      }), {\n        oncePoll: this\n      });\n    });\n  }\n  getBlock(blockHashOrBlockTag) {\n    return this._getBlock(blockHashOrBlockTag, false);\n  }\n  getBlockWithTransactions(blockHashOrBlockTag) {\n    return this._getBlock(blockHashOrBlockTag, true);\n  }\n  getTransaction(transactionHash) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      transactionHash = yield transactionHash;\n      const params = {\n        transactionHash: this.formatter.hash(transactionHash, true)\n      };\n      return poll(() => __awaiter(this, void 0, void 0, function* () {\n        const result = yield this.perform(\"getTransaction\", params);\n        if (result == null) {\n          if (this._emitted[\"t:\" + transactionHash] == null) {\n            return null;\n          }\n          return undefined;\n        }\n        const tx = this.formatter.transactionResponse(result);\n        if (tx.blockNumber == null) {\n          tx.confirmations = 0;\n        } else if (tx.confirmations == null) {\n          const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n          // Add the confirmations using the fast block number (pessimistic)\n          let confirmations = blockNumber - tx.blockNumber + 1;\n          if (confirmations <= 0) {\n            confirmations = 1;\n          }\n          tx.confirmations = confirmations;\n        }\n        return this._wrapTransaction(tx);\n      }), {\n        oncePoll: this\n      });\n    });\n  }\n  getTransactionReceipt(transactionHash) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      transactionHash = yield transactionHash;\n      const params = {\n        transactionHash: this.formatter.hash(transactionHash, true)\n      };\n      return poll(() => __awaiter(this, void 0, void 0, function* () {\n        const result = yield this.perform(\"getTransactionReceipt\", params);\n        if (result == null) {\n          if (this._emitted[\"t:\" + transactionHash] == null) {\n            return null;\n          }\n          return undefined;\n        }\n        // \"geth-etc\" returns receipts before they are ready\n        if (result.blockHash == null) {\n          return undefined;\n        }\n        const receipt = this.formatter.receipt(result);\n        if (receipt.blockNumber == null) {\n          receipt.confirmations = 0;\n        } else if (receipt.confirmations == null) {\n          const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n          // Add the confirmations using the fast block number (pessimistic)\n          let confirmations = blockNumber - receipt.blockNumber + 1;\n          if (confirmations <= 0) {\n            confirmations = 1;\n          }\n          receipt.confirmations = confirmations;\n        }\n        return receipt;\n      }), {\n        oncePoll: this\n      });\n    });\n  }\n  getLogs(filter) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        filter: this._getFilter(filter)\n      });\n      const logs = yield this.perform(\"getLogs\", params);\n      logs.forEach(log => {\n        if (log.removed == null) {\n          log.removed = false;\n        }\n      });\n      return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);\n    });\n  }\n  getEtherPrice() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      return this.perform(\"getEtherPrice\", {});\n    });\n  }\n  _getBlockTag(blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      blockTag = yield blockTag;\n      if (typeof blockTag === \"number\" && blockTag < 0) {\n        if (blockTag % 1) {\n          logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n        }\n        let blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n        blockNumber += blockTag;\n        if (blockNumber < 0) {\n          blockNumber = 0;\n        }\n        return this.formatter.blockTag(blockNumber);\n      }\n      return this.formatter.blockTag(blockTag);\n    });\n  }\n  getResolver(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let currentName = name;\n      while (true) {\n        if (currentName === \"\" || currentName === \".\") {\n          return null;\n        }\n        // Optimization since the eth node cannot change and does\n        // not have a wildcard resolver\n        if (name !== \"eth\" && currentName === \"eth\") {\n          return null;\n        }\n        // Check the current node for a resolver\n        const addr = yield this._getResolver(currentName, \"getResolver\");\n        // Found a resolver!\n        if (addr != null) {\n          const resolver = new Resolver(this, addr, name);\n          // Legacy resolver found, using EIP-2544 so it isn't safe to use\n          if (currentName !== name && !(yield resolver.supportsWildcard())) {\n            return null;\n          }\n          return resolver;\n        }\n        // Get the parent node\n        currentName = currentName.split(\".\").slice(1).join(\".\");\n      }\n    });\n  }\n  _getResolver(name, operation) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (operation == null) {\n        operation = \"ENS\";\n      }\n      const network = yield this.getNetwork();\n      // No ENS...\n      if (!network.ensAddress) {\n        logger.throwError(\"network does not support ENS\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation,\n          network: network.name\n        });\n      }\n      try {\n        // keccak256(\"resolver(bytes32)\")\n        const addrData = yield this.call({\n          to: network.ensAddress,\n          data: \"0x0178b8bf\" + namehash(name).substring(2)\n        });\n        return this.formatter.callAddress(addrData);\n      } catch (error) {\n        // ENS registry cannot throw errors on resolver(bytes32)\n      }\n      return null;\n    });\n  }\n  resolveName(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      name = yield name;\n      // If it is already an address, nothing to resolve\n      try {\n        return Promise.resolve(this.formatter.address(name));\n      } catch (error) {\n        // If is is a hexstring, the address is bad (See #694)\n        if (isHexString(name)) {\n          throw error;\n        }\n      }\n      if (typeof name !== \"string\") {\n        logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n      }\n      // Get the addr from the resolver\n      const resolver = yield this.getResolver(name);\n      if (!resolver) {\n        return null;\n      }\n      return yield resolver.getAddress();\n    });\n  }\n  lookupAddress(address) {\n    return __awaiter(this, void 0, void 0, function* () {\n      address = yield address;\n      address = this.formatter.address(address);\n      const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n      const resolverAddr = yield this._getResolver(node, \"lookupAddress\");\n      if (resolverAddr == null) {\n        return null;\n      }\n      // keccak(\"name(bytes32)\")\n      const name = _parseString(yield this.call({\n        to: resolverAddr,\n        data: \"0x691f3431\" + namehash(node).substring(2)\n      }), 0);\n      const addr = yield this.resolveName(name);\n      if (addr != address) {\n        return null;\n      }\n      return name;\n    });\n  }\n  getAvatar(nameOrAddress) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let resolver = null;\n      if (isHexString(nameOrAddress)) {\n        // Address; reverse lookup\n        const address = this.formatter.address(nameOrAddress);\n        const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n        const resolverAddress = yield this._getResolver(node, \"getAvatar\");\n        if (!resolverAddress) {\n          return null;\n        }\n        // Try resolving the avatar against the addr.reverse resolver\n        resolver = new Resolver(this, resolverAddress, node);\n        try {\n          const avatar = yield resolver.getAvatar();\n          if (avatar) {\n            return avatar.url;\n          }\n        } catch (error) {\n          if (error.code !== Logger.errors.CALL_EXCEPTION) {\n            throw error;\n          }\n        }\n        // Try getting the name and performing forward lookup; allowing wildcards\n        try {\n          // keccak(\"name(bytes32)\")\n          const name = _parseString(yield this.call({\n            to: resolverAddress,\n            data: \"0x691f3431\" + namehash(node).substring(2)\n          }), 0);\n          resolver = yield this.getResolver(name);\n        } catch (error) {\n          if (error.code !== Logger.errors.CALL_EXCEPTION) {\n            throw error;\n          }\n          return null;\n        }\n      } else {\n        // ENS name; forward lookup with wildcard\n        resolver = yield this.getResolver(nameOrAddress);\n        if (!resolver) {\n          return null;\n        }\n      }\n      const avatar = yield resolver.getAvatar();\n      if (avatar == null) {\n        return null;\n      }\n      return avatar.url;\n    });\n  }\n  perform(method, params) {\n    return logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, {\n      operation: method\n    });\n  }\n  _startEvent(event) {\n    this.polling = this._events.filter(e => e.pollable()).length > 0;\n  }\n  _stopEvent(event) {\n    this.polling = this._events.filter(e => e.pollable()).length > 0;\n  }\n  _addEventListener(eventName, listener, once) {\n    const event = new Event(getEventTag(eventName), listener, once);\n    this._events.push(event);\n    this._startEvent(event);\n    return this;\n  }\n  on(eventName, listener) {\n    return this._addEventListener(eventName, listener, false);\n  }\n  once(eventName, listener) {\n    return this._addEventListener(eventName, listener, true);\n  }\n  emit(eventName, ...args) {\n    let result = false;\n    let stopped = [];\n    let eventTag = getEventTag(eventName);\n    this._events = this._events.filter(event => {\n      if (event.tag !== eventTag) {\n        return true;\n      }\n      setTimeout(() => {\n        event.listener.apply(this, args);\n      }, 0);\n      result = true;\n      if (event.once) {\n        stopped.push(event);\n        return false;\n      }\n      return true;\n    });\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n    return result;\n  }\n  listenerCount(eventName) {\n    if (!eventName) {\n      return this._events.length;\n    }\n    let eventTag = getEventTag(eventName);\n    return this._events.filter(event => {\n      return event.tag === eventTag;\n    }).length;\n  }\n  listeners(eventName) {\n    if (eventName == null) {\n      return this._events.map(event => event.listener);\n    }\n    let eventTag = getEventTag(eventName);\n    return this._events.filter(event => event.tag === eventTag).map(event => event.listener);\n  }\n  off(eventName, listener) {\n    if (listener == null) {\n      return this.removeAllListeners(eventName);\n    }\n    const stopped = [];\n    let found = false;\n    let eventTag = getEventTag(eventName);\n    this._events = this._events.filter(event => {\n      if (event.tag !== eventTag || event.listener != listener) {\n        return true;\n      }\n      if (found) {\n        return true;\n      }\n      found = true;\n      stopped.push(event);\n      return false;\n    });\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n    return this;\n  }\n  removeAllListeners(eventName) {\n    let stopped = [];\n    if (eventName == null) {\n      stopped = this._events;\n      this._events = [];\n    } else {\n      const eventTag = getEventTag(eventName);\n      this._events = this._events.filter(event => {\n        if (event.tag !== eventTag) {\n          return true;\n        }\n        stopped.push(event);\n        return false;\n      });\n    }\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n    return this;\n  }\n}","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","ForkEvent","Provider","encode","base64Encode","Base58","BigNumber","arrayify","concat","hexConcat","hexDataLength","hexDataSlice","hexlify","hexValue","hexZeroPad","isHexString","HashZero","dnsEncode","namehash","getNetwork","defineReadOnly","getStatic","resolveProperties","sha256","toUtf8Bytes","toUtf8String","fetchJson","poll","bech32","Logger","version","logger","Formatter","MAX_CCIP_REDIRECTS","checkTopic","topic","throwArgumentError","toLowerCase","serializeTopics","topics","slice","length","pop","map","Array","isArray","unique","forEach","sorted","Object","keys","sort","join","deserializeTopics","data","split","comps","getEventTag","eventName","indexOf","isForkEvent","warn","Error","address","getTime","Date","stall","duration","setTimeout","PollableEvents","Event","constructor","tag","listener","once","_lastBlockNumber","_inflight","event","type","hash","filter","pollable","coinInfos","symbol","p2pkh","p2sh","prefix","ilk","bytes32ify","from","toHexString","base58Encode","matcherIpfs","RegExp","matchers","_parseString","start","_parseBytes","error","offset","toNumber","getIpfsLink","link","match","substring","numPad","padded","Uint8Array","set","bytesPad","Math","ceil","encodeBytes","datas","byteCount","i","push","Resolver","provider","name","resolvedAddress","formatter","supportsWildcard","_supportsEip2544","call","to","eq","catch","code","errors","CALL_EXCEPTION","_fetch","selector","parameters","tx","ccipReadEnabled","parseBytes","throwError","transaction","_fetchBytes","_getAddress","coinType","hexBytes","coinInfo","String","UNSUPPORTED_OPERATION","operation","bytes","parseInt","words","toWords","unshift","getAddress","callAddress","getAvatar","linkage","content","avatar","getText","scheme","url","owner","_resolvedAddress","addr","tokenId","tokenOwner","balance","isZero","toString","metadataUrl","replace","metadata","JSON","stringify","imageUrl","image","ipfs","getContentHash","ipns","swarm","skynet","urlSafe","a","key","keyBytes","defaultFormatter","nextPollId","BaseProvider","network","_events","_emitted","block","disableCcipRead","new","target","getFormatter","anyNetwork","detectNetwork","_networkPromise","_ready","knownNetwork","emit","_maxInternalBlockNumber","_maxFilterBlockRange","_pollingInterval","_fastQueryDate","_network","UNKNOWN_ERROR","ready","NETWORK_ERROR","undefined","ccipReadFetch","calldata","urls","sender","errorMessages","href","json","errorPassThrough","response","status","statusCode","errorMessage","message","SERVER_ERROR","m","_getInternalBlockNumber","maxAge","_internalBlockNumber","internalBlockNumber","respTime","blockNumber","reqTime","checkInternalBlockNumber","perform","networkError","_setFastBlockNumber","pollId","runners","pollingInterval","abs","makeError","previousBlockNumber","eventBlockNumber","runner","getTransactionReceipt","receipt","fromBlock","toBlock","minFromBlock","getLogs","logs","log","blockHash","transactionHash","all","resetEventsBlock","polling","currentNetwork","chainId","_fastBlockNumber","_fastBlockNumberPromise","detectedNetwork","_poller","setInterval","_bootstrapPoll","clearInterval","_getFastBlockNumber","now","getBlockNumber","waitForTransaction","confirmations","timeout","_waitForTransaction","replaceable","cancelFuncs","alreadyDone","func","minedHandler","on","removeListener","lastBlockNumber","startBlock","scannedBlock","replaceHandler","getTransactionCount","nonce","mined","getTransaction","getBlockWithTransactions","ti","transactions","reason","TRANSACTION_REPLACED","cancelled","replacement","_wrapTransaction","timer","TIMEOUT","unref","clearTimeout","getGasPrice","method","getBalance","addressOrName","blockTag","params","_getBlockTag","getCode","getStorageAt","position","p","expectedHash","returnedHash","wait","confirms","sendTransaction","signedTransaction","hexTx","t","_getTransactionRequest","values","v","accessList","transactionRequest","_getFilter","_call","attempt","redirects","txSender","signature","urlsOffset","urlsLength","urlsData","u","callbackSelector","extraData","ccipResult","resolved","estimateGas","resolveName","_getBlock","blockHashOrBlockTag","includeTransactions","blockWithTxs","blockWithTransactions","oncePoll","getBlock","transactionResponse","removed","arrayOf","filterLog","bind","getEtherPrice","getResolver","currentName","_getResolver","resolver","ensAddress","addrData","lookupAddress","node","resolverAddr","nameOrAddress","resolverAddress","NOT_IMPLEMENTED","_startEvent","_stopEvent","_addEventListener","args","stopped","eventTag","listenerCount","listeners","off","removeAllListeners","found"],"sources":["F:/DDesktop/MEAN_BC/mean-stack-authentication-authorization-master/angular-15-client/node_modules/@ethersproject/providers/lib.esm/base-provider.js"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ForkEvent, Provider } from \"@ethersproject/abstract-provider\";\nimport { encode as base64Encode } from \"@ethersproject/base64\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexConcat, hexDataLength, hexDataSlice, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { HashZero } from \"@ethersproject/constants\";\nimport { dnsEncode, namehash } from \"@ethersproject/hash\";\nimport { getNetwork } from \"@ethersproject/networks\";\nimport { defineReadOnly, getStatic, resolveProperties } from \"@ethersproject/properties\";\nimport { sha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\nimport bech32 from \"bech32\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { Formatter } from \"./formatter\";\nconst MAX_CCIP_REDIRECTS = 10;\n//////////////////////////////\n// Event Serializeing\nfunction checkTopic(topic) {\n    if (topic == null) {\n        return \"null\";\n    }\n    if (hexDataLength(topic) !== 32) {\n        logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n    }\n    return topic.toLowerCase();\n}\nfunction serializeTopics(topics) {\n    // Remove trailing null AND-topics; they are redundant\n    topics = topics.slice();\n    while (topics.length > 0 && topics[topics.length - 1] == null) {\n        topics.pop();\n    }\n    return topics.map((topic) => {\n        if (Array.isArray(topic)) {\n            // Only track unique OR-topics\n            const unique = {};\n            topic.forEach((topic) => {\n                unique[checkTopic(topic)] = true;\n            });\n            // The order of OR-topics does not matter\n            const sorted = Object.keys(unique);\n            sorted.sort();\n            return sorted.join(\"|\");\n        }\n        else {\n            return checkTopic(topic);\n        }\n    }).join(\"&\");\n}\nfunction deserializeTopics(data) {\n    if (data === \"\") {\n        return [];\n    }\n    return data.split(/&/g).map((topic) => {\n        if (topic === \"\") {\n            return [];\n        }\n        const comps = topic.split(\"|\").map((topic) => {\n            return ((topic === \"null\") ? null : topic);\n        });\n        return ((comps.length === 1) ? comps[0] : comps);\n    });\n}\nfunction getEventTag(eventName) {\n    if (typeof (eventName) === \"string\") {\n        eventName = eventName.toLowerCase();\n        if (hexDataLength(eventName) === 32) {\n            return \"tx:\" + eventName;\n        }\n        if (eventName.indexOf(\":\") === -1) {\n            return eventName;\n        }\n    }\n    else if (Array.isArray(eventName)) {\n        return \"filter:*:\" + serializeTopics(eventName);\n    }\n    else if (ForkEvent.isForkEvent(eventName)) {\n        logger.warn(\"not implemented\");\n        throw new Error(\"not implemented\");\n    }\n    else if (eventName && typeof (eventName) === \"object\") {\n        return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n    }\n    throw new Error(\"invalid event - \" + eventName);\n}\n//////////////////////////////\n// Helper Object\nfunction getTime() {\n    return (new Date()).getTime();\n}\nfunction stall(duration) {\n    return new Promise((resolve) => {\n        setTimeout(resolve, duration);\n    });\n}\n//////////////////////////////\n// Provider Object\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\nconst PollableEvents = [\"block\", \"network\", \"pending\", \"poll\"];\nexport class Event {\n    constructor(tag, listener, once) {\n        defineReadOnly(this, \"tag\", tag);\n        defineReadOnly(this, \"listener\", listener);\n        defineReadOnly(this, \"once\", once);\n        this._lastBlockNumber = -2;\n        this._inflight = false;\n    }\n    get event() {\n        switch (this.type) {\n            case \"tx\":\n                return this.hash;\n            case \"filter\":\n                return this.filter;\n        }\n        return this.tag;\n    }\n    get type() {\n        return this.tag.split(\":\")[0];\n    }\n    get hash() {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"tx\") {\n            return null;\n        }\n        return comps[1];\n    }\n    get filter() {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"filter\") {\n            return null;\n        }\n        const address = comps[1];\n        const topics = deserializeTopics(comps[2]);\n        const filter = {};\n        if (topics.length > 0) {\n            filter.topics = topics;\n        }\n        if (address && address !== \"*\") {\n            filter.address = address;\n        }\n        return filter;\n    }\n    pollable() {\n        return (this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0);\n    }\n}\n;\n// https://github.com/satoshilabs/slips/blob/master/slip-0044.md\nconst coinInfos = {\n    \"0\": { symbol: \"btc\", p2pkh: 0x00, p2sh: 0x05, prefix: \"bc\" },\n    \"2\": { symbol: \"ltc\", p2pkh: 0x30, p2sh: 0x32, prefix: \"ltc\" },\n    \"3\": { symbol: \"doge\", p2pkh: 0x1e, p2sh: 0x16 },\n    \"60\": { symbol: \"eth\", ilk: \"eth\" },\n    \"61\": { symbol: \"etc\", ilk: \"eth\" },\n    \"700\": { symbol: \"xdai\", ilk: \"eth\" },\n};\nfunction bytes32ify(value) {\n    return hexZeroPad(BigNumber.from(value).toHexString(), 32);\n}\n// Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\nfunction base58Encode(data) {\n    return Base58.encode(concat([data, hexDataSlice(sha256(sha256(data)), 0, 4)]));\n}\nconst matcherIpfs = new RegExp(\"^(ipfs):/\\/(.*)$\", \"i\");\nconst matchers = [\n    new RegExp(\"^(https):/\\/(.*)$\", \"i\"),\n    new RegExp(\"^(data):(.*)$\", \"i\"),\n    matcherIpfs,\n    new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\"),\n];\nfunction _parseString(result, start) {\n    try {\n        return toUtf8String(_parseBytes(result, start));\n    }\n    catch (error) { }\n    return null;\n}\nfunction _parseBytes(result, start) {\n    if (result === \"0x\") {\n        return null;\n    }\n    const offset = BigNumber.from(hexDataSlice(result, start, start + 32)).toNumber();\n    const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();\n    return hexDataSlice(result, offset + 32, offset + 32 + length);\n}\n// Trim off the ipfs:// prefix and return the default gateway URL\nfunction getIpfsLink(link) {\n    if (link.match(/^ipfs:\\/\\/ipfs\\//i)) {\n        link = link.substring(12);\n    }\n    else if (link.match(/^ipfs:\\/\\//i)) {\n        link = link.substring(7);\n    }\n    else {\n        logger.throwArgumentError(\"unsupported IPFS format\", \"link\", link);\n    }\n    return `https:/\\/gateway.ipfs.io/ipfs/${link}`;\n}\nfunction numPad(value) {\n    const result = arrayify(value);\n    if (result.length > 32) {\n        throw new Error(\"internal; should not happen\");\n    }\n    const padded = new Uint8Array(32);\n    padded.set(result, 32 - result.length);\n    return padded;\n}\nfunction bytesPad(value) {\n    if ((value.length % 32) === 0) {\n        return value;\n    }\n    const result = new Uint8Array(Math.ceil(value.length / 32) * 32);\n    result.set(value);\n    return result;\n}\n// ABI Encodes a series of (bytes, bytes, ...)\nfunction encodeBytes(datas) {\n    const result = [];\n    let byteCount = 0;\n    // Add place-holders for pointers as we add items\n    for (let i = 0; i < datas.length; i++) {\n        result.push(null);\n        byteCount += 32;\n    }\n    for (let i = 0; i < datas.length; i++) {\n        const data = arrayify(datas[i]);\n        // Update the bytes offset\n        result[i] = numPad(byteCount);\n        // The length and padded value of data\n        result.push(numPad(data.length));\n        result.push(bytesPad(data));\n        byteCount += 32 + Math.ceil(data.length / 32) * 32;\n    }\n    return hexConcat(result);\n}\nexport class Resolver {\n    // The resolvedAddress is only for creating a ReverseLookup resolver\n    constructor(provider, address, name, resolvedAddress) {\n        defineReadOnly(this, \"provider\", provider);\n        defineReadOnly(this, \"name\", name);\n        defineReadOnly(this, \"address\", provider.formatter.address(address));\n        defineReadOnly(this, \"_resolvedAddress\", resolvedAddress);\n    }\n    supportsWildcard() {\n        if (!this._supportsEip2544) {\n            // supportsInterface(bytes4 = selector(\"resolve(bytes,bytes)\"))\n            this._supportsEip2544 = this.provider.call({\n                to: this.address,\n                data: \"0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000\"\n            }).then((result) => {\n                return BigNumber.from(result).eq(1);\n            }).catch((error) => {\n                if (error.code === Logger.errors.CALL_EXCEPTION) {\n                    return false;\n                }\n                // Rethrow the error: link is down, etc. Let future attempts retry.\n                this._supportsEip2544 = null;\n                throw error;\n            });\n        }\n        return this._supportsEip2544;\n    }\n    _fetch(selector, parameters) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // e.g. keccak256(\"addr(bytes32,uint256)\")\n            const tx = {\n                to: this.address,\n                ccipReadEnabled: true,\n                data: hexConcat([selector, namehash(this.name), (parameters || \"0x\")])\n            };\n            // Wildcard support; use EIP-2544 to resolve the request\n            let parseBytes = false;\n            if (yield this.supportsWildcard()) {\n                parseBytes = true;\n                // selector(\"resolve(bytes,bytes)\")\n                tx.data = hexConcat([\"0x9061b923\", encodeBytes([dnsEncode(this.name), tx.data])]);\n            }\n            try {\n                let result = yield this.provider.call(tx);\n                if ((arrayify(result).length % 32) === 4) {\n                    logger.throwError(\"resolver threw error\", Logger.errors.CALL_EXCEPTION, {\n                        transaction: tx, data: result\n                    });\n                }\n                if (parseBytes) {\n                    result = _parseBytes(result, 0);\n                }\n                return result;\n            }\n            catch (error) {\n                if (error.code === Logger.errors.CALL_EXCEPTION) {\n                    return null;\n                }\n                throw error;\n            }\n        });\n    }\n    _fetchBytes(selector, parameters) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield this._fetch(selector, parameters);\n            if (result != null) {\n                return _parseBytes(result, 0);\n            }\n            return null;\n        });\n    }\n    _getAddress(coinType, hexBytes) {\n        const coinInfo = coinInfos[String(coinType)];\n        if (coinInfo == null) {\n            logger.throwError(`unsupported coin type: ${coinType}`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `getAddress(${coinType})`\n            });\n        }\n        if (coinInfo.ilk === \"eth\") {\n            return this.provider.formatter.address(hexBytes);\n        }\n        const bytes = arrayify(hexBytes);\n        // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n        if (coinInfo.p2pkh != null) {\n            const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n            if (p2pkh) {\n                const length = parseInt(p2pkh[1], 16);\n                if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([[coinInfo.p2pkh], (\"0x\" + p2pkh[2])]));\n                }\n            }\n        }\n        // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n        if (coinInfo.p2sh != null) {\n            const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n            if (p2sh) {\n                const length = parseInt(p2sh[1], 16);\n                if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([[coinInfo.p2sh], (\"0x\" + p2sh[2])]));\n                }\n            }\n        }\n        // Bech32\n        if (coinInfo.prefix != null) {\n            const length = bytes[1];\n            // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n            let version = bytes[0];\n            if (version === 0x00) {\n                if (length !== 20 && length !== 32) {\n                    version = -1;\n                }\n            }\n            else {\n                version = -1;\n            }\n            if (version >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {\n                const words = bech32.toWords(bytes.slice(2));\n                words.unshift(version);\n                return bech32.encode(coinInfo.prefix, words);\n            }\n        }\n        return null;\n    }\n    getAddress(coinType) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (coinType == null) {\n                coinType = 60;\n            }\n            // If Ethereum, use the standard `addr(bytes32)`\n            if (coinType === 60) {\n                try {\n                    // keccak256(\"addr(bytes32)\")\n                    const result = yield this._fetch(\"0x3b3b57de\");\n                    // No address\n                    if (result === \"0x\" || result === HashZero) {\n                        return null;\n                    }\n                    return this.provider.formatter.callAddress(result);\n                }\n                catch (error) {\n                    if (error.code === Logger.errors.CALL_EXCEPTION) {\n                        return null;\n                    }\n                    throw error;\n                }\n            }\n            // keccak256(\"addr(bytes32,uint256\")\n            const hexBytes = yield this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType));\n            // No address\n            if (hexBytes == null || hexBytes === \"0x\") {\n                return null;\n            }\n            // Compute the address\n            const address = this._getAddress(coinType, hexBytes);\n            if (address == null) {\n                logger.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: `getAddress(${coinType})`,\n                    coinType: coinType,\n                    data: hexBytes\n                });\n            }\n            return address;\n        });\n    }\n    getAvatar() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const linkage = [{ type: \"name\", content: this.name }];\n            try {\n                // test data for ricmoo.eth\n                //const avatar = \"eip155:1/erc721:0x265385c7f4132228A0d54EB1A9e7460b91c0cC68/29233\";\n                const avatar = yield this.getText(\"avatar\");\n                if (avatar == null) {\n                    return null;\n                }\n                for (let i = 0; i < matchers.length; i++) {\n                    const match = avatar.match(matchers[i]);\n                    if (match == null) {\n                        continue;\n                    }\n                    const scheme = match[1].toLowerCase();\n                    switch (scheme) {\n                        case \"https\":\n                            linkage.push({ type: \"url\", content: avatar });\n                            return { linkage, url: avatar };\n                        case \"data\":\n                            linkage.push({ type: \"data\", content: avatar });\n                            return { linkage, url: avatar };\n                        case \"ipfs\":\n                            linkage.push({ type: \"ipfs\", content: avatar });\n                            return { linkage, url: getIpfsLink(avatar) };\n                        case \"erc721\":\n                        case \"erc1155\": {\n                            // Depending on the ERC type, use tokenURI(uint256) or url(uint256)\n                            const selector = (scheme === \"erc721\") ? \"0xc87b56dd\" : \"0x0e89341c\";\n                            linkage.push({ type: scheme, content: avatar });\n                            // The owner of this name\n                            const owner = (this._resolvedAddress || (yield this.getAddress()));\n                            const comps = (match[2] || \"\").split(\"/\");\n                            if (comps.length !== 2) {\n                                return null;\n                            }\n                            const addr = yield this.provider.formatter.address(comps[0]);\n                            const tokenId = hexZeroPad(BigNumber.from(comps[1]).toHexString(), 32);\n                            // Check that this account owns the token\n                            if (scheme === \"erc721\") {\n                                // ownerOf(uint256 tokenId)\n                                const tokenOwner = this.provider.formatter.callAddress(yield this.provider.call({\n                                    to: addr, data: hexConcat([\"0x6352211e\", tokenId])\n                                }));\n                                if (owner !== tokenOwner) {\n                                    return null;\n                                }\n                                linkage.push({ type: \"owner\", content: tokenOwner });\n                            }\n                            else if (scheme === \"erc1155\") {\n                                // balanceOf(address owner, uint256 tokenId)\n                                const balance = BigNumber.from(yield this.provider.call({\n                                    to: addr, data: hexConcat([\"0x00fdd58e\", hexZeroPad(owner, 32), tokenId])\n                                }));\n                                if (balance.isZero()) {\n                                    return null;\n                                }\n                                linkage.push({ type: \"balance\", content: balance.toString() });\n                            }\n                            // Call the token contract for the metadata URL\n                            const tx = {\n                                to: this.provider.formatter.address(comps[0]),\n                                data: hexConcat([selector, tokenId])\n                            };\n                            let metadataUrl = _parseString(yield this.provider.call(tx), 0);\n                            if (metadataUrl == null) {\n                                return null;\n                            }\n                            linkage.push({ type: \"metadata-url-base\", content: metadataUrl });\n                            // ERC-1155 allows a generic {id} in the URL\n                            if (scheme === \"erc1155\") {\n                                metadataUrl = metadataUrl.replace(\"{id}\", tokenId.substring(2));\n                                linkage.push({ type: \"metadata-url-expanded\", content: metadataUrl });\n                            }\n                            // Transform IPFS metadata links\n                            if (metadataUrl.match(/^ipfs:/i)) {\n                                metadataUrl = getIpfsLink(metadataUrl);\n                            }\n                            linkage.push({ type: \"metadata-url\", content: metadataUrl });\n                            // Get the token metadata\n                            const metadata = yield fetchJson(metadataUrl);\n                            if (!metadata) {\n                                return null;\n                            }\n                            linkage.push({ type: \"metadata\", content: JSON.stringify(metadata) });\n                            // Pull the image URL out\n                            let imageUrl = metadata.image;\n                            if (typeof (imageUrl) !== \"string\") {\n                                return null;\n                            }\n                            if (imageUrl.match(/^(https:\\/\\/|data:)/i)) {\n                                // Allow\n                            }\n                            else {\n                                // Transform IPFS link to gateway\n                                const ipfs = imageUrl.match(matcherIpfs);\n                                if (ipfs == null) {\n                                    return null;\n                                }\n                                linkage.push({ type: \"url-ipfs\", content: imageUrl });\n                                imageUrl = getIpfsLink(imageUrl);\n                            }\n                            linkage.push({ type: \"url\", content: imageUrl });\n                            return { linkage, url: imageUrl };\n                        }\n                    }\n                }\n            }\n            catch (error) { }\n            return null;\n        });\n    }\n    getContentHash() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // keccak256(\"contenthash()\")\n            const hexBytes = yield this._fetchBytes(\"0xbc1c58d1\");\n            // No contenthash\n            if (hexBytes == null || hexBytes === \"0x\") {\n                return null;\n            }\n            // IPFS (CID: 1, Type: DAG-PB)\n            const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n            if (ipfs) {\n                const length = parseInt(ipfs[3], 16);\n                if (ipfs[4].length === length * 2) {\n                    return \"ipfs:/\\/\" + Base58.encode(\"0x\" + ipfs[1]);\n                }\n            }\n            // IPNS (CID: 1, Type: libp2p-key)\n            const ipns = hexBytes.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n            if (ipns) {\n                const length = parseInt(ipns[3], 16);\n                if (ipns[4].length === length * 2) {\n                    return \"ipns:/\\/\" + Base58.encode(\"0x\" + ipns[1]);\n                }\n            }\n            // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n            const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);\n            if (swarm) {\n                if (swarm[1].length === (32 * 2)) {\n                    return \"bzz:/\\/\" + swarm[1];\n                }\n            }\n            const skynet = hexBytes.match(/^0x90b2c605([0-9a-f]*)$/);\n            if (skynet) {\n                if (skynet[1].length === (34 * 2)) {\n                    // URL Safe base64; https://datatracker.ietf.org/doc/html/rfc4648#section-5\n                    const urlSafe = { \"=\": \"\", \"+\": \"-\", \"/\": \"_\" };\n                    const hash = base64Encode(\"0x\" + skynet[1]).replace(/[=+\\/]/g, (a) => (urlSafe[a]));\n                    return \"sia:/\\/\" + hash;\n                }\n            }\n            return logger.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"getContentHash()\",\n                data: hexBytes\n            });\n        });\n    }\n    getText(key) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // The key encoded as parameter to fetchBytes\n            let keyBytes = toUtf8Bytes(key);\n            // The nodehash consumes the first slot, so the string pointer targets\n            // offset 64, with the length at offset 64 and data starting at offset 96\n            keyBytes = concat([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]);\n            // Pad to word-size (32 bytes)\n            if ((keyBytes.length % 32) !== 0) {\n                keyBytes = concat([keyBytes, hexZeroPad(\"0x\", 32 - (key.length % 32))]);\n            }\n            const hexBytes = yield this._fetchBytes(\"0x59d1d43c\", hexlify(keyBytes));\n            if (hexBytes == null || hexBytes === \"0x\") {\n                return null;\n            }\n            return toUtf8String(hexBytes);\n        });\n    }\n}\nlet defaultFormatter = null;\nlet nextPollId = 1;\nexport class BaseProvider extends Provider {\n    /**\n     *  ready\n     *\n     *  A Promise<Network> that resolves only once the provider is ready.\n     *\n     *  Sub-classes that call the super with a network without a chainId\n     *  MUST set this. Standard named networks have a known chainId.\n     *\n     */\n    constructor(network) {\n        super();\n        // Events being listened to\n        this._events = [];\n        this._emitted = { block: -2 };\n        this.disableCcipRead = false;\n        this.formatter = new.target.getFormatter();\n        // If network is any, this Provider allows the underlying\n        // network to change dynamically, and we auto-detect the\n        // current network\n        defineReadOnly(this, \"anyNetwork\", (network === \"any\"));\n        if (this.anyNetwork) {\n            network = this.detectNetwork();\n        }\n        if (network instanceof Promise) {\n            this._networkPromise = network;\n            // Squash any \"unhandled promise\" errors; that do not need to be handled\n            network.catch((error) => { });\n            // Trigger initial network setting (async)\n            this._ready().catch((error) => { });\n        }\n        else {\n            const knownNetwork = getStatic(new.target, \"getNetwork\")(network);\n            if (knownNetwork) {\n                defineReadOnly(this, \"_network\", knownNetwork);\n                this.emit(\"network\", knownNetwork, null);\n            }\n            else {\n                logger.throwArgumentError(\"invalid network\", \"network\", network);\n            }\n        }\n        this._maxInternalBlockNumber = -1024;\n        this._lastBlockNumber = -2;\n        this._maxFilterBlockRange = 10;\n        this._pollingInterval = 4000;\n        this._fastQueryDate = 0;\n    }\n    _ready() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._network == null) {\n                let network = null;\n                if (this._networkPromise) {\n                    try {\n                        network = yield this._networkPromise;\n                    }\n                    catch (error) { }\n                }\n                // Try the Provider's network detection (this MUST throw if it cannot)\n                if (network == null) {\n                    network = yield this.detectNetwork();\n                }\n                // This should never happen; every Provider sub-class should have\n                // suggested a network by here (or have thrown).\n                if (!network) {\n                    logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, {});\n                }\n                // Possible this call stacked so do not call defineReadOnly again\n                if (this._network == null) {\n                    if (this.anyNetwork) {\n                        this._network = network;\n                    }\n                    else {\n                        defineReadOnly(this, \"_network\", network);\n                    }\n                    this.emit(\"network\", network, null);\n                }\n            }\n            return this._network;\n        });\n    }\n    // This will always return the most recently established network.\n    // For \"any\", this can change (a \"network\" event is emitted before\n    // any change is reflected); otherwise this cannot change\n    get ready() {\n        return poll(() => {\n            return this._ready().then((network) => {\n                return network;\n            }, (error) => {\n                // If the network isn't running yet, we will wait\n                if (error.code === Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n                    return undefined;\n                }\n                throw error;\n            });\n        });\n    }\n    // @TODO: Remove this and just create a singleton formatter\n    static getFormatter() {\n        if (defaultFormatter == null) {\n            defaultFormatter = new Formatter();\n        }\n        return defaultFormatter;\n    }\n    // @TODO: Remove this and just use getNetwork\n    static getNetwork(network) {\n        return getNetwork((network == null) ? \"homestead\" : network);\n    }\n    ccipReadFetch(tx, calldata, urls) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.disableCcipRead || urls.length === 0) {\n                return null;\n            }\n            const sender = tx.to.toLowerCase();\n            const data = calldata.toLowerCase();\n            const errorMessages = [];\n            for (let i = 0; i < urls.length; i++) {\n                const url = urls[i];\n                // URL expansion\n                const href = url.replace(\"{sender}\", sender).replace(\"{data}\", data);\n                // If no {data} is present, use POST; otherwise GET\n                const json = (url.indexOf(\"{data}\") >= 0) ? null : JSON.stringify({ data, sender });\n                const result = yield fetchJson({ url: href, errorPassThrough: true }, json, (value, response) => {\n                    value.status = response.statusCode;\n                    return value;\n                });\n                if (result.data) {\n                    return result.data;\n                }\n                const errorMessage = (result.message || \"unknown error\");\n                // 4xx indicates the result is not present; stop\n                if (result.status >= 400 && result.status < 500) {\n                    return logger.throwError(`response not found during CCIP fetch: ${errorMessage}`, Logger.errors.SERVER_ERROR, { url, errorMessage });\n                }\n                // 5xx indicates server issue; try the next url\n                errorMessages.push(errorMessage);\n            }\n            return logger.throwError(`error encountered during CCIP fetch: ${errorMessages.map((m) => JSON.stringify(m)).join(\", \")}`, Logger.errors.SERVER_ERROR, {\n                urls, errorMessages\n            });\n        });\n    }\n    // Fetches the blockNumber, but will reuse any result that is less\n    // than maxAge old or has been requested since the last request\n    _getInternalBlockNumber(maxAge) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this._ready();\n            // Allowing stale data up to maxAge old\n            if (maxAge > 0) {\n                // While there are pending internal block requests...\n                while (this._internalBlockNumber) {\n                    // ...\"remember\" which fetch we started with\n                    const internalBlockNumber = this._internalBlockNumber;\n                    try {\n                        // Check the result is not too stale\n                        const result = yield internalBlockNumber;\n                        if ((getTime() - result.respTime) <= maxAge) {\n                            return result.blockNumber;\n                        }\n                        // Too old; fetch a new value\n                        break;\n                    }\n                    catch (error) {\n                        // The fetch rejected; if we are the first to get the\n                        // rejection, drop through so we replace it with a new\n                        // fetch; all others blocked will then get that fetch\n                        // which won't match the one they \"remembered\" and loop\n                        if (this._internalBlockNumber === internalBlockNumber) {\n                            break;\n                        }\n                    }\n                }\n            }\n            const reqTime = getTime();\n            const checkInternalBlockNumber = resolveProperties({\n                blockNumber: this.perform(\"getBlockNumber\", {}),\n                networkError: this.getNetwork().then((network) => (null), (error) => (error))\n            }).then(({ blockNumber, networkError }) => {\n                if (networkError) {\n                    // Unremember this bad internal block number\n                    if (this._internalBlockNumber === checkInternalBlockNumber) {\n                        this._internalBlockNumber = null;\n                    }\n                    throw networkError;\n                }\n                const respTime = getTime();\n                blockNumber = BigNumber.from(blockNumber).toNumber();\n                if (blockNumber < this._maxInternalBlockNumber) {\n                    blockNumber = this._maxInternalBlockNumber;\n                }\n                this._maxInternalBlockNumber = blockNumber;\n                this._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n                return { blockNumber, reqTime, respTime };\n            });\n            this._internalBlockNumber = checkInternalBlockNumber;\n            // Swallow unhandled exceptions; if needed they are handled else where\n            checkInternalBlockNumber.catch((error) => {\n                // Don't null the dead (rejected) fetch, if it has already been updated\n                if (this._internalBlockNumber === checkInternalBlockNumber) {\n                    this._internalBlockNumber = null;\n                }\n            });\n            return (yield checkInternalBlockNumber).blockNumber;\n        });\n    }\n    poll() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const pollId = nextPollId++;\n            // Track all running promises, so we can trigger a post-poll once they are complete\n            const runners = [];\n            let blockNumber = null;\n            try {\n                blockNumber = yield this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n            }\n            catch (error) {\n                this.emit(\"error\", error);\n                return;\n            }\n            this._setFastBlockNumber(blockNumber);\n            // Emit a poll event after we have the latest (fast) block number\n            this.emit(\"poll\", pollId, blockNumber);\n            // If the block has not changed, meh.\n            if (blockNumber === this._lastBlockNumber) {\n                this.emit(\"didPoll\", pollId);\n                return;\n            }\n            // First polling cycle, trigger a \"block\" events\n            if (this._emitted.block === -2) {\n                this._emitted.block = blockNumber - 1;\n            }\n            if (Math.abs((this._emitted.block) - blockNumber) > 1000) {\n                logger.warn(`network block skew detected; skipping block events (emitted=${this._emitted.block} blockNumber${blockNumber})`);\n                this.emit(\"error\", logger.makeError(\"network block skew detected\", Logger.errors.NETWORK_ERROR, {\n                    blockNumber: blockNumber,\n                    event: \"blockSkew\",\n                    previousBlockNumber: this._emitted.block\n                }));\n                this.emit(\"block\", blockNumber);\n            }\n            else {\n                // Notify all listener for each block that has passed\n                for (let i = this._emitted.block + 1; i <= blockNumber; i++) {\n                    this.emit(\"block\", i);\n                }\n            }\n            // The emitted block was updated, check for obsolete events\n            if (this._emitted.block !== blockNumber) {\n                this._emitted.block = blockNumber;\n                Object.keys(this._emitted).forEach((key) => {\n                    // The block event does not expire\n                    if (key === \"block\") {\n                        return;\n                    }\n                    // The block we were at when we emitted this event\n                    const eventBlockNumber = this._emitted[key];\n                    // We cannot garbage collect pending transactions or blocks here\n                    // They should be garbage collected by the Provider when setting\n                    // \"pending\" events\n                    if (eventBlockNumber === \"pending\") {\n                        return;\n                    }\n                    // Evict any transaction hashes or block hashes over 12 blocks\n                    // old, since they should not return null anyways\n                    if (blockNumber - eventBlockNumber > 12) {\n                        delete this._emitted[key];\n                    }\n                });\n            }\n            // First polling cycle\n            if (this._lastBlockNumber === -2) {\n                this._lastBlockNumber = blockNumber - 1;\n            }\n            // Find all transaction hashes we are waiting on\n            this._events.forEach((event) => {\n                switch (event.type) {\n                    case \"tx\": {\n                        const hash = event.hash;\n                        let runner = this.getTransactionReceipt(hash).then((receipt) => {\n                            if (!receipt || receipt.blockNumber == null) {\n                                return null;\n                            }\n                            this._emitted[\"t:\" + hash] = receipt.blockNumber;\n                            this.emit(hash, receipt);\n                            return null;\n                        }).catch((error) => { this.emit(\"error\", error); });\n                        runners.push(runner);\n                        break;\n                    }\n                    case \"filter\": {\n                        // We only allow a single getLogs to be in-flight at a time\n                        if (!event._inflight) {\n                            event._inflight = true;\n                            // This is the first filter for this event, so we want to\n                            // restrict events to events that happened no earlier than now\n                            if (event._lastBlockNumber === -2) {\n                                event._lastBlockNumber = blockNumber - 1;\n                            }\n                            // Filter from the last *known* event; due to load-balancing\n                            // and some nodes returning updated block numbers before\n                            // indexing events, a logs result with 0 entries cannot be\n                            // trusted and we must retry a range which includes it again\n                            const filter = event.filter;\n                            filter.fromBlock = event._lastBlockNumber + 1;\n                            filter.toBlock = blockNumber;\n                            // Prevent fitler ranges from growing too wild, since it is quite\n                            // likely there just haven't been any events to move the lastBlockNumber.\n                            const minFromBlock = filter.toBlock - this._maxFilterBlockRange;\n                            if (minFromBlock > filter.fromBlock) {\n                                filter.fromBlock = minFromBlock;\n                            }\n                            if (filter.fromBlock < 0) {\n                                filter.fromBlock = 0;\n                            }\n                            const runner = this.getLogs(filter).then((logs) => {\n                                // Allow the next getLogs\n                                event._inflight = false;\n                                if (logs.length === 0) {\n                                    return;\n                                }\n                                logs.forEach((log) => {\n                                    // Only when we get an event for a given block number\n                                    // can we trust the events are indexed\n                                    if (log.blockNumber > event._lastBlockNumber) {\n                                        event._lastBlockNumber = log.blockNumber;\n                                    }\n                                    // Make sure we stall requests to fetch blocks and txs\n                                    this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                                    this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n                                    this.emit(filter, log);\n                                });\n                            }).catch((error) => {\n                                this.emit(\"error\", error);\n                                // Allow another getLogs (the range was not updated)\n                                event._inflight = false;\n                            });\n                            runners.push(runner);\n                        }\n                        break;\n                    }\n                }\n            });\n            this._lastBlockNumber = blockNumber;\n            // Once all events for this loop have been processed, emit \"didPoll\"\n            Promise.all(runners).then(() => {\n                this.emit(\"didPoll\", pollId);\n            }).catch((error) => { this.emit(\"error\", error); });\n            return;\n        });\n    }\n    // Deprecated; do not use this\n    resetEventsBlock(blockNumber) {\n        this._lastBlockNumber = blockNumber - 1;\n        if (this.polling) {\n            this.poll();\n        }\n    }\n    get network() {\n        return this._network;\n    }\n    // This method should query the network if the underlying network\n    // can change, such as when connected to a JSON-RPC backend\n    detectNetwork() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return logger.throwError(\"provider does not support network detection\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"provider.detectNetwork\"\n            });\n        });\n    }\n    getNetwork() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const network = yield this._ready();\n            // Make sure we are still connected to the same network; this is\n            // only an external call for backends which can have the underlying\n            // network change spontaneously\n            const currentNetwork = yield this.detectNetwork();\n            if (network.chainId !== currentNetwork.chainId) {\n                // We are allowing network changes, things can get complex fast;\n                // make sure you know what you are doing if you use \"any\"\n                if (this.anyNetwork) {\n                    this._network = currentNetwork;\n                    // Reset all internal block number guards and caches\n                    this._lastBlockNumber = -2;\n                    this._fastBlockNumber = null;\n                    this._fastBlockNumberPromise = null;\n                    this._fastQueryDate = 0;\n                    this._emitted.block = -2;\n                    this._maxInternalBlockNumber = -1024;\n                    this._internalBlockNumber = null;\n                    // The \"network\" event MUST happen before this method resolves\n                    // so any events have a chance to unregister, so we stall an\n                    // additional event loop before returning from /this/ call\n                    this.emit(\"network\", currentNetwork, network);\n                    yield stall(0);\n                    return this._network;\n                }\n                const error = logger.makeError(\"underlying network changed\", Logger.errors.NETWORK_ERROR, {\n                    event: \"changed\",\n                    network: network,\n                    detectedNetwork: currentNetwork\n                });\n                this.emit(\"error\", error);\n                throw error;\n            }\n            return network;\n        });\n    }\n    get blockNumber() {\n        this._getInternalBlockNumber(100 + this.pollingInterval / 2).then((blockNumber) => {\n            this._setFastBlockNumber(blockNumber);\n        }, (error) => { });\n        return (this._fastBlockNumber != null) ? this._fastBlockNumber : -1;\n    }\n    get polling() {\n        return (this._poller != null);\n    }\n    set polling(value) {\n        if (value && !this._poller) {\n            this._poller = setInterval(() => { this.poll(); }, this.pollingInterval);\n            if (!this._bootstrapPoll) {\n                this._bootstrapPoll = setTimeout(() => {\n                    this.poll();\n                    // We block additional polls until the polling interval\n                    // is done, to prevent overwhelming the poll function\n                    this._bootstrapPoll = setTimeout(() => {\n                        // If polling was disabled, something may require a poke\n                        // since starting the bootstrap poll and it was disabled\n                        if (!this._poller) {\n                            this.poll();\n                        }\n                        // Clear out the bootstrap so we can do another\n                        this._bootstrapPoll = null;\n                    }, this.pollingInterval);\n                }, 0);\n            }\n        }\n        else if (!value && this._poller) {\n            clearInterval(this._poller);\n            this._poller = null;\n        }\n    }\n    get pollingInterval() {\n        return this._pollingInterval;\n    }\n    set pollingInterval(value) {\n        if (typeof (value) !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n            throw new Error(\"invalid polling interval\");\n        }\n        this._pollingInterval = value;\n        if (this._poller) {\n            clearInterval(this._poller);\n            this._poller = setInterval(() => { this.poll(); }, this._pollingInterval);\n        }\n    }\n    _getFastBlockNumber() {\n        const now = getTime();\n        // Stale block number, request a newer value\n        if ((now - this._fastQueryDate) > 2 * this._pollingInterval) {\n            this._fastQueryDate = now;\n            this._fastBlockNumberPromise = this.getBlockNumber().then((blockNumber) => {\n                if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n                    this._fastBlockNumber = blockNumber;\n                }\n                return this._fastBlockNumber;\n            });\n        }\n        return this._fastBlockNumberPromise;\n    }\n    _setFastBlockNumber(blockNumber) {\n        // Older block, maybe a stale request\n        if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {\n            return;\n        }\n        // Update the time we updated the blocknumber\n        this._fastQueryDate = getTime();\n        // Newer block number, use  it\n        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n            this._fastBlockNumber = blockNumber;\n            this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n        }\n    }\n    waitForTransaction(transactionHash, confirmations, timeout) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._waitForTransaction(transactionHash, (confirmations == null) ? 1 : confirmations, timeout || 0, null);\n        });\n    }\n    _waitForTransaction(transactionHash, confirmations, timeout, replaceable) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const receipt = yield this.getTransactionReceipt(transactionHash);\n            // Receipt is already good\n            if ((receipt ? receipt.confirmations : 0) >= confirmations) {\n                return receipt;\n            }\n            // Poll until the receipt is good...\n            return new Promise((resolve, reject) => {\n                const cancelFuncs = [];\n                let done = false;\n                const alreadyDone = function () {\n                    if (done) {\n                        return true;\n                    }\n                    done = true;\n                    cancelFuncs.forEach((func) => { func(); });\n                    return false;\n                };\n                const minedHandler = (receipt) => {\n                    if (receipt.confirmations < confirmations) {\n                        return;\n                    }\n                    if (alreadyDone()) {\n                        return;\n                    }\n                    resolve(receipt);\n                };\n                this.on(transactionHash, minedHandler);\n                cancelFuncs.push(() => { this.removeListener(transactionHash, minedHandler); });\n                if (replaceable) {\n                    let lastBlockNumber = replaceable.startBlock;\n                    let scannedBlock = null;\n                    const replaceHandler = (blockNumber) => __awaiter(this, void 0, void 0, function* () {\n                        if (done) {\n                            return;\n                        }\n                        // Wait 1 second; this is only used in the case of a fault, so\n                        // we will trade off a little bit of latency for more consistent\n                        // results and fewer JSON-RPC calls\n                        yield stall(1000);\n                        this.getTransactionCount(replaceable.from).then((nonce) => __awaiter(this, void 0, void 0, function* () {\n                            if (done) {\n                                return;\n                            }\n                            if (nonce <= replaceable.nonce) {\n                                lastBlockNumber = blockNumber;\n                            }\n                            else {\n                                // First check if the transaction was mined\n                                {\n                                    const mined = yield this.getTransaction(transactionHash);\n                                    if (mined && mined.blockNumber != null) {\n                                        return;\n                                    }\n                                }\n                                // First time scanning. We start a little earlier for some\n                                // wiggle room here to handle the eventually consistent nature\n                                // of blockchain (e.g. the getTransactionCount was for a\n                                // different block)\n                                if (scannedBlock == null) {\n                                    scannedBlock = lastBlockNumber - 3;\n                                    if (scannedBlock < replaceable.startBlock) {\n                                        scannedBlock = replaceable.startBlock;\n                                    }\n                                }\n                                while (scannedBlock <= blockNumber) {\n                                    if (done) {\n                                        return;\n                                    }\n                                    const block = yield this.getBlockWithTransactions(scannedBlock);\n                                    for (let ti = 0; ti < block.transactions.length; ti++) {\n                                        const tx = block.transactions[ti];\n                                        // Successfully mined!\n                                        if (tx.hash === transactionHash) {\n                                            return;\n                                        }\n                                        // Matches our transaction from and nonce; its a replacement\n                                        if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {\n                                            if (done) {\n                                                return;\n                                            }\n                                            // Get the receipt of the replacement\n                                            const receipt = yield this.waitForTransaction(tx.hash, confirmations);\n                                            // Already resolved or rejected (prolly a timeout)\n                                            if (alreadyDone()) {\n                                                return;\n                                            }\n                                            // The reason we were replaced\n                                            let reason = \"replaced\";\n                                            if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {\n                                                reason = \"repriced\";\n                                            }\n                                            else if (tx.data === \"0x\" && tx.from === tx.to && tx.value.isZero()) {\n                                                reason = \"cancelled\";\n                                            }\n                                            // Explain why we were replaced\n                                            reject(logger.makeError(\"transaction was replaced\", Logger.errors.TRANSACTION_REPLACED, {\n                                                cancelled: (reason === \"replaced\" || reason === \"cancelled\"),\n                                                reason,\n                                                replacement: this._wrapTransaction(tx),\n                                                hash: transactionHash,\n                                                receipt\n                                            }));\n                                            return;\n                                        }\n                                    }\n                                    scannedBlock++;\n                                }\n                            }\n                            if (done) {\n                                return;\n                            }\n                            this.once(\"block\", replaceHandler);\n                        }), (error) => {\n                            if (done) {\n                                return;\n                            }\n                            this.once(\"block\", replaceHandler);\n                        });\n                    });\n                    if (done) {\n                        return;\n                    }\n                    this.once(\"block\", replaceHandler);\n                    cancelFuncs.push(() => {\n                        this.removeListener(\"block\", replaceHandler);\n                    });\n                }\n                if (typeof (timeout) === \"number\" && timeout > 0) {\n                    const timer = setTimeout(() => {\n                        if (alreadyDone()) {\n                            return;\n                        }\n                        reject(logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, { timeout: timeout }));\n                    }, timeout);\n                    if (timer.unref) {\n                        timer.unref();\n                    }\n                    cancelFuncs.push(() => { clearTimeout(timer); });\n                }\n            });\n        });\n    }\n    getBlockNumber() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._getInternalBlockNumber(0);\n        });\n    }\n    getGasPrice() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const result = yield this.perform(\"getGasPrice\", {});\n            try {\n                return BigNumber.from(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"getGasPrice\",\n                    result, error\n                });\n            }\n        });\n    }\n    getBalance(addressOrName, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n            });\n            const result = yield this.perform(\"getBalance\", params);\n            try {\n                return BigNumber.from(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"getBalance\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    getTransactionCount(addressOrName, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n            });\n            const result = yield this.perform(\"getTransactionCount\", params);\n            try {\n                return BigNumber.from(result).toNumber();\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"getTransactionCount\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    getCode(addressOrName, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n            });\n            const result = yield this.perform(\"getCode\", params);\n            try {\n                return hexlify(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"getCode\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    getStorageAt(addressOrName, position, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag),\n                position: Promise.resolve(position).then((p) => hexValue(p))\n            });\n            const result = yield this.perform(\"getStorageAt\", params);\n            try {\n                return hexlify(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"getStorageAt\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    // This should be called by any subclass wrapping a TransactionResponse\n    _wrapTransaction(tx, hash, startBlock) {\n        if (hash != null && hexDataLength(hash) !== 32) {\n            throw new Error(\"invalid response - sendTransaction\");\n        }\n        const result = tx;\n        // Check the hash we expect is the same as the hash the server reported\n        if (hash != null && tx.hash !== hash) {\n            logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash });\n        }\n        result.wait = (confirms, timeout) => __awaiter(this, void 0, void 0, function* () {\n            if (confirms == null) {\n                confirms = 1;\n            }\n            if (timeout == null) {\n                timeout = 0;\n            }\n            // Get the details to detect replacement\n            let replacement = undefined;\n            if (confirms !== 0 && startBlock != null) {\n                replacement = {\n                    data: tx.data,\n                    from: tx.from,\n                    nonce: tx.nonce,\n                    to: tx.to,\n                    value: tx.value,\n                    startBlock\n                };\n            }\n            const receipt = yield this._waitForTransaction(tx.hash, confirms, timeout, replacement);\n            if (receipt == null && confirms === 0) {\n                return null;\n            }\n            // No longer pending, allow the polling loop to garbage collect this\n            this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n            if (receipt.status === 0) {\n                logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n                    transactionHash: tx.hash,\n                    transaction: tx,\n                    receipt: receipt\n                });\n            }\n            return receipt;\n        });\n        return result;\n    }\n    sendTransaction(signedTransaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const hexTx = yield Promise.resolve(signedTransaction).then(t => hexlify(t));\n            const tx = this.formatter.transaction(signedTransaction);\n            if (tx.confirmations == null) {\n                tx.confirmations = 0;\n            }\n            const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n            try {\n                const hash = yield this.perform(\"sendTransaction\", { signedTransaction: hexTx });\n                return this._wrapTransaction(tx, hash, blockNumber);\n            }\n            catch (error) {\n                error.transaction = tx;\n                error.transactionHash = tx.hash;\n                throw error;\n            }\n        });\n    }\n    _getTransactionRequest(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const values = yield transaction;\n            const tx = {};\n            [\"from\", \"to\"].forEach((key) => {\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v) => (v ? this._getAddress(v) : null));\n            });\n            [\"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"value\"].forEach((key) => {\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v) => (v ? BigNumber.from(v) : null));\n            });\n            [\"type\"].forEach((key) => {\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v) => ((v != null) ? v : null));\n            });\n            if (values.accessList) {\n                tx.accessList = this.formatter.accessList(values.accessList);\n            }\n            [\"data\"].forEach((key) => {\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v) => (v ? hexlify(v) : null));\n            });\n            return this.formatter.transactionRequest(yield resolveProperties(tx));\n        });\n    }\n    _getFilter(filter) {\n        return __awaiter(this, void 0, void 0, function* () {\n            filter = yield filter;\n            const result = {};\n            if (filter.address != null) {\n                result.address = this._getAddress(filter.address);\n            }\n            [\"blockHash\", \"topics\"].forEach((key) => {\n                if (filter[key] == null) {\n                    return;\n                }\n                result[key] = filter[key];\n            });\n            [\"fromBlock\", \"toBlock\"].forEach((key) => {\n                if (filter[key] == null) {\n                    return;\n                }\n                result[key] = this._getBlockTag(filter[key]);\n            });\n            return this.formatter.filter(yield resolveProperties(result));\n        });\n    }\n    _call(transaction, blockTag, attempt) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (attempt >= MAX_CCIP_REDIRECTS) {\n                logger.throwError(\"CCIP read exceeded maximum redirections\", Logger.errors.SERVER_ERROR, {\n                    redirects: attempt, transaction\n                });\n            }\n            const txSender = transaction.to;\n            const result = yield this.perform(\"call\", { transaction, blockTag });\n            // CCIP Read request via OffchainLookup(address,string[],bytes,bytes4,bytes)\n            if (attempt >= 0 && blockTag === \"latest\" && txSender != null && result.substring(0, 10) === \"0x556f1830\" && (hexDataLength(result) % 32 === 4)) {\n                try {\n                    const data = hexDataSlice(result, 4);\n                    // Check the sender of the OffchainLookup matches the transaction\n                    const sender = hexDataSlice(data, 0, 32);\n                    if (!BigNumber.from(sender).eq(txSender)) {\n                        logger.throwError(\"CCIP Read sender did not match\", Logger.errors.CALL_EXCEPTION, {\n                            name: \"OffchainLookup\",\n                            signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                            transaction, data: result\n                        });\n                    }\n                    // Read the URLs from the response\n                    const urls = [];\n                    const urlsOffset = BigNumber.from(hexDataSlice(data, 32, 64)).toNumber();\n                    const urlsLength = BigNumber.from(hexDataSlice(data, urlsOffset, urlsOffset + 32)).toNumber();\n                    const urlsData = hexDataSlice(data, urlsOffset + 32);\n                    for (let u = 0; u < urlsLength; u++) {\n                        const url = _parseString(urlsData, u * 32);\n                        if (url == null) {\n                            logger.throwError(\"CCIP Read contained corrupt URL string\", Logger.errors.CALL_EXCEPTION, {\n                                name: \"OffchainLookup\",\n                                signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                                transaction, data: result\n                            });\n                        }\n                        urls.push(url);\n                    }\n                    // Get the CCIP calldata to forward\n                    const calldata = _parseBytes(data, 64);\n                    // Get the callbackSelector (bytes4)\n                    if (!BigNumber.from(hexDataSlice(data, 100, 128)).isZero()) {\n                        logger.throwError(\"CCIP Read callback selector included junk\", Logger.errors.CALL_EXCEPTION, {\n                            name: \"OffchainLookup\",\n                            signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                            transaction, data: result\n                        });\n                    }\n                    const callbackSelector = hexDataSlice(data, 96, 100);\n                    // Get the extra data to send back to the contract as context\n                    const extraData = _parseBytes(data, 128);\n                    const ccipResult = yield this.ccipReadFetch(transaction, calldata, urls);\n                    if (ccipResult == null) {\n                        logger.throwError(\"CCIP Read disabled or provided no URLs\", Logger.errors.CALL_EXCEPTION, {\n                            name: \"OffchainLookup\",\n                            signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                            transaction, data: result\n                        });\n                    }\n                    const tx = {\n                        to: txSender,\n                        data: hexConcat([callbackSelector, encodeBytes([ccipResult, extraData])])\n                    };\n                    return this._call(tx, blockTag, attempt + 1);\n                }\n                catch (error) {\n                    if (error.code === Logger.errors.SERVER_ERROR) {\n                        throw error;\n                    }\n                }\n            }\n            try {\n                return hexlify(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"call\",\n                    params: { transaction, blockTag }, result, error\n                });\n            }\n        });\n    }\n    call(transaction, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const resolved = yield resolveProperties({\n                transaction: this._getTransactionRequest(transaction),\n                blockTag: this._getBlockTag(blockTag),\n                ccipReadEnabled: Promise.resolve(transaction.ccipReadEnabled)\n            });\n            return this._call(resolved.transaction, resolved.blockTag, resolved.ccipReadEnabled ? 0 : -1);\n        });\n    }\n    estimateGas(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                transaction: this._getTransactionRequest(transaction)\n            });\n            const result = yield this.perform(\"estimateGas\", params);\n            try {\n                return BigNumber.from(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"estimateGas\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    _getAddress(addressOrName) {\n        return __awaiter(this, void 0, void 0, function* () {\n            addressOrName = yield addressOrName;\n            if (typeof (addressOrName) !== \"string\") {\n                logger.throwArgumentError(\"invalid address or ENS name\", \"name\", addressOrName);\n            }\n            const address = yield this.resolveName(addressOrName);\n            if (address == null) {\n                logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: `resolveName(${JSON.stringify(addressOrName)})`\n                });\n            }\n            return address;\n        });\n    }\n    _getBlock(blockHashOrBlockTag, includeTransactions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            blockHashOrBlockTag = yield blockHashOrBlockTag;\n            // If blockTag is a number (not \"latest\", etc), this is the block number\n            let blockNumber = -128;\n            const params = {\n                includeTransactions: !!includeTransactions\n            };\n            if (isHexString(blockHashOrBlockTag, 32)) {\n                params.blockHash = blockHashOrBlockTag;\n            }\n            else {\n                try {\n                    params.blockTag = yield this._getBlockTag(blockHashOrBlockTag);\n                    if (isHexString(params.blockTag)) {\n                        blockNumber = parseInt(params.blockTag.substring(2), 16);\n                    }\n                }\n                catch (error) {\n                    logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n                }\n            }\n            return poll(() => __awaiter(this, void 0, void 0, function* () {\n                const block = yield this.perform(\"getBlock\", params);\n                // Block was not found\n                if (block == null) {\n                    // For blockhashes, if we didn't say it existed, that blockhash may\n                    // not exist. If we did see it though, perhaps from a log, we know\n                    // it exists, and this node is just not caught up yet.\n                    if (params.blockHash != null) {\n                        if (this._emitted[\"b:\" + params.blockHash] == null) {\n                            return null;\n                        }\n                    }\n                    // For block tags, if we are asking for a future block, we return null\n                    if (params.blockTag != null) {\n                        if (blockNumber > this._emitted.block) {\n                            return null;\n                        }\n                    }\n                    // Retry on the next block\n                    return undefined;\n                }\n                // Add transactions\n                if (includeTransactions) {\n                    let blockNumber = null;\n                    for (let i = 0; i < block.transactions.length; i++) {\n                        const tx = block.transactions[i];\n                        if (tx.blockNumber == null) {\n                            tx.confirmations = 0;\n                        }\n                        else if (tx.confirmations == null) {\n                            if (blockNumber == null) {\n                                blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                            }\n                            // Add the confirmations using the fast block number (pessimistic)\n                            let confirmations = (blockNumber - tx.blockNumber) + 1;\n                            if (confirmations <= 0) {\n                                confirmations = 1;\n                            }\n                            tx.confirmations = confirmations;\n                        }\n                    }\n                    const blockWithTxs = this.formatter.blockWithTransactions(block);\n                    blockWithTxs.transactions = blockWithTxs.transactions.map((tx) => this._wrapTransaction(tx));\n                    return blockWithTxs;\n                }\n                return this.formatter.block(block);\n            }), { oncePoll: this });\n        });\n    }\n    getBlock(blockHashOrBlockTag) {\n        return (this._getBlock(blockHashOrBlockTag, false));\n    }\n    getBlockWithTransactions(blockHashOrBlockTag) {\n        return (this._getBlock(blockHashOrBlockTag, true));\n    }\n    getTransaction(transactionHash) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            transactionHash = yield transactionHash;\n            const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n            return poll(() => __awaiter(this, void 0, void 0, function* () {\n                const result = yield this.perform(\"getTransaction\", params);\n                if (result == null) {\n                    if (this._emitted[\"t:\" + transactionHash] == null) {\n                        return null;\n                    }\n                    return undefined;\n                }\n                const tx = this.formatter.transactionResponse(result);\n                if (tx.blockNumber == null) {\n                    tx.confirmations = 0;\n                }\n                else if (tx.confirmations == null) {\n                    const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                    // Add the confirmations using the fast block number (pessimistic)\n                    let confirmations = (blockNumber - tx.blockNumber) + 1;\n                    if (confirmations <= 0) {\n                        confirmations = 1;\n                    }\n                    tx.confirmations = confirmations;\n                }\n                return this._wrapTransaction(tx);\n            }), { oncePoll: this });\n        });\n    }\n    getTransactionReceipt(transactionHash) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            transactionHash = yield transactionHash;\n            const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n            return poll(() => __awaiter(this, void 0, void 0, function* () {\n                const result = yield this.perform(\"getTransactionReceipt\", params);\n                if (result == null) {\n                    if (this._emitted[\"t:\" + transactionHash] == null) {\n                        return null;\n                    }\n                    return undefined;\n                }\n                // \"geth-etc\" returns receipts before they are ready\n                if (result.blockHash == null) {\n                    return undefined;\n                }\n                const receipt = this.formatter.receipt(result);\n                if (receipt.blockNumber == null) {\n                    receipt.confirmations = 0;\n                }\n                else if (receipt.confirmations == null) {\n                    const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                    // Add the confirmations using the fast block number (pessimistic)\n                    let confirmations = (blockNumber - receipt.blockNumber) + 1;\n                    if (confirmations <= 0) {\n                        confirmations = 1;\n                    }\n                    receipt.confirmations = confirmations;\n                }\n                return receipt;\n            }), { oncePoll: this });\n        });\n    }\n    getLogs(filter) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({ filter: this._getFilter(filter) });\n            const logs = yield this.perform(\"getLogs\", params);\n            logs.forEach((log) => {\n                if (log.removed == null) {\n                    log.removed = false;\n                }\n            });\n            return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);\n        });\n    }\n    getEtherPrice() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            return this.perform(\"getEtherPrice\", {});\n        });\n    }\n    _getBlockTag(blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            blockTag = yield blockTag;\n            if (typeof (blockTag) === \"number\" && blockTag < 0) {\n                if (blockTag % 1) {\n                    logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n                }\n                let blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                blockNumber += blockTag;\n                if (blockNumber < 0) {\n                    blockNumber = 0;\n                }\n                return this.formatter.blockTag(blockNumber);\n            }\n            return this.formatter.blockTag(blockTag);\n        });\n    }\n    getResolver(name) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let currentName = name;\n            while (true) {\n                if (currentName === \"\" || currentName === \".\") {\n                    return null;\n                }\n                // Optimization since the eth node cannot change and does\n                // not have a wildcard resolver\n                if (name !== \"eth\" && currentName === \"eth\") {\n                    return null;\n                }\n                // Check the current node for a resolver\n                const addr = yield this._getResolver(currentName, \"getResolver\");\n                // Found a resolver!\n                if (addr != null) {\n                    const resolver = new Resolver(this, addr, name);\n                    // Legacy resolver found, using EIP-2544 so it isn't safe to use\n                    if (currentName !== name && !(yield resolver.supportsWildcard())) {\n                        return null;\n                    }\n                    return resolver;\n                }\n                // Get the parent node\n                currentName = currentName.split(\".\").slice(1).join(\".\");\n            }\n        });\n    }\n    _getResolver(name, operation) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (operation == null) {\n                operation = \"ENS\";\n            }\n            const network = yield this.getNetwork();\n            // No ENS...\n            if (!network.ensAddress) {\n                logger.throwError(\"network does not support ENS\", Logger.errors.UNSUPPORTED_OPERATION, { operation, network: network.name });\n            }\n            try {\n                // keccak256(\"resolver(bytes32)\")\n                const addrData = yield this.call({\n                    to: network.ensAddress,\n                    data: (\"0x0178b8bf\" + namehash(name).substring(2))\n                });\n                return this.formatter.callAddress(addrData);\n            }\n            catch (error) {\n                // ENS registry cannot throw errors on resolver(bytes32)\n            }\n            return null;\n        });\n    }\n    resolveName(name) {\n        return __awaiter(this, void 0, void 0, function* () {\n            name = yield name;\n            // If it is already an address, nothing to resolve\n            try {\n                return Promise.resolve(this.formatter.address(name));\n            }\n            catch (error) {\n                // If is is a hexstring, the address is bad (See #694)\n                if (isHexString(name)) {\n                    throw error;\n                }\n            }\n            if (typeof (name) !== \"string\") {\n                logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n            }\n            // Get the addr from the resolver\n            const resolver = yield this.getResolver(name);\n            if (!resolver) {\n                return null;\n            }\n            return yield resolver.getAddress();\n        });\n    }\n    lookupAddress(address) {\n        return __awaiter(this, void 0, void 0, function* () {\n            address = yield address;\n            address = this.formatter.address(address);\n            const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n            const resolverAddr = yield this._getResolver(node, \"lookupAddress\");\n            if (resolverAddr == null) {\n                return null;\n            }\n            // keccak(\"name(bytes32)\")\n            const name = _parseString(yield this.call({\n                to: resolverAddr,\n                data: (\"0x691f3431\" + namehash(node).substring(2))\n            }), 0);\n            const addr = yield this.resolveName(name);\n            if (addr != address) {\n                return null;\n            }\n            return name;\n        });\n    }\n    getAvatar(nameOrAddress) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let resolver = null;\n            if (isHexString(nameOrAddress)) {\n                // Address; reverse lookup\n                const address = this.formatter.address(nameOrAddress);\n                const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n                const resolverAddress = yield this._getResolver(node, \"getAvatar\");\n                if (!resolverAddress) {\n                    return null;\n                }\n                // Try resolving the avatar against the addr.reverse resolver\n                resolver = new Resolver(this, resolverAddress, node);\n                try {\n                    const avatar = yield resolver.getAvatar();\n                    if (avatar) {\n                        return avatar.url;\n                    }\n                }\n                catch (error) {\n                    if (error.code !== Logger.errors.CALL_EXCEPTION) {\n                        throw error;\n                    }\n                }\n                // Try getting the name and performing forward lookup; allowing wildcards\n                try {\n                    // keccak(\"name(bytes32)\")\n                    const name = _parseString(yield this.call({\n                        to: resolverAddress,\n                        data: (\"0x691f3431\" + namehash(node).substring(2))\n                    }), 0);\n                    resolver = yield this.getResolver(name);\n                }\n                catch (error) {\n                    if (error.code !== Logger.errors.CALL_EXCEPTION) {\n                        throw error;\n                    }\n                    return null;\n                }\n            }\n            else {\n                // ENS name; forward lookup with wildcard\n                resolver = yield this.getResolver(nameOrAddress);\n                if (!resolver) {\n                    return null;\n                }\n            }\n            const avatar = yield resolver.getAvatar();\n            if (avatar == null) {\n                return null;\n            }\n            return avatar.url;\n        });\n    }\n    perform(method, params) {\n        return logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n    }\n    _startEvent(event) {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n    _stopEvent(event) {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n    _addEventListener(eventName, listener, once) {\n        const event = new Event(getEventTag(eventName), listener, once);\n        this._events.push(event);\n        this._startEvent(event);\n        return this;\n    }\n    on(eventName, listener) {\n        return this._addEventListener(eventName, listener, false);\n    }\n    once(eventName, listener) {\n        return this._addEventListener(eventName, listener, true);\n    }\n    emit(eventName, ...args) {\n        let result = false;\n        let stopped = [];\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag) {\n                return true;\n            }\n            setTimeout(() => {\n                event.listener.apply(this, args);\n            }, 0);\n            result = true;\n            if (event.once) {\n                stopped.push(event);\n                return false;\n            }\n            return true;\n        });\n        stopped.forEach((event) => { this._stopEvent(event); });\n        return result;\n    }\n    listenerCount(eventName) {\n        if (!eventName) {\n            return this._events.length;\n        }\n        let eventTag = getEventTag(eventName);\n        return this._events.filter((event) => {\n            return (event.tag === eventTag);\n        }).length;\n    }\n    listeners(eventName) {\n        if (eventName == null) {\n            return this._events.map((event) => event.listener);\n        }\n        let eventTag = getEventTag(eventName);\n        return this._events\n            .filter((event) => (event.tag === eventTag))\n            .map((event) => event.listener);\n    }\n    off(eventName, listener) {\n        if (listener == null) {\n            return this.removeAllListeners(eventName);\n        }\n        const stopped = [];\n        let found = false;\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag || event.listener != listener) {\n                return true;\n            }\n            if (found) {\n                return true;\n            }\n            found = true;\n            stopped.push(event);\n            return false;\n        });\n        stopped.forEach((event) => { this._stopEvent(event); });\n        return this;\n    }\n    removeAllListeners(eventName) {\n        let stopped = [];\n        if (eventName == null) {\n            stopped = this._events;\n            this._events = [];\n        }\n        else {\n            const eventTag = getEventTag(eventName);\n            this._events = this._events.filter((event) => {\n                if (event.tag !== eventTag) {\n                    return true;\n                }\n                stopped.push(event);\n                return false;\n            });\n        }\n        stopped.forEach((event) => { this._stopEvent(event); });\n        return this;\n    }\n}\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,SAAS,GAAI,IAAI,IAAI,IAAI,CAACA,SAAS,IAAK,UAAUC,OAAO,EAAEC,UAAU,EAAEC,CAAC,EAAEC,SAAS,EAAE;EACrF,SAASC,KAAK,CAACC,KAAK,EAAE;IAAE,OAAOA,KAAK,YAAYH,CAAC,GAAGG,KAAK,GAAG,IAAIH,CAAC,CAAC,UAAUI,OAAO,EAAE;MAAEA,OAAO,CAACD,KAAK,CAAC;IAAE,CAAC,CAAC;EAAE;EAC3G,OAAO,KAAKH,CAAC,KAAKA,CAAC,GAAGK,OAAO,CAAC,EAAE,UAAUD,OAAO,EAAEE,MAAM,EAAE;IACvD,SAASC,SAAS,CAACJ,KAAK,EAAE;MAAE,IAAI;QAAEK,IAAI,CAACP,SAAS,CAACQ,IAAI,CAACN,KAAK,CAAC,CAAC;MAAE,CAAC,CAAC,OAAOO,CAAC,EAAE;QAAEJ,MAAM,CAACI,CAAC,CAAC;MAAE;IAAE;IAC1F,SAASC,QAAQ,CAACR,KAAK,EAAE;MAAE,IAAI;QAAEK,IAAI,CAACP,SAAS,CAAC,OAAO,CAAC,CAACE,KAAK,CAAC,CAAC;MAAE,CAAC,CAAC,OAAOO,CAAC,EAAE;QAAEJ,MAAM,CAACI,CAAC,CAAC;MAAE;IAAE;IAC7F,SAASF,IAAI,CAACI,MAAM,EAAE;MAAEA,MAAM,CAACC,IAAI,GAAGT,OAAO,CAACQ,MAAM,CAACT,KAAK,CAAC,GAAGD,KAAK,CAACU,MAAM,CAACT,KAAK,CAAC,CAACW,IAAI,CAACP,SAAS,EAAEI,QAAQ,CAAC;IAAE;IAC7GH,IAAI,CAAC,CAACP,SAAS,GAAGA,SAAS,CAACc,KAAK,CAACjB,OAAO,EAAEC,UAAU,IAAI,EAAE,CAAC,EAAEU,IAAI,EAAE,CAAC;EACzE,CAAC,CAAC;AACN,CAAC;AACD,SAASO,SAAS,EAAEC,QAAQ,QAAQ,kCAAkC;AACtE,SAASC,MAAM,IAAIC,YAAY,QAAQ,uBAAuB;AAC9D,SAASC,MAAM,QAAQ,sBAAsB;AAC7C,SAASC,SAAS,QAAQ,0BAA0B;AACpD,SAASC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,EAAEC,aAAa,EAAEC,YAAY,EAAEC,OAAO,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,WAAW,QAAQ,sBAAsB;AAC3I,SAASC,QAAQ,QAAQ,0BAA0B;AACnD,SAASC,SAAS,EAAEC,QAAQ,QAAQ,qBAAqB;AACzD,SAASC,UAAU,QAAQ,yBAAyB;AACpD,SAASC,cAAc,EAAEC,SAAS,EAAEC,iBAAiB,QAAQ,2BAA2B;AACxF,SAASC,MAAM,QAAQ,qBAAqB;AAC5C,SAASC,WAAW,EAAEC,YAAY,QAAQ,wBAAwB;AAClE,SAASC,SAAS,EAAEC,IAAI,QAAQ,oBAAoB;AACpD,OAAOC,MAAM,MAAM,QAAQ;AAC3B,SAASC,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,OAAO,QAAQ,YAAY;AACpC,MAAMC,MAAM,GAAG,IAAIF,MAAM,CAACC,OAAO,CAAC;AAClC,SAASE,SAAS,QAAQ,aAAa;AACvC,MAAMC,kBAAkB,GAAG,EAAE;AAC7B;AACA;AACA,SAASC,UAAU,CAACC,KAAK,EAAE;EACvB,IAAIA,KAAK,IAAI,IAAI,EAAE;IACf,OAAO,MAAM;EACjB;EACA,IAAIzB,aAAa,CAACyB,KAAK,CAAC,KAAK,EAAE,EAAE;IAC7BJ,MAAM,CAACK,kBAAkB,CAAC,eAAe,EAAE,OAAO,EAAED,KAAK,CAAC;EAC9D;EACA,OAAOA,KAAK,CAACE,WAAW,EAAE;AAC9B;AACA,SAASC,eAAe,CAACC,MAAM,EAAE;EAC7B;EACAA,MAAM,GAAGA,MAAM,CAACC,KAAK,EAAE;EACvB,OAAOD,MAAM,CAACE,MAAM,GAAG,CAAC,IAAIF,MAAM,CAACA,MAAM,CAACE,MAAM,GAAG,CAAC,CAAC,IAAI,IAAI,EAAE;IAC3DF,MAAM,CAACG,GAAG,EAAE;EAChB;EACA,OAAOH,MAAM,CAACI,GAAG,CAAER,KAAK,IAAK;IACzB,IAAIS,KAAK,CAACC,OAAO,CAACV,KAAK,CAAC,EAAE;MACtB;MACA,MAAMW,MAAM,GAAG,CAAC,CAAC;MACjBX,KAAK,CAACY,OAAO,CAAEZ,KAAK,IAAK;QACrBW,MAAM,CAACZ,UAAU,CAACC,KAAK,CAAC,CAAC,GAAG,IAAI;MACpC,CAAC,CAAC;MACF;MACA,MAAMa,MAAM,GAAGC,MAAM,CAACC,IAAI,CAACJ,MAAM,CAAC;MAClCE,MAAM,CAACG,IAAI,EAAE;MACb,OAAOH,MAAM,CAACI,IAAI,CAAC,GAAG,CAAC;IAC3B,CAAC,MACI;MACD,OAAOlB,UAAU,CAACC,KAAK,CAAC;IAC5B;EACJ,CAAC,CAAC,CAACiB,IAAI,CAAC,GAAG,CAAC;AAChB;AACA,SAASC,iBAAiB,CAACC,IAAI,EAAE;EAC7B,IAAIA,IAAI,KAAK,EAAE,EAAE;IACb,OAAO,EAAE;EACb;EACA,OAAOA,IAAI,CAACC,KAAK,CAAC,IAAI,CAAC,CAACZ,GAAG,CAAER,KAAK,IAAK;IACnC,IAAIA,KAAK,KAAK,EAAE,EAAE;MACd,OAAO,EAAE;IACb;IACA,MAAMqB,KAAK,GAAGrB,KAAK,CAACoB,KAAK,CAAC,GAAG,CAAC,CAACZ,GAAG,CAAER,KAAK,IAAK;MAC1C,OAASA,KAAK,KAAK,MAAM,GAAI,IAAI,GAAGA,KAAK;IAC7C,CAAC,CAAC;IACF,OAASqB,KAAK,CAACf,MAAM,KAAK,CAAC,GAAIe,KAAK,CAAC,CAAC,CAAC,GAAGA,KAAK;EACnD,CAAC,CAAC;AACN;AACA,SAASC,WAAW,CAACC,SAAS,EAAE;EAC5B,IAAI,OAAQA,SAAU,KAAK,QAAQ,EAAE;IACjCA,SAAS,GAAGA,SAAS,CAACrB,WAAW,EAAE;IACnC,IAAI3B,aAAa,CAACgD,SAAS,CAAC,KAAK,EAAE,EAAE;MACjC,OAAO,KAAK,GAAGA,SAAS;IAC5B;IACA,IAAIA,SAAS,CAACC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;MAC/B,OAAOD,SAAS;IACpB;EACJ,CAAC,MACI,IAAId,KAAK,CAACC,OAAO,CAACa,SAAS,CAAC,EAAE;IAC/B,OAAO,WAAW,GAAGpB,eAAe,CAACoB,SAAS,CAAC;EACnD,CAAC,MACI,IAAIzD,SAAS,CAAC2D,WAAW,CAACF,SAAS,CAAC,EAAE;IACvC3B,MAAM,CAAC8B,IAAI,CAAC,iBAAiB,CAAC;IAC9B,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;EACtC,CAAC,MACI,IAAIJ,SAAS,IAAI,OAAQA,SAAU,KAAK,QAAQ,EAAE;IACnD,OAAO,SAAS,IAAIA,SAAS,CAACK,OAAO,IAAI,GAAG,CAAC,GAAG,GAAG,GAAGzB,eAAe,CAACoB,SAAS,CAACnB,MAAM,IAAI,EAAE,CAAC;EACjG;EACA,MAAM,IAAIuB,KAAK,CAAC,kBAAkB,GAAGJ,SAAS,CAAC;AACnD;AACA;AACA;AACA,SAASM,OAAO,GAAG;EACf,OAAQ,IAAIC,IAAI,EAAE,CAAED,OAAO,EAAE;AACjC;AACA,SAASE,KAAK,CAACC,QAAQ,EAAE;EACrB,OAAO,IAAI7E,OAAO,CAAED,OAAO,IAAK;IAC5B+E,UAAU,CAAC/E,OAAO,EAAE8E,QAAQ,CAAC;EACjC,CAAC,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,cAAc,GAAG,CAAC,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,MAAM,CAAC;AAC9D,OAAO,MAAMC,KAAK,CAAC;EACfC,WAAW,CAACC,GAAG,EAAEC,QAAQ,EAAEC,IAAI,EAAE;IAC7BtD,cAAc,CAAC,IAAI,EAAE,KAAK,EAAEoD,GAAG,CAAC;IAChCpD,cAAc,CAAC,IAAI,EAAE,UAAU,EAAEqD,QAAQ,CAAC;IAC1CrD,cAAc,CAAC,IAAI,EAAE,MAAM,EAAEsD,IAAI,CAAC;IAClC,IAAI,CAACC,gBAAgB,GAAG,CAAC,CAAC;IAC1B,IAAI,CAACC,SAAS,GAAG,KAAK;EAC1B;EACA,IAAIC,KAAK,GAAG;IACR,QAAQ,IAAI,CAACC,IAAI;MACb,KAAK,IAAI;QACL,OAAO,IAAI,CAACC,IAAI;MACpB,KAAK,QAAQ;QACT,OAAO,IAAI,CAACC,MAAM;IAAC;IAE3B,OAAO,IAAI,CAACR,GAAG;EACnB;EACA,IAAIM,IAAI,GAAG;IACP,OAAO,IAAI,CAACN,GAAG,CAACjB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EACjC;EACA,IAAIwB,IAAI,GAAG;IACP,MAAMvB,KAAK,GAAG,IAAI,CAACgB,GAAG,CAACjB,KAAK,CAAC,GAAG,CAAC;IACjC,IAAIC,KAAK,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;MACnB,OAAO,IAAI;IACf;IACA,OAAOA,KAAK,CAAC,CAAC,CAAC;EACnB;EACA,IAAIwB,MAAM,GAAG;IACT,MAAMxB,KAAK,GAAG,IAAI,CAACgB,GAAG,CAACjB,KAAK,CAAC,GAAG,CAAC;IACjC,IAAIC,KAAK,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;MACvB,OAAO,IAAI;IACf;IACA,MAAMO,OAAO,GAAGP,KAAK,CAAC,CAAC,CAAC;IACxB,MAAMjB,MAAM,GAAGc,iBAAiB,CAACG,KAAK,CAAC,CAAC,CAAC,CAAC;IAC1C,MAAMwB,MAAM,GAAG,CAAC,CAAC;IACjB,IAAIzC,MAAM,CAACE,MAAM,GAAG,CAAC,EAAE;MACnBuC,MAAM,CAACzC,MAAM,GAAGA,MAAM;IAC1B;IACA,IAAIwB,OAAO,IAAIA,OAAO,KAAK,GAAG,EAAE;MAC5BiB,MAAM,CAACjB,OAAO,GAAGA,OAAO;IAC5B;IACA,OAAOiB,MAAM;EACjB;EACAC,QAAQ,GAAG;IACP,OAAQ,IAAI,CAACT,GAAG,CAACb,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAIU,cAAc,CAACV,OAAO,CAAC,IAAI,CAACa,GAAG,CAAC,IAAI,CAAC;EAC/E;AACJ;AACA;AACA;AACA,MAAMU,SAAS,GAAG;EACd,GAAG,EAAE;IAAEC,MAAM,EAAE,KAAK;IAAEC,KAAK,EAAE,IAAI;IAAEC,IAAI,EAAE,IAAI;IAAEC,MAAM,EAAE;EAAK,CAAC;EAC7D,GAAG,EAAE;IAAEH,MAAM,EAAE,KAAK;IAAEC,KAAK,EAAE,IAAI;IAAEC,IAAI,EAAE,IAAI;IAAEC,MAAM,EAAE;EAAM,CAAC;EAC9D,GAAG,EAAE;IAAEH,MAAM,EAAE,MAAM;IAAEC,KAAK,EAAE,IAAI;IAAEC,IAAI,EAAE;EAAK,CAAC;EAChD,IAAI,EAAE;IAAEF,MAAM,EAAE,KAAK;IAAEI,GAAG,EAAE;EAAM,CAAC;EACnC,IAAI,EAAE;IAAEJ,MAAM,EAAE,KAAK;IAAEI,GAAG,EAAE;EAAM,CAAC;EACnC,KAAK,EAAE;IAAEJ,MAAM,EAAE,MAAM;IAAEI,GAAG,EAAE;EAAM;AACxC,CAAC;AACD,SAASC,UAAU,CAACpG,KAAK,EAAE;EACvB,OAAO0B,UAAU,CAACR,SAAS,CAACmF,IAAI,CAACrG,KAAK,CAAC,CAACsG,WAAW,EAAE,EAAE,EAAE,CAAC;AAC9D;AACA;AACA,SAASC,YAAY,CAACrC,IAAI,EAAE;EACxB,OAAOjD,MAAM,CAACF,MAAM,CAACK,MAAM,CAAC,CAAC8C,IAAI,EAAE3C,YAAY,CAACY,MAAM,CAACA,MAAM,CAAC+B,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AAClF;AACA,MAAMsC,WAAW,GAAG,IAAIC,MAAM,CAAC,kBAAkB,EAAE,GAAG,CAAC;AACvD,MAAMC,QAAQ,GAAG,CACb,IAAID,MAAM,CAAC,mBAAmB,EAAE,GAAG,CAAC,EACpC,IAAIA,MAAM,CAAC,eAAe,EAAE,GAAG,CAAC,EAChCD,WAAW,EACX,IAAIC,MAAM,CAAC,kCAAkC,EAAE,GAAG,CAAC,CACtD;AACD,SAASE,YAAY,CAAClG,MAAM,EAAEmG,KAAK,EAAE;EACjC,IAAI;IACA,OAAOvE,YAAY,CAACwE,WAAW,CAACpG,MAAM,EAAEmG,KAAK,CAAC,CAAC;EACnD,CAAC,CACD,OAAOE,KAAK,EAAE,CAAE;EAChB,OAAO,IAAI;AACf;AACA,SAASD,WAAW,CAACpG,MAAM,EAAEmG,KAAK,EAAE;EAChC,IAAInG,MAAM,KAAK,IAAI,EAAE;IACjB,OAAO,IAAI;EACf;EACA,MAAMsG,MAAM,GAAG7F,SAAS,CAACmF,IAAI,CAAC9E,YAAY,CAACd,MAAM,EAAEmG,KAAK,EAAEA,KAAK,GAAG,EAAE,CAAC,CAAC,CAACI,QAAQ,EAAE;EACjF,MAAM3D,MAAM,GAAGnC,SAAS,CAACmF,IAAI,CAAC9E,YAAY,CAACd,MAAM,EAAEsG,MAAM,EAAEA,MAAM,GAAG,EAAE,CAAC,CAAC,CAACC,QAAQ,EAAE;EACnF,OAAOzF,YAAY,CAACd,MAAM,EAAEsG,MAAM,GAAG,EAAE,EAAEA,MAAM,GAAG,EAAE,GAAG1D,MAAM,CAAC;AAClE;AACA;AACA,SAAS4D,WAAW,CAACC,IAAI,EAAE;EACvB,IAAIA,IAAI,CAACC,KAAK,CAAC,mBAAmB,CAAC,EAAE;IACjCD,IAAI,GAAGA,IAAI,CAACE,SAAS,CAAC,EAAE,CAAC;EAC7B,CAAC,MACI,IAAIF,IAAI,CAACC,KAAK,CAAC,aAAa,CAAC,EAAE;IAChCD,IAAI,GAAGA,IAAI,CAACE,SAAS,CAAC,CAAC,CAAC;EAC5B,CAAC,MACI;IACDzE,MAAM,CAACK,kBAAkB,CAAC,yBAAyB,EAAE,MAAM,EAAEkE,IAAI,CAAC;EACtE;EACA,OAAQ,iCAAgCA,IAAK,EAAC;AAClD;AACA,SAASG,MAAM,CAACrH,KAAK,EAAE;EACnB,MAAMS,MAAM,GAAGU,QAAQ,CAACnB,KAAK,CAAC;EAC9B,IAAIS,MAAM,CAAC4C,MAAM,GAAG,EAAE,EAAE;IACpB,MAAM,IAAIqB,KAAK,CAAC,6BAA6B,CAAC;EAClD;EACA,MAAM4C,MAAM,GAAG,IAAIC,UAAU,CAAC,EAAE,CAAC;EACjCD,MAAM,CAACE,GAAG,CAAC/G,MAAM,EAAE,EAAE,GAAGA,MAAM,CAAC4C,MAAM,CAAC;EACtC,OAAOiE,MAAM;AACjB;AACA,SAASG,QAAQ,CAACzH,KAAK,EAAE;EACrB,IAAKA,KAAK,CAACqD,MAAM,GAAG,EAAE,KAAM,CAAC,EAAE;IAC3B,OAAOrD,KAAK;EAChB;EACA,MAAMS,MAAM,GAAG,IAAI8G,UAAU,CAACG,IAAI,CAACC,IAAI,CAAC3H,KAAK,CAACqD,MAAM,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC;EAChE5C,MAAM,CAAC+G,GAAG,CAACxH,KAAK,CAAC;EACjB,OAAOS,MAAM;AACjB;AACA;AACA,SAASmH,WAAW,CAACC,KAAK,EAAE;EACxB,MAAMpH,MAAM,GAAG,EAAE;EACjB,IAAIqH,SAAS,GAAG,CAAC;EACjB;EACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAACxE,MAAM,EAAE0E,CAAC,EAAE,EAAE;IACnCtH,MAAM,CAACuH,IAAI,CAAC,IAAI,CAAC;IACjBF,SAAS,IAAI,EAAE;EACnB;EACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAACxE,MAAM,EAAE0E,CAAC,EAAE,EAAE;IACnC,MAAM7D,IAAI,GAAG/C,QAAQ,CAAC0G,KAAK,CAACE,CAAC,CAAC,CAAC;IAC/B;IACAtH,MAAM,CAACsH,CAAC,CAAC,GAAGV,MAAM,CAACS,SAAS,CAAC;IAC7B;IACArH,MAAM,CAACuH,IAAI,CAACX,MAAM,CAACnD,IAAI,CAACb,MAAM,CAAC,CAAC;IAChC5C,MAAM,CAACuH,IAAI,CAACP,QAAQ,CAACvD,IAAI,CAAC,CAAC;IAC3B4D,SAAS,IAAI,EAAE,GAAGJ,IAAI,CAACC,IAAI,CAACzD,IAAI,CAACb,MAAM,GAAG,EAAE,CAAC,GAAG,EAAE;EACtD;EACA,OAAOhC,SAAS,CAACZ,MAAM,CAAC;AAC5B;AACA,OAAO,MAAMwH,QAAQ,CAAC;EAClB;EACA9C,WAAW,CAAC+C,QAAQ,EAAEvD,OAAO,EAAEwD,IAAI,EAAEC,eAAe,EAAE;IAClDpG,cAAc,CAAC,IAAI,EAAE,UAAU,EAAEkG,QAAQ,CAAC;IAC1ClG,cAAc,CAAC,IAAI,EAAE,MAAM,EAAEmG,IAAI,CAAC;IAClCnG,cAAc,CAAC,IAAI,EAAE,SAAS,EAAEkG,QAAQ,CAACG,SAAS,CAAC1D,OAAO,CAACA,OAAO,CAAC,CAAC;IACpE3C,cAAc,CAAC,IAAI,EAAE,kBAAkB,EAAEoG,eAAe,CAAC;EAC7D;EACAE,gBAAgB,GAAG;IACf,IAAI,CAAC,IAAI,CAACC,gBAAgB,EAAE;MACxB;MACA,IAAI,CAACA,gBAAgB,GAAG,IAAI,CAACL,QAAQ,CAACM,IAAI,CAAC;QACvCC,EAAE,EAAE,IAAI,CAAC9D,OAAO;QAChBT,IAAI,EAAE;MACV,CAAC,CAAC,CAACvD,IAAI,CAAEF,MAAM,IAAK;QAChB,OAAOS,SAAS,CAACmF,IAAI,CAAC5F,MAAM,CAAC,CAACiI,EAAE,CAAC,CAAC,CAAC;MACvC,CAAC,CAAC,CAACC,KAAK,CAAE7B,KAAK,IAAK;QAChB,IAAIA,KAAK,CAAC8B,IAAI,KAAKnG,MAAM,CAACoG,MAAM,CAACC,cAAc,EAAE;UAC7C,OAAO,KAAK;QAChB;QACA;QACA,IAAI,CAACP,gBAAgB,GAAG,IAAI;QAC5B,MAAMzB,KAAK;MACf,CAAC,CAAC;IACN;IACA,OAAO,IAAI,CAACyB,gBAAgB;EAChC;EACAQ,MAAM,CAACC,QAAQ,EAAEC,UAAU,EAAE;IACzB,OAAOvJ,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD;MACA,MAAMwJ,EAAE,GAAG;QACPT,EAAE,EAAE,IAAI,CAAC9D,OAAO;QAChBwE,eAAe,EAAE,IAAI;QACrBjF,IAAI,EAAE7C,SAAS,CAAC,CAAC2H,QAAQ,EAAElH,QAAQ,CAAC,IAAI,CAACqG,IAAI,CAAC,EAAGc,UAAU,IAAI,IAAI,CAAE;MACzE,CAAC;MACD;MACA,IAAIG,UAAU,GAAG,KAAK;MACtB,IAAI,MAAM,IAAI,CAACd,gBAAgB,EAAE,EAAE;QAC/Bc,UAAU,GAAG,IAAI;QACjB;QACAF,EAAE,CAAChF,IAAI,GAAG7C,SAAS,CAAC,CAAC,YAAY,EAAEuG,WAAW,CAAC,CAAC/F,SAAS,CAAC,IAAI,CAACsG,IAAI,CAAC,EAAEe,EAAE,CAAChF,IAAI,CAAC,CAAC,CAAC,CAAC;MACrF;MACA,IAAI;QACA,IAAIzD,MAAM,GAAG,MAAM,IAAI,CAACyH,QAAQ,CAACM,IAAI,CAACU,EAAE,CAAC;QACzC,IAAK/H,QAAQ,CAACV,MAAM,CAAC,CAAC4C,MAAM,GAAG,EAAE,KAAM,CAAC,EAAE;UACtCV,MAAM,CAAC0G,UAAU,CAAC,sBAAsB,EAAE5G,MAAM,CAACoG,MAAM,CAACC,cAAc,EAAE;YACpEQ,WAAW,EAAEJ,EAAE;YAAEhF,IAAI,EAAEzD;UAC3B,CAAC,CAAC;QACN;QACA,IAAI2I,UAAU,EAAE;UACZ3I,MAAM,GAAGoG,WAAW,CAACpG,MAAM,EAAE,CAAC,CAAC;QACnC;QACA,OAAOA,MAAM;MACjB,CAAC,CACD,OAAOqG,KAAK,EAAE;QACV,IAAIA,KAAK,CAAC8B,IAAI,KAAKnG,MAAM,CAACoG,MAAM,CAACC,cAAc,EAAE;UAC7C,OAAO,IAAI;QACf;QACA,MAAMhC,KAAK;MACf;IACJ,CAAC,CAAC;EACN;EACAyC,WAAW,CAACP,QAAQ,EAAEC,UAAU,EAAE;IAC9B,OAAOvJ,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD,MAAMe,MAAM,GAAG,MAAM,IAAI,CAACsI,MAAM,CAACC,QAAQ,EAAEC,UAAU,CAAC;MACtD,IAAIxI,MAAM,IAAI,IAAI,EAAE;QAChB,OAAOoG,WAAW,CAACpG,MAAM,EAAE,CAAC,CAAC;MACjC;MACA,OAAO,IAAI;IACf,CAAC,CAAC;EACN;EACA+I,WAAW,CAACC,QAAQ,EAAEC,QAAQ,EAAE;IAC5B,MAAMC,QAAQ,GAAG7D,SAAS,CAAC8D,MAAM,CAACH,QAAQ,CAAC,CAAC;IAC5C,IAAIE,QAAQ,IAAI,IAAI,EAAE;MAClBhH,MAAM,CAAC0G,UAAU,CAAE,0BAAyBI,QAAS,EAAC,EAAEhH,MAAM,CAACoG,MAAM,CAACgB,qBAAqB,EAAE;QACzFC,SAAS,EAAG,cAAaL,QAAS;MACtC,CAAC,CAAC;IACN;IACA,IAAIE,QAAQ,CAACxD,GAAG,KAAK,KAAK,EAAE;MACxB,OAAO,IAAI,CAAC+B,QAAQ,CAACG,SAAS,CAAC1D,OAAO,CAAC+E,QAAQ,CAAC;IACpD;IACA,MAAMK,KAAK,GAAG5I,QAAQ,CAACuI,QAAQ,CAAC;IAChC;IACA,IAAIC,QAAQ,CAAC3D,KAAK,IAAI,IAAI,EAAE;MACxB,MAAMA,KAAK,GAAG0D,QAAQ,CAACvC,KAAK,CAAC,2CAA2C,CAAC;MACzE,IAAInB,KAAK,EAAE;QACP,MAAM3C,MAAM,GAAG2G,QAAQ,CAAChE,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;QACrC,IAAIA,KAAK,CAAC,CAAC,CAAC,CAAC3C,MAAM,KAAKA,MAAM,GAAG,CAAC,IAAIA,MAAM,IAAI,CAAC,IAAIA,MAAM,IAAI,EAAE,EAAE;UAC/D,OAAOkD,YAAY,CAACnF,MAAM,CAAC,CAAC,CAACuI,QAAQ,CAAC3D,KAAK,CAAC,EAAG,IAAI,GAAGA,KAAK,CAAC,CAAC,CAAC,CAAE,CAAC,CAAC;QACtE;MACJ;IACJ;IACA;IACA,IAAI2D,QAAQ,CAAC1D,IAAI,IAAI,IAAI,EAAE;MACvB,MAAMA,IAAI,GAAGyD,QAAQ,CAACvC,KAAK,CAAC,uCAAuC,CAAC;MACpE,IAAIlB,IAAI,EAAE;QACN,MAAM5C,MAAM,GAAG2G,QAAQ,CAAC/D,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;QACpC,IAAIA,IAAI,CAAC,CAAC,CAAC,CAAC5C,MAAM,KAAKA,MAAM,GAAG,CAAC,IAAIA,MAAM,IAAI,CAAC,IAAIA,MAAM,IAAI,EAAE,EAAE;UAC9D,OAAOkD,YAAY,CAACnF,MAAM,CAAC,CAAC,CAACuI,QAAQ,CAAC1D,IAAI,CAAC,EAAG,IAAI,GAAGA,IAAI,CAAC,CAAC,CAAC,CAAE,CAAC,CAAC;QACpE;MACJ;IACJ;IACA;IACA,IAAI0D,QAAQ,CAACzD,MAAM,IAAI,IAAI,EAAE;MACzB,MAAM7C,MAAM,GAAG0G,KAAK,CAAC,CAAC,CAAC;MACvB;MACA,IAAIrH,OAAO,GAAGqH,KAAK,CAAC,CAAC,CAAC;MACtB,IAAIrH,OAAO,KAAK,IAAI,EAAE;QAClB,IAAIW,MAAM,KAAK,EAAE,IAAIA,MAAM,KAAK,EAAE,EAAE;UAChCX,OAAO,GAAG,CAAC,CAAC;QAChB;MACJ,CAAC,MACI;QACDA,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAIA,OAAO,IAAI,CAAC,IAAIqH,KAAK,CAAC1G,MAAM,KAAK,CAAC,GAAGA,MAAM,IAAIA,MAAM,IAAI,CAAC,IAAIA,MAAM,IAAI,EAAE,EAAE;QAC5E,MAAM4G,KAAK,GAAGzH,MAAM,CAAC0H,OAAO,CAACH,KAAK,CAAC3G,KAAK,CAAC,CAAC,CAAC,CAAC;QAC5C6G,KAAK,CAACE,OAAO,CAACzH,OAAO,CAAC;QACtB,OAAOF,MAAM,CAACzB,MAAM,CAAC4I,QAAQ,CAACzD,MAAM,EAAE+D,KAAK,CAAC;MAChD;IACJ;IACA,OAAO,IAAI;EACf;EACAG,UAAU,CAACX,QAAQ,EAAE;IACjB,OAAO/J,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD,IAAI+J,QAAQ,IAAI,IAAI,EAAE;QAClBA,QAAQ,GAAG,EAAE;MACjB;MACA;MACA,IAAIA,QAAQ,KAAK,EAAE,EAAE;QACjB,IAAI;UACA;UACA,MAAMhJ,MAAM,GAAG,MAAM,IAAI,CAACsI,MAAM,CAAC,YAAY,CAAC;UAC9C;UACA,IAAItI,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAKmB,QAAQ,EAAE;YACxC,OAAO,IAAI;UACf;UACA,OAAO,IAAI,CAACsG,QAAQ,CAACG,SAAS,CAACgC,WAAW,CAAC5J,MAAM,CAAC;QACtD,CAAC,CACD,OAAOqG,KAAK,EAAE;UACV,IAAIA,KAAK,CAAC8B,IAAI,KAAKnG,MAAM,CAACoG,MAAM,CAACC,cAAc,EAAE;YAC7C,OAAO,IAAI;UACf;UACA,MAAMhC,KAAK;QACf;MACJ;MACA;MACA,MAAM4C,QAAQ,GAAG,MAAM,IAAI,CAACH,WAAW,CAAC,YAAY,EAAEnD,UAAU,CAACqD,QAAQ,CAAC,CAAC;MAC3E;MACA,IAAIC,QAAQ,IAAI,IAAI,IAAIA,QAAQ,KAAK,IAAI,EAAE;QACvC,OAAO,IAAI;MACf;MACA;MACA,MAAM/E,OAAO,GAAG,IAAI,CAAC6E,WAAW,CAACC,QAAQ,EAAEC,QAAQ,CAAC;MACpD,IAAI/E,OAAO,IAAI,IAAI,EAAE;QACjBhC,MAAM,CAAC0G,UAAU,CAAE,kCAAiC,EAAE5G,MAAM,CAACoG,MAAM,CAACgB,qBAAqB,EAAE;UACvFC,SAAS,EAAG,cAAaL,QAAS,GAAE;UACpCA,QAAQ,EAAEA,QAAQ;UAClBvF,IAAI,EAAEwF;QACV,CAAC,CAAC;MACN;MACA,OAAO/E,OAAO;IAClB,CAAC,CAAC;EACN;EACA2F,SAAS,GAAG;IACR,OAAO5K,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD,MAAM6K,OAAO,GAAG,CAAC;QAAE7E,IAAI,EAAE,MAAM;QAAE8E,OAAO,EAAE,IAAI,CAACrC;MAAK,CAAC,CAAC;MACtD,IAAI;QACA;QACA;QACA,MAAMsC,MAAM,GAAG,MAAM,IAAI,CAACC,OAAO,CAAC,QAAQ,CAAC;QAC3C,IAAID,MAAM,IAAI,IAAI,EAAE;UAChB,OAAO,IAAI;QACf;QACA,KAAK,IAAI1C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGrB,QAAQ,CAACrD,MAAM,EAAE0E,CAAC,EAAE,EAAE;UACtC,MAAMZ,KAAK,GAAGsD,MAAM,CAACtD,KAAK,CAACT,QAAQ,CAACqB,CAAC,CAAC,CAAC;UACvC,IAAIZ,KAAK,IAAI,IAAI,EAAE;YACf;UACJ;UACA,MAAMwD,MAAM,GAAGxD,KAAK,CAAC,CAAC,CAAC,CAAClE,WAAW,EAAE;UACrC,QAAQ0H,MAAM;YACV,KAAK,OAAO;cACRJ,OAAO,CAACvC,IAAI,CAAC;gBAAEtC,IAAI,EAAE,KAAK;gBAAE8E,OAAO,EAAEC;cAAO,CAAC,CAAC;cAC9C,OAAO;gBAAEF,OAAO;gBAAEK,GAAG,EAAEH;cAAO,CAAC;YACnC,KAAK,MAAM;cACPF,OAAO,CAACvC,IAAI,CAAC;gBAAEtC,IAAI,EAAE,MAAM;gBAAE8E,OAAO,EAAEC;cAAO,CAAC,CAAC;cAC/C,OAAO;gBAAEF,OAAO;gBAAEK,GAAG,EAAEH;cAAO,CAAC;YACnC,KAAK,MAAM;cACPF,OAAO,CAACvC,IAAI,CAAC;gBAAEtC,IAAI,EAAE,MAAM;gBAAE8E,OAAO,EAAEC;cAAO,CAAC,CAAC;cAC/C,OAAO;gBAAEF,OAAO;gBAAEK,GAAG,EAAE3D,WAAW,CAACwD,MAAM;cAAE,CAAC;YAChD,KAAK,QAAQ;YACb,KAAK,SAAS;cAAE;gBACZ;gBACA,MAAMzB,QAAQ,GAAI2B,MAAM,KAAK,QAAQ,GAAI,YAAY,GAAG,YAAY;gBACpEJ,OAAO,CAACvC,IAAI,CAAC;kBAAEtC,IAAI,EAAEiF,MAAM;kBAAEH,OAAO,EAAEC;gBAAO,CAAC,CAAC;gBAC/C;gBACA,MAAMI,KAAK,GAAI,IAAI,CAACC,gBAAgB,KAAK,MAAM,IAAI,CAACV,UAAU,EAAE,CAAE;gBAClE,MAAMhG,KAAK,GAAG,CAAC+C,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE,EAAEhD,KAAK,CAAC,GAAG,CAAC;gBACzC,IAAIC,KAAK,CAACf,MAAM,KAAK,CAAC,EAAE;kBACpB,OAAO,IAAI;gBACf;gBACA,MAAM0H,IAAI,GAAG,MAAM,IAAI,CAAC7C,QAAQ,CAACG,SAAS,CAAC1D,OAAO,CAACP,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC5D,MAAM4G,OAAO,GAAGtJ,UAAU,CAACR,SAAS,CAACmF,IAAI,CAACjC,KAAK,CAAC,CAAC,CAAC,CAAC,CAACkC,WAAW,EAAE,EAAE,EAAE,CAAC;gBACtE;gBACA,IAAIqE,MAAM,KAAK,QAAQ,EAAE;kBACrB;kBACA,MAAMM,UAAU,GAAG,IAAI,CAAC/C,QAAQ,CAACG,SAAS,CAACgC,WAAW,CAAC,MAAM,IAAI,CAACnC,QAAQ,CAACM,IAAI,CAAC;oBAC5EC,EAAE,EAAEsC,IAAI;oBAAE7G,IAAI,EAAE7C,SAAS,CAAC,CAAC,YAAY,EAAE2J,OAAO,CAAC;kBACrD,CAAC,CAAC,CAAC;kBACH,IAAIH,KAAK,KAAKI,UAAU,EAAE;oBACtB,OAAO,IAAI;kBACf;kBACAV,OAAO,CAACvC,IAAI,CAAC;oBAAEtC,IAAI,EAAE,OAAO;oBAAE8E,OAAO,EAAES;kBAAW,CAAC,CAAC;gBACxD,CAAC,MACI,IAAIN,MAAM,KAAK,SAAS,EAAE;kBAC3B;kBACA,MAAMO,OAAO,GAAGhK,SAAS,CAACmF,IAAI,CAAC,MAAM,IAAI,CAAC6B,QAAQ,CAACM,IAAI,CAAC;oBACpDC,EAAE,EAAEsC,IAAI;oBAAE7G,IAAI,EAAE7C,SAAS,CAAC,CAAC,YAAY,EAAEK,UAAU,CAACmJ,KAAK,EAAE,EAAE,CAAC,EAAEG,OAAO,CAAC;kBAC5E,CAAC,CAAC,CAAC;kBACH,IAAIE,OAAO,CAACC,MAAM,EAAE,EAAE;oBAClB,OAAO,IAAI;kBACf;kBACAZ,OAAO,CAACvC,IAAI,CAAC;oBAAEtC,IAAI,EAAE,SAAS;oBAAE8E,OAAO,EAAEU,OAAO,CAACE,QAAQ;kBAAG,CAAC,CAAC;gBAClE;gBACA;gBACA,MAAMlC,EAAE,GAAG;kBACPT,EAAE,EAAE,IAAI,CAACP,QAAQ,CAACG,SAAS,CAAC1D,OAAO,CAACP,KAAK,CAAC,CAAC,CAAC,CAAC;kBAC7CF,IAAI,EAAE7C,SAAS,CAAC,CAAC2H,QAAQ,EAAEgC,OAAO,CAAC;gBACvC,CAAC;gBACD,IAAIK,WAAW,GAAG1E,YAAY,CAAC,MAAM,IAAI,CAACuB,QAAQ,CAACM,IAAI,CAACU,EAAE,CAAC,EAAE,CAAC,CAAC;gBAC/D,IAAImC,WAAW,IAAI,IAAI,EAAE;kBACrB,OAAO,IAAI;gBACf;gBACAd,OAAO,CAACvC,IAAI,CAAC;kBAAEtC,IAAI,EAAE,mBAAmB;kBAAE8E,OAAO,EAAEa;gBAAY,CAAC,CAAC;gBACjE;gBACA,IAAIV,MAAM,KAAK,SAAS,EAAE;kBACtBU,WAAW,GAAGA,WAAW,CAACC,OAAO,CAAC,MAAM,EAAEN,OAAO,CAAC5D,SAAS,CAAC,CAAC,CAAC,CAAC;kBAC/DmD,OAAO,CAACvC,IAAI,CAAC;oBAAEtC,IAAI,EAAE,uBAAuB;oBAAE8E,OAAO,EAAEa;kBAAY,CAAC,CAAC;gBACzE;gBACA;gBACA,IAAIA,WAAW,CAAClE,KAAK,CAAC,SAAS,CAAC,EAAE;kBAC9BkE,WAAW,GAAGpE,WAAW,CAACoE,WAAW,CAAC;gBAC1C;gBACAd,OAAO,CAACvC,IAAI,CAAC;kBAAEtC,IAAI,EAAE,cAAc;kBAAE8E,OAAO,EAAEa;gBAAY,CAAC,CAAC;gBAC5D;gBACA,MAAME,QAAQ,GAAG,MAAMjJ,SAAS,CAAC+I,WAAW,CAAC;gBAC7C,IAAI,CAACE,QAAQ,EAAE;kBACX,OAAO,IAAI;gBACf;gBACAhB,OAAO,CAACvC,IAAI,CAAC;kBAAEtC,IAAI,EAAE,UAAU;kBAAE8E,OAAO,EAAEgB,IAAI,CAACC,SAAS,CAACF,QAAQ;gBAAE,CAAC,CAAC;gBACrE;gBACA,IAAIG,QAAQ,GAAGH,QAAQ,CAACI,KAAK;gBAC7B,IAAI,OAAQD,QAAS,KAAK,QAAQ,EAAE;kBAChC,OAAO,IAAI;gBACf;gBACA,IAAIA,QAAQ,CAACvE,KAAK,CAAC,sBAAsB,CAAC,EAAE;kBACxC;gBAAA,CACH,MACI;kBACD;kBACA,MAAMyE,IAAI,GAAGF,QAAQ,CAACvE,KAAK,CAACX,WAAW,CAAC;kBACxC,IAAIoF,IAAI,IAAI,IAAI,EAAE;oBACd,OAAO,IAAI;kBACf;kBACArB,OAAO,CAACvC,IAAI,CAAC;oBAAEtC,IAAI,EAAE,UAAU;oBAAE8E,OAAO,EAAEkB;kBAAS,CAAC,CAAC;kBACrDA,QAAQ,GAAGzE,WAAW,CAACyE,QAAQ,CAAC;gBACpC;gBACAnB,OAAO,CAACvC,IAAI,CAAC;kBAAEtC,IAAI,EAAE,KAAK;kBAAE8E,OAAO,EAAEkB;gBAAS,CAAC,CAAC;gBAChD,OAAO;kBAAEnB,OAAO;kBAAEK,GAAG,EAAEc;gBAAS,CAAC;cACrC;UAAC;QAET;MACJ,CAAC,CACD,OAAO5E,KAAK,EAAE,CAAE;MAChB,OAAO,IAAI;IACf,CAAC,CAAC;EACN;EACA+E,cAAc,GAAG;IACb,OAAOnM,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD;MACA,MAAMgK,QAAQ,GAAG,MAAM,IAAI,CAACH,WAAW,CAAC,YAAY,CAAC;MACrD;MACA,IAAIG,QAAQ,IAAI,IAAI,IAAIA,QAAQ,KAAK,IAAI,EAAE;QACvC,OAAO,IAAI;MACf;MACA;MACA,MAAMkC,IAAI,GAAGlC,QAAQ,CAACvC,KAAK,CAAC,+DAA+D,CAAC;MAC5F,IAAIyE,IAAI,EAAE;QACN,MAAMvI,MAAM,GAAG2G,QAAQ,CAAC4B,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;QACpC,IAAIA,IAAI,CAAC,CAAC,CAAC,CAACvI,MAAM,KAAKA,MAAM,GAAG,CAAC,EAAE;UAC/B,OAAO,UAAU,GAAGpC,MAAM,CAACF,MAAM,CAAC,IAAI,GAAG6K,IAAI,CAAC,CAAC,CAAC,CAAC;QACrD;MACJ;MACA;MACA,MAAME,IAAI,GAAGpC,QAAQ,CAACvC,KAAK,CAAC,+DAA+D,CAAC;MAC5F,IAAI2E,IAAI,EAAE;QACN,MAAMzI,MAAM,GAAG2G,QAAQ,CAAC8B,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;QACpC,IAAIA,IAAI,CAAC,CAAC,CAAC,CAACzI,MAAM,KAAKA,MAAM,GAAG,CAAC,EAAE;UAC/B,OAAO,UAAU,GAAGpC,MAAM,CAACF,MAAM,CAAC,IAAI,GAAG+K,IAAI,CAAC,CAAC,CAAC,CAAC;QACrD;MACJ;MACA;MACA,MAAMC,KAAK,GAAGrC,QAAQ,CAACvC,KAAK,CAAC,+BAA+B,CAAC;MAC7D,IAAI4E,KAAK,EAAE;QACP,IAAIA,KAAK,CAAC,CAAC,CAAC,CAAC1I,MAAM,KAAM,EAAE,GAAG,CAAE,EAAE;UAC9B,OAAO,SAAS,GAAG0I,KAAK,CAAC,CAAC,CAAC;QAC/B;MACJ;MACA,MAAMC,MAAM,GAAGtC,QAAQ,CAACvC,KAAK,CAAC,yBAAyB,CAAC;MACxD,IAAI6E,MAAM,EAAE;QACR,IAAIA,MAAM,CAAC,CAAC,CAAC,CAAC3I,MAAM,KAAM,EAAE,GAAG,CAAE,EAAE;UAC/B;UACA,MAAM4I,OAAO,GAAG;YAAE,GAAG,EAAE,EAAE;YAAE,GAAG,EAAE,GAAG;YAAE,GAAG,EAAE;UAAI,CAAC;UAC/C,MAAMtG,IAAI,GAAG3E,YAAY,CAAC,IAAI,GAAGgL,MAAM,CAAC,CAAC,CAAC,CAAC,CAACV,OAAO,CAAC,SAAS,EAAGY,CAAC,IAAMD,OAAO,CAACC,CAAC,CAAE,CAAC;UACnF,OAAO,SAAS,GAAGvG,IAAI;QAC3B;MACJ;MACA,OAAOhD,MAAM,CAAC0G,UAAU,CAAE,0CAAyC,EAAE5G,MAAM,CAACoG,MAAM,CAACgB,qBAAqB,EAAE;QACtGC,SAAS,EAAE,kBAAkB;QAC7B5F,IAAI,EAAEwF;MACV,CAAC,CAAC;IACN,CAAC,CAAC;EACN;EACAgB,OAAO,CAACyB,GAAG,EAAE;IACT,OAAOzM,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD;MACA,IAAI0M,QAAQ,GAAGhK,WAAW,CAAC+J,GAAG,CAAC;MAC/B;MACA;MACAC,QAAQ,GAAGhL,MAAM,CAAC,CAACgF,UAAU,CAAC,EAAE,CAAC,EAAEA,UAAU,CAACgG,QAAQ,CAAC/I,MAAM,CAAC,EAAE+I,QAAQ,CAAC,CAAC;MAC1E;MACA,IAAKA,QAAQ,CAAC/I,MAAM,GAAG,EAAE,KAAM,CAAC,EAAE;QAC9B+I,QAAQ,GAAGhL,MAAM,CAAC,CAACgL,QAAQ,EAAE1K,UAAU,CAAC,IAAI,EAAE,EAAE,GAAIyK,GAAG,CAAC9I,MAAM,GAAG,EAAG,CAAC,CAAC,CAAC;MAC3E;MACA,MAAMqG,QAAQ,GAAG,MAAM,IAAI,CAACH,WAAW,CAAC,YAAY,EAAE/H,OAAO,CAAC4K,QAAQ,CAAC,CAAC;MACxE,IAAI1C,QAAQ,IAAI,IAAI,IAAIA,QAAQ,KAAK,IAAI,EAAE;QACvC,OAAO,IAAI;MACf;MACA,OAAOrH,YAAY,CAACqH,QAAQ,CAAC;IACjC,CAAC,CAAC;EACN;AACJ;AACA,IAAI2C,gBAAgB,GAAG,IAAI;AAC3B,IAAIC,UAAU,GAAG,CAAC;AAClB,OAAO,MAAMC,YAAY,SAASzL,QAAQ,CAAC;EACvC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIqE,WAAW,CAACqH,OAAO,EAAE;IACjB,KAAK,EAAE;IACP;IACA,IAAI,CAACC,OAAO,GAAG,EAAE;IACjB,IAAI,CAACC,QAAQ,GAAG;MAAEC,KAAK,EAAE,CAAC;IAAE,CAAC;IAC7B,IAAI,CAACC,eAAe,GAAG,KAAK;IAC5B,IAAI,CAACvE,SAAS,GAAGwE,GAAG,CAACC,MAAM,CAACC,YAAY,EAAE;IAC1C;IACA;IACA;IACA/K,cAAc,CAAC,IAAI,EAAE,YAAY,EAAGwK,OAAO,KAAK,KAAK,CAAE;IACvD,IAAI,IAAI,CAACQ,UAAU,EAAE;MACjBR,OAAO,GAAG,IAAI,CAACS,aAAa,EAAE;IAClC;IACA,IAAIT,OAAO,YAAYtM,OAAO,EAAE;MAC5B,IAAI,CAACgN,eAAe,GAAGV,OAAO;MAC9B;MACAA,OAAO,CAAC7D,KAAK,CAAE7B,KAAK,IAAK,CAAE,CAAC,CAAC;MAC7B;MACA,IAAI,CAACqG,MAAM,EAAE,CAACxE,KAAK,CAAE7B,KAAK,IAAK,CAAE,CAAC,CAAC;IACvC,CAAC,MACI;MACD,MAAMsG,YAAY,GAAGnL,SAAS,CAAC4K,GAAG,CAACC,MAAM,EAAE,YAAY,CAAC,CAACN,OAAO,CAAC;MACjE,IAAIY,YAAY,EAAE;QACdpL,cAAc,CAAC,IAAI,EAAE,UAAU,EAAEoL,YAAY,CAAC;QAC9C,IAAI,CAACC,IAAI,CAAC,SAAS,EAAED,YAAY,EAAE,IAAI,CAAC;MAC5C,CAAC,MACI;QACDzK,MAAM,CAACK,kBAAkB,CAAC,iBAAiB,EAAE,SAAS,EAAEwJ,OAAO,CAAC;MACpE;IACJ;IACA,IAAI,CAACc,uBAAuB,GAAG,CAAC,IAAI;IACpC,IAAI,CAAC/H,gBAAgB,GAAG,CAAC,CAAC;IAC1B,IAAI,CAACgI,oBAAoB,GAAG,EAAE;IAC9B,IAAI,CAACC,gBAAgB,GAAG,IAAI;IAC5B,IAAI,CAACC,cAAc,GAAG,CAAC;EAC3B;EACAN,MAAM,GAAG;IACL,OAAOzN,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD,IAAI,IAAI,CAACgO,QAAQ,IAAI,IAAI,EAAE;QACvB,IAAIlB,OAAO,GAAG,IAAI;QAClB,IAAI,IAAI,CAACU,eAAe,EAAE;UACtB,IAAI;YACAV,OAAO,GAAG,MAAM,IAAI,CAACU,eAAe;UACxC,CAAC,CACD,OAAOpG,KAAK,EAAE,CAAE;QACpB;QACA;QACA,IAAI0F,OAAO,IAAI,IAAI,EAAE;UACjBA,OAAO,GAAG,MAAM,IAAI,CAACS,aAAa,EAAE;QACxC;QACA;QACA;QACA,IAAI,CAACT,OAAO,EAAE;UACV7J,MAAM,CAAC0G,UAAU,CAAC,qBAAqB,EAAE5G,MAAM,CAACoG,MAAM,CAAC8E,aAAa,EAAE,CAAC,CAAC,CAAC;QAC7E;QACA;QACA,IAAI,IAAI,CAACD,QAAQ,IAAI,IAAI,EAAE;UACvB,IAAI,IAAI,CAACV,UAAU,EAAE;YACjB,IAAI,CAACU,QAAQ,GAAGlB,OAAO;UAC3B,CAAC,MACI;YACDxK,cAAc,CAAC,IAAI,EAAE,UAAU,EAAEwK,OAAO,CAAC;UAC7C;UACA,IAAI,CAACa,IAAI,CAAC,SAAS,EAAEb,OAAO,EAAE,IAAI,CAAC;QACvC;MACJ;MACA,OAAO,IAAI,CAACkB,QAAQ;IACxB,CAAC,CAAC;EACN;EACA;EACA;EACA;EACA,IAAIE,KAAK,GAAG;IACR,OAAOrL,IAAI,CAAC,MAAM;MACd,OAAO,IAAI,CAAC4K,MAAM,EAAE,CAACxM,IAAI,CAAE6L,OAAO,IAAK;QACnC,OAAOA,OAAO;MAClB,CAAC,EAAG1F,KAAK,IAAK;QACV;QACA,IAAIA,KAAK,CAAC8B,IAAI,KAAKnG,MAAM,CAACoG,MAAM,CAACgF,aAAa,IAAI/G,KAAK,CAACrB,KAAK,KAAK,WAAW,EAAE;UAC3E,OAAOqI,SAAS;QACpB;QACA,MAAMhH,KAAK;MACf,CAAC,CAAC;IACN,CAAC,CAAC;EACN;EACA;EACA,OAAOiG,YAAY,GAAG;IAClB,IAAIV,gBAAgB,IAAI,IAAI,EAAE;MAC1BA,gBAAgB,GAAG,IAAIzJ,SAAS,EAAE;IACtC;IACA,OAAOyJ,gBAAgB;EAC3B;EACA;EACA,OAAOtK,UAAU,CAACyK,OAAO,EAAE;IACvB,OAAOzK,UAAU,CAAEyK,OAAO,IAAI,IAAI,GAAI,WAAW,GAAGA,OAAO,CAAC;EAChE;EACAuB,aAAa,CAAC7E,EAAE,EAAE8E,QAAQ,EAAEC,IAAI,EAAE;IAC9B,OAAOvO,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD,IAAI,IAAI,CAACkN,eAAe,IAAIqB,IAAI,CAAC5K,MAAM,KAAK,CAAC,EAAE;QAC3C,OAAO,IAAI;MACf;MACA,MAAM6K,MAAM,GAAGhF,EAAE,CAACT,EAAE,CAACxF,WAAW,EAAE;MAClC,MAAMiB,IAAI,GAAG8J,QAAQ,CAAC/K,WAAW,EAAE;MACnC,MAAMkL,aAAa,GAAG,EAAE;MACxB,KAAK,IAAIpG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkG,IAAI,CAAC5K,MAAM,EAAE0E,CAAC,EAAE,EAAE;QAClC,MAAM6C,GAAG,GAAGqD,IAAI,CAAClG,CAAC,CAAC;QACnB;QACA,MAAMqG,IAAI,GAAGxD,GAAG,CAACU,OAAO,CAAC,UAAU,EAAE4C,MAAM,CAAC,CAAC5C,OAAO,CAAC,QAAQ,EAAEpH,IAAI,CAAC;QACpE;QACA,MAAMmK,IAAI,GAAIzD,GAAG,CAACrG,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAI,IAAI,GAAGiH,IAAI,CAACC,SAAS,CAAC;UAAEvH,IAAI;UAAEgK;QAAO,CAAC,CAAC;QACnF,MAAMzN,MAAM,GAAG,MAAM6B,SAAS,CAAC;UAAEsI,GAAG,EAAEwD,IAAI;UAAEE,gBAAgB,EAAE;QAAK,CAAC,EAAED,IAAI,EAAE,CAACrO,KAAK,EAAEuO,QAAQ,KAAK;UAC7FvO,KAAK,CAACwO,MAAM,GAAGD,QAAQ,CAACE,UAAU;UAClC,OAAOzO,KAAK;QAChB,CAAC,CAAC;QACF,IAAIS,MAAM,CAACyD,IAAI,EAAE;UACb,OAAOzD,MAAM,CAACyD,IAAI;QACtB;QACA,MAAMwK,YAAY,GAAIjO,MAAM,CAACkO,OAAO,IAAI,eAAgB;QACxD;QACA,IAAIlO,MAAM,CAAC+N,MAAM,IAAI,GAAG,IAAI/N,MAAM,CAAC+N,MAAM,GAAG,GAAG,EAAE;UAC7C,OAAO7L,MAAM,CAAC0G,UAAU,CAAE,yCAAwCqF,YAAa,EAAC,EAAEjM,MAAM,CAACoG,MAAM,CAAC+F,YAAY,EAAE;YAAEhE,GAAG;YAAE8D;UAAa,CAAC,CAAC;QACxI;QACA;QACAP,aAAa,CAACnG,IAAI,CAAC0G,YAAY,CAAC;MACpC;MACA,OAAO/L,MAAM,CAAC0G,UAAU,CAAE,wCAAuC8E,aAAa,CAAC5K,GAAG,CAAEsL,CAAC,IAAKrD,IAAI,CAACC,SAAS,CAACoD,CAAC,CAAC,CAAC,CAAC7K,IAAI,CAAC,IAAI,CAAE,EAAC,EAAEvB,MAAM,CAACoG,MAAM,CAAC+F,YAAY,EAAE;QACnJX,IAAI;QAAEE;MACV,CAAC,CAAC;IACN,CAAC,CAAC;EACN;EACA;EACA;EACAW,uBAAuB,CAACC,MAAM,EAAE;IAC5B,OAAOrP,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD,MAAM,IAAI,CAACyN,MAAM,EAAE;MACnB;MACA,IAAI4B,MAAM,GAAG,CAAC,EAAE;QACZ;QACA,OAAO,IAAI,CAACC,oBAAoB,EAAE;UAC9B;UACA,MAAMC,mBAAmB,GAAG,IAAI,CAACD,oBAAoB;UACrD,IAAI;YACA;YACA,MAAMvO,MAAM,GAAG,MAAMwO,mBAAmB;YACxC,IAAKrK,OAAO,EAAE,GAAGnE,MAAM,CAACyO,QAAQ,IAAKH,MAAM,EAAE;cACzC,OAAOtO,MAAM,CAAC0O,WAAW;YAC7B;YACA;YACA;UACJ,CAAC,CACD,OAAOrI,KAAK,EAAE;YACV;YACA;YACA;YACA;YACA,IAAI,IAAI,CAACkI,oBAAoB,KAAKC,mBAAmB,EAAE;cACnD;YACJ;UACJ;QACJ;MACJ;MACA,MAAMG,OAAO,GAAGxK,OAAO,EAAE;MACzB,MAAMyK,wBAAwB,GAAGnN,iBAAiB,CAAC;QAC/CiN,WAAW,EAAE,IAAI,CAACG,OAAO,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;QAC/CC,YAAY,EAAE,IAAI,CAACxN,UAAU,EAAE,CAACpB,IAAI,CAAE6L,OAAO,IAAM,IAAK,EAAG1F,KAAK,IAAMA,KAAM;MAChF,CAAC,CAAC,CAACnG,IAAI,CAAC,CAAC;QAAEwO,WAAW;QAAEI;MAAa,CAAC,KAAK;QACvC,IAAIA,YAAY,EAAE;UACd;UACA,IAAI,IAAI,CAACP,oBAAoB,KAAKK,wBAAwB,EAAE;YACxD,IAAI,CAACL,oBAAoB,GAAG,IAAI;UACpC;UACA,MAAMO,YAAY;QACtB;QACA,MAAML,QAAQ,GAAGtK,OAAO,EAAE;QAC1BuK,WAAW,GAAGjO,SAAS,CAACmF,IAAI,CAAC8I,WAAW,CAAC,CAACnI,QAAQ,EAAE;QACpD,IAAImI,WAAW,GAAG,IAAI,CAAC7B,uBAAuB,EAAE;UAC5C6B,WAAW,GAAG,IAAI,CAAC7B,uBAAuB;QAC9C;QACA,IAAI,CAACA,uBAAuB,GAAG6B,WAAW;QAC1C,IAAI,CAACK,mBAAmB,CAACL,WAAW,CAAC,CAAC,CAAC;QACvC,OAAO;UAAEA,WAAW;UAAEC,OAAO;UAAEF;QAAS,CAAC;MAC7C,CAAC,CAAC;MACF,IAAI,CAACF,oBAAoB,GAAGK,wBAAwB;MACpD;MACAA,wBAAwB,CAAC1G,KAAK,CAAE7B,KAAK,IAAK;QACtC;QACA,IAAI,IAAI,CAACkI,oBAAoB,KAAKK,wBAAwB,EAAE;UACxD,IAAI,CAACL,oBAAoB,GAAG,IAAI;QACpC;MACJ,CAAC,CAAC;MACF,OAAO,CAAC,MAAMK,wBAAwB,EAAEF,WAAW;IACvD,CAAC,CAAC;EACN;EACA5M,IAAI,GAAG;IACH,OAAO7C,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD,MAAM+P,MAAM,GAAGnD,UAAU,EAAE;MAC3B;MACA,MAAMoD,OAAO,GAAG,EAAE;MAClB,IAAIP,WAAW,GAAG,IAAI;MACtB,IAAI;QACAA,WAAW,GAAG,MAAM,IAAI,CAACL,uBAAuB,CAAC,GAAG,GAAG,IAAI,CAACa,eAAe,GAAG,CAAC,CAAC;MACpF,CAAC,CACD,OAAO7I,KAAK,EAAE;QACV,IAAI,CAACuG,IAAI,CAAC,OAAO,EAAEvG,KAAK,CAAC;QACzB;MACJ;MACA,IAAI,CAAC0I,mBAAmB,CAACL,WAAW,CAAC;MACrC;MACA,IAAI,CAAC9B,IAAI,CAAC,MAAM,EAAEoC,MAAM,EAAEN,WAAW,CAAC;MACtC;MACA,IAAIA,WAAW,KAAK,IAAI,CAAC5J,gBAAgB,EAAE;QACvC,IAAI,CAAC8H,IAAI,CAAC,SAAS,EAAEoC,MAAM,CAAC;QAC5B;MACJ;MACA;MACA,IAAI,IAAI,CAAC/C,QAAQ,CAACC,KAAK,KAAK,CAAC,CAAC,EAAE;QAC5B,IAAI,CAACD,QAAQ,CAACC,KAAK,GAAGwC,WAAW,GAAG,CAAC;MACzC;MACA,IAAIzH,IAAI,CAACkI,GAAG,CAAE,IAAI,CAAClD,QAAQ,CAACC,KAAK,GAAIwC,WAAW,CAAC,GAAG,IAAI,EAAE;QACtDxM,MAAM,CAAC8B,IAAI,CAAE,+DAA8D,IAAI,CAACiI,QAAQ,CAACC,KAAM,eAAcwC,WAAY,GAAE,CAAC;QAC5H,IAAI,CAAC9B,IAAI,CAAC,OAAO,EAAE1K,MAAM,CAACkN,SAAS,CAAC,6BAA6B,EAAEpN,MAAM,CAACoG,MAAM,CAACgF,aAAa,EAAE;UAC5FsB,WAAW,EAAEA,WAAW;UACxB1J,KAAK,EAAE,WAAW;UAClBqK,mBAAmB,EAAE,IAAI,CAACpD,QAAQ,CAACC;QACvC,CAAC,CAAC,CAAC;QACH,IAAI,CAACU,IAAI,CAAC,OAAO,EAAE8B,WAAW,CAAC;MACnC,CAAC,MACI;QACD;QACA,KAAK,IAAIpH,CAAC,GAAG,IAAI,CAAC2E,QAAQ,CAACC,KAAK,GAAG,CAAC,EAAE5E,CAAC,IAAIoH,WAAW,EAAEpH,CAAC,EAAE,EAAE;UACzD,IAAI,CAACsF,IAAI,CAAC,OAAO,EAAEtF,CAAC,CAAC;QACzB;MACJ;MACA;MACA,IAAI,IAAI,CAAC2E,QAAQ,CAACC,KAAK,KAAKwC,WAAW,EAAE;QACrC,IAAI,CAACzC,QAAQ,CAACC,KAAK,GAAGwC,WAAW;QACjCtL,MAAM,CAACC,IAAI,CAAC,IAAI,CAAC4I,QAAQ,CAAC,CAAC/I,OAAO,CAAEwI,GAAG,IAAK;UACxC;UACA,IAAIA,GAAG,KAAK,OAAO,EAAE;YACjB;UACJ;UACA;UACA,MAAM4D,gBAAgB,GAAG,IAAI,CAACrD,QAAQ,CAACP,GAAG,CAAC;UAC3C;UACA;UACA;UACA,IAAI4D,gBAAgB,KAAK,SAAS,EAAE;YAChC;UACJ;UACA;UACA;UACA,IAAIZ,WAAW,GAAGY,gBAAgB,GAAG,EAAE,EAAE;YACrC,OAAO,IAAI,CAACrD,QAAQ,CAACP,GAAG,CAAC;UAC7B;QACJ,CAAC,CAAC;MACN;MACA;MACA,IAAI,IAAI,CAAC5G,gBAAgB,KAAK,CAAC,CAAC,EAAE;QAC9B,IAAI,CAACA,gBAAgB,GAAG4J,WAAW,GAAG,CAAC;MAC3C;MACA;MACA,IAAI,CAAC1C,OAAO,CAAC9I,OAAO,CAAE8B,KAAK,IAAK;QAC5B,QAAQA,KAAK,CAACC,IAAI;UACd,KAAK,IAAI;YAAE;cACP,MAAMC,IAAI,GAAGF,KAAK,CAACE,IAAI;cACvB,IAAIqK,MAAM,GAAG,IAAI,CAACC,qBAAqB,CAACtK,IAAI,CAAC,CAAChF,IAAI,CAAEuP,OAAO,IAAK;gBAC5D,IAAI,CAACA,OAAO,IAAIA,OAAO,CAACf,WAAW,IAAI,IAAI,EAAE;kBACzC,OAAO,IAAI;gBACf;gBACA,IAAI,CAACzC,QAAQ,CAAC,IAAI,GAAG/G,IAAI,CAAC,GAAGuK,OAAO,CAACf,WAAW;gBAChD,IAAI,CAAC9B,IAAI,CAAC1H,IAAI,EAAEuK,OAAO,CAAC;gBACxB,OAAO,IAAI;cACf,CAAC,CAAC,CAACvH,KAAK,CAAE7B,KAAK,IAAK;gBAAE,IAAI,CAACuG,IAAI,CAAC,OAAO,EAAEvG,KAAK,CAAC;cAAE,CAAC,CAAC;cACnD4I,OAAO,CAAC1H,IAAI,CAACgI,MAAM,CAAC;cACpB;YACJ;UACA,KAAK,QAAQ;YAAE;cACX;cACA,IAAI,CAACvK,KAAK,CAACD,SAAS,EAAE;gBAClBC,KAAK,CAACD,SAAS,GAAG,IAAI;gBACtB;gBACA;gBACA,IAAIC,KAAK,CAACF,gBAAgB,KAAK,CAAC,CAAC,EAAE;kBAC/BE,KAAK,CAACF,gBAAgB,GAAG4J,WAAW,GAAG,CAAC;gBAC5C;gBACA;gBACA;gBACA;gBACA;gBACA,MAAMvJ,MAAM,GAAGH,KAAK,CAACG,MAAM;gBAC3BA,MAAM,CAACuK,SAAS,GAAG1K,KAAK,CAACF,gBAAgB,GAAG,CAAC;gBAC7CK,MAAM,CAACwK,OAAO,GAAGjB,WAAW;gBAC5B;gBACA;gBACA,MAAMkB,YAAY,GAAGzK,MAAM,CAACwK,OAAO,GAAG,IAAI,CAAC7C,oBAAoB;gBAC/D,IAAI8C,YAAY,GAAGzK,MAAM,CAACuK,SAAS,EAAE;kBACjCvK,MAAM,CAACuK,SAAS,GAAGE,YAAY;gBACnC;gBACA,IAAIzK,MAAM,CAACuK,SAAS,GAAG,CAAC,EAAE;kBACtBvK,MAAM,CAACuK,SAAS,GAAG,CAAC;gBACxB;gBACA,MAAMH,MAAM,GAAG,IAAI,CAACM,OAAO,CAAC1K,MAAM,CAAC,CAACjF,IAAI,CAAE4P,IAAI,IAAK;kBAC/C;kBACA9K,KAAK,CAACD,SAAS,GAAG,KAAK;kBACvB,IAAI+K,IAAI,CAAClN,MAAM,KAAK,CAAC,EAAE;oBACnB;kBACJ;kBACAkN,IAAI,CAAC5M,OAAO,CAAE6M,GAAG,IAAK;oBAClB;oBACA;oBACA,IAAIA,GAAG,CAACrB,WAAW,GAAG1J,KAAK,CAACF,gBAAgB,EAAE;sBAC1CE,KAAK,CAACF,gBAAgB,GAAGiL,GAAG,CAACrB,WAAW;oBAC5C;oBACA;oBACA,IAAI,CAACzC,QAAQ,CAAC,IAAI,GAAG8D,GAAG,CAACC,SAAS,CAAC,GAAGD,GAAG,CAACrB,WAAW;oBACrD,IAAI,CAACzC,QAAQ,CAAC,IAAI,GAAG8D,GAAG,CAACE,eAAe,CAAC,GAAGF,GAAG,CAACrB,WAAW;oBAC3D,IAAI,CAAC9B,IAAI,CAACzH,MAAM,EAAE4K,GAAG,CAAC;kBAC1B,CAAC,CAAC;gBACN,CAAC,CAAC,CAAC7H,KAAK,CAAE7B,KAAK,IAAK;kBAChB,IAAI,CAACuG,IAAI,CAAC,OAAO,EAAEvG,KAAK,CAAC;kBACzB;kBACArB,KAAK,CAACD,SAAS,GAAG,KAAK;gBAC3B,CAAC,CAAC;gBACFkK,OAAO,CAAC1H,IAAI,CAACgI,MAAM,CAAC;cACxB;cACA;YACJ;QAAC;MAET,CAAC,CAAC;MACF,IAAI,CAACzK,gBAAgB,GAAG4J,WAAW;MACnC;MACAjP,OAAO,CAACyQ,GAAG,CAACjB,OAAO,CAAC,CAAC/O,IAAI,CAAC,MAAM;QAC5B,IAAI,CAAC0M,IAAI,CAAC,SAAS,EAAEoC,MAAM,CAAC;MAChC,CAAC,CAAC,CAAC9G,KAAK,CAAE7B,KAAK,IAAK;QAAE,IAAI,CAACuG,IAAI,CAAC,OAAO,EAAEvG,KAAK,CAAC;MAAE,CAAC,CAAC;MACnD;IACJ,CAAC,CAAC;EACN;EACA;EACA8J,gBAAgB,CAACzB,WAAW,EAAE;IAC1B,IAAI,CAAC5J,gBAAgB,GAAG4J,WAAW,GAAG,CAAC;IACvC,IAAI,IAAI,CAAC0B,OAAO,EAAE;MACd,IAAI,CAACtO,IAAI,EAAE;IACf;EACJ;EACA,IAAIiK,OAAO,GAAG;IACV,OAAO,IAAI,CAACkB,QAAQ;EACxB;EACA;EACA;EACAT,aAAa,GAAG;IACZ,OAAOvN,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD,OAAOiD,MAAM,CAAC0G,UAAU,CAAC,6CAA6C,EAAE5G,MAAM,CAACoG,MAAM,CAACgB,qBAAqB,EAAE;QACzGC,SAAS,EAAE;MACf,CAAC,CAAC;IACN,CAAC,CAAC;EACN;EACA/H,UAAU,GAAG;IACT,OAAOrC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD,MAAM8M,OAAO,GAAG,MAAM,IAAI,CAACW,MAAM,EAAE;MACnC;MACA;MACA;MACA,MAAM2D,cAAc,GAAG,MAAM,IAAI,CAAC7D,aAAa,EAAE;MACjD,IAAIT,OAAO,CAACuE,OAAO,KAAKD,cAAc,CAACC,OAAO,EAAE;QAC5C;QACA;QACA,IAAI,IAAI,CAAC/D,UAAU,EAAE;UACjB,IAAI,CAACU,QAAQ,GAAGoD,cAAc;UAC9B;UACA,IAAI,CAACvL,gBAAgB,GAAG,CAAC,CAAC;UAC1B,IAAI,CAACyL,gBAAgB,GAAG,IAAI;UAC5B,IAAI,CAACC,uBAAuB,GAAG,IAAI;UACnC,IAAI,CAACxD,cAAc,GAAG,CAAC;UACvB,IAAI,CAACf,QAAQ,CAACC,KAAK,GAAG,CAAC,CAAC;UACxB,IAAI,CAACW,uBAAuB,GAAG,CAAC,IAAI;UACpC,IAAI,CAAC0B,oBAAoB,GAAG,IAAI;UAChC;UACA;UACA;UACA,IAAI,CAAC3B,IAAI,CAAC,SAAS,EAAEyD,cAAc,EAAEtE,OAAO,CAAC;UAC7C,MAAM1H,KAAK,CAAC,CAAC,CAAC;UACd,OAAO,IAAI,CAAC4I,QAAQ;QACxB;QACA,MAAM5G,KAAK,GAAGnE,MAAM,CAACkN,SAAS,CAAC,4BAA4B,EAAEpN,MAAM,CAACoG,MAAM,CAACgF,aAAa,EAAE;UACtFpI,KAAK,EAAE,SAAS;UAChB+G,OAAO,EAAEA,OAAO;UAChB0E,eAAe,EAAEJ;QACrB,CAAC,CAAC;QACF,IAAI,CAACzD,IAAI,CAAC,OAAO,EAAEvG,KAAK,CAAC;QACzB,MAAMA,KAAK;MACf;MACA,OAAO0F,OAAO;IAClB,CAAC,CAAC;EACN;EACA,IAAI2C,WAAW,GAAG;IACd,IAAI,CAACL,uBAAuB,CAAC,GAAG,GAAG,IAAI,CAACa,eAAe,GAAG,CAAC,CAAC,CAAChP,IAAI,CAAEwO,WAAW,IAAK;MAC/E,IAAI,CAACK,mBAAmB,CAACL,WAAW,CAAC;IACzC,CAAC,EAAGrI,KAAK,IAAK,CAAE,CAAC,CAAC;IAClB,OAAQ,IAAI,CAACkK,gBAAgB,IAAI,IAAI,GAAI,IAAI,CAACA,gBAAgB,GAAG,CAAC,CAAC;EACvE;EACA,IAAIH,OAAO,GAAG;IACV,OAAQ,IAAI,CAACM,OAAO,IAAI,IAAI;EAChC;EACA,IAAIN,OAAO,CAAC7Q,KAAK,EAAE;IACf,IAAIA,KAAK,IAAI,CAAC,IAAI,CAACmR,OAAO,EAAE;MACxB,IAAI,CAACA,OAAO,GAAGC,WAAW,CAAC,MAAM;QAAE,IAAI,CAAC7O,IAAI,EAAE;MAAE,CAAC,EAAE,IAAI,CAACoN,eAAe,CAAC;MACxE,IAAI,CAAC,IAAI,CAAC0B,cAAc,EAAE;QACtB,IAAI,CAACA,cAAc,GAAGrM,UAAU,CAAC,MAAM;UACnC,IAAI,CAACzC,IAAI,EAAE;UACX;UACA;UACA,IAAI,CAAC8O,cAAc,GAAGrM,UAAU,CAAC,MAAM;YACnC;YACA;YACA,IAAI,CAAC,IAAI,CAACmM,OAAO,EAAE;cACf,IAAI,CAAC5O,IAAI,EAAE;YACf;YACA;YACA,IAAI,CAAC8O,cAAc,GAAG,IAAI;UAC9B,CAAC,EAAE,IAAI,CAAC1B,eAAe,CAAC;QAC5B,CAAC,EAAE,CAAC,CAAC;MACT;IACJ,CAAC,MACI,IAAI,CAAC3P,KAAK,IAAI,IAAI,CAACmR,OAAO,EAAE;MAC7BG,aAAa,CAAC,IAAI,CAACH,OAAO,CAAC;MAC3B,IAAI,CAACA,OAAO,GAAG,IAAI;IACvB;EACJ;EACA,IAAIxB,eAAe,GAAG;IAClB,OAAO,IAAI,CAACnC,gBAAgB;EAChC;EACA,IAAImC,eAAe,CAAC3P,KAAK,EAAE;IACvB,IAAI,OAAQA,KAAM,KAAK,QAAQ,IAAIA,KAAK,IAAI,CAAC,IAAIgK,QAAQ,CAACJ,MAAM,CAAC5J,KAAK,CAAC,CAAC,IAAIA,KAAK,EAAE;MAC/E,MAAM,IAAI0E,KAAK,CAAC,0BAA0B,CAAC;IAC/C;IACA,IAAI,CAAC8I,gBAAgB,GAAGxN,KAAK;IAC7B,IAAI,IAAI,CAACmR,OAAO,EAAE;MACdG,aAAa,CAAC,IAAI,CAACH,OAAO,CAAC;MAC3B,IAAI,CAACA,OAAO,GAAGC,WAAW,CAAC,MAAM;QAAE,IAAI,CAAC7O,IAAI,EAAE;MAAE,CAAC,EAAE,IAAI,CAACiL,gBAAgB,CAAC;IAC7E;EACJ;EACA+D,mBAAmB,GAAG;IAClB,MAAMC,GAAG,GAAG5M,OAAO,EAAE;IACrB;IACA,IAAK4M,GAAG,GAAG,IAAI,CAAC/D,cAAc,GAAI,CAAC,GAAG,IAAI,CAACD,gBAAgB,EAAE;MACzD,IAAI,CAACC,cAAc,GAAG+D,GAAG;MACzB,IAAI,CAACP,uBAAuB,GAAG,IAAI,CAACQ,cAAc,EAAE,CAAC9Q,IAAI,CAAEwO,WAAW,IAAK;QACvE,IAAI,IAAI,CAAC6B,gBAAgB,IAAI,IAAI,IAAI7B,WAAW,GAAG,IAAI,CAAC6B,gBAAgB,EAAE;UACtE,IAAI,CAACA,gBAAgB,GAAG7B,WAAW;QACvC;QACA,OAAO,IAAI,CAAC6B,gBAAgB;MAChC,CAAC,CAAC;IACN;IACA,OAAO,IAAI,CAACC,uBAAuB;EACvC;EACAzB,mBAAmB,CAACL,WAAW,EAAE;IAC7B;IACA,IAAI,IAAI,CAAC6B,gBAAgB,IAAI,IAAI,IAAI7B,WAAW,GAAG,IAAI,CAAC6B,gBAAgB,EAAE;MACtE;IACJ;IACA;IACA,IAAI,CAACvD,cAAc,GAAG7I,OAAO,EAAE;IAC/B;IACA,IAAI,IAAI,CAACoM,gBAAgB,IAAI,IAAI,IAAI7B,WAAW,GAAG,IAAI,CAAC6B,gBAAgB,EAAE;MACtE,IAAI,CAACA,gBAAgB,GAAG7B,WAAW;MACnC,IAAI,CAAC8B,uBAAuB,GAAG/Q,OAAO,CAACD,OAAO,CAACkP,WAAW,CAAC;IAC/D;EACJ;EACAuC,kBAAkB,CAAChB,eAAe,EAAEiB,aAAa,EAAEC,OAAO,EAAE;IACxD,OAAOlS,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD,OAAO,IAAI,CAACmS,mBAAmB,CAACnB,eAAe,EAAGiB,aAAa,IAAI,IAAI,GAAI,CAAC,GAAGA,aAAa,EAAEC,OAAO,IAAI,CAAC,EAAE,IAAI,CAAC;IACrH,CAAC,CAAC;EACN;EACAC,mBAAmB,CAACnB,eAAe,EAAEiB,aAAa,EAAEC,OAAO,EAAEE,WAAW,EAAE;IACtE,OAAOpS,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD,MAAMwQ,OAAO,GAAG,MAAM,IAAI,CAACD,qBAAqB,CAACS,eAAe,CAAC;MACjE;MACA,IAAI,CAACR,OAAO,GAAGA,OAAO,CAACyB,aAAa,GAAG,CAAC,KAAKA,aAAa,EAAE;QACxD,OAAOzB,OAAO;MAClB;MACA;MACA,OAAO,IAAIhQ,OAAO,CAAC,CAACD,OAAO,EAAEE,MAAM,KAAK;QACpC,MAAM4R,WAAW,GAAG,EAAE;QACtB,IAAIrR,IAAI,GAAG,KAAK;QAChB,MAAMsR,WAAW,GAAG,YAAY;UAC5B,IAAItR,IAAI,EAAE;YACN,OAAO,IAAI;UACf;UACAA,IAAI,GAAG,IAAI;UACXqR,WAAW,CAACpO,OAAO,CAAEsO,IAAI,IAAK;YAAEA,IAAI,EAAE;UAAE,CAAC,CAAC;UAC1C,OAAO,KAAK;QAChB,CAAC;QACD,MAAMC,YAAY,GAAIhC,OAAO,IAAK;UAC9B,IAAIA,OAAO,CAACyB,aAAa,GAAGA,aAAa,EAAE;YACvC;UACJ;UACA,IAAIK,WAAW,EAAE,EAAE;YACf;UACJ;UACA/R,OAAO,CAACiQ,OAAO,CAAC;QACpB,CAAC;QACD,IAAI,CAACiC,EAAE,CAACzB,eAAe,EAAEwB,YAAY,CAAC;QACtCH,WAAW,CAAC/J,IAAI,CAAC,MAAM;UAAE,IAAI,CAACoK,cAAc,CAAC1B,eAAe,EAAEwB,YAAY,CAAC;QAAE,CAAC,CAAC;QAC/E,IAAIJ,WAAW,EAAE;UACb,IAAIO,eAAe,GAAGP,WAAW,CAACQ,UAAU;UAC5C,IAAIC,YAAY,GAAG,IAAI;UACvB,MAAMC,cAAc,GAAIrD,WAAW,IAAKzP,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;YACjF,IAAIgB,IAAI,EAAE;cACN;YACJ;YACA;YACA;YACA;YACA,MAAMoE,KAAK,CAAC,IAAI,CAAC;YACjB,IAAI,CAAC2N,mBAAmB,CAACX,WAAW,CAACzL,IAAI,CAAC,CAAC1F,IAAI,CAAE+R,KAAK,IAAKhT,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;cACpG,IAAIgB,IAAI,EAAE;gBACN;cACJ;cACA,IAAIgS,KAAK,IAAIZ,WAAW,CAACY,KAAK,EAAE;gBAC5BL,eAAe,GAAGlD,WAAW;cACjC,CAAC,MACI;gBACD;gBACA;kBACI,MAAMwD,KAAK,GAAG,MAAM,IAAI,CAACC,cAAc,CAAClC,eAAe,CAAC;kBACxD,IAAIiC,KAAK,IAAIA,KAAK,CAACxD,WAAW,IAAI,IAAI,EAAE;oBACpC;kBACJ;gBACJ;gBACA;gBACA;gBACA;gBACA;gBACA,IAAIoD,YAAY,IAAI,IAAI,EAAE;kBACtBA,YAAY,GAAGF,eAAe,GAAG,CAAC;kBAClC,IAAIE,YAAY,GAAGT,WAAW,CAACQ,UAAU,EAAE;oBACvCC,YAAY,GAAGT,WAAW,CAACQ,UAAU;kBACzC;gBACJ;gBACA,OAAOC,YAAY,IAAIpD,WAAW,EAAE;kBAChC,IAAIzO,IAAI,EAAE;oBACN;kBACJ;kBACA,MAAMiM,KAAK,GAAG,MAAM,IAAI,CAACkG,wBAAwB,CAACN,YAAY,CAAC;kBAC/D,KAAK,IAAIO,EAAE,GAAG,CAAC,EAAEA,EAAE,GAAGnG,KAAK,CAACoG,YAAY,CAAC1P,MAAM,EAAEyP,EAAE,EAAE,EAAE;oBACnD,MAAM5J,EAAE,GAAGyD,KAAK,CAACoG,YAAY,CAACD,EAAE,CAAC;oBACjC;oBACA,IAAI5J,EAAE,CAACvD,IAAI,KAAK+K,eAAe,EAAE;sBAC7B;oBACJ;oBACA;oBACA,IAAIxH,EAAE,CAAC7C,IAAI,KAAKyL,WAAW,CAACzL,IAAI,IAAI6C,EAAE,CAACwJ,KAAK,KAAKZ,WAAW,CAACY,KAAK,EAAE;sBAChE,IAAIhS,IAAI,EAAE;wBACN;sBACJ;sBACA;sBACA,MAAMwP,OAAO,GAAG,MAAM,IAAI,CAACwB,kBAAkB,CAACxI,EAAE,CAACvD,IAAI,EAAEgM,aAAa,CAAC;sBACrE;sBACA,IAAIK,WAAW,EAAE,EAAE;wBACf;sBACJ;sBACA;sBACA,IAAIgB,MAAM,GAAG,UAAU;sBACvB,IAAI9J,EAAE,CAAChF,IAAI,KAAK4N,WAAW,CAAC5N,IAAI,IAAIgF,EAAE,CAACT,EAAE,KAAKqJ,WAAW,CAACrJ,EAAE,IAAIS,EAAE,CAAClJ,KAAK,CAAC0I,EAAE,CAACoJ,WAAW,CAAC9R,KAAK,CAAC,EAAE;wBAC5FgT,MAAM,GAAG,UAAU;sBACvB,CAAC,MACI,IAAI9J,EAAE,CAAChF,IAAI,KAAK,IAAI,IAAIgF,EAAE,CAAC7C,IAAI,KAAK6C,EAAE,CAACT,EAAE,IAAIS,EAAE,CAAClJ,KAAK,CAACmL,MAAM,EAAE,EAAE;wBACjE6H,MAAM,GAAG,WAAW;sBACxB;sBACA;sBACA7S,MAAM,CAACwC,MAAM,CAACkN,SAAS,CAAC,0BAA0B,EAAEpN,MAAM,CAACoG,MAAM,CAACoK,oBAAoB,EAAE;wBACpFC,SAAS,EAAGF,MAAM,KAAK,UAAU,IAAIA,MAAM,KAAK,WAAY;wBAC5DA,MAAM;wBACNG,WAAW,EAAE,IAAI,CAACC,gBAAgB,CAAClK,EAAE,CAAC;wBACtCvD,IAAI,EAAE+K,eAAe;wBACrBR;sBACJ,CAAC,CAAC,CAAC;sBACH;oBACJ;kBACJ;kBACAqC,YAAY,EAAE;gBAClB;cACJ;cACA,IAAI7R,IAAI,EAAE;gBACN;cACJ;cACA,IAAI,CAAC4E,IAAI,CAAC,OAAO,EAAEkN,cAAc,CAAC;YACtC,CAAC,CAAC,EAAG1L,KAAK,IAAK;cACX,IAAIpG,IAAI,EAAE;gBACN;cACJ;cACA,IAAI,CAAC4E,IAAI,CAAC,OAAO,EAAEkN,cAAc,CAAC;YACtC,CAAC,CAAC;UACN,CAAC,CAAC;UACF,IAAI9R,IAAI,EAAE;YACN;UACJ;UACA,IAAI,CAAC4E,IAAI,CAAC,OAAO,EAAEkN,cAAc,CAAC;UAClCT,WAAW,CAAC/J,IAAI,CAAC,MAAM;YACnB,IAAI,CAACoK,cAAc,CAAC,OAAO,EAAEI,cAAc,CAAC;UAChD,CAAC,CAAC;QACN;QACA,IAAI,OAAQZ,OAAQ,KAAK,QAAQ,IAAIA,OAAO,GAAG,CAAC,EAAE;UAC9C,MAAMyB,KAAK,GAAGrO,UAAU,CAAC,MAAM;YAC3B,IAAIgN,WAAW,EAAE,EAAE;cACf;YACJ;YACA7R,MAAM,CAACwC,MAAM,CAACkN,SAAS,CAAC,kBAAkB,EAAEpN,MAAM,CAACoG,MAAM,CAACyK,OAAO,EAAE;cAAE1B,OAAO,EAAEA;YAAQ,CAAC,CAAC,CAAC;UAC7F,CAAC,EAAEA,OAAO,CAAC;UACX,IAAIyB,KAAK,CAACE,KAAK,EAAE;YACbF,KAAK,CAACE,KAAK,EAAE;UACjB;UACAxB,WAAW,CAAC/J,IAAI,CAAC,MAAM;YAAEwL,YAAY,CAACH,KAAK,CAAC;UAAE,CAAC,CAAC;QACpD;MACJ,CAAC,CAAC;IACN,CAAC,CAAC;EACN;EACA5B,cAAc,GAAG;IACb,OAAO/R,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD,OAAO,IAAI,CAACoP,uBAAuB,CAAC,CAAC,CAAC;IAC1C,CAAC,CAAC;EACN;EACA2E,WAAW,GAAG;IACV,OAAO/T,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD,MAAM,IAAI,CAACqC,UAAU,EAAE;MACvB,MAAMtB,MAAM,GAAG,MAAM,IAAI,CAAC6O,OAAO,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;MACpD,IAAI;QACA,OAAOpO,SAAS,CAACmF,IAAI,CAAC5F,MAAM,CAAC;MACjC,CAAC,CACD,OAAOqG,KAAK,EAAE;QACV,OAAOnE,MAAM,CAAC0G,UAAU,CAAC,yBAAyB,EAAE5G,MAAM,CAACoG,MAAM,CAAC+F,YAAY,EAAE;UAC5E8E,MAAM,EAAE,aAAa;UACrBjT,MAAM;UAAEqG;QACZ,CAAC,CAAC;MACN;IACJ,CAAC,CAAC;EACN;EACA6M,UAAU,CAACC,aAAa,EAAEC,QAAQ,EAAE;IAChC,OAAOnU,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD,MAAM,IAAI,CAACqC,UAAU,EAAE;MACvB,MAAM+R,MAAM,GAAG,MAAM5R,iBAAiB,CAAC;QACnCyC,OAAO,EAAE,IAAI,CAAC6E,WAAW,CAACoK,aAAa,CAAC;QACxCC,QAAQ,EAAE,IAAI,CAACE,YAAY,CAACF,QAAQ;MACxC,CAAC,CAAC;MACF,MAAMpT,MAAM,GAAG,MAAM,IAAI,CAAC6O,OAAO,CAAC,YAAY,EAAEwE,MAAM,CAAC;MACvD,IAAI;QACA,OAAO5S,SAAS,CAACmF,IAAI,CAAC5F,MAAM,CAAC;MACjC,CAAC,CACD,OAAOqG,KAAK,EAAE;QACV,OAAOnE,MAAM,CAAC0G,UAAU,CAAC,yBAAyB,EAAE5G,MAAM,CAACoG,MAAM,CAAC+F,YAAY,EAAE;UAC5E8E,MAAM,EAAE,YAAY;UACpBI,MAAM;UAAErT,MAAM;UAAEqG;QACpB,CAAC,CAAC;MACN;IACJ,CAAC,CAAC;EACN;EACA2L,mBAAmB,CAACmB,aAAa,EAAEC,QAAQ,EAAE;IACzC,OAAOnU,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD,MAAM,IAAI,CAACqC,UAAU,EAAE;MACvB,MAAM+R,MAAM,GAAG,MAAM5R,iBAAiB,CAAC;QACnCyC,OAAO,EAAE,IAAI,CAAC6E,WAAW,CAACoK,aAAa,CAAC;QACxCC,QAAQ,EAAE,IAAI,CAACE,YAAY,CAACF,QAAQ;MACxC,CAAC,CAAC;MACF,MAAMpT,MAAM,GAAG,MAAM,IAAI,CAAC6O,OAAO,CAAC,qBAAqB,EAAEwE,MAAM,CAAC;MAChE,IAAI;QACA,OAAO5S,SAAS,CAACmF,IAAI,CAAC5F,MAAM,CAAC,CAACuG,QAAQ,EAAE;MAC5C,CAAC,CACD,OAAOF,KAAK,EAAE;QACV,OAAOnE,MAAM,CAAC0G,UAAU,CAAC,yBAAyB,EAAE5G,MAAM,CAACoG,MAAM,CAAC+F,YAAY,EAAE;UAC5E8E,MAAM,EAAE,qBAAqB;UAC7BI,MAAM;UAAErT,MAAM;UAAEqG;QACpB,CAAC,CAAC;MACN;IACJ,CAAC,CAAC;EACN;EACAkN,OAAO,CAACJ,aAAa,EAAEC,QAAQ,EAAE;IAC7B,OAAOnU,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD,MAAM,IAAI,CAACqC,UAAU,EAAE;MACvB,MAAM+R,MAAM,GAAG,MAAM5R,iBAAiB,CAAC;QACnCyC,OAAO,EAAE,IAAI,CAAC6E,WAAW,CAACoK,aAAa,CAAC;QACxCC,QAAQ,EAAE,IAAI,CAACE,YAAY,CAACF,QAAQ;MACxC,CAAC,CAAC;MACF,MAAMpT,MAAM,GAAG,MAAM,IAAI,CAAC6O,OAAO,CAAC,SAAS,EAAEwE,MAAM,CAAC;MACpD,IAAI;QACA,OAAOtS,OAAO,CAACf,MAAM,CAAC;MAC1B,CAAC,CACD,OAAOqG,KAAK,EAAE;QACV,OAAOnE,MAAM,CAAC0G,UAAU,CAAC,yBAAyB,EAAE5G,MAAM,CAACoG,MAAM,CAAC+F,YAAY,EAAE;UAC5E8E,MAAM,EAAE,SAAS;UACjBI,MAAM;UAAErT,MAAM;UAAEqG;QACpB,CAAC,CAAC;MACN;IACJ,CAAC,CAAC;EACN;EACAmN,YAAY,CAACL,aAAa,EAAEM,QAAQ,EAAEL,QAAQ,EAAE;IAC5C,OAAOnU,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD,MAAM,IAAI,CAACqC,UAAU,EAAE;MACvB,MAAM+R,MAAM,GAAG,MAAM5R,iBAAiB,CAAC;QACnCyC,OAAO,EAAE,IAAI,CAAC6E,WAAW,CAACoK,aAAa,CAAC;QACxCC,QAAQ,EAAE,IAAI,CAACE,YAAY,CAACF,QAAQ,CAAC;QACrCK,QAAQ,EAAEhU,OAAO,CAACD,OAAO,CAACiU,QAAQ,CAAC,CAACvT,IAAI,CAAEwT,CAAC,IAAK1S,QAAQ,CAAC0S,CAAC,CAAC;MAC/D,CAAC,CAAC;MACF,MAAM1T,MAAM,GAAG,MAAM,IAAI,CAAC6O,OAAO,CAAC,cAAc,EAAEwE,MAAM,CAAC;MACzD,IAAI;QACA,OAAOtS,OAAO,CAACf,MAAM,CAAC;MAC1B,CAAC,CACD,OAAOqG,KAAK,EAAE;QACV,OAAOnE,MAAM,CAAC0G,UAAU,CAAC,yBAAyB,EAAE5G,MAAM,CAACoG,MAAM,CAAC+F,YAAY,EAAE;UAC5E8E,MAAM,EAAE,cAAc;UACtBI,MAAM;UAAErT,MAAM;UAAEqG;QACpB,CAAC,CAAC;MACN;IACJ,CAAC,CAAC;EACN;EACA;EACAsM,gBAAgB,CAAClK,EAAE,EAAEvD,IAAI,EAAE2M,UAAU,EAAE;IACnC,IAAI3M,IAAI,IAAI,IAAI,IAAIrE,aAAa,CAACqE,IAAI,CAAC,KAAK,EAAE,EAAE;MAC5C,MAAM,IAAIjB,KAAK,CAAC,oCAAoC,CAAC;IACzD;IACA,MAAMjE,MAAM,GAAGyI,EAAE;IACjB;IACA,IAAIvD,IAAI,IAAI,IAAI,IAAIuD,EAAE,CAACvD,IAAI,KAAKA,IAAI,EAAE;MAClChD,MAAM,CAAC0G,UAAU,CAAC,0DAA0D,EAAE5G,MAAM,CAACoG,MAAM,CAAC8E,aAAa,EAAE;QAAEyG,YAAY,EAAElL,EAAE,CAACvD,IAAI;QAAE0O,YAAY,EAAE1O;MAAK,CAAC,CAAC;IAC7J;IACAlF,MAAM,CAAC6T,IAAI,GAAG,CAACC,QAAQ,EAAE3C,OAAO,KAAKlS,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAC9E,IAAI6U,QAAQ,IAAI,IAAI,EAAE;QAClBA,QAAQ,GAAG,CAAC;MAChB;MACA,IAAI3C,OAAO,IAAI,IAAI,EAAE;QACjBA,OAAO,GAAG,CAAC;MACf;MACA;MACA,IAAIuB,WAAW,GAAGrF,SAAS;MAC3B,IAAIyG,QAAQ,KAAK,CAAC,IAAIjC,UAAU,IAAI,IAAI,EAAE;QACtCa,WAAW,GAAG;UACVjP,IAAI,EAAEgF,EAAE,CAAChF,IAAI;UACbmC,IAAI,EAAE6C,EAAE,CAAC7C,IAAI;UACbqM,KAAK,EAAExJ,EAAE,CAACwJ,KAAK;UACfjK,EAAE,EAAES,EAAE,CAACT,EAAE;UACTzI,KAAK,EAAEkJ,EAAE,CAAClJ,KAAK;UACfsS;QACJ,CAAC;MACL;MACA,MAAMpC,OAAO,GAAG,MAAM,IAAI,CAAC2B,mBAAmB,CAAC3I,EAAE,CAACvD,IAAI,EAAE4O,QAAQ,EAAE3C,OAAO,EAAEuB,WAAW,CAAC;MACvF,IAAIjD,OAAO,IAAI,IAAI,IAAIqE,QAAQ,KAAK,CAAC,EAAE;QACnC,OAAO,IAAI;MACf;MACA;MACA,IAAI,CAAC7H,QAAQ,CAAC,IAAI,GAAGxD,EAAE,CAACvD,IAAI,CAAC,GAAGuK,OAAO,CAACf,WAAW;MACnD,IAAIe,OAAO,CAAC1B,MAAM,KAAK,CAAC,EAAE;QACtB7L,MAAM,CAAC0G,UAAU,CAAC,oBAAoB,EAAE5G,MAAM,CAACoG,MAAM,CAACC,cAAc,EAAE;UAClE4H,eAAe,EAAExH,EAAE,CAACvD,IAAI;UACxB2D,WAAW,EAAEJ,EAAE;UACfgH,OAAO,EAAEA;QACb,CAAC,CAAC;MACN;MACA,OAAOA,OAAO;IAClB,CAAC,CAAC;IACF,OAAOzP,MAAM;EACjB;EACA+T,eAAe,CAACC,iBAAiB,EAAE;IAC/B,OAAO/U,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD,MAAM,IAAI,CAACqC,UAAU,EAAE;MACvB,MAAM2S,KAAK,GAAG,MAAMxU,OAAO,CAACD,OAAO,CAACwU,iBAAiB,CAAC,CAAC9T,IAAI,CAACgU,CAAC,IAAInT,OAAO,CAACmT,CAAC,CAAC,CAAC;MAC5E,MAAMzL,EAAE,GAAG,IAAI,CAACb,SAAS,CAACiB,WAAW,CAACmL,iBAAiB,CAAC;MACxD,IAAIvL,EAAE,CAACyI,aAAa,IAAI,IAAI,EAAE;QAC1BzI,EAAE,CAACyI,aAAa,GAAG,CAAC;MACxB;MACA,MAAMxC,WAAW,GAAG,MAAM,IAAI,CAACL,uBAAuB,CAAC,GAAG,GAAG,CAAC,GAAG,IAAI,CAACa,eAAe,CAAC;MACtF,IAAI;QACA,MAAMhK,IAAI,GAAG,MAAM,IAAI,CAAC2J,OAAO,CAAC,iBAAiB,EAAE;UAAEmF,iBAAiB,EAAEC;QAAM,CAAC,CAAC;QAChF,OAAO,IAAI,CAACtB,gBAAgB,CAAClK,EAAE,EAAEvD,IAAI,EAAEwJ,WAAW,CAAC;MACvD,CAAC,CACD,OAAOrI,KAAK,EAAE;QACVA,KAAK,CAACwC,WAAW,GAAGJ,EAAE;QACtBpC,KAAK,CAAC4J,eAAe,GAAGxH,EAAE,CAACvD,IAAI;QAC/B,MAAMmB,KAAK;MACf;IACJ,CAAC,CAAC;EACN;EACA8N,sBAAsB,CAACtL,WAAW,EAAE;IAChC,OAAO5J,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD,MAAMmV,MAAM,GAAG,MAAMvL,WAAW;MAChC,MAAMJ,EAAE,GAAG,CAAC,CAAC;MACb,CAAC,MAAM,EAAE,IAAI,CAAC,CAACvF,OAAO,CAAEwI,GAAG,IAAK;QAC5B,IAAI0I,MAAM,CAAC1I,GAAG,CAAC,IAAI,IAAI,EAAE;UACrB;QACJ;QACAjD,EAAE,CAACiD,GAAG,CAAC,GAAGjM,OAAO,CAACD,OAAO,CAAC4U,MAAM,CAAC1I,GAAG,CAAC,CAAC,CAACxL,IAAI,CAAEmU,CAAC,IAAMA,CAAC,GAAG,IAAI,CAACtL,WAAW,CAACsL,CAAC,CAAC,GAAG,IAAK,CAAC;MACxF,CAAC,CAAC;MACF,CAAC,UAAU,EAAE,UAAU,EAAE,cAAc,EAAE,sBAAsB,EAAE,OAAO,CAAC,CAACnR,OAAO,CAAEwI,GAAG,IAAK;QACvF,IAAI0I,MAAM,CAAC1I,GAAG,CAAC,IAAI,IAAI,EAAE;UACrB;QACJ;QACAjD,EAAE,CAACiD,GAAG,CAAC,GAAGjM,OAAO,CAACD,OAAO,CAAC4U,MAAM,CAAC1I,GAAG,CAAC,CAAC,CAACxL,IAAI,CAAEmU,CAAC,IAAMA,CAAC,GAAG5T,SAAS,CAACmF,IAAI,CAACyO,CAAC,CAAC,GAAG,IAAK,CAAC;MACtF,CAAC,CAAC;MACF,CAAC,MAAM,CAAC,CAACnR,OAAO,CAAEwI,GAAG,IAAK;QACtB,IAAI0I,MAAM,CAAC1I,GAAG,CAAC,IAAI,IAAI,EAAE;UACrB;QACJ;QACAjD,EAAE,CAACiD,GAAG,CAAC,GAAGjM,OAAO,CAACD,OAAO,CAAC4U,MAAM,CAAC1I,GAAG,CAAC,CAAC,CAACxL,IAAI,CAAEmU,CAAC,IAAOA,CAAC,IAAI,IAAI,GAAIA,CAAC,GAAG,IAAK,CAAC;MAChF,CAAC,CAAC;MACF,IAAID,MAAM,CAACE,UAAU,EAAE;QACnB7L,EAAE,CAAC6L,UAAU,GAAG,IAAI,CAAC1M,SAAS,CAAC0M,UAAU,CAACF,MAAM,CAACE,UAAU,CAAC;MAChE;MACA,CAAC,MAAM,CAAC,CAACpR,OAAO,CAAEwI,GAAG,IAAK;QACtB,IAAI0I,MAAM,CAAC1I,GAAG,CAAC,IAAI,IAAI,EAAE;UACrB;QACJ;QACAjD,EAAE,CAACiD,GAAG,CAAC,GAAGjM,OAAO,CAACD,OAAO,CAAC4U,MAAM,CAAC1I,GAAG,CAAC,CAAC,CAACxL,IAAI,CAAEmU,CAAC,IAAMA,CAAC,GAAGtT,OAAO,CAACsT,CAAC,CAAC,GAAG,IAAK,CAAC;MAC/E,CAAC,CAAC;MACF,OAAO,IAAI,CAACzM,SAAS,CAAC2M,kBAAkB,CAAC,MAAM9S,iBAAiB,CAACgH,EAAE,CAAC,CAAC;IACzE,CAAC,CAAC;EACN;EACA+L,UAAU,CAACrP,MAAM,EAAE;IACf,OAAOlG,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChDkG,MAAM,GAAG,MAAMA,MAAM;MACrB,MAAMnF,MAAM,GAAG,CAAC,CAAC;MACjB,IAAImF,MAAM,CAACjB,OAAO,IAAI,IAAI,EAAE;QACxBlE,MAAM,CAACkE,OAAO,GAAG,IAAI,CAAC6E,WAAW,CAAC5D,MAAM,CAACjB,OAAO,CAAC;MACrD;MACA,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAChB,OAAO,CAAEwI,GAAG,IAAK;QACrC,IAAIvG,MAAM,CAACuG,GAAG,CAAC,IAAI,IAAI,EAAE;UACrB;QACJ;QACA1L,MAAM,CAAC0L,GAAG,CAAC,GAAGvG,MAAM,CAACuG,GAAG,CAAC;MAC7B,CAAC,CAAC;MACF,CAAC,WAAW,EAAE,SAAS,CAAC,CAACxI,OAAO,CAAEwI,GAAG,IAAK;QACtC,IAAIvG,MAAM,CAACuG,GAAG,CAAC,IAAI,IAAI,EAAE;UACrB;QACJ;QACA1L,MAAM,CAAC0L,GAAG,CAAC,GAAG,IAAI,CAAC4H,YAAY,CAACnO,MAAM,CAACuG,GAAG,CAAC,CAAC;MAChD,CAAC,CAAC;MACF,OAAO,IAAI,CAAC9D,SAAS,CAACzC,MAAM,CAAC,MAAM1D,iBAAiB,CAACzB,MAAM,CAAC,CAAC;IACjE,CAAC,CAAC;EACN;EACAyU,KAAK,CAAC5L,WAAW,EAAEuK,QAAQ,EAAEsB,OAAO,EAAE;IAClC,OAAOzV,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD,IAAIyV,OAAO,IAAItS,kBAAkB,EAAE;QAC/BF,MAAM,CAAC0G,UAAU,CAAC,yCAAyC,EAAE5G,MAAM,CAACoG,MAAM,CAAC+F,YAAY,EAAE;UACrFwG,SAAS,EAAED,OAAO;UAAE7L;QACxB,CAAC,CAAC;MACN;MACA,MAAM+L,QAAQ,GAAG/L,WAAW,CAACb,EAAE;MAC/B,MAAMhI,MAAM,GAAG,MAAM,IAAI,CAAC6O,OAAO,CAAC,MAAM,EAAE;QAAEhG,WAAW;QAAEuK;MAAS,CAAC,CAAC;MACpE;MACA,IAAIsB,OAAO,IAAI,CAAC,IAAItB,QAAQ,KAAK,QAAQ,IAAIwB,QAAQ,IAAI,IAAI,IAAI5U,MAAM,CAAC2G,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,YAAY,IAAK9F,aAAa,CAACb,MAAM,CAAC,GAAG,EAAE,KAAK,CAAE,EAAE;QAC7I,IAAI;UACA,MAAMyD,IAAI,GAAG3C,YAAY,CAACd,MAAM,EAAE,CAAC,CAAC;UACpC;UACA,MAAMyN,MAAM,GAAG3M,YAAY,CAAC2C,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC;UACxC,IAAI,CAAChD,SAAS,CAACmF,IAAI,CAAC6H,MAAM,CAAC,CAACxF,EAAE,CAAC2M,QAAQ,CAAC,EAAE;YACtC1S,MAAM,CAAC0G,UAAU,CAAC,gCAAgC,EAAE5G,MAAM,CAACoG,MAAM,CAACC,cAAc,EAAE;cAC9EX,IAAI,EAAE,gBAAgB;cACtBmN,SAAS,EAAE,qDAAqD;cAChEhM,WAAW;cAAEpF,IAAI,EAAEzD;YACvB,CAAC,CAAC;UACN;UACA;UACA,MAAMwN,IAAI,GAAG,EAAE;UACf,MAAMsH,UAAU,GAAGrU,SAAS,CAACmF,IAAI,CAAC9E,YAAY,CAAC2C,IAAI,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC8C,QAAQ,EAAE;UACxE,MAAMwO,UAAU,GAAGtU,SAAS,CAACmF,IAAI,CAAC9E,YAAY,CAAC2C,IAAI,EAAEqR,UAAU,EAAEA,UAAU,GAAG,EAAE,CAAC,CAAC,CAACvO,QAAQ,EAAE;UAC7F,MAAMyO,QAAQ,GAAGlU,YAAY,CAAC2C,IAAI,EAAEqR,UAAU,GAAG,EAAE,CAAC;UACpD,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,UAAU,EAAEE,CAAC,EAAE,EAAE;YACjC,MAAM9K,GAAG,GAAGjE,YAAY,CAAC8O,QAAQ,EAAEC,CAAC,GAAG,EAAE,CAAC;YAC1C,IAAI9K,GAAG,IAAI,IAAI,EAAE;cACbjI,MAAM,CAAC0G,UAAU,CAAC,wCAAwC,EAAE5G,MAAM,CAACoG,MAAM,CAACC,cAAc,EAAE;gBACtFX,IAAI,EAAE,gBAAgB;gBACtBmN,SAAS,EAAE,qDAAqD;gBAChEhM,WAAW;gBAAEpF,IAAI,EAAEzD;cACvB,CAAC,CAAC;YACN;YACAwN,IAAI,CAACjG,IAAI,CAAC4C,GAAG,CAAC;UAClB;UACA;UACA,MAAMoD,QAAQ,GAAGnH,WAAW,CAAC3C,IAAI,EAAE,EAAE,CAAC;UACtC;UACA,IAAI,CAAChD,SAAS,CAACmF,IAAI,CAAC9E,YAAY,CAAC2C,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAACiH,MAAM,EAAE,EAAE;YACxDxI,MAAM,CAAC0G,UAAU,CAAC,2CAA2C,EAAE5G,MAAM,CAACoG,MAAM,CAACC,cAAc,EAAE;cACzFX,IAAI,EAAE,gBAAgB;cACtBmN,SAAS,EAAE,qDAAqD;cAChEhM,WAAW;cAAEpF,IAAI,EAAEzD;YACvB,CAAC,CAAC;UACN;UACA,MAAMkV,gBAAgB,GAAGpU,YAAY,CAAC2C,IAAI,EAAE,EAAE,EAAE,GAAG,CAAC;UACpD;UACA,MAAM0R,SAAS,GAAG/O,WAAW,CAAC3C,IAAI,EAAE,GAAG,CAAC;UACxC,MAAM2R,UAAU,GAAG,MAAM,IAAI,CAAC9H,aAAa,CAACzE,WAAW,EAAE0E,QAAQ,EAAEC,IAAI,CAAC;UACxE,IAAI4H,UAAU,IAAI,IAAI,EAAE;YACpBlT,MAAM,CAAC0G,UAAU,CAAC,wCAAwC,EAAE5G,MAAM,CAACoG,MAAM,CAACC,cAAc,EAAE;cACtFX,IAAI,EAAE,gBAAgB;cACtBmN,SAAS,EAAE,qDAAqD;cAChEhM,WAAW;cAAEpF,IAAI,EAAEzD;YACvB,CAAC,CAAC;UACN;UACA,MAAMyI,EAAE,GAAG;YACPT,EAAE,EAAE4M,QAAQ;YACZnR,IAAI,EAAE7C,SAAS,CAAC,CAACsU,gBAAgB,EAAE/N,WAAW,CAAC,CAACiO,UAAU,EAAED,SAAS,CAAC,CAAC,CAAC;UAC5E,CAAC;UACD,OAAO,IAAI,CAACV,KAAK,CAAChM,EAAE,EAAE2K,QAAQ,EAAEsB,OAAO,GAAG,CAAC,CAAC;QAChD,CAAC,CACD,OAAOrO,KAAK,EAAE;UACV,IAAIA,KAAK,CAAC8B,IAAI,KAAKnG,MAAM,CAACoG,MAAM,CAAC+F,YAAY,EAAE;YAC3C,MAAM9H,KAAK;UACf;QACJ;MACJ;MACA,IAAI;QACA,OAAOtF,OAAO,CAACf,MAAM,CAAC;MAC1B,CAAC,CACD,OAAOqG,KAAK,EAAE;QACV,OAAOnE,MAAM,CAAC0G,UAAU,CAAC,yBAAyB,EAAE5G,MAAM,CAACoG,MAAM,CAAC+F,YAAY,EAAE;UAC5E8E,MAAM,EAAE,MAAM;UACdI,MAAM,EAAE;YAAExK,WAAW;YAAEuK;UAAS,CAAC;UAAEpT,MAAM;UAAEqG;QAC/C,CAAC,CAAC;MACN;IACJ,CAAC,CAAC;EACN;EACA0B,IAAI,CAACc,WAAW,EAAEuK,QAAQ,EAAE;IACxB,OAAOnU,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD,MAAM,IAAI,CAACqC,UAAU,EAAE;MACvB,MAAM+T,QAAQ,GAAG,MAAM5T,iBAAiB,CAAC;QACrCoH,WAAW,EAAE,IAAI,CAACsL,sBAAsB,CAACtL,WAAW,CAAC;QACrDuK,QAAQ,EAAE,IAAI,CAACE,YAAY,CAACF,QAAQ,CAAC;QACrC1K,eAAe,EAAEjJ,OAAO,CAACD,OAAO,CAACqJ,WAAW,CAACH,eAAe;MAChE,CAAC,CAAC;MACF,OAAO,IAAI,CAAC+L,KAAK,CAACY,QAAQ,CAACxM,WAAW,EAAEwM,QAAQ,CAACjC,QAAQ,EAAEiC,QAAQ,CAAC3M,eAAe,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACjG,CAAC,CAAC;EACN;EACA4M,WAAW,CAACzM,WAAW,EAAE;IACrB,OAAO5J,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD,MAAM,IAAI,CAACqC,UAAU,EAAE;MACvB,MAAM+R,MAAM,GAAG,MAAM5R,iBAAiB,CAAC;QACnCoH,WAAW,EAAE,IAAI,CAACsL,sBAAsB,CAACtL,WAAW;MACxD,CAAC,CAAC;MACF,MAAM7I,MAAM,GAAG,MAAM,IAAI,CAAC6O,OAAO,CAAC,aAAa,EAAEwE,MAAM,CAAC;MACxD,IAAI;QACA,OAAO5S,SAAS,CAACmF,IAAI,CAAC5F,MAAM,CAAC;MACjC,CAAC,CACD,OAAOqG,KAAK,EAAE;QACV,OAAOnE,MAAM,CAAC0G,UAAU,CAAC,yBAAyB,EAAE5G,MAAM,CAACoG,MAAM,CAAC+F,YAAY,EAAE;UAC5E8E,MAAM,EAAE,aAAa;UACrBI,MAAM;UAAErT,MAAM;UAAEqG;QACpB,CAAC,CAAC;MACN;IACJ,CAAC,CAAC;EACN;EACA0C,WAAW,CAACoK,aAAa,EAAE;IACvB,OAAOlU,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChDkU,aAAa,GAAG,MAAMA,aAAa;MACnC,IAAI,OAAQA,aAAc,KAAK,QAAQ,EAAE;QACrCjR,MAAM,CAACK,kBAAkB,CAAC,6BAA6B,EAAE,MAAM,EAAE4Q,aAAa,CAAC;MACnF;MACA,MAAMjP,OAAO,GAAG,MAAM,IAAI,CAACqR,WAAW,CAACpC,aAAa,CAAC;MACrD,IAAIjP,OAAO,IAAI,IAAI,EAAE;QACjBhC,MAAM,CAAC0G,UAAU,CAAC,yBAAyB,EAAE5G,MAAM,CAACoG,MAAM,CAACgB,qBAAqB,EAAE;UAC9EC,SAAS,EAAG,eAAc0B,IAAI,CAACC,SAAS,CAACmI,aAAa,CAAE;QAC5D,CAAC,CAAC;MACN;MACA,OAAOjP,OAAO;IAClB,CAAC,CAAC;EACN;EACAsR,SAAS,CAACC,mBAAmB,EAAEC,mBAAmB,EAAE;IAChD,OAAOzW,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD,MAAM,IAAI,CAACqC,UAAU,EAAE;MACvBmU,mBAAmB,GAAG,MAAMA,mBAAmB;MAC/C;MACA,IAAI/G,WAAW,GAAG,CAAC,GAAG;MACtB,MAAM2E,MAAM,GAAG;QACXqC,mBAAmB,EAAE,CAAC,CAACA;MAC3B,CAAC;MACD,IAAIxU,WAAW,CAACuU,mBAAmB,EAAE,EAAE,CAAC,EAAE;QACtCpC,MAAM,CAACrD,SAAS,GAAGyF,mBAAmB;MAC1C,CAAC,MACI;QACD,IAAI;UACApC,MAAM,CAACD,QAAQ,GAAG,MAAM,IAAI,CAACE,YAAY,CAACmC,mBAAmB,CAAC;UAC9D,IAAIvU,WAAW,CAACmS,MAAM,CAACD,QAAQ,CAAC,EAAE;YAC9B1E,WAAW,GAAGnF,QAAQ,CAAC8J,MAAM,CAACD,QAAQ,CAACzM,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;UAC5D;QACJ,CAAC,CACD,OAAON,KAAK,EAAE;UACVnE,MAAM,CAACK,kBAAkB,CAAC,iCAAiC,EAAE,qBAAqB,EAAEkT,mBAAmB,CAAC;QAC5G;MACJ;MACA,OAAO3T,IAAI,CAAC,MAAM7C,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;QAC3D,MAAMiN,KAAK,GAAG,MAAM,IAAI,CAAC2C,OAAO,CAAC,UAAU,EAAEwE,MAAM,CAAC;QACpD;QACA,IAAInH,KAAK,IAAI,IAAI,EAAE;UACf;UACA;UACA;UACA,IAAImH,MAAM,CAACrD,SAAS,IAAI,IAAI,EAAE;YAC1B,IAAI,IAAI,CAAC/D,QAAQ,CAAC,IAAI,GAAGoH,MAAM,CAACrD,SAAS,CAAC,IAAI,IAAI,EAAE;cAChD,OAAO,IAAI;YACf;UACJ;UACA;UACA,IAAIqD,MAAM,CAACD,QAAQ,IAAI,IAAI,EAAE;YACzB,IAAI1E,WAAW,GAAG,IAAI,CAACzC,QAAQ,CAACC,KAAK,EAAE;cACnC,OAAO,IAAI;YACf;UACJ;UACA;UACA,OAAOmB,SAAS;QACpB;QACA;QACA,IAAIqI,mBAAmB,EAAE;UACrB,IAAIhH,WAAW,GAAG,IAAI;UACtB,KAAK,IAAIpH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG4E,KAAK,CAACoG,YAAY,CAAC1P,MAAM,EAAE0E,CAAC,EAAE,EAAE;YAChD,MAAMmB,EAAE,GAAGyD,KAAK,CAACoG,YAAY,CAAChL,CAAC,CAAC;YAChC,IAAImB,EAAE,CAACiG,WAAW,IAAI,IAAI,EAAE;cACxBjG,EAAE,CAACyI,aAAa,GAAG,CAAC;YACxB,CAAC,MACI,IAAIzI,EAAE,CAACyI,aAAa,IAAI,IAAI,EAAE;cAC/B,IAAIxC,WAAW,IAAI,IAAI,EAAE;gBACrBA,WAAW,GAAG,MAAM,IAAI,CAACL,uBAAuB,CAAC,GAAG,GAAG,CAAC,GAAG,IAAI,CAACa,eAAe,CAAC;cACpF;cACA;cACA,IAAIgC,aAAa,GAAIxC,WAAW,GAAGjG,EAAE,CAACiG,WAAW,GAAI,CAAC;cACtD,IAAIwC,aAAa,IAAI,CAAC,EAAE;gBACpBA,aAAa,GAAG,CAAC;cACrB;cACAzI,EAAE,CAACyI,aAAa,GAAGA,aAAa;YACpC;UACJ;UACA,MAAMyE,YAAY,GAAG,IAAI,CAAC/N,SAAS,CAACgO,qBAAqB,CAAC1J,KAAK,CAAC;UAChEyJ,YAAY,CAACrD,YAAY,GAAGqD,YAAY,CAACrD,YAAY,CAACxP,GAAG,CAAE2F,EAAE,IAAK,IAAI,CAACkK,gBAAgB,CAAClK,EAAE,CAAC,CAAC;UAC5F,OAAOkN,YAAY;QACvB;QACA,OAAO,IAAI,CAAC/N,SAAS,CAACsE,KAAK,CAACA,KAAK,CAAC;MACtC,CAAC,CAAC,EAAE;QAAE2J,QAAQ,EAAE;MAAK,CAAC,CAAC;IAC3B,CAAC,CAAC;EACN;EACAC,QAAQ,CAACL,mBAAmB,EAAE;IAC1B,OAAQ,IAAI,CAACD,SAAS,CAACC,mBAAmB,EAAE,KAAK,CAAC;EACtD;EACArD,wBAAwB,CAACqD,mBAAmB,EAAE;IAC1C,OAAQ,IAAI,CAACD,SAAS,CAACC,mBAAmB,EAAE,IAAI,CAAC;EACrD;EACAtD,cAAc,CAAClC,eAAe,EAAE;IAC5B,OAAOhR,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD,MAAM,IAAI,CAACqC,UAAU,EAAE;MACvB2O,eAAe,GAAG,MAAMA,eAAe;MACvC,MAAMoD,MAAM,GAAG;QAAEpD,eAAe,EAAE,IAAI,CAACrI,SAAS,CAAC1C,IAAI,CAAC+K,eAAe,EAAE,IAAI;MAAE,CAAC;MAC9E,OAAOnO,IAAI,CAAC,MAAM7C,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;QAC3D,MAAMe,MAAM,GAAG,MAAM,IAAI,CAAC6O,OAAO,CAAC,gBAAgB,EAAEwE,MAAM,CAAC;QAC3D,IAAIrT,MAAM,IAAI,IAAI,EAAE;UAChB,IAAI,IAAI,CAACiM,QAAQ,CAAC,IAAI,GAAGgE,eAAe,CAAC,IAAI,IAAI,EAAE;YAC/C,OAAO,IAAI;UACf;UACA,OAAO5C,SAAS;QACpB;QACA,MAAM5E,EAAE,GAAG,IAAI,CAACb,SAAS,CAACmO,mBAAmB,CAAC/V,MAAM,CAAC;QACrD,IAAIyI,EAAE,CAACiG,WAAW,IAAI,IAAI,EAAE;UACxBjG,EAAE,CAACyI,aAAa,GAAG,CAAC;QACxB,CAAC,MACI,IAAIzI,EAAE,CAACyI,aAAa,IAAI,IAAI,EAAE;UAC/B,MAAMxC,WAAW,GAAG,MAAM,IAAI,CAACL,uBAAuB,CAAC,GAAG,GAAG,CAAC,GAAG,IAAI,CAACa,eAAe,CAAC;UACtF;UACA,IAAIgC,aAAa,GAAIxC,WAAW,GAAGjG,EAAE,CAACiG,WAAW,GAAI,CAAC;UACtD,IAAIwC,aAAa,IAAI,CAAC,EAAE;YACpBA,aAAa,GAAG,CAAC;UACrB;UACAzI,EAAE,CAACyI,aAAa,GAAGA,aAAa;QACpC;QACA,OAAO,IAAI,CAACyB,gBAAgB,CAAClK,EAAE,CAAC;MACpC,CAAC,CAAC,EAAE;QAAEoN,QAAQ,EAAE;MAAK,CAAC,CAAC;IAC3B,CAAC,CAAC;EACN;EACArG,qBAAqB,CAACS,eAAe,EAAE;IACnC,OAAOhR,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD,MAAM,IAAI,CAACqC,UAAU,EAAE;MACvB2O,eAAe,GAAG,MAAMA,eAAe;MACvC,MAAMoD,MAAM,GAAG;QAAEpD,eAAe,EAAE,IAAI,CAACrI,SAAS,CAAC1C,IAAI,CAAC+K,eAAe,EAAE,IAAI;MAAE,CAAC;MAC9E,OAAOnO,IAAI,CAAC,MAAM7C,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;QAC3D,MAAMe,MAAM,GAAG,MAAM,IAAI,CAAC6O,OAAO,CAAC,uBAAuB,EAAEwE,MAAM,CAAC;QAClE,IAAIrT,MAAM,IAAI,IAAI,EAAE;UAChB,IAAI,IAAI,CAACiM,QAAQ,CAAC,IAAI,GAAGgE,eAAe,CAAC,IAAI,IAAI,EAAE;YAC/C,OAAO,IAAI;UACf;UACA,OAAO5C,SAAS;QACpB;QACA;QACA,IAAIrN,MAAM,CAACgQ,SAAS,IAAI,IAAI,EAAE;UAC1B,OAAO3C,SAAS;QACpB;QACA,MAAMoC,OAAO,GAAG,IAAI,CAAC7H,SAAS,CAAC6H,OAAO,CAACzP,MAAM,CAAC;QAC9C,IAAIyP,OAAO,CAACf,WAAW,IAAI,IAAI,EAAE;UAC7Be,OAAO,CAACyB,aAAa,GAAG,CAAC;QAC7B,CAAC,MACI,IAAIzB,OAAO,CAACyB,aAAa,IAAI,IAAI,EAAE;UACpC,MAAMxC,WAAW,GAAG,MAAM,IAAI,CAACL,uBAAuB,CAAC,GAAG,GAAG,CAAC,GAAG,IAAI,CAACa,eAAe,CAAC;UACtF;UACA,IAAIgC,aAAa,GAAIxC,WAAW,GAAGe,OAAO,CAACf,WAAW,GAAI,CAAC;UAC3D,IAAIwC,aAAa,IAAI,CAAC,EAAE;YACpBA,aAAa,GAAG,CAAC;UACrB;UACAzB,OAAO,CAACyB,aAAa,GAAGA,aAAa;QACzC;QACA,OAAOzB,OAAO;MAClB,CAAC,CAAC,EAAE;QAAEoG,QAAQ,EAAE;MAAK,CAAC,CAAC;IAC3B,CAAC,CAAC;EACN;EACAhG,OAAO,CAAC1K,MAAM,EAAE;IACZ,OAAOlG,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD,MAAM,IAAI,CAACqC,UAAU,EAAE;MACvB,MAAM+R,MAAM,GAAG,MAAM5R,iBAAiB,CAAC;QAAE0D,MAAM,EAAE,IAAI,CAACqP,UAAU,CAACrP,MAAM;MAAE,CAAC,CAAC;MAC3E,MAAM2K,IAAI,GAAG,MAAM,IAAI,CAACjB,OAAO,CAAC,SAAS,EAAEwE,MAAM,CAAC;MAClDvD,IAAI,CAAC5M,OAAO,CAAE6M,GAAG,IAAK;QAClB,IAAIA,GAAG,CAACiG,OAAO,IAAI,IAAI,EAAE;UACrBjG,GAAG,CAACiG,OAAO,GAAG,KAAK;QACvB;MACJ,CAAC,CAAC;MACF,OAAO7T,SAAS,CAAC8T,OAAO,CAAC,IAAI,CAACrO,SAAS,CAACsO,SAAS,CAACC,IAAI,CAAC,IAAI,CAACvO,SAAS,CAAC,CAAC,CAACkI,IAAI,CAAC;IACjF,CAAC,CAAC;EACN;EACAsG,aAAa,GAAG;IACZ,OAAOnX,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD,MAAM,IAAI,CAACqC,UAAU,EAAE;MACvB,OAAO,IAAI,CAACuN,OAAO,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;IAC5C,CAAC,CAAC;EACN;EACAyE,YAAY,CAACF,QAAQ,EAAE;IACnB,OAAOnU,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChDmU,QAAQ,GAAG,MAAMA,QAAQ;MACzB,IAAI,OAAQA,QAAS,KAAK,QAAQ,IAAIA,QAAQ,GAAG,CAAC,EAAE;QAChD,IAAIA,QAAQ,GAAG,CAAC,EAAE;UACdlR,MAAM,CAACK,kBAAkB,CAAC,kBAAkB,EAAE,UAAU,EAAE6Q,QAAQ,CAAC;QACvE;QACA,IAAI1E,WAAW,GAAG,MAAM,IAAI,CAACL,uBAAuB,CAAC,GAAG,GAAG,CAAC,GAAG,IAAI,CAACa,eAAe,CAAC;QACpFR,WAAW,IAAI0E,QAAQ;QACvB,IAAI1E,WAAW,GAAG,CAAC,EAAE;UACjBA,WAAW,GAAG,CAAC;QACnB;QACA,OAAO,IAAI,CAAC9G,SAAS,CAACwL,QAAQ,CAAC1E,WAAW,CAAC;MAC/C;MACA,OAAO,IAAI,CAAC9G,SAAS,CAACwL,QAAQ,CAACA,QAAQ,CAAC;IAC5C,CAAC,CAAC;EACN;EACAiD,WAAW,CAAC3O,IAAI,EAAE;IACd,OAAOzI,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD,IAAIqX,WAAW,GAAG5O,IAAI;MACtB,OAAO,IAAI,EAAE;QACT,IAAI4O,WAAW,KAAK,EAAE,IAAIA,WAAW,KAAK,GAAG,EAAE;UAC3C,OAAO,IAAI;QACf;QACA;QACA;QACA,IAAI5O,IAAI,KAAK,KAAK,IAAI4O,WAAW,KAAK,KAAK,EAAE;UACzC,OAAO,IAAI;QACf;QACA;QACA,MAAMhM,IAAI,GAAG,MAAM,IAAI,CAACiM,YAAY,CAACD,WAAW,EAAE,aAAa,CAAC;QAChE;QACA,IAAIhM,IAAI,IAAI,IAAI,EAAE;UACd,MAAMkM,QAAQ,GAAG,IAAIhP,QAAQ,CAAC,IAAI,EAAE8C,IAAI,EAAE5C,IAAI,CAAC;UAC/C;UACA,IAAI4O,WAAW,KAAK5O,IAAI,IAAI,EAAE,MAAM8O,QAAQ,CAAC3O,gBAAgB,EAAE,CAAC,EAAE;YAC9D,OAAO,IAAI;UACf;UACA,OAAO2O,QAAQ;QACnB;QACA;QACAF,WAAW,GAAGA,WAAW,CAAC5S,KAAK,CAAC,GAAG,CAAC,CAACf,KAAK,CAAC,CAAC,CAAC,CAACY,IAAI,CAAC,GAAG,CAAC;MAC3D;IACJ,CAAC,CAAC;EACN;EACAgT,YAAY,CAAC7O,IAAI,EAAE2B,SAAS,EAAE;IAC1B,OAAOpK,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD,IAAIoK,SAAS,IAAI,IAAI,EAAE;QACnBA,SAAS,GAAG,KAAK;MACrB;MACA,MAAM0C,OAAO,GAAG,MAAM,IAAI,CAACzK,UAAU,EAAE;MACvC;MACA,IAAI,CAACyK,OAAO,CAAC0K,UAAU,EAAE;QACrBvU,MAAM,CAAC0G,UAAU,CAAC,8BAA8B,EAAE5G,MAAM,CAACoG,MAAM,CAACgB,qBAAqB,EAAE;UAAEC,SAAS;UAAE0C,OAAO,EAAEA,OAAO,CAACrE;QAAK,CAAC,CAAC;MAChI;MACA,IAAI;QACA;QACA,MAAMgP,QAAQ,GAAG,MAAM,IAAI,CAAC3O,IAAI,CAAC;UAC7BC,EAAE,EAAE+D,OAAO,CAAC0K,UAAU;UACtBhT,IAAI,EAAG,YAAY,GAAGpC,QAAQ,CAACqG,IAAI,CAAC,CAACf,SAAS,CAAC,CAAC;QACpD,CAAC,CAAC;QACF,OAAO,IAAI,CAACiB,SAAS,CAACgC,WAAW,CAAC8M,QAAQ,CAAC;MAC/C,CAAC,CACD,OAAOrQ,KAAK,EAAE;QACV;MAAA;MAEJ,OAAO,IAAI;IACf,CAAC,CAAC;EACN;EACAkP,WAAW,CAAC7N,IAAI,EAAE;IACd,OAAOzI,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChDyI,IAAI,GAAG,MAAMA,IAAI;MACjB;MACA,IAAI;QACA,OAAOjI,OAAO,CAACD,OAAO,CAAC,IAAI,CAACoI,SAAS,CAAC1D,OAAO,CAACwD,IAAI,CAAC,CAAC;MACxD,CAAC,CACD,OAAOrB,KAAK,EAAE;QACV;QACA,IAAInF,WAAW,CAACwG,IAAI,CAAC,EAAE;UACnB,MAAMrB,KAAK;QACf;MACJ;MACA,IAAI,OAAQqB,IAAK,KAAK,QAAQ,EAAE;QAC5BxF,MAAM,CAACK,kBAAkB,CAAC,kBAAkB,EAAE,MAAM,EAAEmF,IAAI,CAAC;MAC/D;MACA;MACA,MAAM8O,QAAQ,GAAG,MAAM,IAAI,CAACH,WAAW,CAAC3O,IAAI,CAAC;MAC7C,IAAI,CAAC8O,QAAQ,EAAE;QACX,OAAO,IAAI;MACf;MACA,OAAO,MAAMA,QAAQ,CAAC7M,UAAU,EAAE;IACtC,CAAC,CAAC;EACN;EACAgN,aAAa,CAACzS,OAAO,EAAE;IACnB,OAAOjF,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChDiF,OAAO,GAAG,MAAMA,OAAO;MACvBA,OAAO,GAAG,IAAI,CAAC0D,SAAS,CAAC1D,OAAO,CAACA,OAAO,CAAC;MACzC,MAAM0S,IAAI,GAAG1S,OAAO,CAACyC,SAAS,CAAC,CAAC,CAAC,CAACnE,WAAW,EAAE,GAAG,eAAe;MACjE,MAAMqU,YAAY,GAAG,MAAM,IAAI,CAACN,YAAY,CAACK,IAAI,EAAE,eAAe,CAAC;MACnE,IAAIC,YAAY,IAAI,IAAI,EAAE;QACtB,OAAO,IAAI;MACf;MACA;MACA,MAAMnP,IAAI,GAAGxB,YAAY,CAAC,MAAM,IAAI,CAAC6B,IAAI,CAAC;QACtCC,EAAE,EAAE6O,YAAY;QAChBpT,IAAI,EAAG,YAAY,GAAGpC,QAAQ,CAACuV,IAAI,CAAC,CAACjQ,SAAS,CAAC,CAAC;MACpD,CAAC,CAAC,EAAE,CAAC,CAAC;MACN,MAAM2D,IAAI,GAAG,MAAM,IAAI,CAACiL,WAAW,CAAC7N,IAAI,CAAC;MACzC,IAAI4C,IAAI,IAAIpG,OAAO,EAAE;QACjB,OAAO,IAAI;MACf;MACA,OAAOwD,IAAI;IACf,CAAC,CAAC;EACN;EACAmC,SAAS,CAACiN,aAAa,EAAE;IACrB,OAAO7X,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD,IAAIuX,QAAQ,GAAG,IAAI;MACnB,IAAItV,WAAW,CAAC4V,aAAa,CAAC,EAAE;QAC5B;QACA,MAAM5S,OAAO,GAAG,IAAI,CAAC0D,SAAS,CAAC1D,OAAO,CAAC4S,aAAa,CAAC;QACrD,MAAMF,IAAI,GAAG1S,OAAO,CAACyC,SAAS,CAAC,CAAC,CAAC,CAACnE,WAAW,EAAE,GAAG,eAAe;QACjE,MAAMuU,eAAe,GAAG,MAAM,IAAI,CAACR,YAAY,CAACK,IAAI,EAAE,WAAW,CAAC;QAClE,IAAI,CAACG,eAAe,EAAE;UAClB,OAAO,IAAI;QACf;QACA;QACAP,QAAQ,GAAG,IAAIhP,QAAQ,CAAC,IAAI,EAAEuP,eAAe,EAAEH,IAAI,CAAC;QACpD,IAAI;UACA,MAAM5M,MAAM,GAAG,MAAMwM,QAAQ,CAAC3M,SAAS,EAAE;UACzC,IAAIG,MAAM,EAAE;YACR,OAAOA,MAAM,CAACG,GAAG;UACrB;QACJ,CAAC,CACD,OAAO9D,KAAK,EAAE;UACV,IAAIA,KAAK,CAAC8B,IAAI,KAAKnG,MAAM,CAACoG,MAAM,CAACC,cAAc,EAAE;YAC7C,MAAMhC,KAAK;UACf;QACJ;QACA;QACA,IAAI;UACA;UACA,MAAMqB,IAAI,GAAGxB,YAAY,CAAC,MAAM,IAAI,CAAC6B,IAAI,CAAC;YACtCC,EAAE,EAAE+O,eAAe;YACnBtT,IAAI,EAAG,YAAY,GAAGpC,QAAQ,CAACuV,IAAI,CAAC,CAACjQ,SAAS,CAAC,CAAC;UACpD,CAAC,CAAC,EAAE,CAAC,CAAC;UACN6P,QAAQ,GAAG,MAAM,IAAI,CAACH,WAAW,CAAC3O,IAAI,CAAC;QAC3C,CAAC,CACD,OAAOrB,KAAK,EAAE;UACV,IAAIA,KAAK,CAAC8B,IAAI,KAAKnG,MAAM,CAACoG,MAAM,CAACC,cAAc,EAAE;YAC7C,MAAMhC,KAAK;UACf;UACA,OAAO,IAAI;QACf;MACJ,CAAC,MACI;QACD;QACAmQ,QAAQ,GAAG,MAAM,IAAI,CAACH,WAAW,CAACS,aAAa,CAAC;QAChD,IAAI,CAACN,QAAQ,EAAE;UACX,OAAO,IAAI;QACf;MACJ;MACA,MAAMxM,MAAM,GAAG,MAAMwM,QAAQ,CAAC3M,SAAS,EAAE;MACzC,IAAIG,MAAM,IAAI,IAAI,EAAE;QAChB,OAAO,IAAI;MACf;MACA,OAAOA,MAAM,CAACG,GAAG;IACrB,CAAC,CAAC;EACN;EACA0E,OAAO,CAACoE,MAAM,EAAEI,MAAM,EAAE;IACpB,OAAOnR,MAAM,CAAC0G,UAAU,CAACqK,MAAM,GAAG,kBAAkB,EAAEjR,MAAM,CAACoG,MAAM,CAAC4O,eAAe,EAAE;MAAE3N,SAAS,EAAE4J;IAAO,CAAC,CAAC;EAC/G;EACAgE,WAAW,CAACjS,KAAK,EAAE;IACf,IAAI,CAACoL,OAAO,GAAI,IAAI,CAACpE,OAAO,CAAC7G,MAAM,CAAErF,CAAC,IAAKA,CAAC,CAACsF,QAAQ,EAAE,CAAC,CAACxC,MAAM,GAAG,CAAE;EACxE;EACAsU,UAAU,CAAClS,KAAK,EAAE;IACd,IAAI,CAACoL,OAAO,GAAI,IAAI,CAACpE,OAAO,CAAC7G,MAAM,CAAErF,CAAC,IAAKA,CAAC,CAACsF,QAAQ,EAAE,CAAC,CAACxC,MAAM,GAAG,CAAE;EACxE;EACAuU,iBAAiB,CAACtT,SAAS,EAAEe,QAAQ,EAAEC,IAAI,EAAE;IACzC,MAAMG,KAAK,GAAG,IAAIP,KAAK,CAACb,WAAW,CAACC,SAAS,CAAC,EAAEe,QAAQ,EAAEC,IAAI,CAAC;IAC/D,IAAI,CAACmH,OAAO,CAACzE,IAAI,CAACvC,KAAK,CAAC;IACxB,IAAI,CAACiS,WAAW,CAACjS,KAAK,CAAC;IACvB,OAAO,IAAI;EACf;EACA0M,EAAE,CAAC7N,SAAS,EAAEe,QAAQ,EAAE;IACpB,OAAO,IAAI,CAACuS,iBAAiB,CAACtT,SAAS,EAAEe,QAAQ,EAAE,KAAK,CAAC;EAC7D;EACAC,IAAI,CAAChB,SAAS,EAAEe,QAAQ,EAAE;IACtB,OAAO,IAAI,CAACuS,iBAAiB,CAACtT,SAAS,EAAEe,QAAQ,EAAE,IAAI,CAAC;EAC5D;EACAgI,IAAI,CAAC/I,SAAS,EAAE,GAAGuT,IAAI,EAAE;IACrB,IAAIpX,MAAM,GAAG,KAAK;IAClB,IAAIqX,OAAO,GAAG,EAAE;IAChB,IAAIC,QAAQ,GAAG1T,WAAW,CAACC,SAAS,CAAC;IACrC,IAAI,CAACmI,OAAO,GAAG,IAAI,CAACA,OAAO,CAAC7G,MAAM,CAAEH,KAAK,IAAK;MAC1C,IAAIA,KAAK,CAACL,GAAG,KAAK2S,QAAQ,EAAE;QACxB,OAAO,IAAI;MACf;MACA/S,UAAU,CAAC,MAAM;QACbS,KAAK,CAACJ,QAAQ,CAACzE,KAAK,CAAC,IAAI,EAAEiX,IAAI,CAAC;MACpC,CAAC,EAAE,CAAC,CAAC;MACLpX,MAAM,GAAG,IAAI;MACb,IAAIgF,KAAK,CAACH,IAAI,EAAE;QACZwS,OAAO,CAAC9P,IAAI,CAACvC,KAAK,CAAC;QACnB,OAAO,KAAK;MAChB;MACA,OAAO,IAAI;IACf,CAAC,CAAC;IACFqS,OAAO,CAACnU,OAAO,CAAE8B,KAAK,IAAK;MAAE,IAAI,CAACkS,UAAU,CAAClS,KAAK,CAAC;IAAE,CAAC,CAAC;IACvD,OAAOhF,MAAM;EACjB;EACAuX,aAAa,CAAC1T,SAAS,EAAE;IACrB,IAAI,CAACA,SAAS,EAAE;MACZ,OAAO,IAAI,CAACmI,OAAO,CAACpJ,MAAM;IAC9B;IACA,IAAI0U,QAAQ,GAAG1T,WAAW,CAACC,SAAS,CAAC;IACrC,OAAO,IAAI,CAACmI,OAAO,CAAC7G,MAAM,CAAEH,KAAK,IAAK;MAClC,OAAQA,KAAK,CAACL,GAAG,KAAK2S,QAAQ;IAClC,CAAC,CAAC,CAAC1U,MAAM;EACb;EACA4U,SAAS,CAAC3T,SAAS,EAAE;IACjB,IAAIA,SAAS,IAAI,IAAI,EAAE;MACnB,OAAO,IAAI,CAACmI,OAAO,CAAClJ,GAAG,CAAEkC,KAAK,IAAKA,KAAK,CAACJ,QAAQ,CAAC;IACtD;IACA,IAAI0S,QAAQ,GAAG1T,WAAW,CAACC,SAAS,CAAC;IACrC,OAAO,IAAI,CAACmI,OAAO,CACd7G,MAAM,CAAEH,KAAK,IAAMA,KAAK,CAACL,GAAG,KAAK2S,QAAS,CAAC,CAC3CxU,GAAG,CAAEkC,KAAK,IAAKA,KAAK,CAACJ,QAAQ,CAAC;EACvC;EACA6S,GAAG,CAAC5T,SAAS,EAAEe,QAAQ,EAAE;IACrB,IAAIA,QAAQ,IAAI,IAAI,EAAE;MAClB,OAAO,IAAI,CAAC8S,kBAAkB,CAAC7T,SAAS,CAAC;IAC7C;IACA,MAAMwT,OAAO,GAAG,EAAE;IAClB,IAAIM,KAAK,GAAG,KAAK;IACjB,IAAIL,QAAQ,GAAG1T,WAAW,CAACC,SAAS,CAAC;IACrC,IAAI,CAACmI,OAAO,GAAG,IAAI,CAACA,OAAO,CAAC7G,MAAM,CAAEH,KAAK,IAAK;MAC1C,IAAIA,KAAK,CAACL,GAAG,KAAK2S,QAAQ,IAAItS,KAAK,CAACJ,QAAQ,IAAIA,QAAQ,EAAE;QACtD,OAAO,IAAI;MACf;MACA,IAAI+S,KAAK,EAAE;QACP,OAAO,IAAI;MACf;MACAA,KAAK,GAAG,IAAI;MACZN,OAAO,CAAC9P,IAAI,CAACvC,KAAK,CAAC;MACnB,OAAO,KAAK;IAChB,CAAC,CAAC;IACFqS,OAAO,CAACnU,OAAO,CAAE8B,KAAK,IAAK;MAAE,IAAI,CAACkS,UAAU,CAAClS,KAAK,CAAC;IAAE,CAAC,CAAC;IACvD,OAAO,IAAI;EACf;EACA0S,kBAAkB,CAAC7T,SAAS,EAAE;IAC1B,IAAIwT,OAAO,GAAG,EAAE;IAChB,IAAIxT,SAAS,IAAI,IAAI,EAAE;MACnBwT,OAAO,GAAG,IAAI,CAACrL,OAAO;MACtB,IAAI,CAACA,OAAO,GAAG,EAAE;IACrB,CAAC,MACI;MACD,MAAMsL,QAAQ,GAAG1T,WAAW,CAACC,SAAS,CAAC;MACvC,IAAI,CAACmI,OAAO,GAAG,IAAI,CAACA,OAAO,CAAC7G,MAAM,CAAEH,KAAK,IAAK;QAC1C,IAAIA,KAAK,CAACL,GAAG,KAAK2S,QAAQ,EAAE;UACxB,OAAO,IAAI;QACf;QACAD,OAAO,CAAC9P,IAAI,CAACvC,KAAK,CAAC;QACnB,OAAO,KAAK;MAChB,CAAC,CAAC;IACN;IACAqS,OAAO,CAACnU,OAAO,CAAE8B,KAAK,IAAK;MAAE,IAAI,CAACkS,UAAU,CAAClS,KAAK,CAAC;IAAE,CAAC,CAAC;IACvD,OAAO,IAAI;EACf;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}