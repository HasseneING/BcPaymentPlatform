{"ast":null,"code":"\"use strict\";\n\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexDataSlice, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { id } from \"@ethersproject/hash\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, Description, getStatic } from \"@ethersproject/properties\";\nimport { defaultAbiCoder } from \"./abi-coder\";\nimport { checkResultErrors } from \"./coders/abstract-coder\";\nimport { ConstructorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, ParamType } from \"./fragments\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport { checkResultErrors };\nexport class LogDescription extends Description {}\nexport class TransactionDescription extends Description {}\nexport class ErrorDescription extends Description {}\nexport class Indexed extends Description {\n  static isIndexed(value) {\n    return !!(value && value._isIndexed);\n  }\n}\nconst BuiltinErrors = {\n  \"0x08c379a0\": {\n    signature: \"Error(string)\",\n    name: \"Error\",\n    inputs: [\"string\"],\n    reason: true\n  },\n  \"0x4e487b71\": {\n    signature: \"Panic(uint256)\",\n    name: \"Panic\",\n    inputs: [\"uint256\"]\n  }\n};\nfunction wrapAccessError(property, error) {\n  const wrap = new Error(`deferred error during ABI decoding triggered accessing ${property}`);\n  wrap.error = error;\n  return wrap;\n}\n/*\nfunction checkNames(fragment: Fragment, type: \"input\" | \"output\", params: Array<ParamType>): void {\n    params.reduce((accum, param) => {\n        if (param.name) {\n            if (accum[param.name]) {\n                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format(\"full\") }`, \"fragment\", fragment);\n            }\n            accum[param.name] = true;\n        }\n        return accum;\n    }, <{ [ name: string ]: boolean }>{ });\n}\n*/\nexport class Interface {\n  constructor(fragments) {\n    let abi = [];\n    if (typeof fragments === \"string\") {\n      abi = JSON.parse(fragments);\n    } else {\n      abi = fragments;\n    }\n    defineReadOnly(this, \"fragments\", abi.map(fragment => {\n      return Fragment.from(fragment);\n    }).filter(fragment => fragment != null));\n    defineReadOnly(this, \"_abiCoder\", getStatic(new.target, \"getAbiCoder\")());\n    defineReadOnly(this, \"functions\", {});\n    defineReadOnly(this, \"errors\", {});\n    defineReadOnly(this, \"events\", {});\n    defineReadOnly(this, \"structs\", {});\n    // Add all fragments by their signature\n    this.fragments.forEach(fragment => {\n      let bucket = null;\n      switch (fragment.type) {\n        case \"constructor\":\n          if (this.deploy) {\n            logger.warn(\"duplicate definition - constructor\");\n            return;\n          }\n          //checkNames(fragment, \"input\", fragment.inputs);\n          defineReadOnly(this, \"deploy\", fragment);\n          return;\n        case \"function\":\n          //checkNames(fragment, \"input\", fragment.inputs);\n          //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n          bucket = this.functions;\n          break;\n        case \"event\":\n          //checkNames(fragment, \"input\", fragment.inputs);\n          bucket = this.events;\n          break;\n        case \"error\":\n          bucket = this.errors;\n          break;\n        default:\n          return;\n      }\n      let signature = fragment.format();\n      if (bucket[signature]) {\n        logger.warn(\"duplicate definition - \" + signature);\n        return;\n      }\n      bucket[signature] = fragment;\n    });\n    // If we do not have a constructor add a default\n    if (!this.deploy) {\n      defineReadOnly(this, \"deploy\", ConstructorFragment.from({\n        payable: false,\n        type: \"constructor\"\n      }));\n    }\n    defineReadOnly(this, \"_isInterface\", true);\n  }\n  format(format) {\n    if (!format) {\n      format = FormatTypes.full;\n    }\n    if (format === FormatTypes.sighash) {\n      logger.throwArgumentError(\"interface does not support formatting sighash\", \"format\", format);\n    }\n    const abi = this.fragments.map(fragment => fragment.format(format));\n    // We need to re-bundle the JSON fragments a bit\n    if (format === FormatTypes.json) {\n      return JSON.stringify(abi.map(j => JSON.parse(j)));\n    }\n    return abi;\n  }\n  // Sub-classes can override these to handle other blockchains\n  static getAbiCoder() {\n    return defaultAbiCoder;\n  }\n  static getAddress(address) {\n    return getAddress(address);\n  }\n  static getSighash(fragment) {\n    return hexDataSlice(id(fragment.format()), 0, 4);\n  }\n  static getEventTopic(eventFragment) {\n    return id(eventFragment.format());\n  }\n  // Find a function definition by any means necessary (unless it is ambiguous)\n  getFunction(nameOrSignatureOrSighash) {\n    if (isHexString(nameOrSignatureOrSighash)) {\n      for (const name in this.functions) {\n        if (nameOrSignatureOrSighash === this.getSighash(name)) {\n          return this.functions[name];\n        }\n      }\n      logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n    }\n    // It is a bare name, look up the function (will return null if ambiguous)\n    if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n      const name = nameOrSignatureOrSighash.trim();\n      const matching = Object.keys(this.functions).filter(f => f.split(\"(\" /* fix:) */)[0] === name);\n      if (matching.length === 0) {\n        logger.throwArgumentError(\"no matching function\", \"name\", name);\n      } else if (matching.length > 1) {\n        logger.throwArgumentError(\"multiple matching functions\", \"name\", name);\n      }\n      return this.functions[matching[0]];\n    }\n    // Normalize the signature and lookup the function\n    const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n    if (!result) {\n      logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n    }\n    return result;\n  }\n  // Find an event definition by any means necessary (unless it is ambiguous)\n  getEvent(nameOrSignatureOrTopic) {\n    if (isHexString(nameOrSignatureOrTopic)) {\n      const topichash = nameOrSignatureOrTopic.toLowerCase();\n      for (const name in this.events) {\n        if (topichash === this.getEventTopic(name)) {\n          return this.events[name];\n        }\n      }\n      logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n    }\n    // It is a bare name, look up the function (will return null if ambiguous)\n    if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n      const name = nameOrSignatureOrTopic.trim();\n      const matching = Object.keys(this.events).filter(f => f.split(\"(\" /* fix:) */)[0] === name);\n      if (matching.length === 0) {\n        logger.throwArgumentError(\"no matching event\", \"name\", name);\n      } else if (matching.length > 1) {\n        logger.throwArgumentError(\"multiple matching events\", \"name\", name);\n      }\n      return this.events[matching[0]];\n    }\n    // Normalize the signature and lookup the function\n    const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];\n    if (!result) {\n      logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n    }\n    return result;\n  }\n  // Find a function definition by any means necessary (unless it is ambiguous)\n  getError(nameOrSignatureOrSighash) {\n    if (isHexString(nameOrSignatureOrSighash)) {\n      const getSighash = getStatic(this.constructor, \"getSighash\");\n      for (const name in this.errors) {\n        const error = this.errors[name];\n        if (nameOrSignatureOrSighash === getSighash(error)) {\n          return this.errors[name];\n        }\n      }\n      logger.throwArgumentError(\"no matching error\", \"sighash\", nameOrSignatureOrSighash);\n    }\n    // It is a bare name, look up the function (will return null if ambiguous)\n    if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n      const name = nameOrSignatureOrSighash.trim();\n      const matching = Object.keys(this.errors).filter(f => f.split(\"(\" /* fix:) */)[0] === name);\n      if (matching.length === 0) {\n        logger.throwArgumentError(\"no matching error\", \"name\", name);\n      } else if (matching.length > 1) {\n        logger.throwArgumentError(\"multiple matching errors\", \"name\", name);\n      }\n      return this.errors[matching[0]];\n    }\n    // Normalize the signature and lookup the function\n    const result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n    if (!result) {\n      logger.throwArgumentError(\"no matching error\", \"signature\", nameOrSignatureOrSighash);\n    }\n    return result;\n  }\n  // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n  getSighash(fragment) {\n    if (typeof fragment === \"string\") {\n      try {\n        fragment = this.getFunction(fragment);\n      } catch (error) {\n        try {\n          fragment = this.getError(fragment);\n        } catch (_) {\n          throw error;\n        }\n      }\n    }\n    return getStatic(this.constructor, \"getSighash\")(fragment);\n  }\n  // Get the topic (the bytes32 hash) used by Solidity to identify an event\n  getEventTopic(eventFragment) {\n    if (typeof eventFragment === \"string\") {\n      eventFragment = this.getEvent(eventFragment);\n    }\n    return getStatic(this.constructor, \"getEventTopic\")(eventFragment);\n  }\n  _decodeParams(params, data) {\n    return this._abiCoder.decode(params, data);\n  }\n  _encodeParams(params, values) {\n    return this._abiCoder.encode(params, values);\n  }\n  encodeDeploy(values) {\n    return this._encodeParams(this.deploy.inputs, values || []);\n  }\n  decodeErrorResult(fragment, data) {\n    if (typeof fragment === \"string\") {\n      fragment = this.getError(fragment);\n    }\n    const bytes = arrayify(data);\n    if (hexlify(bytes.slice(0, 4)) !== this.getSighash(fragment)) {\n      logger.throwArgumentError(`data signature does not match error ${fragment.name}.`, \"data\", hexlify(bytes));\n    }\n    return this._decodeParams(fragment.inputs, bytes.slice(4));\n  }\n  encodeErrorResult(fragment, values) {\n    if (typeof fragment === \"string\") {\n      fragment = this.getError(fragment);\n    }\n    return hexlify(concat([this.getSighash(fragment), this._encodeParams(fragment.inputs, values || [])]));\n  }\n  // Decode the data for a function call (e.g. tx.data)\n  decodeFunctionData(functionFragment, data) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n    const bytes = arrayify(data);\n    if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\n      logger.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, \"data\", hexlify(bytes));\n    }\n    return this._decodeParams(functionFragment.inputs, bytes.slice(4));\n  }\n  // Encode the data for a function call (e.g. tx.data)\n  encodeFunctionData(functionFragment, values) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n    return hexlify(concat([this.getSighash(functionFragment), this._encodeParams(functionFragment.inputs, values || [])]));\n  }\n  // Decode the result from a function call (e.g. from eth_call)\n  decodeFunctionResult(functionFragment, data) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n    let bytes = arrayify(data);\n    let reason = null;\n    let message = \"\";\n    let errorArgs = null;\n    let errorName = null;\n    let errorSignature = null;\n    switch (bytes.length % this._abiCoder._getWordSize()) {\n      case 0:\n        try {\n          return this._abiCoder.decode(functionFragment.outputs, bytes);\n        } catch (error) {}\n        break;\n      case 4:\n        {\n          const selector = hexlify(bytes.slice(0, 4));\n          const builtin = BuiltinErrors[selector];\n          if (builtin) {\n            errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));\n            errorName = builtin.name;\n            errorSignature = builtin.signature;\n            if (builtin.reason) {\n              reason = errorArgs[0];\n            }\n            if (errorName === \"Error\") {\n              message = `; VM Exception while processing transaction: reverted with reason string ${JSON.stringify(errorArgs[0])}`;\n            } else if (errorName === \"Panic\") {\n              message = `; VM Exception while processing transaction: reverted with panic code ${errorArgs[0]}`;\n            }\n          } else {\n            try {\n              const error = this.getError(selector);\n              errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));\n              errorName = error.name;\n              errorSignature = error.format();\n            } catch (error) {}\n          }\n          break;\n        }\n    }\n    return logger.throwError(\"call revert exception\" + message, Logger.errors.CALL_EXCEPTION, {\n      method: functionFragment.format(),\n      data: hexlify(data),\n      errorArgs,\n      errorName,\n      errorSignature,\n      reason\n    });\n  }\n  // Encode the result for a function call (e.g. for eth_call)\n  encodeFunctionResult(functionFragment, values) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n    return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));\n  }\n  // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n  encodeFilterTopics(eventFragment, values) {\n    if (typeof eventFragment === \"string\") {\n      eventFragment = this.getEvent(eventFragment);\n    }\n    if (values.length > eventFragment.inputs.length) {\n      logger.throwError(\"too many arguments for \" + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {\n        argument: \"values\",\n        value: values\n      });\n    }\n    let topics = [];\n    if (!eventFragment.anonymous) {\n      topics.push(this.getEventTopic(eventFragment));\n    }\n    const encodeTopic = (param, value) => {\n      if (param.type === \"string\") {\n        return id(value);\n      } else if (param.type === \"bytes\") {\n        return keccak256(hexlify(value));\n      }\n      if (param.type === \"bool\" && typeof value === \"boolean\") {\n        value = value ? \"0x01\" : \"0x00\";\n      }\n      if (param.type.match(/^u?int/)) {\n        value = BigNumber.from(value).toHexString();\n      }\n      // Check addresses are valid\n      if (param.type === \"address\") {\n        this._abiCoder.encode([\"address\"], [value]);\n      }\n      return hexZeroPad(hexlify(value), 32);\n    };\n    values.forEach((value, index) => {\n      let param = eventFragment.inputs[index];\n      if (!param.indexed) {\n        if (value != null) {\n          logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", \"contract.\" + param.name, value);\n        }\n        return;\n      }\n      if (value == null) {\n        topics.push(null);\n      } else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n        logger.throwArgumentError(\"filtering with tuples or arrays not supported\", \"contract.\" + param.name, value);\n      } else if (Array.isArray(value)) {\n        topics.push(value.map(value => encodeTopic(param, value)));\n      } else {\n        topics.push(encodeTopic(param, value));\n      }\n    });\n    // Trim off trailing nulls\n    while (topics.length && topics[topics.length - 1] === null) {\n      topics.pop();\n    }\n    return topics;\n  }\n  encodeEventLog(eventFragment, values) {\n    if (typeof eventFragment === \"string\") {\n      eventFragment = this.getEvent(eventFragment);\n    }\n    const topics = [];\n    const dataTypes = [];\n    const dataValues = [];\n    if (!eventFragment.anonymous) {\n      topics.push(this.getEventTopic(eventFragment));\n    }\n    if (values.length !== eventFragment.inputs.length) {\n      logger.throwArgumentError(\"event arguments/values mismatch\", \"values\", values);\n    }\n    eventFragment.inputs.forEach((param, index) => {\n      const value = values[index];\n      if (param.indexed) {\n        if (param.type === \"string\") {\n          topics.push(id(value));\n        } else if (param.type === \"bytes\") {\n          topics.push(keccak256(value));\n        } else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n          // @TODO\n          throw new Error(\"not implemented\");\n        } else {\n          topics.push(this._abiCoder.encode([param.type], [value]));\n        }\n      } else {\n        dataTypes.push(param);\n        dataValues.push(value);\n      }\n    });\n    return {\n      data: this._abiCoder.encode(dataTypes, dataValues),\n      topics: topics\n    };\n  }\n  // Decode a filter for the event and the search criteria\n  decodeEventLog(eventFragment, data, topics) {\n    if (typeof eventFragment === \"string\") {\n      eventFragment = this.getEvent(eventFragment);\n    }\n    if (topics != null && !eventFragment.anonymous) {\n      let topicHash = this.getEventTopic(eventFragment);\n      if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n        logger.throwError(\"fragment/topic mismatch\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"topics[0]\",\n          expected: topicHash,\n          value: topics[0]\n        });\n      }\n      topics = topics.slice(1);\n    }\n    let indexed = [];\n    let nonIndexed = [];\n    let dynamic = [];\n    eventFragment.inputs.forEach((param, index) => {\n      if (param.indexed) {\n        if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n          indexed.push(ParamType.fromObject({\n            type: \"bytes32\",\n            name: param.name\n          }));\n          dynamic.push(true);\n        } else {\n          indexed.push(param);\n          dynamic.push(false);\n        }\n      } else {\n        nonIndexed.push(param);\n        dynamic.push(false);\n      }\n    });\n    let resultIndexed = topics != null ? this._abiCoder.decode(indexed, concat(topics)) : null;\n    let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);\n    let result = [];\n    let nonIndexedIndex = 0,\n      indexedIndex = 0;\n    eventFragment.inputs.forEach((param, index) => {\n      if (param.indexed) {\n        if (resultIndexed == null) {\n          result[index] = new Indexed({\n            _isIndexed: true,\n            hash: null\n          });\n        } else if (dynamic[index]) {\n          result[index] = new Indexed({\n            _isIndexed: true,\n            hash: resultIndexed[indexedIndex++]\n          });\n        } else {\n          try {\n            result[index] = resultIndexed[indexedIndex++];\n          } catch (error) {\n            result[index] = error;\n          }\n        }\n      } else {\n        try {\n          result[index] = resultNonIndexed[nonIndexedIndex++];\n        } catch (error) {\n          result[index] = error;\n        }\n      }\n      // Add the keyword argument if named and safe\n      if (param.name && result[param.name] == null) {\n        const value = result[index];\n        // Make error named values throw on access\n        if (value instanceof Error) {\n          Object.defineProperty(result, param.name, {\n            enumerable: true,\n            get: () => {\n              throw wrapAccessError(`property ${JSON.stringify(param.name)}`, value);\n            }\n          });\n        } else {\n          result[param.name] = value;\n        }\n      }\n    });\n    // Make all error indexed values throw on access\n    for (let i = 0; i < result.length; i++) {\n      const value = result[i];\n      if (value instanceof Error) {\n        Object.defineProperty(result, i, {\n          enumerable: true,\n          get: () => {\n            throw wrapAccessError(`index ${i}`, value);\n          }\n        });\n      }\n    }\n    return Object.freeze(result);\n  }\n  // Given a transaction, find the matching function fragment (if any) and\n  // determine all its properties and call parameters\n  parseTransaction(tx) {\n    let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());\n    if (!fragment) {\n      return null;\n    }\n    return new TransactionDescription({\n      args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n      functionFragment: fragment,\n      name: fragment.name,\n      signature: fragment.format(),\n      sighash: this.getSighash(fragment),\n      value: BigNumber.from(tx.value || \"0\")\n    });\n  }\n  // @TODO\n  //parseCallResult(data: BytesLike): ??\n  // Given an event log, find the matching event fragment (if any) and\n  // determine all its properties and values\n  parseLog(log) {\n    let fragment = this.getEvent(log.topics[0]);\n    if (!fragment || fragment.anonymous) {\n      return null;\n    }\n    // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n    //        Probably not, because just because it is the only event in the ABI does\n    //        not mean we have the full ABI; maybe just a fragment?\n    return new LogDescription({\n      eventFragment: fragment,\n      name: fragment.name,\n      signature: fragment.format(),\n      topic: this.getEventTopic(fragment),\n      args: this.decodeEventLog(fragment, log.data, log.topics)\n    });\n  }\n  parseError(data) {\n    const hexData = hexlify(data);\n    let fragment = this.getError(hexData.substring(0, 10).toLowerCase());\n    if (!fragment) {\n      return null;\n    }\n    return new ErrorDescription({\n      args: this._abiCoder.decode(fragment.inputs, \"0x\" + hexData.substring(10)),\n      errorFragment: fragment,\n      name: fragment.name,\n      signature: fragment.format(),\n      sighash: this.getSighash(fragment)\n    });\n  }\n  /*\n  static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\n      if (Interface.isInterface(value)) {\n          return value;\n      }\n      if (typeof(value) === \"string\") {\n          return new Interface(JSON.parse(value));\n      }\n      return new Interface(value);\n  }\n  */\n  static isInterface(value) {\n    return !!(value && value._isInterface);\n  }\n}","map":{"version":3,"names":["getAddress","BigNumber","arrayify","concat","hexDataSlice","hexlify","hexZeroPad","isHexString","id","keccak256","defineReadOnly","Description","getStatic","defaultAbiCoder","checkResultErrors","ConstructorFragment","EventFragment","FormatTypes","Fragment","FunctionFragment","ParamType","Logger","version","logger","LogDescription","TransactionDescription","ErrorDescription","Indexed","isIndexed","value","_isIndexed","BuiltinErrors","signature","name","inputs","reason","wrapAccessError","property","error","wrap","Error","Interface","constructor","fragments","abi","JSON","parse","map","fragment","from","filter","new","target","forEach","bucket","type","deploy","warn","functions","events","errors","format","payable","full","sighash","throwArgumentError","json","stringify","j","getAbiCoder","address","getSighash","getEventTopic","eventFragment","getFunction","nameOrSignatureOrSighash","indexOf","trim","matching","Object","keys","f","split","length","result","fromString","getEvent","nameOrSignatureOrTopic","topichash","toLowerCase","getError","_","_decodeParams","params","data","_abiCoder","decode","_encodeParams","values","encode","encodeDeploy","decodeErrorResult","bytes","slice","encodeErrorResult","decodeFunctionData","functionFragment","encodeFunctionData","decodeFunctionResult","message","errorArgs","errorName","errorSignature","_getWordSize","outputs","selector","builtin","throwError","CALL_EXCEPTION","method","encodeFunctionResult","encodeFilterTopics","UNEXPECTED_ARGUMENT","argument","topics","anonymous","push","encodeTopic","param","match","toHexString","index","indexed","baseType","Array","isArray","pop","encodeEventLog","dataTypes","dataValues","decodeEventLog","topicHash","INVALID_ARGUMENT","expected","nonIndexed","dynamic","fromObject","resultIndexed","resultNonIndexed","nonIndexedIndex","indexedIndex","hash","defineProperty","enumerable","get","i","freeze","parseTransaction","tx","substring","args","parseLog","log","topic","parseError","hexData","errorFragment","isInterface","_isInterface"],"sources":["F:/DDesktop/MEAN_BC/mean-stack-authentication-authorization-master/angular-15-client/node_modules/@ethersproject/abi/lib.esm/interface.js"],"sourcesContent":["\"use strict\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexDataSlice, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { id } from \"@ethersproject/hash\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, Description, getStatic } from \"@ethersproject/properties\";\nimport { defaultAbiCoder } from \"./abi-coder\";\nimport { checkResultErrors } from \"./coders/abstract-coder\";\nimport { ConstructorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, ParamType } from \"./fragments\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport { checkResultErrors };\nexport class LogDescription extends Description {\n}\nexport class TransactionDescription extends Description {\n}\nexport class ErrorDescription extends Description {\n}\nexport class Indexed extends Description {\n    static isIndexed(value) {\n        return !!(value && value._isIndexed);\n    }\n}\nconst BuiltinErrors = {\n    \"0x08c379a0\": { signature: \"Error(string)\", name: \"Error\", inputs: [\"string\"], reason: true },\n    \"0x4e487b71\": { signature: \"Panic(uint256)\", name: \"Panic\", inputs: [\"uint256\"] }\n};\nfunction wrapAccessError(property, error) {\n    const wrap = new Error(`deferred error during ABI decoding triggered accessing ${property}`);\n    wrap.error = error;\n    return wrap;\n}\n/*\nfunction checkNames(fragment: Fragment, type: \"input\" | \"output\", params: Array<ParamType>): void {\n    params.reduce((accum, param) => {\n        if (param.name) {\n            if (accum[param.name]) {\n                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format(\"full\") }`, \"fragment\", fragment);\n            }\n            accum[param.name] = true;\n        }\n        return accum;\n    }, <{ [ name: string ]: boolean }>{ });\n}\n*/\nexport class Interface {\n    constructor(fragments) {\n        let abi = [];\n        if (typeof (fragments) === \"string\") {\n            abi = JSON.parse(fragments);\n        }\n        else {\n            abi = fragments;\n        }\n        defineReadOnly(this, \"fragments\", abi.map((fragment) => {\n            return Fragment.from(fragment);\n        }).filter((fragment) => (fragment != null)));\n        defineReadOnly(this, \"_abiCoder\", getStatic(new.target, \"getAbiCoder\")());\n        defineReadOnly(this, \"functions\", {});\n        defineReadOnly(this, \"errors\", {});\n        defineReadOnly(this, \"events\", {});\n        defineReadOnly(this, \"structs\", {});\n        // Add all fragments by their signature\n        this.fragments.forEach((fragment) => {\n            let bucket = null;\n            switch (fragment.type) {\n                case \"constructor\":\n                    if (this.deploy) {\n                        logger.warn(\"duplicate definition - constructor\");\n                        return;\n                    }\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    defineReadOnly(this, \"deploy\", fragment);\n                    return;\n                case \"function\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n                    bucket = this.functions;\n                    break;\n                case \"event\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    bucket = this.events;\n                    break;\n                case \"error\":\n                    bucket = this.errors;\n                    break;\n                default:\n                    return;\n            }\n            let signature = fragment.format();\n            if (bucket[signature]) {\n                logger.warn(\"duplicate definition - \" + signature);\n                return;\n            }\n            bucket[signature] = fragment;\n        });\n        // If we do not have a constructor add a default\n        if (!this.deploy) {\n            defineReadOnly(this, \"deploy\", ConstructorFragment.from({\n                payable: false,\n                type: \"constructor\"\n            }));\n        }\n        defineReadOnly(this, \"_isInterface\", true);\n    }\n    format(format) {\n        if (!format) {\n            format = FormatTypes.full;\n        }\n        if (format === FormatTypes.sighash) {\n            logger.throwArgumentError(\"interface does not support formatting sighash\", \"format\", format);\n        }\n        const abi = this.fragments.map((fragment) => fragment.format(format));\n        // We need to re-bundle the JSON fragments a bit\n        if (format === FormatTypes.json) {\n            return JSON.stringify(abi.map((j) => JSON.parse(j)));\n        }\n        return abi;\n    }\n    // Sub-classes can override these to handle other blockchains\n    static getAbiCoder() {\n        return defaultAbiCoder;\n    }\n    static getAddress(address) {\n        return getAddress(address);\n    }\n    static getSighash(fragment) {\n        return hexDataSlice(id(fragment.format()), 0, 4);\n    }\n    static getEventTopic(eventFragment) {\n        return id(eventFragment.format());\n    }\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    getFunction(nameOrSignatureOrSighash) {\n        if (isHexString(nameOrSignatureOrSighash)) {\n            for (const name in this.functions) {\n                if (nameOrSignatureOrSighash === this.getSighash(name)) {\n                    return this.functions[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrSighash.trim();\n            const matching = Object.keys(this.functions).filter((f) => (f.split(\"(\" /* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching function\", \"name\", name);\n            }\n            else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching functions\", \"name\", name);\n            }\n            return this.functions[matching[0]];\n        }\n        // Normalize the signature and lookup the function\n        const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n        }\n        return result;\n    }\n    // Find an event definition by any means necessary (unless it is ambiguous)\n    getEvent(nameOrSignatureOrTopic) {\n        if (isHexString(nameOrSignatureOrTopic)) {\n            const topichash = nameOrSignatureOrTopic.toLowerCase();\n            for (const name in this.events) {\n                if (topichash === this.getEventTopic(name)) {\n                    return this.events[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrTopic.trim();\n            const matching = Object.keys(this.events).filter((f) => (f.split(\"(\" /* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching event\", \"name\", name);\n            }\n            else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching events\", \"name\", name);\n            }\n            return this.events[matching[0]];\n        }\n        // Normalize the signature and lookup the function\n        const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n        }\n        return result;\n    }\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    getError(nameOrSignatureOrSighash) {\n        if (isHexString(nameOrSignatureOrSighash)) {\n            const getSighash = getStatic(this.constructor, \"getSighash\");\n            for (const name in this.errors) {\n                const error = this.errors[name];\n                if (nameOrSignatureOrSighash === getSighash(error)) {\n                    return this.errors[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching error\", \"sighash\", nameOrSignatureOrSighash);\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrSighash.trim();\n            const matching = Object.keys(this.errors).filter((f) => (f.split(\"(\" /* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching error\", \"name\", name);\n            }\n            else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching errors\", \"name\", name);\n            }\n            return this.errors[matching[0]];\n        }\n        // Normalize the signature and lookup the function\n        const result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching error\", \"signature\", nameOrSignatureOrSighash);\n        }\n        return result;\n    }\n    // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n    getSighash(fragment) {\n        if (typeof (fragment) === \"string\") {\n            try {\n                fragment = this.getFunction(fragment);\n            }\n            catch (error) {\n                try {\n                    fragment = this.getError(fragment);\n                }\n                catch (_) {\n                    throw error;\n                }\n            }\n        }\n        return getStatic(this.constructor, \"getSighash\")(fragment);\n    }\n    // Get the topic (the bytes32 hash) used by Solidity to identify an event\n    getEventTopic(eventFragment) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        return getStatic(this.constructor, \"getEventTopic\")(eventFragment);\n    }\n    _decodeParams(params, data) {\n        return this._abiCoder.decode(params, data);\n    }\n    _encodeParams(params, values) {\n        return this._abiCoder.encode(params, values);\n    }\n    encodeDeploy(values) {\n        return this._encodeParams(this.deploy.inputs, values || []);\n    }\n    decodeErrorResult(fragment, data) {\n        if (typeof (fragment) === \"string\") {\n            fragment = this.getError(fragment);\n        }\n        const bytes = arrayify(data);\n        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(fragment)) {\n            logger.throwArgumentError(`data signature does not match error ${fragment.name}.`, \"data\", hexlify(bytes));\n        }\n        return this._decodeParams(fragment.inputs, bytes.slice(4));\n    }\n    encodeErrorResult(fragment, values) {\n        if (typeof (fragment) === \"string\") {\n            fragment = this.getError(fragment);\n        }\n        return hexlify(concat([\n            this.getSighash(fragment),\n            this._encodeParams(fragment.inputs, values || [])\n        ]));\n    }\n    // Decode the data for a function call (e.g. tx.data)\n    decodeFunctionData(functionFragment, data) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        const bytes = arrayify(data);\n        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\n            logger.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, \"data\", hexlify(bytes));\n        }\n        return this._decodeParams(functionFragment.inputs, bytes.slice(4));\n    }\n    // Encode the data for a function call (e.g. tx.data)\n    encodeFunctionData(functionFragment, values) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        return hexlify(concat([\n            this.getSighash(functionFragment),\n            this._encodeParams(functionFragment.inputs, values || [])\n        ]));\n    }\n    // Decode the result from a function call (e.g. from eth_call)\n    decodeFunctionResult(functionFragment, data) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        let bytes = arrayify(data);\n        let reason = null;\n        let message = \"\";\n        let errorArgs = null;\n        let errorName = null;\n        let errorSignature = null;\n        switch (bytes.length % this._abiCoder._getWordSize()) {\n            case 0:\n                try {\n                    return this._abiCoder.decode(functionFragment.outputs, bytes);\n                }\n                catch (error) { }\n                break;\n            case 4: {\n                const selector = hexlify(bytes.slice(0, 4));\n                const builtin = BuiltinErrors[selector];\n                if (builtin) {\n                    errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));\n                    errorName = builtin.name;\n                    errorSignature = builtin.signature;\n                    if (builtin.reason) {\n                        reason = errorArgs[0];\n                    }\n                    if (errorName === \"Error\") {\n                        message = `; VM Exception while processing transaction: reverted with reason string ${JSON.stringify(errorArgs[0])}`;\n                    }\n                    else if (errorName === \"Panic\") {\n                        message = `; VM Exception while processing transaction: reverted with panic code ${errorArgs[0]}`;\n                    }\n                }\n                else {\n                    try {\n                        const error = this.getError(selector);\n                        errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));\n                        errorName = error.name;\n                        errorSignature = error.format();\n                    }\n                    catch (error) { }\n                }\n                break;\n            }\n        }\n        return logger.throwError(\"call revert exception\" + message, Logger.errors.CALL_EXCEPTION, {\n            method: functionFragment.format(),\n            data: hexlify(data), errorArgs, errorName, errorSignature, reason\n        });\n    }\n    // Encode the result for a function call (e.g. for eth_call)\n    encodeFunctionResult(functionFragment, values) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));\n    }\n    // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n    encodeFilterTopics(eventFragment, values) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        if (values.length > eventFragment.inputs.length) {\n            logger.throwError(\"too many arguments for \" + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {\n                argument: \"values\",\n                value: values\n            });\n        }\n        let topics = [];\n        if (!eventFragment.anonymous) {\n            topics.push(this.getEventTopic(eventFragment));\n        }\n        const encodeTopic = (param, value) => {\n            if (param.type === \"string\") {\n                return id(value);\n            }\n            else if (param.type === \"bytes\") {\n                return keccak256(hexlify(value));\n            }\n            if (param.type === \"bool\" && typeof (value) === \"boolean\") {\n                value = (value ? \"0x01\" : \"0x00\");\n            }\n            if (param.type.match(/^u?int/)) {\n                value = BigNumber.from(value).toHexString();\n            }\n            // Check addresses are valid\n            if (param.type === \"address\") {\n                this._abiCoder.encode([\"address\"], [value]);\n            }\n            return hexZeroPad(hexlify(value), 32);\n        };\n        values.forEach((value, index) => {\n            let param = eventFragment.inputs[index];\n            if (!param.indexed) {\n                if (value != null) {\n                    logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", (\"contract.\" + param.name), value);\n                }\n                return;\n            }\n            if (value == null) {\n                topics.push(null);\n            }\n            else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n                logger.throwArgumentError(\"filtering with tuples or arrays not supported\", (\"contract.\" + param.name), value);\n            }\n            else if (Array.isArray(value)) {\n                topics.push(value.map((value) => encodeTopic(param, value)));\n            }\n            else {\n                topics.push(encodeTopic(param, value));\n            }\n        });\n        // Trim off trailing nulls\n        while (topics.length && topics[topics.length - 1] === null) {\n            topics.pop();\n        }\n        return topics;\n    }\n    encodeEventLog(eventFragment, values) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        const topics = [];\n        const dataTypes = [];\n        const dataValues = [];\n        if (!eventFragment.anonymous) {\n            topics.push(this.getEventTopic(eventFragment));\n        }\n        if (values.length !== eventFragment.inputs.length) {\n            logger.throwArgumentError(\"event arguments/values mismatch\", \"values\", values);\n        }\n        eventFragment.inputs.forEach((param, index) => {\n            const value = values[index];\n            if (param.indexed) {\n                if (param.type === \"string\") {\n                    topics.push(id(value));\n                }\n                else if (param.type === \"bytes\") {\n                    topics.push(keccak256(value));\n                }\n                else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    // @TODO\n                    throw new Error(\"not implemented\");\n                }\n                else {\n                    topics.push(this._abiCoder.encode([param.type], [value]));\n                }\n            }\n            else {\n                dataTypes.push(param);\n                dataValues.push(value);\n            }\n        });\n        return {\n            data: this._abiCoder.encode(dataTypes, dataValues),\n            topics: topics\n        };\n    }\n    // Decode a filter for the event and the search criteria\n    decodeEventLog(eventFragment, data, topics) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        if (topics != null && !eventFragment.anonymous) {\n            let topicHash = this.getEventTopic(eventFragment);\n            if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n                logger.throwError(\"fragment/topic mismatch\", Logger.errors.INVALID_ARGUMENT, { argument: \"topics[0]\", expected: topicHash, value: topics[0] });\n            }\n            topics = topics.slice(1);\n        }\n        let indexed = [];\n        let nonIndexed = [];\n        let dynamic = [];\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    indexed.push(ParamType.fromObject({ type: \"bytes32\", name: param.name }));\n                    dynamic.push(true);\n                }\n                else {\n                    indexed.push(param);\n                    dynamic.push(false);\n                }\n            }\n            else {\n                nonIndexed.push(param);\n                dynamic.push(false);\n            }\n        });\n        let resultIndexed = (topics != null) ? this._abiCoder.decode(indexed, concat(topics)) : null;\n        let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);\n        let result = [];\n        let nonIndexedIndex = 0, indexedIndex = 0;\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (resultIndexed == null) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: null });\n                }\n                else if (dynamic[index]) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });\n                }\n                else {\n                    try {\n                        result[index] = resultIndexed[indexedIndex++];\n                    }\n                    catch (error) {\n                        result[index] = error;\n                    }\n                }\n            }\n            else {\n                try {\n                    result[index] = resultNonIndexed[nonIndexedIndex++];\n                }\n                catch (error) {\n                    result[index] = error;\n                }\n            }\n            // Add the keyword argument if named and safe\n            if (param.name && result[param.name] == null) {\n                const value = result[index];\n                // Make error named values throw on access\n                if (value instanceof Error) {\n                    Object.defineProperty(result, param.name, {\n                        enumerable: true,\n                        get: () => { throw wrapAccessError(`property ${JSON.stringify(param.name)}`, value); }\n                    });\n                }\n                else {\n                    result[param.name] = value;\n                }\n            }\n        });\n        // Make all error indexed values throw on access\n        for (let i = 0; i < result.length; i++) {\n            const value = result[i];\n            if (value instanceof Error) {\n                Object.defineProperty(result, i, {\n                    enumerable: true,\n                    get: () => { throw wrapAccessError(`index ${i}`, value); }\n                });\n            }\n        }\n        return Object.freeze(result);\n    }\n    // Given a transaction, find the matching function fragment (if any) and\n    // determine all its properties and call parameters\n    parseTransaction(tx) {\n        let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());\n        if (!fragment) {\n            return null;\n        }\n        return new TransactionDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n            functionFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment),\n            value: BigNumber.from(tx.value || \"0\"),\n        });\n    }\n    // @TODO\n    //parseCallResult(data: BytesLike): ??\n    // Given an event log, find the matching event fragment (if any) and\n    // determine all its properties and values\n    parseLog(log) {\n        let fragment = this.getEvent(log.topics[0]);\n        if (!fragment || fragment.anonymous) {\n            return null;\n        }\n        // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n        //        Probably not, because just because it is the only event in the ABI does\n        //        not mean we have the full ABI; maybe just a fragment?\n        return new LogDescription({\n            eventFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            topic: this.getEventTopic(fragment),\n            args: this.decodeEventLog(fragment, log.data, log.topics)\n        });\n    }\n    parseError(data) {\n        const hexData = hexlify(data);\n        let fragment = this.getError(hexData.substring(0, 10).toLowerCase());\n        if (!fragment) {\n            return null;\n        }\n        return new ErrorDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + hexData.substring(10)),\n            errorFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment),\n        });\n    }\n    /*\n    static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\n        if (Interface.isInterface(value)) {\n            return value;\n        }\n        if (typeof(value) === \"string\") {\n            return new Interface(JSON.parse(value));\n        }\n        return new Interface(value);\n    }\n    */\n    static isInterface(value) {\n        return !!(value && value._isInterface);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}