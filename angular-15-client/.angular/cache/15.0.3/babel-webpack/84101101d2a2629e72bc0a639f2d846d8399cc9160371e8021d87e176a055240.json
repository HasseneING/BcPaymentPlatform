{"ast":null,"code":"\"use strict\";\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n;\nconst _constructorGuard = {};\nlet ModifiersBytes = {\n  calldata: true,\n  memory: true,\n  storage: true\n};\nlet ModifiersNest = {\n  calldata: true,\n  memory: true\n};\nfunction checkModifier(type, name) {\n  if (type === \"bytes\" || type === \"string\") {\n    if (ModifiersBytes[name]) {\n      return true;\n    }\n  } else if (type === \"address\") {\n    if (name === \"payable\") {\n      return true;\n    }\n  } else if (type.indexOf(\"[\") >= 0 || type === \"tuple\") {\n    if (ModifiersNest[name]) {\n      return true;\n    }\n  }\n  if (ModifiersBytes[name] || name === \"payable\") {\n    logger.throwArgumentError(\"invalid modifier\", \"name\", name);\n  }\n  return false;\n}\n// @TODO: Make sure that children of an indexed tuple are marked with a null indexed\nfunction parseParamType(param, allowIndexed) {\n  let originalParam = param;\n  function throwError(i) {\n    logger.throwArgumentError(`unexpected character at position ${i}`, \"param\", param);\n  }\n  param = param.replace(/\\s/g, \" \");\n  function newNode(parent) {\n    let node = {\n      type: \"\",\n      name: \"\",\n      parent: parent,\n      state: {\n        allowType: true\n      }\n    };\n    if (allowIndexed) {\n      node.indexed = false;\n    }\n    return node;\n  }\n  let parent = {\n    type: \"\",\n    name: \"\",\n    state: {\n      allowType: true\n    }\n  };\n  let node = parent;\n  for (let i = 0; i < param.length; i++) {\n    let c = param[i];\n    switch (c) {\n      case \"(\":\n        if (node.state.allowType && node.type === \"\") {\n          node.type = \"tuple\";\n        } else if (!node.state.allowParams) {\n          throwError(i);\n        }\n        node.state.allowType = false;\n        node.type = verifyType(node.type);\n        node.components = [newNode(node)];\n        node = node.components[0];\n        break;\n      case \")\":\n        delete node.state;\n        if (node.name === \"indexed\") {\n          if (!allowIndexed) {\n            throwError(i);\n          }\n          node.indexed = true;\n          node.name = \"\";\n        }\n        if (checkModifier(node.type, node.name)) {\n          node.name = \"\";\n        }\n        node.type = verifyType(node.type);\n        let child = node;\n        node = node.parent;\n        if (!node) {\n          throwError(i);\n        }\n        delete child.parent;\n        node.state.allowParams = false;\n        node.state.allowName = true;\n        node.state.allowArray = true;\n        break;\n      case \",\":\n        delete node.state;\n        if (node.name === \"indexed\") {\n          if (!allowIndexed) {\n            throwError(i);\n          }\n          node.indexed = true;\n          node.name = \"\";\n        }\n        if (checkModifier(node.type, node.name)) {\n          node.name = \"\";\n        }\n        node.type = verifyType(node.type);\n        let sibling = newNode(node.parent);\n        //{ type: \"\", name: \"\", parent: node.parent, state: { allowType: true } };\n        node.parent.components.push(sibling);\n        delete node.parent;\n        node = sibling;\n        break;\n      // Hit a space...\n      case \" \":\n        // If reading type, the type is done and may read a param or name\n        if (node.state.allowType) {\n          if (node.type !== \"\") {\n            node.type = verifyType(node.type);\n            delete node.state.allowType;\n            node.state.allowName = true;\n            node.state.allowParams = true;\n          }\n        }\n        // If reading name, the name is done\n        if (node.state.allowName) {\n          if (node.name !== \"\") {\n            if (node.name === \"indexed\") {\n              if (!allowIndexed) {\n                throwError(i);\n              }\n              if (node.indexed) {\n                throwError(i);\n              }\n              node.indexed = true;\n              node.name = \"\";\n            } else if (checkModifier(node.type, node.name)) {\n              node.name = \"\";\n            } else {\n              node.state.allowName = false;\n            }\n          }\n        }\n        break;\n      case \"[\":\n        if (!node.state.allowArray) {\n          throwError(i);\n        }\n        node.type += c;\n        node.state.allowArray = false;\n        node.state.allowName = false;\n        node.state.readArray = true;\n        break;\n      case \"]\":\n        if (!node.state.readArray) {\n          throwError(i);\n        }\n        node.type += c;\n        node.state.readArray = false;\n        node.state.allowArray = true;\n        node.state.allowName = true;\n        break;\n      default:\n        if (node.state.allowType) {\n          node.type += c;\n          node.state.allowParams = true;\n          node.state.allowArray = true;\n        } else if (node.state.allowName) {\n          node.name += c;\n          delete node.state.allowArray;\n        } else if (node.state.readArray) {\n          node.type += c;\n        } else {\n          throwError(i);\n        }\n    }\n  }\n  if (node.parent) {\n    logger.throwArgumentError(\"unexpected eof\", \"param\", param);\n  }\n  delete parent.state;\n  if (node.name === \"indexed\") {\n    if (!allowIndexed) {\n      throwError(originalParam.length - 7);\n    }\n    if (node.indexed) {\n      throwError(originalParam.length - 7);\n    }\n    node.indexed = true;\n    node.name = \"\";\n  } else if (checkModifier(node.type, node.name)) {\n    node.name = \"\";\n  }\n  parent.type = verifyType(parent.type);\n  return parent;\n}\nfunction populate(object, params) {\n  for (let key in params) {\n    defineReadOnly(object, key, params[key]);\n  }\n}\nexport const FormatTypes = Object.freeze({\n  // Bare formatting, as is needed for computing a sighash of an event or function\n  sighash: \"sighash\",\n  // Human-Readable with Minimal spacing and without names (compact human-readable)\n  minimal: \"minimal\",\n  // Human-Readable with nice spacing, including all names\n  full: \"full\",\n  // JSON-format a la Solidity\n  json: \"json\"\n});\nconst paramTypeArray = new RegExp(/^(.*)\\[([0-9]*)\\]$/);\nexport class ParamType {\n  constructor(constructorGuard, params) {\n    if (constructorGuard !== _constructorGuard) {\n      logger.throwError(\"use fromString\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"new ParamType()\"\n      });\n    }\n    populate(this, params);\n    let match = this.type.match(paramTypeArray);\n    if (match) {\n      populate(this, {\n        arrayLength: parseInt(match[2] || \"-1\"),\n        arrayChildren: ParamType.fromObject({\n          type: match[1],\n          components: this.components\n        }),\n        baseType: \"array\"\n      });\n    } else {\n      populate(this, {\n        arrayLength: null,\n        arrayChildren: null,\n        baseType: this.components != null ? \"tuple\" : this.type\n      });\n    }\n    this._isParamType = true;\n    Object.freeze(this);\n  }\n  // Format the parameter fragment\n  //   - sighash: \"(uint256,address)\"\n  //   - minimal: \"tuple(uint256,address) indexed\"\n  //   - full:    \"tuple(uint256 foo, address bar) indexed baz\"\n  format(format) {\n    if (!format) {\n      format = FormatTypes.sighash;\n    }\n    if (!FormatTypes[format]) {\n      logger.throwArgumentError(\"invalid format type\", \"format\", format);\n    }\n    if (format === FormatTypes.json) {\n      let result = {\n        type: this.baseType === \"tuple\" ? \"tuple\" : this.type,\n        name: this.name || undefined\n      };\n      if (typeof this.indexed === \"boolean\") {\n        result.indexed = this.indexed;\n      }\n      if (this.components) {\n        result.components = this.components.map(comp => JSON.parse(comp.format(format)));\n      }\n      return JSON.stringify(result);\n    }\n    let result = \"\";\n    // Array\n    if (this.baseType === \"array\") {\n      result += this.arrayChildren.format(format);\n      result += \"[\" + (this.arrayLength < 0 ? \"\" : String(this.arrayLength)) + \"]\";\n    } else {\n      if (this.baseType === \"tuple\") {\n        if (format !== FormatTypes.sighash) {\n          result += this.type;\n        }\n        result += \"(\" + this.components.map(comp => comp.format(format)).join(format === FormatTypes.full ? \", \" : \",\") + \")\";\n      } else {\n        result += this.type;\n      }\n    }\n    if (format !== FormatTypes.sighash) {\n      if (this.indexed === true) {\n        result += \" indexed\";\n      }\n      if (format === FormatTypes.full && this.name) {\n        result += \" \" + this.name;\n      }\n    }\n    return result;\n  }\n  static from(value, allowIndexed) {\n    if (typeof value === \"string\") {\n      return ParamType.fromString(value, allowIndexed);\n    }\n    return ParamType.fromObject(value);\n  }\n  static fromObject(value) {\n    if (ParamType.isParamType(value)) {\n      return value;\n    }\n    return new ParamType(_constructorGuard, {\n      name: value.name || null,\n      type: verifyType(value.type),\n      indexed: value.indexed == null ? null : !!value.indexed,\n      components: value.components ? value.components.map(ParamType.fromObject) : null\n    });\n  }\n  static fromString(value, allowIndexed) {\n    function ParamTypify(node) {\n      return ParamType.fromObject({\n        name: node.name,\n        type: node.type,\n        indexed: node.indexed,\n        components: node.components\n      });\n    }\n    return ParamTypify(parseParamType(value, !!allowIndexed));\n  }\n  static isParamType(value) {\n    return !!(value != null && value._isParamType);\n  }\n}\n;\nfunction parseParams(value, allowIndex) {\n  return splitNesting(value).map(param => ParamType.fromString(param, allowIndex));\n}\nexport class Fragment {\n  constructor(constructorGuard, params) {\n    if (constructorGuard !== _constructorGuard) {\n      logger.throwError(\"use a static from method\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"new Fragment()\"\n      });\n    }\n    populate(this, params);\n    this._isFragment = true;\n    Object.freeze(this);\n  }\n  static from(value) {\n    if (Fragment.isFragment(value)) {\n      return value;\n    }\n    if (typeof value === \"string\") {\n      return Fragment.fromString(value);\n    }\n    return Fragment.fromObject(value);\n  }\n  static fromObject(value) {\n    if (Fragment.isFragment(value)) {\n      return value;\n    }\n    switch (value.type) {\n      case \"function\":\n        return FunctionFragment.fromObject(value);\n      case \"event\":\n        return EventFragment.fromObject(value);\n      case \"constructor\":\n        return ConstructorFragment.fromObject(value);\n      case \"error\":\n        return ErrorFragment.fromObject(value);\n      case \"fallback\":\n      case \"receive\":\n        // @TODO: Something? Maybe return a FunctionFragment? A custom DefaultFunctionFragment?\n        return null;\n    }\n    return logger.throwArgumentError(\"invalid fragment object\", \"value\", value);\n  }\n  static fromString(value) {\n    // Make sure the \"returns\" is surrounded by a space and all whitespace is exactly one space\n    value = value.replace(/\\s/g, \" \");\n    value = value.replace(/\\(/g, \" (\").replace(/\\)/g, \") \").replace(/\\s+/g, \" \");\n    value = value.trim();\n    if (value.split(\" \")[0] === \"event\") {\n      return EventFragment.fromString(value.substring(5).trim());\n    } else if (value.split(\" \")[0] === \"function\") {\n      return FunctionFragment.fromString(value.substring(8).trim());\n    } else if (value.split(\"(\")[0].trim() === \"constructor\") {\n      return ConstructorFragment.fromString(value.trim());\n    } else if (value.split(\" \")[0] === \"error\") {\n      return ErrorFragment.fromString(value.substring(5).trim());\n    }\n    return logger.throwArgumentError(\"unsupported fragment\", \"value\", value);\n  }\n  static isFragment(value) {\n    return !!(value && value._isFragment);\n  }\n}\nexport class EventFragment extends Fragment {\n  format(format) {\n    if (!format) {\n      format = FormatTypes.sighash;\n    }\n    if (!FormatTypes[format]) {\n      logger.throwArgumentError(\"invalid format type\", \"format\", format);\n    }\n    if (format === FormatTypes.json) {\n      return JSON.stringify({\n        type: \"event\",\n        anonymous: this.anonymous,\n        name: this.name,\n        inputs: this.inputs.map(input => JSON.parse(input.format(format)))\n      });\n    }\n    let result = \"\";\n    if (format !== FormatTypes.sighash) {\n      result += \"event \";\n    }\n    result += this.name + \"(\" + this.inputs.map(input => input.format(format)).join(format === FormatTypes.full ? \", \" : \",\") + \") \";\n    if (format !== FormatTypes.sighash) {\n      if (this.anonymous) {\n        result += \"anonymous \";\n      }\n    }\n    return result.trim();\n  }\n  static from(value) {\n    if (typeof value === \"string\") {\n      return EventFragment.fromString(value);\n    }\n    return EventFragment.fromObject(value);\n  }\n  static fromObject(value) {\n    if (EventFragment.isEventFragment(value)) {\n      return value;\n    }\n    if (value.type !== \"event\") {\n      logger.throwArgumentError(\"invalid event object\", \"value\", value);\n    }\n    const params = {\n      name: verifyIdentifier(value.name),\n      anonymous: value.anonymous,\n      inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],\n      type: \"event\"\n    };\n    return new EventFragment(_constructorGuard, params);\n  }\n  static fromString(value) {\n    let match = value.match(regexParen);\n    if (!match) {\n      logger.throwArgumentError(\"invalid event string\", \"value\", value);\n    }\n    let anonymous = false;\n    match[3].split(\" \").forEach(modifier => {\n      switch (modifier.trim()) {\n        case \"anonymous\":\n          anonymous = true;\n          break;\n        case \"\":\n          break;\n        default:\n          logger.warn(\"unknown modifier: \" + modifier);\n      }\n    });\n    return EventFragment.fromObject({\n      name: match[1].trim(),\n      anonymous: anonymous,\n      inputs: parseParams(match[2], true),\n      type: \"event\"\n    });\n  }\n  static isEventFragment(value) {\n    return value && value._isFragment && value.type === \"event\";\n  }\n}\nfunction parseGas(value, params) {\n  params.gas = null;\n  let comps = value.split(\"@\");\n  if (comps.length !== 1) {\n    if (comps.length > 2) {\n      logger.throwArgumentError(\"invalid human-readable ABI signature\", \"value\", value);\n    }\n    if (!comps[1].match(/^[0-9]+$/)) {\n      logger.throwArgumentError(\"invalid human-readable ABI signature gas\", \"value\", value);\n    }\n    params.gas = BigNumber.from(comps[1]);\n    return comps[0];\n  }\n  return value;\n}\nfunction parseModifiers(value, params) {\n  params.constant = false;\n  params.payable = false;\n  params.stateMutability = \"nonpayable\";\n  value.split(\" \").forEach(modifier => {\n    switch (modifier.trim()) {\n      case \"constant\":\n        params.constant = true;\n        break;\n      case \"payable\":\n        params.payable = true;\n        params.stateMutability = \"payable\";\n        break;\n      case \"nonpayable\":\n        params.payable = false;\n        params.stateMutability = \"nonpayable\";\n        break;\n      case \"pure\":\n        params.constant = true;\n        params.stateMutability = \"pure\";\n        break;\n      case \"view\":\n        params.constant = true;\n        params.stateMutability = \"view\";\n        break;\n      case \"external\":\n      case \"public\":\n      case \"\":\n        break;\n      default:\n        console.log(\"unknown modifier: \" + modifier);\n    }\n  });\n}\nfunction verifyState(value) {\n  let result = {\n    constant: false,\n    payable: true,\n    stateMutability: \"payable\"\n  };\n  if (value.stateMutability != null) {\n    result.stateMutability = value.stateMutability;\n    // Set (and check things are consistent) the constant property\n    result.constant = result.stateMutability === \"view\" || result.stateMutability === \"pure\";\n    if (value.constant != null) {\n      if (!!value.constant !== result.constant) {\n        logger.throwArgumentError(\"cannot have constant function with mutability \" + result.stateMutability, \"value\", value);\n      }\n    }\n    // Set (and check things are consistent) the payable property\n    result.payable = result.stateMutability === \"payable\";\n    if (value.payable != null) {\n      if (!!value.payable !== result.payable) {\n        logger.throwArgumentError(\"cannot have payable function with mutability \" + result.stateMutability, \"value\", value);\n      }\n    }\n  } else if (value.payable != null) {\n    result.payable = !!value.payable;\n    // If payable we can assume non-constant; otherwise we can't assume\n    if (value.constant == null && !result.payable && value.type !== \"constructor\") {\n      logger.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\n    }\n    result.constant = !!value.constant;\n    if (result.constant) {\n      result.stateMutability = \"view\";\n    } else {\n      result.stateMutability = result.payable ? \"payable\" : \"nonpayable\";\n    }\n    if (result.payable && result.constant) {\n      logger.throwArgumentError(\"cannot have constant payable function\", \"value\", value);\n    }\n  } else if (value.constant != null) {\n    result.constant = !!value.constant;\n    result.payable = !result.constant;\n    result.stateMutability = result.constant ? \"view\" : \"payable\";\n  } else if (value.type !== \"constructor\") {\n    logger.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\n  }\n  return result;\n}\nexport class ConstructorFragment extends Fragment {\n  format(format) {\n    if (!format) {\n      format = FormatTypes.sighash;\n    }\n    if (!FormatTypes[format]) {\n      logger.throwArgumentError(\"invalid format type\", \"format\", format);\n    }\n    if (format === FormatTypes.json) {\n      return JSON.stringify({\n        type: \"constructor\",\n        stateMutability: this.stateMutability !== \"nonpayable\" ? this.stateMutability : undefined,\n        payable: this.payable,\n        gas: this.gas ? this.gas.toNumber() : undefined,\n        inputs: this.inputs.map(input => JSON.parse(input.format(format)))\n      });\n    }\n    if (format === FormatTypes.sighash) {\n      logger.throwError(\"cannot format a constructor for sighash\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"format(sighash)\"\n      });\n    }\n    let result = \"constructor(\" + this.inputs.map(input => input.format(format)).join(format === FormatTypes.full ? \", \" : \",\") + \") \";\n    if (this.stateMutability && this.stateMutability !== \"nonpayable\") {\n      result += this.stateMutability + \" \";\n    }\n    return result.trim();\n  }\n  static from(value) {\n    if (typeof value === \"string\") {\n      return ConstructorFragment.fromString(value);\n    }\n    return ConstructorFragment.fromObject(value);\n  }\n  static fromObject(value) {\n    if (ConstructorFragment.isConstructorFragment(value)) {\n      return value;\n    }\n    if (value.type !== \"constructor\") {\n      logger.throwArgumentError(\"invalid constructor object\", \"value\", value);\n    }\n    let state = verifyState(value);\n    if (state.constant) {\n      logger.throwArgumentError(\"constructor cannot be constant\", \"value\", value);\n    }\n    const params = {\n      name: null,\n      type: value.type,\n      inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],\n      payable: state.payable,\n      stateMutability: state.stateMutability,\n      gas: value.gas ? BigNumber.from(value.gas) : null\n    };\n    return new ConstructorFragment(_constructorGuard, params);\n  }\n  static fromString(value) {\n    let params = {\n      type: \"constructor\"\n    };\n    value = parseGas(value, params);\n    let parens = value.match(regexParen);\n    if (!parens || parens[1].trim() !== \"constructor\") {\n      logger.throwArgumentError(\"invalid constructor string\", \"value\", value);\n    }\n    params.inputs = parseParams(parens[2].trim(), false);\n    parseModifiers(parens[3].trim(), params);\n    return ConstructorFragment.fromObject(params);\n  }\n  static isConstructorFragment(value) {\n    return value && value._isFragment && value.type === \"constructor\";\n  }\n}\nexport class FunctionFragment extends ConstructorFragment {\n  format(format) {\n    if (!format) {\n      format = FormatTypes.sighash;\n    }\n    if (!FormatTypes[format]) {\n      logger.throwArgumentError(\"invalid format type\", \"format\", format);\n    }\n    if (format === FormatTypes.json) {\n      return JSON.stringify({\n        type: \"function\",\n        name: this.name,\n        constant: this.constant,\n        stateMutability: this.stateMutability !== \"nonpayable\" ? this.stateMutability : undefined,\n        payable: this.payable,\n        gas: this.gas ? this.gas.toNumber() : undefined,\n        inputs: this.inputs.map(input => JSON.parse(input.format(format))),\n        outputs: this.outputs.map(output => JSON.parse(output.format(format)))\n      });\n    }\n    let result = \"\";\n    if (format !== FormatTypes.sighash) {\n      result += \"function \";\n    }\n    result += this.name + \"(\" + this.inputs.map(input => input.format(format)).join(format === FormatTypes.full ? \", \" : \",\") + \") \";\n    if (format !== FormatTypes.sighash) {\n      if (this.stateMutability) {\n        if (this.stateMutability !== \"nonpayable\") {\n          result += this.stateMutability + \" \";\n        }\n      } else if (this.constant) {\n        result += \"view \";\n      }\n      if (this.outputs && this.outputs.length) {\n        result += \"returns (\" + this.outputs.map(output => output.format(format)).join(\", \") + \") \";\n      }\n      if (this.gas != null) {\n        result += \"@\" + this.gas.toString() + \" \";\n      }\n    }\n    return result.trim();\n  }\n  static from(value) {\n    if (typeof value === \"string\") {\n      return FunctionFragment.fromString(value);\n    }\n    return FunctionFragment.fromObject(value);\n  }\n  static fromObject(value) {\n    if (FunctionFragment.isFunctionFragment(value)) {\n      return value;\n    }\n    if (value.type !== \"function\") {\n      logger.throwArgumentError(\"invalid function object\", \"value\", value);\n    }\n    let state = verifyState(value);\n    const params = {\n      type: value.type,\n      name: verifyIdentifier(value.name),\n      constant: state.constant,\n      inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],\n      outputs: value.outputs ? value.outputs.map(ParamType.fromObject) : [],\n      payable: state.payable,\n      stateMutability: state.stateMutability,\n      gas: value.gas ? BigNumber.from(value.gas) : null\n    };\n    return new FunctionFragment(_constructorGuard, params);\n  }\n  static fromString(value) {\n    let params = {\n      type: \"function\"\n    };\n    value = parseGas(value, params);\n    let comps = value.split(\" returns \");\n    if (comps.length > 2) {\n      logger.throwArgumentError(\"invalid function string\", \"value\", value);\n    }\n    let parens = comps[0].match(regexParen);\n    if (!parens) {\n      logger.throwArgumentError(\"invalid function signature\", \"value\", value);\n    }\n    params.name = parens[1].trim();\n    if (params.name) {\n      verifyIdentifier(params.name);\n    }\n    params.inputs = parseParams(parens[2], false);\n    parseModifiers(parens[3].trim(), params);\n    // We have outputs\n    if (comps.length > 1) {\n      let returns = comps[1].match(regexParen);\n      if (returns[1].trim() != \"\" || returns[3].trim() != \"\") {\n        logger.throwArgumentError(\"unexpected tokens\", \"value\", value);\n      }\n      params.outputs = parseParams(returns[2], false);\n    } else {\n      params.outputs = [];\n    }\n    return FunctionFragment.fromObject(params);\n  }\n  static isFunctionFragment(value) {\n    return value && value._isFragment && value.type === \"function\";\n  }\n}\n//export class StructFragment extends Fragment {\n//}\nfunction checkForbidden(fragment) {\n  const sig = fragment.format();\n  if (sig === \"Error(string)\" || sig === \"Panic(uint256)\") {\n    logger.throwArgumentError(`cannot specify user defined ${sig} error`, \"fragment\", fragment);\n  }\n  return fragment;\n}\nexport class ErrorFragment extends Fragment {\n  format(format) {\n    if (!format) {\n      format = FormatTypes.sighash;\n    }\n    if (!FormatTypes[format]) {\n      logger.throwArgumentError(\"invalid format type\", \"format\", format);\n    }\n    if (format === FormatTypes.json) {\n      return JSON.stringify({\n        type: \"error\",\n        name: this.name,\n        inputs: this.inputs.map(input => JSON.parse(input.format(format)))\n      });\n    }\n    let result = \"\";\n    if (format !== FormatTypes.sighash) {\n      result += \"error \";\n    }\n    result += this.name + \"(\" + this.inputs.map(input => input.format(format)).join(format === FormatTypes.full ? \", \" : \",\") + \") \";\n    return result.trim();\n  }\n  static from(value) {\n    if (typeof value === \"string\") {\n      return ErrorFragment.fromString(value);\n    }\n    return ErrorFragment.fromObject(value);\n  }\n  static fromObject(value) {\n    if (ErrorFragment.isErrorFragment(value)) {\n      return value;\n    }\n    if (value.type !== \"error\") {\n      logger.throwArgumentError(\"invalid error object\", \"value\", value);\n    }\n    const params = {\n      type: value.type,\n      name: verifyIdentifier(value.name),\n      inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : []\n    };\n    return checkForbidden(new ErrorFragment(_constructorGuard, params));\n  }\n  static fromString(value) {\n    let params = {\n      type: \"error\"\n    };\n    let parens = value.match(regexParen);\n    if (!parens) {\n      logger.throwArgumentError(\"invalid error signature\", \"value\", value);\n    }\n    params.name = parens[1].trim();\n    if (params.name) {\n      verifyIdentifier(params.name);\n    }\n    params.inputs = parseParams(parens[2], false);\n    return checkForbidden(ErrorFragment.fromObject(params));\n  }\n  static isErrorFragment(value) {\n    return value && value._isFragment && value.type === \"error\";\n  }\n}\nfunction verifyType(type) {\n  // These need to be transformed to their full description\n  if (type.match(/^uint($|[^1-9])/)) {\n    type = \"uint256\" + type.substring(4);\n  } else if (type.match(/^int($|[^1-9])/)) {\n    type = \"int256\" + type.substring(3);\n  }\n  // @TODO: more verification\n  return type;\n}\n// See: https://github.com/ethereum/solidity/blob/1f8f1a3db93a548d0555e3e14cfc55a10e25b60e/docs/grammar/SolidityLexer.g4#L234\nconst regexIdentifier = new RegExp(\"^[a-zA-Z$_][a-zA-Z0-9$_]*$\");\nfunction verifyIdentifier(value) {\n  if (!value || !value.match(regexIdentifier)) {\n    logger.throwArgumentError(`invalid identifier \"${value}\"`, \"value\", value);\n  }\n  return value;\n}\nconst regexParen = new RegExp(\"^([^)(]*)\\\\((.*)\\\\)([^)(]*)$\");\nfunction splitNesting(value) {\n  value = value.trim();\n  let result = [];\n  let accum = \"\";\n  let depth = 0;\n  for (let offset = 0; offset < value.length; offset++) {\n    let c = value[offset];\n    if (c === \",\" && depth === 0) {\n      result.push(accum);\n      accum = \"\";\n    } else {\n      accum += c;\n      if (c === \"(\") {\n        depth++;\n      } else if (c === \")\") {\n        depth--;\n        if (depth === -1) {\n          logger.throwArgumentError(\"unbalanced parenthesis\", \"value\", value);\n        }\n      }\n    }\n  }\n  if (accum) {\n    result.push(accum);\n  }\n  return result;\n}","map":{"version":3,"names":["BigNumber","defineReadOnly","Logger","version","logger","_constructorGuard","ModifiersBytes","calldata","memory","storage","ModifiersNest","checkModifier","type","name","indexOf","throwArgumentError","parseParamType","param","allowIndexed","originalParam","throwError","i","replace","newNode","parent","node","state","allowType","indexed","length","c","allowParams","verifyType","components","child","allowName","allowArray","sibling","push","readArray","populate","object","params","key","FormatTypes","Object","freeze","sighash","minimal","full","json","paramTypeArray","RegExp","ParamType","constructor","constructorGuard","errors","UNSUPPORTED_OPERATION","operation","match","arrayLength","parseInt","arrayChildren","fromObject","baseType","_isParamType","format","result","undefined","map","comp","JSON","parse","stringify","String","join","from","value","fromString","isParamType","ParamTypify","parseParams","allowIndex","splitNesting","Fragment","_isFragment","isFragment","FunctionFragment","EventFragment","ConstructorFragment","ErrorFragment","trim","split","substring","anonymous","inputs","input","isEventFragment","verifyIdentifier","regexParen","forEach","modifier","warn","parseGas","gas","comps","parseModifiers","constant","payable","stateMutability","console","log","verifyState","toNumber","isConstructorFragment","parens","outputs","output","toString","isFunctionFragment","returns","checkForbidden","fragment","sig","isErrorFragment","regexIdentifier","accum","depth","offset"],"sources":["F:/DDesktop/MEAN_BC/mean-stack-authentication-authorization-master/angular-15-client/node_modules/@ethersproject/abi/lib.esm/fragments.js"],"sourcesContent":["\"use strict\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n;\nconst _constructorGuard = {};\nlet ModifiersBytes = { calldata: true, memory: true, storage: true };\nlet ModifiersNest = { calldata: true, memory: true };\nfunction checkModifier(type, name) {\n    if (type === \"bytes\" || type === \"string\") {\n        if (ModifiersBytes[name]) {\n            return true;\n        }\n    }\n    else if (type === \"address\") {\n        if (name === \"payable\") {\n            return true;\n        }\n    }\n    else if (type.indexOf(\"[\") >= 0 || type === \"tuple\") {\n        if (ModifiersNest[name]) {\n            return true;\n        }\n    }\n    if (ModifiersBytes[name] || name === \"payable\") {\n        logger.throwArgumentError(\"invalid modifier\", \"name\", name);\n    }\n    return false;\n}\n// @TODO: Make sure that children of an indexed tuple are marked with a null indexed\nfunction parseParamType(param, allowIndexed) {\n    let originalParam = param;\n    function throwError(i) {\n        logger.throwArgumentError(`unexpected character at position ${i}`, \"param\", param);\n    }\n    param = param.replace(/\\s/g, \" \");\n    function newNode(parent) {\n        let node = { type: \"\", name: \"\", parent: parent, state: { allowType: true } };\n        if (allowIndexed) {\n            node.indexed = false;\n        }\n        return node;\n    }\n    let parent = { type: \"\", name: \"\", state: { allowType: true } };\n    let node = parent;\n    for (let i = 0; i < param.length; i++) {\n        let c = param[i];\n        switch (c) {\n            case \"(\":\n                if (node.state.allowType && node.type === \"\") {\n                    node.type = \"tuple\";\n                }\n                else if (!node.state.allowParams) {\n                    throwError(i);\n                }\n                node.state.allowType = false;\n                node.type = verifyType(node.type);\n                node.components = [newNode(node)];\n                node = node.components[0];\n                break;\n            case \")\":\n                delete node.state;\n                if (node.name === \"indexed\") {\n                    if (!allowIndexed) {\n                        throwError(i);\n                    }\n                    node.indexed = true;\n                    node.name = \"\";\n                }\n                if (checkModifier(node.type, node.name)) {\n                    node.name = \"\";\n                }\n                node.type = verifyType(node.type);\n                let child = node;\n                node = node.parent;\n                if (!node) {\n                    throwError(i);\n                }\n                delete child.parent;\n                node.state.allowParams = false;\n                node.state.allowName = true;\n                node.state.allowArray = true;\n                break;\n            case \",\":\n                delete node.state;\n                if (node.name === \"indexed\") {\n                    if (!allowIndexed) {\n                        throwError(i);\n                    }\n                    node.indexed = true;\n                    node.name = \"\";\n                }\n                if (checkModifier(node.type, node.name)) {\n                    node.name = \"\";\n                }\n                node.type = verifyType(node.type);\n                let sibling = newNode(node.parent);\n                //{ type: \"\", name: \"\", parent: node.parent, state: { allowType: true } };\n                node.parent.components.push(sibling);\n                delete node.parent;\n                node = sibling;\n                break;\n            // Hit a space...\n            case \" \":\n                // If reading type, the type is done and may read a param or name\n                if (node.state.allowType) {\n                    if (node.type !== \"\") {\n                        node.type = verifyType(node.type);\n                        delete node.state.allowType;\n                        node.state.allowName = true;\n                        node.state.allowParams = true;\n                    }\n                }\n                // If reading name, the name is done\n                if (node.state.allowName) {\n                    if (node.name !== \"\") {\n                        if (node.name === \"indexed\") {\n                            if (!allowIndexed) {\n                                throwError(i);\n                            }\n                            if (node.indexed) {\n                                throwError(i);\n                            }\n                            node.indexed = true;\n                            node.name = \"\";\n                        }\n                        else if (checkModifier(node.type, node.name)) {\n                            node.name = \"\";\n                        }\n                        else {\n                            node.state.allowName = false;\n                        }\n                    }\n                }\n                break;\n            case \"[\":\n                if (!node.state.allowArray) {\n                    throwError(i);\n                }\n                node.type += c;\n                node.state.allowArray = false;\n                node.state.allowName = false;\n                node.state.readArray = true;\n                break;\n            case \"]\":\n                if (!node.state.readArray) {\n                    throwError(i);\n                }\n                node.type += c;\n                node.state.readArray = false;\n                node.state.allowArray = true;\n                node.state.allowName = true;\n                break;\n            default:\n                if (node.state.allowType) {\n                    node.type += c;\n                    node.state.allowParams = true;\n                    node.state.allowArray = true;\n                }\n                else if (node.state.allowName) {\n                    node.name += c;\n                    delete node.state.allowArray;\n                }\n                else if (node.state.readArray) {\n                    node.type += c;\n                }\n                else {\n                    throwError(i);\n                }\n        }\n    }\n    if (node.parent) {\n        logger.throwArgumentError(\"unexpected eof\", \"param\", param);\n    }\n    delete parent.state;\n    if (node.name === \"indexed\") {\n        if (!allowIndexed) {\n            throwError(originalParam.length - 7);\n        }\n        if (node.indexed) {\n            throwError(originalParam.length - 7);\n        }\n        node.indexed = true;\n        node.name = \"\";\n    }\n    else if (checkModifier(node.type, node.name)) {\n        node.name = \"\";\n    }\n    parent.type = verifyType(parent.type);\n    return parent;\n}\nfunction populate(object, params) {\n    for (let key in params) {\n        defineReadOnly(object, key, params[key]);\n    }\n}\nexport const FormatTypes = Object.freeze({\n    // Bare formatting, as is needed for computing a sighash of an event or function\n    sighash: \"sighash\",\n    // Human-Readable with Minimal spacing and without names (compact human-readable)\n    minimal: \"minimal\",\n    // Human-Readable with nice spacing, including all names\n    full: \"full\",\n    // JSON-format a la Solidity\n    json: \"json\"\n});\nconst paramTypeArray = new RegExp(/^(.*)\\[([0-9]*)\\]$/);\nexport class ParamType {\n    constructor(constructorGuard, params) {\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"use fromString\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new ParamType()\"\n            });\n        }\n        populate(this, params);\n        let match = this.type.match(paramTypeArray);\n        if (match) {\n            populate(this, {\n                arrayLength: parseInt(match[2] || \"-1\"),\n                arrayChildren: ParamType.fromObject({\n                    type: match[1],\n                    components: this.components\n                }),\n                baseType: \"array\"\n            });\n        }\n        else {\n            populate(this, {\n                arrayLength: null,\n                arrayChildren: null,\n                baseType: ((this.components != null) ? \"tuple\" : this.type)\n            });\n        }\n        this._isParamType = true;\n        Object.freeze(this);\n    }\n    // Format the parameter fragment\n    //   - sighash: \"(uint256,address)\"\n    //   - minimal: \"tuple(uint256,address) indexed\"\n    //   - full:    \"tuple(uint256 foo, address bar) indexed baz\"\n    format(format) {\n        if (!format) {\n            format = FormatTypes.sighash;\n        }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n        if (format === FormatTypes.json) {\n            let result = {\n                type: ((this.baseType === \"tuple\") ? \"tuple\" : this.type),\n                name: (this.name || undefined)\n            };\n            if (typeof (this.indexed) === \"boolean\") {\n                result.indexed = this.indexed;\n            }\n            if (this.components) {\n                result.components = this.components.map((comp) => JSON.parse(comp.format(format)));\n            }\n            return JSON.stringify(result);\n        }\n        let result = \"\";\n        // Array\n        if (this.baseType === \"array\") {\n            result += this.arrayChildren.format(format);\n            result += \"[\" + (this.arrayLength < 0 ? \"\" : String(this.arrayLength)) + \"]\";\n        }\n        else {\n            if (this.baseType === \"tuple\") {\n                if (format !== FormatTypes.sighash) {\n                    result += this.type;\n                }\n                result += \"(\" + this.components.map((comp) => comp.format(format)).join((format === FormatTypes.full) ? \", \" : \",\") + \")\";\n            }\n            else {\n                result += this.type;\n            }\n        }\n        if (format !== FormatTypes.sighash) {\n            if (this.indexed === true) {\n                result += \" indexed\";\n            }\n            if (format === FormatTypes.full && this.name) {\n                result += \" \" + this.name;\n            }\n        }\n        return result;\n    }\n    static from(value, allowIndexed) {\n        if (typeof (value) === \"string\") {\n            return ParamType.fromString(value, allowIndexed);\n        }\n        return ParamType.fromObject(value);\n    }\n    static fromObject(value) {\n        if (ParamType.isParamType(value)) {\n            return value;\n        }\n        return new ParamType(_constructorGuard, {\n            name: (value.name || null),\n            type: verifyType(value.type),\n            indexed: ((value.indexed == null) ? null : !!value.indexed),\n            components: (value.components ? value.components.map(ParamType.fromObject) : null)\n        });\n    }\n    static fromString(value, allowIndexed) {\n        function ParamTypify(node) {\n            return ParamType.fromObject({\n                name: node.name,\n                type: node.type,\n                indexed: node.indexed,\n                components: node.components\n            });\n        }\n        return ParamTypify(parseParamType(value, !!allowIndexed));\n    }\n    static isParamType(value) {\n        return !!(value != null && value._isParamType);\n    }\n}\n;\nfunction parseParams(value, allowIndex) {\n    return splitNesting(value).map((param) => ParamType.fromString(param, allowIndex));\n}\nexport class Fragment {\n    constructor(constructorGuard, params) {\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"use a static from method\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new Fragment()\"\n            });\n        }\n        populate(this, params);\n        this._isFragment = true;\n        Object.freeze(this);\n    }\n    static from(value) {\n        if (Fragment.isFragment(value)) {\n            return value;\n        }\n        if (typeof (value) === \"string\") {\n            return Fragment.fromString(value);\n        }\n        return Fragment.fromObject(value);\n    }\n    static fromObject(value) {\n        if (Fragment.isFragment(value)) {\n            return value;\n        }\n        switch (value.type) {\n            case \"function\":\n                return FunctionFragment.fromObject(value);\n            case \"event\":\n                return EventFragment.fromObject(value);\n            case \"constructor\":\n                return ConstructorFragment.fromObject(value);\n            case \"error\":\n                return ErrorFragment.fromObject(value);\n            case \"fallback\":\n            case \"receive\":\n                // @TODO: Something? Maybe return a FunctionFragment? A custom DefaultFunctionFragment?\n                return null;\n        }\n        return logger.throwArgumentError(\"invalid fragment object\", \"value\", value);\n    }\n    static fromString(value) {\n        // Make sure the \"returns\" is surrounded by a space and all whitespace is exactly one space\n        value = value.replace(/\\s/g, \" \");\n        value = value.replace(/\\(/g, \" (\").replace(/\\)/g, \") \").replace(/\\s+/g, \" \");\n        value = value.trim();\n        if (value.split(\" \")[0] === \"event\") {\n            return EventFragment.fromString(value.substring(5).trim());\n        }\n        else if (value.split(\" \")[0] === \"function\") {\n            return FunctionFragment.fromString(value.substring(8).trim());\n        }\n        else if (value.split(\"(\")[0].trim() === \"constructor\") {\n            return ConstructorFragment.fromString(value.trim());\n        }\n        else if (value.split(\" \")[0] === \"error\") {\n            return ErrorFragment.fromString(value.substring(5).trim());\n        }\n        return logger.throwArgumentError(\"unsupported fragment\", \"value\", value);\n    }\n    static isFragment(value) {\n        return !!(value && value._isFragment);\n    }\n}\nexport class EventFragment extends Fragment {\n    format(format) {\n        if (!format) {\n            format = FormatTypes.sighash;\n        }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"event\",\n                anonymous: this.anonymous,\n                name: this.name,\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format)))\n            });\n        }\n        let result = \"\";\n        if (format !== FormatTypes.sighash) {\n            result += \"event \";\n        }\n        result += this.name + \"(\" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? \", \" : \",\") + \") \";\n        if (format !== FormatTypes.sighash) {\n            if (this.anonymous) {\n                result += \"anonymous \";\n            }\n        }\n        return result.trim();\n    }\n    static from(value) {\n        if (typeof (value) === \"string\") {\n            return EventFragment.fromString(value);\n        }\n        return EventFragment.fromObject(value);\n    }\n    static fromObject(value) {\n        if (EventFragment.isEventFragment(value)) {\n            return value;\n        }\n        if (value.type !== \"event\") {\n            logger.throwArgumentError(\"invalid event object\", \"value\", value);\n        }\n        const params = {\n            name: verifyIdentifier(value.name),\n            anonymous: value.anonymous,\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),\n            type: \"event\"\n        };\n        return new EventFragment(_constructorGuard, params);\n    }\n    static fromString(value) {\n        let match = value.match(regexParen);\n        if (!match) {\n            logger.throwArgumentError(\"invalid event string\", \"value\", value);\n        }\n        let anonymous = false;\n        match[3].split(\" \").forEach((modifier) => {\n            switch (modifier.trim()) {\n                case \"anonymous\":\n                    anonymous = true;\n                    break;\n                case \"\":\n                    break;\n                default:\n                    logger.warn(\"unknown modifier: \" + modifier);\n            }\n        });\n        return EventFragment.fromObject({\n            name: match[1].trim(),\n            anonymous: anonymous,\n            inputs: parseParams(match[2], true),\n            type: \"event\"\n        });\n    }\n    static isEventFragment(value) {\n        return (value && value._isFragment && value.type === \"event\");\n    }\n}\nfunction parseGas(value, params) {\n    params.gas = null;\n    let comps = value.split(\"@\");\n    if (comps.length !== 1) {\n        if (comps.length > 2) {\n            logger.throwArgumentError(\"invalid human-readable ABI signature\", \"value\", value);\n        }\n        if (!comps[1].match(/^[0-9]+$/)) {\n            logger.throwArgumentError(\"invalid human-readable ABI signature gas\", \"value\", value);\n        }\n        params.gas = BigNumber.from(comps[1]);\n        return comps[0];\n    }\n    return value;\n}\nfunction parseModifiers(value, params) {\n    params.constant = false;\n    params.payable = false;\n    params.stateMutability = \"nonpayable\";\n    value.split(\" \").forEach((modifier) => {\n        switch (modifier.trim()) {\n            case \"constant\":\n                params.constant = true;\n                break;\n            case \"payable\":\n                params.payable = true;\n                params.stateMutability = \"payable\";\n                break;\n            case \"nonpayable\":\n                params.payable = false;\n                params.stateMutability = \"nonpayable\";\n                break;\n            case \"pure\":\n                params.constant = true;\n                params.stateMutability = \"pure\";\n                break;\n            case \"view\":\n                params.constant = true;\n                params.stateMutability = \"view\";\n                break;\n            case \"external\":\n            case \"public\":\n            case \"\":\n                break;\n            default:\n                console.log(\"unknown modifier: \" + modifier);\n        }\n    });\n}\nfunction verifyState(value) {\n    let result = {\n        constant: false,\n        payable: true,\n        stateMutability: \"payable\"\n    };\n    if (value.stateMutability != null) {\n        result.stateMutability = value.stateMutability;\n        // Set (and check things are consistent) the constant property\n        result.constant = (result.stateMutability === \"view\" || result.stateMutability === \"pure\");\n        if (value.constant != null) {\n            if ((!!value.constant) !== result.constant) {\n                logger.throwArgumentError(\"cannot have constant function with mutability \" + result.stateMutability, \"value\", value);\n            }\n        }\n        // Set (and check things are consistent) the payable property\n        result.payable = (result.stateMutability === \"payable\");\n        if (value.payable != null) {\n            if ((!!value.payable) !== result.payable) {\n                logger.throwArgumentError(\"cannot have payable function with mutability \" + result.stateMutability, \"value\", value);\n            }\n        }\n    }\n    else if (value.payable != null) {\n        result.payable = !!value.payable;\n        // If payable we can assume non-constant; otherwise we can't assume\n        if (value.constant == null && !result.payable && value.type !== \"constructor\") {\n            logger.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\n        }\n        result.constant = !!value.constant;\n        if (result.constant) {\n            result.stateMutability = \"view\";\n        }\n        else {\n            result.stateMutability = (result.payable ? \"payable\" : \"nonpayable\");\n        }\n        if (result.payable && result.constant) {\n            logger.throwArgumentError(\"cannot have constant payable function\", \"value\", value);\n        }\n    }\n    else if (value.constant != null) {\n        result.constant = !!value.constant;\n        result.payable = !result.constant;\n        result.stateMutability = (result.constant ? \"view\" : \"payable\");\n    }\n    else if (value.type !== \"constructor\") {\n        logger.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\n    }\n    return result;\n}\nexport class ConstructorFragment extends Fragment {\n    format(format) {\n        if (!format) {\n            format = FormatTypes.sighash;\n        }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"constructor\",\n                stateMutability: ((this.stateMutability !== \"nonpayable\") ? this.stateMutability : undefined),\n                payable: this.payable,\n                gas: (this.gas ? this.gas.toNumber() : undefined),\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format)))\n            });\n        }\n        if (format === FormatTypes.sighash) {\n            logger.throwError(\"cannot format a constructor for sighash\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"format(sighash)\"\n            });\n        }\n        let result = \"constructor(\" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? \", \" : \",\") + \") \";\n        if (this.stateMutability && this.stateMutability !== \"nonpayable\") {\n            result += this.stateMutability + \" \";\n        }\n        return result.trim();\n    }\n    static from(value) {\n        if (typeof (value) === \"string\") {\n            return ConstructorFragment.fromString(value);\n        }\n        return ConstructorFragment.fromObject(value);\n    }\n    static fromObject(value) {\n        if (ConstructorFragment.isConstructorFragment(value)) {\n            return value;\n        }\n        if (value.type !== \"constructor\") {\n            logger.throwArgumentError(\"invalid constructor object\", \"value\", value);\n        }\n        let state = verifyState(value);\n        if (state.constant) {\n            logger.throwArgumentError(\"constructor cannot be constant\", \"value\", value);\n        }\n        const params = {\n            name: null,\n            type: value.type,\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),\n            payable: state.payable,\n            stateMutability: state.stateMutability,\n            gas: (value.gas ? BigNumber.from(value.gas) : null)\n        };\n        return new ConstructorFragment(_constructorGuard, params);\n    }\n    static fromString(value) {\n        let params = { type: \"constructor\" };\n        value = parseGas(value, params);\n        let parens = value.match(regexParen);\n        if (!parens || parens[1].trim() !== \"constructor\") {\n            logger.throwArgumentError(\"invalid constructor string\", \"value\", value);\n        }\n        params.inputs = parseParams(parens[2].trim(), false);\n        parseModifiers(parens[3].trim(), params);\n        return ConstructorFragment.fromObject(params);\n    }\n    static isConstructorFragment(value) {\n        return (value && value._isFragment && value.type === \"constructor\");\n    }\n}\nexport class FunctionFragment extends ConstructorFragment {\n    format(format) {\n        if (!format) {\n            format = FormatTypes.sighash;\n        }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"function\",\n                name: this.name,\n                constant: this.constant,\n                stateMutability: ((this.stateMutability !== \"nonpayable\") ? this.stateMutability : undefined),\n                payable: this.payable,\n                gas: (this.gas ? this.gas.toNumber() : undefined),\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format))),\n                outputs: this.outputs.map((output) => JSON.parse(output.format(format))),\n            });\n        }\n        let result = \"\";\n        if (format !== FormatTypes.sighash) {\n            result += \"function \";\n        }\n        result += this.name + \"(\" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? \", \" : \",\") + \") \";\n        if (format !== FormatTypes.sighash) {\n            if (this.stateMutability) {\n                if (this.stateMutability !== \"nonpayable\") {\n                    result += (this.stateMutability + \" \");\n                }\n            }\n            else if (this.constant) {\n                result += \"view \";\n            }\n            if (this.outputs && this.outputs.length) {\n                result += \"returns (\" + this.outputs.map((output) => output.format(format)).join(\", \") + \") \";\n            }\n            if (this.gas != null) {\n                result += \"@\" + this.gas.toString() + \" \";\n            }\n        }\n        return result.trim();\n    }\n    static from(value) {\n        if (typeof (value) === \"string\") {\n            return FunctionFragment.fromString(value);\n        }\n        return FunctionFragment.fromObject(value);\n    }\n    static fromObject(value) {\n        if (FunctionFragment.isFunctionFragment(value)) {\n            return value;\n        }\n        if (value.type !== \"function\") {\n            logger.throwArgumentError(\"invalid function object\", \"value\", value);\n        }\n        let state = verifyState(value);\n        const params = {\n            type: value.type,\n            name: verifyIdentifier(value.name),\n            constant: state.constant,\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),\n            outputs: (value.outputs ? value.outputs.map(ParamType.fromObject) : []),\n            payable: state.payable,\n            stateMutability: state.stateMutability,\n            gas: (value.gas ? BigNumber.from(value.gas) : null)\n        };\n        return new FunctionFragment(_constructorGuard, params);\n    }\n    static fromString(value) {\n        let params = { type: \"function\" };\n        value = parseGas(value, params);\n        let comps = value.split(\" returns \");\n        if (comps.length > 2) {\n            logger.throwArgumentError(\"invalid function string\", \"value\", value);\n        }\n        let parens = comps[0].match(regexParen);\n        if (!parens) {\n            logger.throwArgumentError(\"invalid function signature\", \"value\", value);\n        }\n        params.name = parens[1].trim();\n        if (params.name) {\n            verifyIdentifier(params.name);\n        }\n        params.inputs = parseParams(parens[2], false);\n        parseModifiers(parens[3].trim(), params);\n        // We have outputs\n        if (comps.length > 1) {\n            let returns = comps[1].match(regexParen);\n            if (returns[1].trim() != \"\" || returns[3].trim() != \"\") {\n                logger.throwArgumentError(\"unexpected tokens\", \"value\", value);\n            }\n            params.outputs = parseParams(returns[2], false);\n        }\n        else {\n            params.outputs = [];\n        }\n        return FunctionFragment.fromObject(params);\n    }\n    static isFunctionFragment(value) {\n        return (value && value._isFragment && value.type === \"function\");\n    }\n}\n//export class StructFragment extends Fragment {\n//}\nfunction checkForbidden(fragment) {\n    const sig = fragment.format();\n    if (sig === \"Error(string)\" || sig === \"Panic(uint256)\") {\n        logger.throwArgumentError(`cannot specify user defined ${sig} error`, \"fragment\", fragment);\n    }\n    return fragment;\n}\nexport class ErrorFragment extends Fragment {\n    format(format) {\n        if (!format) {\n            format = FormatTypes.sighash;\n        }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"error\",\n                name: this.name,\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format))),\n            });\n        }\n        let result = \"\";\n        if (format !== FormatTypes.sighash) {\n            result += \"error \";\n        }\n        result += this.name + \"(\" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? \", \" : \",\") + \") \";\n        return result.trim();\n    }\n    static from(value) {\n        if (typeof (value) === \"string\") {\n            return ErrorFragment.fromString(value);\n        }\n        return ErrorFragment.fromObject(value);\n    }\n    static fromObject(value) {\n        if (ErrorFragment.isErrorFragment(value)) {\n            return value;\n        }\n        if (value.type !== \"error\") {\n            logger.throwArgumentError(\"invalid error object\", \"value\", value);\n        }\n        const params = {\n            type: value.type,\n            name: verifyIdentifier(value.name),\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : [])\n        };\n        return checkForbidden(new ErrorFragment(_constructorGuard, params));\n    }\n    static fromString(value) {\n        let params = { type: \"error\" };\n        let parens = value.match(regexParen);\n        if (!parens) {\n            logger.throwArgumentError(\"invalid error signature\", \"value\", value);\n        }\n        params.name = parens[1].trim();\n        if (params.name) {\n            verifyIdentifier(params.name);\n        }\n        params.inputs = parseParams(parens[2], false);\n        return checkForbidden(ErrorFragment.fromObject(params));\n    }\n    static isErrorFragment(value) {\n        return (value && value._isFragment && value.type === \"error\");\n    }\n}\nfunction verifyType(type) {\n    // These need to be transformed to their full description\n    if (type.match(/^uint($|[^1-9])/)) {\n        type = \"uint256\" + type.substring(4);\n    }\n    else if (type.match(/^int($|[^1-9])/)) {\n        type = \"int256\" + type.substring(3);\n    }\n    // @TODO: more verification\n    return type;\n}\n// See: https://github.com/ethereum/solidity/blob/1f8f1a3db93a548d0555e3e14cfc55a10e25b60e/docs/grammar/SolidityLexer.g4#L234\nconst regexIdentifier = new RegExp(\"^[a-zA-Z$_][a-zA-Z0-9$_]*$\");\nfunction verifyIdentifier(value) {\n    if (!value || !value.match(regexIdentifier)) {\n        logger.throwArgumentError(`invalid identifier \"${value}\"`, \"value\", value);\n    }\n    return value;\n}\nconst regexParen = new RegExp(\"^([^)(]*)\\\\((.*)\\\\)([^)(]*)$\");\nfunction splitNesting(value) {\n    value = value.trim();\n    let result = [];\n    let accum = \"\";\n    let depth = 0;\n    for (let offset = 0; offset < value.length; offset++) {\n        let c = value[offset];\n        if (c === \",\" && depth === 0) {\n            result.push(accum);\n            accum = \"\";\n        }\n        else {\n            accum += c;\n            if (c === \"(\") {\n                depth++;\n            }\n            else if (c === \")\") {\n                depth--;\n                if (depth === -1) {\n                    logger.throwArgumentError(\"unbalanced parenthesis\", \"value\", value);\n                }\n            }\n        }\n    }\n    if (accum) {\n        result.push(accum);\n    }\n    return result;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}