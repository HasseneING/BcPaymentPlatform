{"ast":null,"code":"import _asyncToGenerator from \"F:/DDesktop/MEAN_BC/mean-stack-authentication-authorization-master/angular-15-client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport Web3 from 'web3';\nconst alchemy = require(\"alchemy-sdk\");\n// deteethproviderfix dont care how do it  \nlet BoardUserComponent = class BoardUserComponent {\n  constructor(userService, StorageService) {\n    var _this = this;\n    this.userService = userService;\n    this.StorageService = StorageService;\n    this.depositForm = {\n      ethValue: null\n    };\n    this.walletConnected = false;\n    this.walletId = '';\n    this.walletBalance = '';\n    this.forwarderAddress = '';\n    this.connectToWallet = () => {\n      this.userService.connectWallet();\n    };\n    this.checkWalletConnected = /*#__PURE__*/_asyncToGenerator(function* () {\n      const accounts = yield _this.userService.checkWalletConnected();\n      if (accounts.length > 0) {\n        _this.walletConnected = true;\n        _this.walletId = accounts[0];\n        console.log(_this.walletId);\n      }\n    });\n    const provider = \"https://sepolia.infura.io/v3/acaa2699bfc84be092239f5676e3192a\";\n    var web3Provider = new Web3.providers.HttpProvider(provider);\n    this.web3 = new Web3(web3Provider);\n    this.contractInst = new this.web3.eth.Contract(this.userService.abiContract, this.userService.contractAddress);\n  }\n  ngOnInit() {\n    this.connectToWallet();\n    this.userService.getUserBoard().subscribe({\n      next: data => {\n        this.content = data;\n      },\n      error: err => {\n        if (err.error) {\n          try {\n            const res = JSON.parse(err.error);\n            this.content = res.message;\n          } catch {\n            this.content = `Error with status: ${err.status} - ${err.statusText}`;\n          }\n        } else {\n          this.content = `Error with status: ${err.status}`;\n        }\n      }\n    });\n  }\n  getContractBalance() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      let contractBalance = _this2.contractInst.methods.getContractBalance().call();\n      return contractBalance;\n    })();\n  }\n  getDepositedBalance() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      let depositedBalance = _this3.contractInst.methods.getContractBalance().call();\n    })();\n  }\n  getWalletId() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      let balance2 = yield _this4.web3.eth.getBalance(_this4.walletId).then(res => {\n        _this4.walletBalance = res;\n      });\n    })();\n  }\n  deployForwarder() {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      _this5.forwarderAddress = \"0x098a4sd98a4s8d4as9d84\";\n    })();\n  }\n  onSubmit() {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      _this6.checkWalletConnected();\n      let balance;\n      balance = _this6.getContractBalance().then(res => {\n        console.log(_this6.web3.utils.fromWei(res, \"ether\"), \"eth\");\n      });\n      console.log(_this6.depositForm);\n      console.log(_this6.walletId);\n      var accounts = yield _this6.web3.eth.getAccounts().then(console.log);\n      let balance2 = yield _this6.web3.eth.getBalance(_this6.walletId).then(res => {\n        _this6.walletBalance = res;\n      });\n      const transaction = _this6.web3.utils.toWei(String(_this6.depositForm.ethValue));\n      console.log(transaction, \"wei\");\n      var receiver = _this6.userService.contractAddress;\n      var sender = _this6.walletId;\n      //https://docs.metamask.io/wallet/reference/provider-api/#ethereum-request-args\n      const params = [{\n        from: _this6.walletId,\n        to: _this6.userService.contractAddress,\n        value: _this6.web3.utils.numberToHex(_this6.web3.utils.toWei(String(_this6.depositForm.ethValue), 'ether'))\n      }];\n      _this6.userService.ethereum.request({\n        method: 'eth_sendTransaction',\n        params\n      }).then(result => {\n        _this6.userService.update(_this6.forwarderAddress, _this6.StorageService.getUser()._id);\n        console.log(result);\n      }).catch(error => {});\n    })();\n  }\n};\nBoardUserComponent = __decorate([Component({\n  selector: 'app-board-user',\n  templateUrl: './board-user.component.html',\n  styleUrls: ['./board-user.component.css']\n})], BoardUserComponent);\nexport { BoardUserComponent };","map":{"version":3,"mappings":"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","names":["Component","Web3","alchemy","require","BoardUserComponent","constructor","userService","StorageService","ethValue","connectWallet","accounts","checkWalletConnected","length","walletConnected","walletId","console","log","provider","web3Provider","providers","HttpProvider","web3","contractInst","eth","Contract","abiContract","contractAddress","ngOnInit","connectToWallet","getUserBoard","subscribe","next","data","content","error","err","res","JSON","parse","message","status","statusText","getContractBalance","contractBalance","methods","call","getDepositedBalance","depositedBalance","getWalletId","balance2","getBalance","then","walletBalance","deployForwarder","forwarderAddress","onSubmit","balance","utils","fromWei","depositForm","getAccounts","transaction","toWei","String","receiver","sender","params","from","to","value","numberToHex","ethereum","request","method","result","update","getUser","_id","catch","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["F:\\DDesktop\\MEAN_BC\\mean-stack-authentication-authorization-master\\angular-15-client\\src\\app\\board-user\\board-user.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { UserService } from '../_services/user.service';\nimport { StorageService } from '../_services/storage.service';\nimport Web3 from 'web3';\nimport { AbiItem } from 'web3-utils'\nconst alchemy = require (\"alchemy-sdk\");\n\n// deteethproviderfix dont care how do it  \n@Component({\n  selector: 'app-board-user',\n  templateUrl: './board-user.component.html',\n  styleUrls: ['./board-user.component.css']\n})\nexport class BoardUserComponent implements OnInit {\n  content?: string;\n  depositForm: any = {\n    ethValue: null,\n  };\n  private web3: Web3;\n  public walletConnected: boolean = false;\n  public walletId: string = '';\n  public walletBalance:string='';\n  private contractInst : any;\n  private forwarderAddress: string='';\n\n  constructor(private userService: UserService, private StorageService: getUser,\n  ) { \n\n    const provider  = \"https://sepolia.infura.io/v3/acaa2699bfc84be092239f5676e3192a\"\n    var web3Provider = new Web3.providers.HttpProvider(provider);\n    this.web3 = new Web3(web3Provider);\n    this.contractInst = new this.web3.eth.Contract(this.userService.abiContract as AbiItem[],this.userService.contractAddress);\n  }\n\n  ngOnInit(): void {\n    this.connectToWallet();\n    this.userService.getUserBoard().subscribe({\n      next: data => {\n        this.content = data;\n      },\n      error: err => {\n        if (err.error) {\n          try {\n            const res = JSON.parse(err.error);\n            this.content = res.message;\n          } catch {\n            this.content = `Error with status: ${err.status} - ${err.statusText}`;\n          }\n        } else {\n          this.content = `Error with status: ${err.status}`;\n        }\n      }\n    });\n  }\n\n  connectToWallet  = () => {\n    this.userService.connectWallet();\n  }\n  checkWalletConnected = async () => {\n    const accounts = await this.userService.checkWalletConnected();\n    if(accounts.length > 0){\n      this.walletConnected = true;\n      this.walletId = accounts[0];\n      console.log(this.walletId);\n    }\n  }\n async getContractBalance(){\n    let contractBalance = this.contractInst.methods.getContractBalance()\n    .call();\n    return contractBalance;\n  }\n  async getDepositedBalance(){\n    let depositedBalance = this.contractInst.methods.getContractBalance()\n    .call();\n  }\n async getWalletId(){\n    let balance2 = await this.web3.eth.getBalance(this.walletId).then(res=>{this.walletBalance= res});\n  }\nasync deployForwarder(){\n  this.forwarderAddress=\"0x098a4sd98a4s8d4as9d84\";\n  \n}\n  async onSubmit(): Promise<void> {\n    this.checkWalletConnected();\n    let balance;\n    balance = this.getContractBalance().then(res=>{console.log(this.web3.utils.fromWei(res, \"ether\"),\"eth\")});\n    console.log(this.depositForm);\n    console.log(this.walletId);\n    var accounts = await this.web3.eth.getAccounts().then(console.log);\n    let balance2 = await this.web3.eth.getBalance(this.walletId).then(res=>{this.walletBalance= res});\n    const transaction=this.web3.utils.toWei(String(this.depositForm.ethValue));\n    console.log(transaction,\"wei\");\n\n    var receiver = this.userService.contractAddress;  \n    var sender = this.walletId;\n//https://docs.metamask.io/wallet/reference/provider-api/#ethereum-request-args\n   const params = [\n      {\n        from: this.walletId,\n        to: this.userService.contractAddress,\n        value: this.web3.utils.numberToHex(this.web3.utils.toWei(String(this.depositForm.ethValue), 'ether')),\n      }\n    ]\n    this.userService.ethereum\n    .request({\n      method: 'eth_sendTransaction',\n      params,\n    })\n    .then((result:any) => {\n      \n      this.userService.update(this.forwarderAddress,this.StorageService.getUser()._id);\n      console.log(result);\n    })\n    .catch((error:any) => {\n    });\n\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}