{"ast":null,"code":"import { formatUnits, isHexString, hexStripZeros, hexValue } from './api/utils';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport axios from 'axios';\nimport { Provider } from '@ethersproject/abstract-provider';\nimport { Wallet as Wallet$1 } from '@ethersproject/wallet';\nimport { Contract as Contract$1, ContractFactory as ContractFactory$1 } from '@ethersproject/contracts';\n\n/**\r\n * The supported networks by Alchemy. Note that some functions are not available\r\n * on all networks. Please refer to the Alchemy documentation for which APIs are\r\n * available on which networks\r\n * {@link https://docs.alchemy.com/alchemy/apis/feature-support-by-chain}\r\n *\r\n * @public\r\n */\nvar Network;\n(function (Network) {\n  Network[\"ETH_MAINNET\"] = \"eth-mainnet\";\n  /** @deprecated - Will be removed in subsequent versions */\n  Network[\"ETH_ROPSTEN\"] = \"eth-ropsten\";\n  Network[\"ETH_GOERLI\"] = \"eth-goerli\";\n  /** @deprecated - Will be removed in subsequent versions */\n  Network[\"ETH_KOVAN\"] = \"eth-kovan\";\n  /** @deprecated - Will be removed in subsequent versions */\n  Network[\"ETH_RINKEBY\"] = \"eth-rinkeby\";\n  Network[\"ETH_SEPOLIA\"] = \"eth-sepolia\";\n  Network[\"OPT_MAINNET\"] = \"opt-mainnet\";\n  /** @deprecated - Will be removed in subsequent versions */\n  Network[\"OPT_KOVAN\"] = \"opt-kovan\";\n  Network[\"OPT_GOERLI\"] = \"opt-goerli\";\n  Network[\"ARB_MAINNET\"] = \"arb-mainnet\";\n  /** @deprecated - Will be removed in subsequent versions */\n  Network[\"ARB_RINKEBY\"] = \"arb-rinkeby\";\n  Network[\"ARB_GOERLI\"] = \"arb-goerli\";\n  Network[\"MATIC_MAINNET\"] = \"polygon-mainnet\";\n  Network[\"MATIC_MUMBAI\"] = \"polygon-mumbai\";\n  Network[\"ASTAR_MAINNET\"] = \"astar-mainnet\";\n  Network[\"POLYGONZKEVM_MAINNET\"] = \"polygonzkevm-mainnet\";\n  Network[\"POLYGONZKEVM_TESTNET\"] = \"polygonzkevm-testnet\";\n})(Network || (Network = {}));\n/** Token Types for the `getTokenBalances()` endpoint. */\nvar TokenBalanceType;\n(function (TokenBalanceType) {\n  /**\r\n   * Option to fetch the top 100 tokens by 24-hour volume. This option is only\r\n   * available on Mainnet in Ethereum, Polygon, and Arbitrum.\r\n   */\n  TokenBalanceType[\"DEFAULT_TOKENS\"] = \"DEFAULT_TOKENS\";\n  /**\r\n   * Option to fetch the set of ERC-20 tokens that the address as ever held. his\r\n   * list is produced by an address's historical transfer activity and includes\r\n   * all tokens that the address has ever received.\r\n   */\n  TokenBalanceType[\"ERC20\"] = \"erc20\";\n})(TokenBalanceType || (TokenBalanceType = {}));\n/**\r\n * Categories of transfers to use with the {@link AssetTransfersParams} request\r\n * object when using {@link CoreNamespace.getAssetTransfers}.\r\n *\r\n * @public\r\n */\nvar AssetTransfersCategory;\n(function (AssetTransfersCategory) {\n  /**\r\n   * Top level ETH transactions that occur where the `fromAddress` is an\r\n   * external user-created address. External addresses have private keys and are\r\n   * accessed by users.\r\n   */\n  AssetTransfersCategory[\"EXTERNAL\"] = \"external\";\n  /**\r\n   * Top level ETH transactions that occur where the `fromAddress` is an\r\n   * internal, smart contract address. For example, a smart contract calling\r\n   * another smart contract or sending\r\n   */\n  AssetTransfersCategory[\"INTERNAL\"] = \"internal\";\n  /** ERC20 transfers. */\n  AssetTransfersCategory[\"ERC20\"] = \"erc20\";\n  /** ERC721 transfers. */\n  AssetTransfersCategory[\"ERC721\"] = \"erc721\";\n  /** ERC1155 transfers. */\n  AssetTransfersCategory[\"ERC1155\"] = \"erc1155\";\n  /** Special contracts that don't follow ERC 721/1155, (ex: CryptoKitties). */\n  AssetTransfersCategory[\"SPECIALNFT\"] = \"specialnft\";\n})(AssetTransfersCategory || (AssetTransfersCategory = {}));\n/**\r\n * Enum for the order of the {@link AssetTransfersParams} request object when\r\n * using {@link CoreNamespace.getAssetTransfers}.\r\n *\r\n * @deprecated Use {@link SortingOrder} instead. This enum will be removed in a\r\n *   future version.\r\n * @public\r\n */\nvar AssetTransfersOrder;\n(function (AssetTransfersOrder) {\n  AssetTransfersOrder[\"ASCENDING\"] = \"asc\";\n  AssetTransfersOrder[\"DESCENDING\"] = \"desc\";\n})(AssetTransfersOrder || (AssetTransfersOrder = {}));\n/**\r\n * An enum for specifying the token type on NFTs.\r\n *\r\n * @public\r\n */\nvar NftTokenType;\n(function (NftTokenType) {\n  NftTokenType[\"ERC721\"] = \"ERC721\";\n  NftTokenType[\"ERC1155\"] = \"ERC1155\";\n  NftTokenType[\"NO_SUPPORTED_NFT_STANDARD\"] = \"NO_SUPPORTED_NFT_STANDARD\";\n  NftTokenType[\"NOT_A_CONTRACT\"] = \"NOT_A_CONTRACT\";\n  NftTokenType[\"UNKNOWN\"] = \"UNKNOWN\";\n})(NftTokenType || (NftTokenType = {}));\n/** Potential reasons why an NFT contract was classified as spam. */\nvar NftSpamClassification;\n(function (NftSpamClassification) {\n  NftSpamClassification[\"Erc721TooManyOwners\"] = \"Erc721TooManyOwners\";\n  NftSpamClassification[\"Erc721TooManyTokens\"] = \"Erc721TooManyTokens\";\n  NftSpamClassification[\"Erc721DishonestTotalSupply\"] = \"Erc721DishonestTotalSupply\";\n  NftSpamClassification[\"MostlyHoneyPotOwners\"] = \"MostlyHoneyPotOwners\";\n  NftSpamClassification[\"OwnedByMostHoneyPots\"] = \"OwnedByMostHoneyPots\";\n})(NftSpamClassification || (NftSpamClassification = {}));\n/**\r\n * Enum of NFT filters that can be applied to a {@link getNftsForOwner} request.\r\n * NFTs that match one or more of these filters are excluded from the response.\r\n *\r\n * @deprecated Use {@link NftFilters} instead. This enum will be removed in a\r\n *   future version.\r\n *\r\n * @beta\r\n */\nvar NftExcludeFilters;\n(function (NftExcludeFilters) {\n  /** Exclude NFTs that have been classified as spam. */\n  NftExcludeFilters[\"SPAM\"] = \"SPAM\";\n  /** Exclude NFTs that have been airdropped to a user. */\n  NftExcludeFilters[\"AIRDROPS\"] = \"AIRDROPS\";\n})(NftExcludeFilters || (NftExcludeFilters = {}));\n/**\r\n * Enum of NFT filters that can be applied to a {@link getNftsForOwner} or a\r\n * {@link getContractsForOwner} request.\r\n *\r\n * @beta\r\n */\nvar NftFilters;\n(function (NftFilters) {\n  /** NFTs that have been classified as spam. */\n  NftFilters[\"SPAM\"] = \"SPAM\";\n  /** NFTs that have been airdropped to a user. */\n  NftFilters[\"AIRDROPS\"] = \"AIRDROPS\";\n})(NftFilters || (NftFilters = {}));\n/**\r\n * Enum of ordering that can be applied to a {@link getNftsForOwner} or a\r\n * {@link getContractsForOwner} response.\r\n *\r\n * @beta\r\n */\nvar NftOrdering;\n(function (NftOrdering) {\n  NftOrdering[\"TRANSFERTIME\"] = \"TRANSFERTIME\";\n})(NftOrdering || (NftOrdering = {}));\n/**\r\n * The type of transfer for the request. Note that using `TO` will also include\r\n * NFTs that were minted by the owner.\r\n */\nvar GetTransfersForOwnerTransferType;\n(function (GetTransfersForOwnerTransferType) {\n  GetTransfersForOwnerTransferType[\"TO\"] = \"TO\";\n  GetTransfersForOwnerTransferType[\"FROM\"] = \"FROM\";\n})(GetTransfersForOwnerTransferType || (GetTransfersForOwnerTransferType = {}));\n/**\r\n * Enum for representing the supported sorting orders of the API.\r\n *\r\n * @public\r\n */\nvar SortingOrder;\n(function (SortingOrder) {\n  SortingOrder[\"ASCENDING\"] = \"asc\";\n  SortingOrder[\"DESCENDING\"] = \"desc\";\n})(SortingOrder || (SortingOrder = {}));\n/**\r\n * Enum representing the supported NFT marketplaces by the\r\n * {@link NftNamespace.getNftSales} method.\r\n *\r\n * @public\r\n */\nvar NftSaleMarketplace;\n(function (NftSaleMarketplace) {\n  NftSaleMarketplace[\"SEAPORT\"] = \"seaport\";\n  NftSaleMarketplace[\"LOOKSRARE\"] = \"looksrare\";\n  NftSaleMarketplace[\"X2Y2\"] = \"x2y2\";\n  NftSaleMarketplace[\"WYVERN\"] = \"wyvern\";\n  NftSaleMarketplace[\"CRYPTOPUNKS\"] = \"cryptopunks\";\n  NftSaleMarketplace[\"UNKNOWN\"] = \"unknown\";\n})(NftSaleMarketplace || (NftSaleMarketplace = {}));\n/**\r\n * Enum for specifying the taker type for the {@link NftNamespace.getNftSales}\r\n * method.\r\n *\r\n * @public\r\n */\nvar NftSaleTakerType;\n(function (NftSaleTakerType) {\n  NftSaleTakerType[\"BUYER\"] = \"buyer\";\n  NftSaleTakerType[\"SELLER\"] = \"seller\";\n})(NftSaleTakerType || (NftSaleTakerType = {}));\n/** The current state of the NFT contract refresh process. */\nvar RefreshState;\n(function (RefreshState) {\n  /** The provided contract is not an NFT or does not contain metadata. */\n  RefreshState[\"DOES_NOT_EXIST\"] = \"does_not_exist\";\n  /** The contract has already been queued for refresh. */\n  RefreshState[\"ALREADY_QUEUED\"] = \"already_queued\";\n  /** The contract is currently being refreshed. */\n  RefreshState[\"IN_PROGRESS\"] = \"in_progress\";\n  /** The contract refresh is complete. */\n  RefreshState[\"FINISHED\"] = \"finished\";\n  /** The contract refresh has been queued and await execution. */\n  RefreshState[\"QUEUED\"] = \"queued\";\n  /** The contract was unable to be queued due to an internal error. */\n  RefreshState[\"QUEUE_FAILED\"] = \"queue_failed\";\n})(RefreshState || (RefreshState = {}));\n/** An OpenSea collection's approval status. */\nvar OpenSeaSafelistRequestStatus;\n(function (OpenSeaSafelistRequestStatus) {\n  /** Verified collection. */\n  OpenSeaSafelistRequestStatus[\"VERIFIED\"] = \"verified\";\n  /** Collections that are approved on open sea and can be found in search results. */\n  OpenSeaSafelistRequestStatus[\"APPROVED\"] = \"approved\";\n  /** Collections that requested safelisting on OpenSea. */\n  OpenSeaSafelistRequestStatus[\"REQUESTED\"] = \"requested\";\n  /** Brand new collections. */\n  OpenSeaSafelistRequestStatus[\"NOT_REQUESTED\"] = \"not_requested\";\n})(OpenSeaSafelistRequestStatus || (OpenSeaSafelistRequestStatus = {}));\n/**\r\n * Method names for Alchemy's custom Subscription API endpoints.\r\n *\r\n * This value is provided in the `method` field when creating an event filter on\r\n * the Websocket Namespace.\r\n */\nvar AlchemySubscription;\n(function (AlchemySubscription) {\n  AlchemySubscription[\"PENDING_TRANSACTIONS\"] = \"alchemy_pendingTransactions\";\n  AlchemySubscription[\"MINED_TRANSACTIONS\"] = \"alchemy_minedTransactions\";\n})(AlchemySubscription || (AlchemySubscription = {}));\n/**\r\n * Asset type returned when calling {@link TransactNamespace.simulateAssetChanges}.\r\n * Allows you to determine if the assets approved or / and transferred are\r\n * native, tokens or NFTs.\r\n */\nvar SimulateAssetType;\n(function (SimulateAssetType) {\n  /**\r\n   * Native transfers that involve the currency of the chain the simulation is\r\n   * run on (ex: ETH for Ethereum, MATIC for Polygon, ETH for Arbitrum).\r\n   */\n  SimulateAssetType[\"NATIVE\"] = \"NATIVE\";\n  /** ERC20 approval or transfers. */\n  SimulateAssetType[\"ERC20\"] = \"ERC20\";\n  /** ERC721 approval or transfers. */\n  SimulateAssetType[\"ERC721\"] = \"ERC721\";\n  /** ERC1155 approval or transfers. */\n  SimulateAssetType[\"ERC1155\"] = \"ERC1155\";\n  /**\r\n   * Special contracts that don't follow ERC 721/1155.Currently limited to\r\n   * CryptoKitties and CryptoPunks.\r\n   */\n  SimulateAssetType[\"SPECIAL_NFT\"] = \"SPECIAL_NFT\";\n})(SimulateAssetType || (SimulateAssetType = {}));\n/**\r\n * Change type returned when calling {@link TransactNamespace.simulateAssetChanges}.\r\n */\nvar SimulateChangeType;\n(function (SimulateChangeType) {\n  /**\r\n   * Represents a transaction that approved or disapproved permissions for a\r\n   * contract.\r\n   *\r\n   * APPROVE without token ID → approve all tokens\r\n   * APPROVE without amount → approve all amount\r\n   * APPROVE with zero amount → approval being cleared\r\n   */\n  SimulateChangeType[\"APPROVE\"] = \"APPROVE\";\n  /**\r\n   * Represents a transaction that transferred tokens from one address to another.\r\n   */\n  SimulateChangeType[\"TRANSFER\"] = \"TRANSFER\";\n})(SimulateChangeType || (SimulateChangeType = {}));\n/**\r\n * Authority used to decode calls and logs when using the\r\n * {@link TransactNamespace.simulateExecution} method.\r\n */\nvar DecodingAuthority;\n(function (DecodingAuthority) {\n  DecodingAuthority[\"ETHERSCAN\"] = \"ETHERSCAN\";\n})(DecodingAuthority || (DecodingAuthority = {}));\n/** The type of call in a debug call trace. */\nvar DebugCallType;\n(function (DebugCallType) {\n  DebugCallType[\"CREATE\"] = \"CREATE\";\n  DebugCallType[\"CALL\"] = \"CALL\";\n  DebugCallType[\"STATICCALL\"] = \"STATICCALL\";\n  DebugCallType[\"DELEGATECALL\"] = \"DELEGATECALL\";\n})(DebugCallType || (DebugCallType = {}));\n/**\r\n * Potential transaction job statuses for a {@link GasOptimizedTransactionResponse}\r\n *\r\n * @internal\r\n */\n// TODO(txjob): Remove internal tag once this feature is released.\nvar GasOptimizedTransactionStatus;\n(function (GasOptimizedTransactionStatus) {\n  GasOptimizedTransactionStatus[\"UNSPECIFIED\"] = \"TRANSACTION_JOB_STATUS_UNSPECIFIED\";\n  GasOptimizedTransactionStatus[\"IN_PROGRESS\"] = \"IN_PROGRESS\";\n  GasOptimizedTransactionStatus[\"COMPLETE\"] = \"COMPLETE\";\n  GasOptimizedTransactionStatus[\"ABANDONED\"] = \"ABANDONED\";\n})(GasOptimizedTransactionStatus || (GasOptimizedTransactionStatus = {}));\n/** The version of the webhook. All newly created webhooks default to V2. */\nvar WebhookVersion;\n(function (WebhookVersion) {\n  WebhookVersion[\"V1\"] = \"V1\";\n  WebhookVersion[\"V2\"] = \"V2\";\n})(WebhookVersion || (WebhookVersion = {}));\n/** The type of {@link Webhook}. */\nvar WebhookType;\n(function (WebhookType) {\n  WebhookType[\"MINED_TRANSACTION\"] = \"MINED_TRANSACTION\";\n  WebhookType[\"DROPPED_TRANSACTION\"] = \"DROPPED_TRANSACTION\";\n  WebhookType[\"ADDRESS_ACTIVITY\"] = \"ADDRESS_ACTIVITY\";\n  WebhookType[\"NFT_ACTIVITY\"] = \"NFT_ACTIVITY\";\n  WebhookType[\"NFT_METADATA_UPDATE\"] = \"NFT_METADATA_UPDATE\";\n  WebhookType[\"GRAPHQL\"] = \"GRAPHQL\";\n})(WebhookType || (WebhookType = {}));\n/**\r\n * Commitment level of the target block with using methods in the\r\n * {@link DebugNamespace}\r\n */\nvar CommitmentLevel;\n(function (CommitmentLevel) {\n  /**\r\n   * Sample next block inferred by Alchemy built on top of the latest block.\r\n   * This contains the set of transactions taken from the local mempool and\r\n   * is a proxy for blocks that have not been mined yet.\r\n   */\n  CommitmentLevel[\"PENDING\"] = \"pending\";\n  /**\r\n   * The most recent block in the canonical chain observed by Alchemy. Note that\r\n   * this block may be re-orged out of the canonical chain.\r\n   */\n  CommitmentLevel[\"LATEST\"] = \"latest\";\n  /**\r\n   * The most recent crypto-economically secure block that cannot be re-orged\r\n   * outside of manual intervention driven by community coordination. This is\r\n   * only available on {@link Network.ETH_GOERLI} and {@link Network.ETH_SEPOLIA}.\r\n   */\n  CommitmentLevel[\"SAFE\"] = \"safe\";\n  /**\r\n   * The most recent secure block that has been accepted by >2/3 of validators.\r\n   * This block is very unlikely to be re-orged. This is only available on\r\n   * {@link Network.ETH_GOERLI} and {@link Network.ETH_SEPOLIA}.\r\n   */\n  CommitmentLevel[\"FINALIZED\"] = \"finalized\";\n  /**\r\n   * The lowest numbered block available that is usually the first block created.\r\n   */\n  CommitmentLevel[\"EARLIEST\"] = \"earliest\";\n})(CommitmentLevel || (CommitmentLevel = {}));\n/**\r\n * The type of tracer to use when running debug methods in the\r\n * {@link DebugNamespace}.\r\n */\nvar DebugTracerType;\n(function (DebugTracerType) {\n  DebugTracerType[\"CALL_TRACER\"] = \"callTracer\";\n  DebugTracerType[\"PRESTATE_TRACER\"] = \"prestateTracer\";\n})(DebugTracerType || (DebugTracerType = {}));\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\nfunction __awaiter$1(thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\nfunction __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\nfunction __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\nfunction __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []),\n    i,\n    q = [];\n  return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () {\n    return this;\n  }, i;\n  function verb(n) {\n    if (g[n]) i[n] = function (v) {\n      return new Promise(function (a, b) {\n        q.push([n, v, a, b]) > 1 || resume(n, v);\n      });\n    };\n  }\n  function resume(n, v) {\n    try {\n      step(g[n](v));\n    } catch (e) {\n      settle(q[0][3], e);\n    }\n  }\n  function step(r) {\n    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);\n  }\n  function fulfill(value) {\n    resume(\"next\", value);\n  }\n  function reject(value) {\n    resume(\"throw\", value);\n  }\n  function settle(f, v) {\n    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);\n  }\n}\nfunction __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator],\n    i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () {\n    return this;\n  }, i);\n  function verb(n) {\n    i[n] = o[n] && function (v) {\n      return new Promise(function (resolve, reject) {\n        v = o[n](v), settle(resolve, reject, v.done, v.value);\n      });\n    };\n  }\n  function settle(resolve, reject, d, v) {\n    Promise.resolve(v).then(function (v) {\n      resolve({\n        value: v,\n        done: d\n      });\n    }, reject);\n  }\n}\nconst DEFAULT_ALCHEMY_API_KEY = 'demo';\nconst DEFAULT_NETWORK = Network.ETH_MAINNET;\nconst DEFAULT_MAX_RETRIES = 5;\nconst DEFAULT_REQUEST_TIMEOUT = 0; // 0 = no timeout\n/**\r\n * Returns the base URL for making Alchemy API requests. The `alchemy.com`\r\n * endpoints only work with non eth json-rpc requests.\r\n *\r\n * @internal\r\n */\nfunction getAlchemyHttpUrl(network, apiKey) {\n  return `https://${network}.g.alchemy.com/v2/${apiKey}`;\n}\nfunction getAlchemyNftHttpUrl(network, apiKey) {\n  return `https://${network}.g.alchemy.com/nft/v2/${apiKey}`;\n}\nfunction getAlchemyWsUrl(network, apiKey) {\n  return `wss://${network}.g.alchemy.com/v2/${apiKey}`;\n}\nfunction getAlchemyWebhookHttpUrl() {\n  return 'https://dashboard.alchemy.com/api';\n}\nvar AlchemyApiType;\n(function (AlchemyApiType) {\n  AlchemyApiType[AlchemyApiType[\"BASE\"] = 0] = \"BASE\";\n  AlchemyApiType[AlchemyApiType[\"NFT\"] = 1] = \"NFT\";\n  AlchemyApiType[AlchemyApiType[\"WEBHOOK\"] = 2] = \"WEBHOOK\";\n})(AlchemyApiType || (AlchemyApiType = {}));\n/**\r\n * Mapping of network names to their corresponding Network strings used to\r\n * create an Ethers.js Provider instance.\r\n */\nconst EthersNetwork = {\n  [Network.ETH_MAINNET]: 'mainnet',\n  [Network.ETH_ROPSTEN]: 'ropsten',\n  [Network.ETH_GOERLI]: 'goerli',\n  [Network.ETH_KOVAN]: 'kovan',\n  [Network.ETH_RINKEBY]: 'rinkeby',\n  [Network.ETH_SEPOLIA]: 'sepolia',\n  [Network.OPT_MAINNET]: 'optimism',\n  [Network.OPT_KOVAN]: 'optimism-kovan',\n  [Network.OPT_GOERLI]: 'optimism-goerli',\n  [Network.ARB_MAINNET]: 'arbitrum',\n  [Network.ARB_RINKEBY]: 'arbitrum-rinkeby',\n  [Network.ARB_GOERLI]: 'arbitrum-goerli',\n  [Network.MATIC_MAINNET]: 'matic',\n  [Network.MATIC_MUMBAI]: 'maticmum',\n  [Network.ASTAR_MAINNET]: 'astar-mainnet',\n  [Network.POLYGONZKEVM_MAINNET]: 'polygonzkevm-mainnet',\n  [Network.POLYGONZKEVM_TESTNET]: 'polygonzkevm-testnet'\n};\n/**\r\n * Mapping of network names to their corresponding Ethers Network objects. These\r\n * networks are not yet supported by Ethers and are listed here to be overriden\r\n * in the provider.\r\n */\nconst CustomNetworks = {\n  'arbitrum-goerli': {\n    chainId: 421613,\n    name: 'arbitrum-goerli'\n  },\n  'astar-mainnet': {\n    chainId: 592,\n    name: 'astar-mainnet'\n  },\n  sepolia: {\n    chainId: 11155111,\n    name: 'sepolia'\n  },\n  'polygonzkevm-mainnet': {\n    chainId: 1101,\n    name: 'polygonzkevm-mainnet'\n  },\n  'polygonzkevm-testnet': {\n    chainId: 1442,\n    name: 'polygonzkevm-testnet'\n  }\n};\nfunction noop() {\n  // It's a no-op\n}\nconst ETH_NULL_VALUE = '0x';\nconst ETH_NULL_ADDRESS = '0x0000000000000000000000000000000000000000';\n\n/**\r\n * This class holds the config information for the SDK client instance and\r\n * exposes the underlying providers for more advanced use cases.\r\n *\r\n * @public\r\n */\nclass AlchemyConfig {\n  constructor(config) {\n    this.apiKey = (config === null || config === void 0 ? void 0 : config.apiKey) || DEFAULT_ALCHEMY_API_KEY;\n    this.network = (config === null || config === void 0 ? void 0 : config.network) || DEFAULT_NETWORK;\n    this.maxRetries = (config === null || config === void 0 ? void 0 : config.maxRetries) || DEFAULT_MAX_RETRIES;\n    this.url = config === null || config === void 0 ? void 0 : config.url;\n    this.authToken = config === null || config === void 0 ? void 0 : config.authToken;\n    this.batchRequests = (config === null || config === void 0 ? void 0 : config.batchRequests) || false;\n    this.requestTimeout = (config === null || config === void 0 ? void 0 : config.requestTimeout) || DEFAULT_REQUEST_TIMEOUT;\n  }\n  /**\r\n   * Returns the URL endpoint to send the HTTP request to. If a custom URL was\r\n   * provided in the config, that URL is returned. Otherwise, the default URL is\r\n   * from the network and API key.\r\n   *\r\n   * @param apiType - The type of API to get the URL for.\r\n   * @internal\r\n   */\n  _getRequestUrl(apiType) {\n    if (this.url !== undefined) {\n      return this.url;\n    } else if (apiType === AlchemyApiType.NFT) {\n      return getAlchemyNftHttpUrl(this.network, this.apiKey);\n    } else if (apiType === AlchemyApiType.WEBHOOK) {\n      return getAlchemyWebhookHttpUrl();\n    } else {\n      return getAlchemyHttpUrl(this.network, this.apiKey);\n    }\n  }\n  /**\r\n   * Returns an AlchemyProvider instance. Only one provider is created per\r\n   * Alchemy instance.\r\n   *\r\n   * The AlchemyProvider is a wrapper around ether's `AlchemyProvider` class and\r\n   * has been expanded to support Alchemy's Enhanced APIs.\r\n   *\r\n   * Most common methods on the provider are available as top-level methods on\r\n   * the {@link Alchemy} instance, but the provider is exposed here to access\r\n   * other less-common methods.\r\n   *\r\n   * @public\r\n   */\n  getProvider() {\n    if (!this._baseAlchemyProvider) {\n      this._baseAlchemyProvider = (() => __awaiter$1(this, void 0, void 0, function* () {\n        const {\n          AlchemyProvider\n        } = yield import('./alchemy-provider-afa3762a.js');\n        return new AlchemyProvider(this);\n      }))();\n    }\n    return this._baseAlchemyProvider;\n  }\n  /**\r\n   * Returns an AlchemyWebsocketProvider instance. Only one provider is created\r\n   * per Alchemy instance.\r\n   *\r\n   * The AlchemyWebSocketProvider is a wrapper around ether's\r\n   * `AlchemyWebSocketProvider` class and has been expanded to support Alchemy's\r\n   * Subscription APIs, automatic backfilling, and other performance improvements.\r\n   *\r\n   * Most common methods on the provider are available as top-level methods on\r\n   * the {@link Alchemy} instance, but the provider is exposed here to access\r\n   * other less-common methods.\r\n   */\n  getWebSocketProvider() {\n    if (!this._baseAlchemyWssProvider) {\n      this._baseAlchemyWssProvider = (() => __awaiter$1(this, void 0, void 0, function* () {\n        const {\n          AlchemyWebSocketProvider\n        } = yield import('./alchemy-websocket-provider-b8ed8f71.js');\n        return new AlchemyWebSocketProvider(this);\n      }))();\n    }\n    return this._baseAlchemyWssProvider;\n  }\n}\nconst version$1 = \"logger/5.7.0\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = {\n  debug: 1,\n  \"default\": 2,\n  info: 2,\n  warning: 3,\n  error: 4,\n  off: 5\n};\nlet _logLevel = LogLevels[\"default\"];\nlet _globalLogger = null;\nfunction _checkNormalize() {\n  try {\n    const missing = [];\n    // Make sure all forms of normalization are supported\n    [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach(form => {\n      try {\n        if (\"test\".normalize(form) !== \"test\") {\n          throw new Error(\"bad normalize\");\n        }\n        ;\n      } catch (error) {\n        missing.push(form);\n      }\n    });\n    if (missing.length) {\n      throw new Error(\"missing \" + missing.join(\", \"));\n    }\n    if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n      throw new Error(\"broken implementation\");\n    }\n  } catch (error) {\n    return error.message;\n  }\n  return null;\n}\nconst _normalizeError = _checkNormalize();\nvar LogLevel$1;\n(function (LogLevel) {\n  LogLevel[\"DEBUG\"] = \"DEBUG\";\n  LogLevel[\"INFO\"] = \"INFO\";\n  LogLevel[\"WARNING\"] = \"WARNING\";\n  LogLevel[\"ERROR\"] = \"ERROR\";\n  LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel$1 || (LogLevel$1 = {}));\nvar ErrorCode;\n(function (ErrorCode) {\n  ///////////////////\n  // Generic Errors\n  // Unknown Error\n  ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n  // Not Implemented\n  ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n  // Unsupported Operation\n  //   - operation\n  ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n  // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n  //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n  ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n  // Some sort of bad response from the server\n  ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n  // Timeout\n  ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n  ///////////////////\n  // Operational  Errors\n  // Buffer Overrun\n  ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n  // Numeric Fault\n  //   - operation: the operation being executed\n  //   - fault: the reason this faulted\n  ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n  ///////////////////\n  // Argument Errors\n  // Missing new operator to an object\n  //  - name: The name of the class\n  ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n  // Invalid argument (e.g. value is incompatible with type) to a function:\n  //   - argument: The argument name that was invalid\n  //   - value: The value of the argument\n  ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n  // Missing argument to a function:\n  //   - count: The number of arguments received\n  //   - expectedCount: The number of arguments expected\n  ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n  // Too many arguments\n  //   - count: The number of arguments received\n  //   - expectedCount: The number of arguments expected\n  ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n  ///////////////////\n  // Blockchain Errors\n  // Call exception\n  //  - transaction: the transaction\n  //  - address?: the contract address\n  //  - args?: The arguments passed into the function\n  //  - method?: The Solidity method signature\n  //  - errorSignature?: The EIP848 error signature\n  //  - errorArgs?: The EIP848 error parameters\n  //  - reason: The reason (only for EIP848 \"Error(string)\")\n  ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n  // Insufficient funds (< value + gasLimit * gasPrice)\n  //   - transaction: the transaction attempted\n  ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n  // Nonce has already been used\n  //   - transaction: the transaction attempted\n  ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n  // The replacement fee for the transaction is too low\n  //   - transaction: the transaction attempted\n  ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n  // The gas limit could not be estimated\n  //   - transaction: the transaction passed to estimateGas\n  ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n  // The transaction was replaced by one with a higher gas price\n  //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n  //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n  //   - hash: original transaction hash\n  //   - replacement: the full TransactionsResponse for the replacement\n  //   - receipt: the receipt of the replacement\n  ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n  ///////////////////\n  // Interaction Errors\n  // The user rejected the action, such as signing a message or sending\n  // a transaction\n  ErrorCode[\"ACTION_REJECTED\"] = \"ACTION_REJECTED\";\n})(ErrorCode || (ErrorCode = {}));\nconst HEX = \"0123456789abcdef\";\nclass Logger$1 {\n  constructor(version) {\n    Object.defineProperty(this, \"version\", {\n      enumerable: true,\n      value: version,\n      writable: false\n    });\n  }\n  _log(logLevel, args) {\n    const level = logLevel.toLowerCase();\n    if (LogLevels[level] == null) {\n      this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n    }\n    if (_logLevel > LogLevels[level]) {\n      return;\n    }\n    console.log.apply(console, args);\n  }\n  debug(...args) {\n    this._log(Logger$1.levels.DEBUG, args);\n  }\n  info(...args) {\n    this._log(Logger$1.levels.INFO, args);\n  }\n  warn(...args) {\n    this._log(Logger$1.levels.WARNING, args);\n  }\n  makeError(message, code, params) {\n    // Errors are being censored\n    if (_censorErrors) {\n      return this.makeError(\"censored error\", code, {});\n    }\n    if (!code) {\n      code = Logger$1.errors.UNKNOWN_ERROR;\n    }\n    if (!params) {\n      params = {};\n    }\n    const messageDetails = [];\n    Object.keys(params).forEach(key => {\n      const value = params[key];\n      try {\n        if (value instanceof Uint8Array) {\n          let hex = \"\";\n          for (let i = 0; i < value.length; i++) {\n            hex += HEX[value[i] >> 4];\n            hex += HEX[value[i] & 0x0f];\n          }\n          messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n        } else {\n          messageDetails.push(key + \"=\" + JSON.stringify(value));\n        }\n      } catch (error) {\n        messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n      }\n    });\n    messageDetails.push(`code=${code}`);\n    messageDetails.push(`version=${this.version}`);\n    const reason = message;\n    let url = \"\";\n    switch (code) {\n      case ErrorCode.NUMERIC_FAULT:\n        {\n          url = \"NUMERIC_FAULT\";\n          const fault = message;\n          switch (fault) {\n            case \"overflow\":\n            case \"underflow\":\n            case \"division-by-zero\":\n              url += \"-\" + fault;\n              break;\n            case \"negative-power\":\n            case \"negative-width\":\n              url += \"-unsupported\";\n              break;\n            case \"unbound-bitwise-result\":\n              url += \"-unbound-result\";\n              break;\n          }\n          break;\n        }\n      case ErrorCode.CALL_EXCEPTION:\n      case ErrorCode.INSUFFICIENT_FUNDS:\n      case ErrorCode.MISSING_NEW:\n      case ErrorCode.NONCE_EXPIRED:\n      case ErrorCode.REPLACEMENT_UNDERPRICED:\n      case ErrorCode.TRANSACTION_REPLACED:\n      case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n        url = code;\n        break;\n    }\n    if (url) {\n      message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n    }\n    if (messageDetails.length) {\n      message += \" (\" + messageDetails.join(\", \") + \")\";\n    }\n    // @TODO: Any??\n    const error = new Error(message);\n    error.reason = reason;\n    error.code = code;\n    Object.keys(params).forEach(function (key) {\n      error[key] = params[key];\n    });\n    return error;\n  }\n  throwError(message, code, params) {\n    throw this.makeError(message, code, params);\n  }\n  throwArgumentError(message, name, value) {\n    return this.throwError(message, Logger$1.errors.INVALID_ARGUMENT, {\n      argument: name,\n      value: value\n    });\n  }\n  assert(condition, message, code, params) {\n    if (!!condition) {\n      return;\n    }\n    this.throwError(message, code, params);\n  }\n  assertArgument(condition, message, name, value) {\n    if (!!condition) {\n      return;\n    }\n    this.throwArgumentError(message, name, value);\n  }\n  checkNormalize(message) {\n    if (_normalizeError) {\n      this.throwError(\"platform missing String.prototype.normalize\", Logger$1.errors.UNSUPPORTED_OPERATION, {\n        operation: \"String.prototype.normalize\",\n        form: _normalizeError\n      });\n    }\n  }\n  checkSafeUint53(value, message) {\n    if (typeof value !== \"number\") {\n      return;\n    }\n    if (message == null) {\n      message = \"value not safe\";\n    }\n    if (value < 0 || value >= 0x1fffffffffffff) {\n      this.throwError(message, Logger$1.errors.NUMERIC_FAULT, {\n        operation: \"checkSafeInteger\",\n        fault: \"out-of-safe-range\",\n        value: value\n      });\n    }\n    if (value % 1) {\n      this.throwError(message, Logger$1.errors.NUMERIC_FAULT, {\n        operation: \"checkSafeInteger\",\n        fault: \"non-integer\",\n        value: value\n      });\n    }\n  }\n  checkArgumentCount(count, expectedCount, message) {\n    if (message) {\n      message = \": \" + message;\n    } else {\n      message = \"\";\n    }\n    if (count < expectedCount) {\n      this.throwError(\"missing argument\" + message, Logger$1.errors.MISSING_ARGUMENT, {\n        count: count,\n        expectedCount: expectedCount\n      });\n    }\n    if (count > expectedCount) {\n      this.throwError(\"too many arguments\" + message, Logger$1.errors.UNEXPECTED_ARGUMENT, {\n        count: count,\n        expectedCount: expectedCount\n      });\n    }\n  }\n  checkNew(target, kind) {\n    if (target === Object || target == null) {\n      this.throwError(\"missing new\", Logger$1.errors.MISSING_NEW, {\n        name: kind.name\n      });\n    }\n  }\n  checkAbstract(target, kind) {\n    if (target === kind) {\n      this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger$1.errors.UNSUPPORTED_OPERATION, {\n        name: target.name,\n        operation: \"new\"\n      });\n    } else if (target === Object || target == null) {\n      this.throwError(\"missing new\", Logger$1.errors.MISSING_NEW, {\n        name: kind.name\n      });\n    }\n  }\n  static globalLogger() {\n    if (!_globalLogger) {\n      _globalLogger = new Logger$1(version$1);\n    }\n    return _globalLogger;\n  }\n  static setCensorship(censorship, permanent) {\n    if (!censorship && permanent) {\n      this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger$1.errors.UNSUPPORTED_OPERATION, {\n        operation: \"setCensorship\"\n      });\n    }\n    if (_permanentCensorErrors) {\n      if (!censorship) {\n        return;\n      }\n      this.globalLogger().throwError(\"error censorship permanent\", Logger$1.errors.UNSUPPORTED_OPERATION, {\n        operation: \"setCensorship\"\n      });\n    }\n    _censorErrors = !!censorship;\n    _permanentCensorErrors = !!permanent;\n  }\n  static setLogLevel(logLevel) {\n    const level = LogLevels[logLevel.toLowerCase()];\n    if (level == null) {\n      Logger$1.globalLogger().warn(\"invalid log level - \" + logLevel);\n      return;\n    }\n    _logLevel = level;\n  }\n  static from(version) {\n    return new Logger$1(version);\n  }\n}\nLogger$1.errors = ErrorCode;\nLogger$1.levels = LogLevel$1;\nconst version = \"properties/5.7.0\";\nvar __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nconst logger = new Logger$1(version);\nfunction defineReadOnly(object, name, value) {\n  Object.defineProperty(object, name, {\n    enumerable: true,\n    value: value,\n    writable: false\n  });\n}\nfunction resolveProperties(object) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const promises = Object.keys(object).map(key => {\n      const value = object[key];\n      return Promise.resolve(value).then(v => ({\n        key: key,\n        value: v\n      }));\n    });\n    const results = yield Promise.all(promises);\n    return results.reduce((accum, result) => {\n      accum[result.key] = result.value;\n      return accum;\n    }, {});\n  });\n}\nconst opaque = {\n  bigint: true,\n  boolean: true,\n  \"function\": true,\n  number: true,\n  string: true\n};\nfunction _isFrozen(object) {\n  // Opaque objects are not mutable, so safe to copy by assignment\n  if (object === undefined || object === null || opaque[typeof object]) {\n    return true;\n  }\n  if (Array.isArray(object) || typeof object === \"object\") {\n    if (!Object.isFrozen(object)) {\n      return false;\n    }\n    const keys = Object.keys(object);\n    for (let i = 0; i < keys.length; i++) {\n      let value = null;\n      try {\n        value = object[keys[i]];\n      } catch (error) {\n        // If accessing a value triggers an error, it is a getter\n        // designed to do so (e.g. Result) and is therefore \"frozen\"\n        continue;\n      }\n      if (!_isFrozen(value)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return logger.throwArgumentError(`Cannot deepCopy ${typeof object}`, \"object\", object);\n}\n// Returns a new copy of object, such that no properties may be replaced.\n// New properties may be added only to objects.\nfunction _deepCopy(object) {\n  if (_isFrozen(object)) {\n    return object;\n  }\n  // Arrays are mutable, so we need to create a copy\n  if (Array.isArray(object)) {\n    return Object.freeze(object.map(item => deepCopy(item)));\n  }\n  if (typeof object === \"object\") {\n    const result = {};\n    for (const key in object) {\n      const value = object[key];\n      if (value === undefined) {\n        continue;\n      }\n      defineReadOnly(result, key, deepCopy(value));\n    }\n    return result;\n  }\n  return logger.throwArgumentError(`Cannot deepCopy ${typeof object}`, \"object\", object);\n}\nfunction deepCopy(object) {\n  return _deepCopy(object);\n}\n\n/**\r\n * Converts a hex string to a decimal number.\r\n *\r\n * @param hexString - The hex string to convert.\r\n * @public\r\n */\nfunction fromHex(hexString) {\n  return BigNumber.from(hexString).toNumber();\n}\n/**\r\n * Converts a number to a hex string.\r\n *\r\n * @param num - The number to convert to hex.\r\n * @public\r\n */\nfunction toHex(num) {\n  return BigNumber.from(num).toHexString();\n}\n/**\r\n * Checks if a value is a hex string.\r\n *\r\n * @param possibleHexString - The value to check.\r\n * @public\r\n */\nfunction isHex(possibleHexString) {\n  return /^0x[0-9a-fA-F]+$/.test(possibleHexString);\n}\nfunction formatBlock(block) {\n  if (typeof block === 'string') {\n    return block;\n  } else if (Number.isInteger(block)) {\n    return toHex(block);\n  }\n  return block.toString();\n}\nfunction stringToEnum(x, enumb) {\n  return Object.values(enumb).includes(x) ? x : undefined;\n}\nfunction getNftContractFromRaw(rawNftContract) {\n  return {\n    address: rawNftContract.address,\n    name: rawNftContract.contractMetadata.name,\n    symbol: rawNftContract.contractMetadata.symbol,\n    totalSupply: rawNftContract.contractMetadata.totalSupply,\n    tokenType: parseNftTokenType(rawNftContract.contractMetadata.tokenType),\n    openSea: parseOpenSeaMetadata(rawNftContract.contractMetadata.openSea),\n    contractDeployer: rawNftContract.contractMetadata.contractDeployer,\n    deployedBlockNumber: rawNftContract.contractMetadata.deployedBlockNumber\n  };\n}\nfunction getBaseNftFromRaw(rawBaseNft, contractAddress) {\n  var _a;\n  return {\n    contract: contractAddress ? {\n      address: contractAddress\n    } : rawBaseNft.contract,\n    tokenId: BigNumber.from(rawBaseNft.id.tokenId).toString(),\n    tokenType: parseNftTokenType((_a = rawBaseNft.id.tokenMetadata) === null || _a === void 0 ? void 0 : _a.tokenType)\n  };\n}\nfunction getNftFromRaw(rawNft) {\n  var _a, _b, _c, _d, _e, _f, _g;\n  try {\n    const tokenType = parseNftTokenType((_a = rawNft.id.tokenMetadata) === null || _a === void 0 ? void 0 : _a.tokenType);\n    const spamInfo = parseSpamInfo(rawNft.spamInfo);\n    return {\n      contract: {\n        address: rawNft.contract.address,\n        name: (_b = rawNft.contractMetadata) === null || _b === void 0 ? void 0 : _b.name,\n        symbol: (_c = rawNft.contractMetadata) === null || _c === void 0 ? void 0 : _c.symbol,\n        totalSupply: (_d = rawNft.contractMetadata) === null || _d === void 0 ? void 0 : _d.totalSupply,\n        tokenType,\n        openSea: parseOpenSeaMetadata((_e = rawNft.contractMetadata) === null || _e === void 0 ? void 0 : _e.openSea),\n        contractDeployer: (_f = rawNft.contractMetadata) === null || _f === void 0 ? void 0 : _f.contractDeployer,\n        deployedBlockNumber: (_g = rawNft.contractMetadata) === null || _g === void 0 ? void 0 : _g.deployedBlockNumber\n      },\n      tokenId: parseNftTokenId(rawNft.id.tokenId),\n      tokenType,\n      title: rawNft.title,\n      description: parseNftDescription(rawNft.description),\n      timeLastUpdated: rawNft.timeLastUpdated,\n      metadataError: rawNft.error,\n      rawMetadata: rawNft.metadata,\n      tokenUri: parseNftTokenUri(rawNft.tokenUri),\n      media: parseNftTokenUriArray(rawNft.media),\n      spamInfo\n    };\n  } catch (e) {\n    throw new Error('Error parsing the NFT response: ' + e);\n  }\n}\nfunction getNftSalesFromRaw(rawNftSales) {\n  return {\n    pageKey: rawNftSales === null || rawNftSales === void 0 ? void 0 : rawNftSales.pageKey,\n    nftSales: rawNftSales.nftSales.map(rawNftSale => ({\n      marketplace: parseNftSaleMarketplace(rawNftSale.marketplace),\n      contractAddress: rawNftSale.contractAddress,\n      tokenId: rawNftSale.tokenId,\n      quantity: rawNftSale.quantity,\n      buyerAddress: rawNftSale.buyerAddress,\n      sellerAddress: rawNftSale.sellerAddress,\n      taker: parseNftTaker(rawNftSale.taker),\n      sellerFee: rawNftSale === null || rawNftSale === void 0 ? void 0 : rawNftSale.sellerFee,\n      marketplaceFee: rawNftSale === null || rawNftSale === void 0 ? void 0 : rawNftSale.protocolFee,\n      protocolFee: rawNftSale === null || rawNftSale === void 0 ? void 0 : rawNftSale.protocolFee,\n      royaltyFee: rawNftSale === null || rawNftSale === void 0 ? void 0 : rawNftSale.royaltyFee,\n      blockNumber: rawNftSale === null || rawNftSale === void 0 ? void 0 : rawNftSale.blockNumber,\n      logIndex: rawNftSale.logIndex,\n      bundleIndex: rawNftSale.bundleIndex,\n      transactionHash: rawNftSale.transactionHash\n    }))\n  };\n}\nfunction parseNftSaleMarketplace(marketplace) {\n  switch (marketplace) {\n    case 'looksrare':\n      return NftSaleMarketplace.LOOKSRARE;\n    case 'seaport':\n      return NftSaleMarketplace.SEAPORT;\n    case 'x2y2':\n      return NftSaleMarketplace.X2Y2;\n    case 'wyvern':\n      return NftSaleMarketplace.WYVERN;\n    case 'cryptopunks':\n      return NftSaleMarketplace.CRYPTOPUNKS;\n    default:\n      return NftSaleMarketplace.UNKNOWN;\n  }\n}\nfunction parseNftTaker(taker) {\n  // The `.toLowerCase()` call is needed because the API returns the capitalized values\n  switch (taker.toLowerCase()) {\n    case 'buyer':\n      return NftSaleTakerType.BUYER;\n    case 'seller':\n      return NftSaleTakerType.SELLER;\n    default:\n      throw new Error(`Unsupported NftSaleTakerType ${taker}`);\n  }\n}\nfunction getNftRarityFromRaw(rawNftRarity) {\n  return rawNftRarity.map(({\n    prevalence,\n    trait_type,\n    value\n  }) => ({\n    prevalence,\n    traitType: trait_type,\n    value\n  }));\n}\nfunction getContractsForOwnerFromRaw(rawContractsForOwner) {\n  return {\n    pageKey: rawContractsForOwner === null || rawContractsForOwner === void 0 ? void 0 : rawContractsForOwner.pageKey,\n    totalCount: rawContractsForOwner.totalCount,\n    contracts: rawContractsForOwner.contracts.map(contract => {\n      return {\n        address: contract.address,\n        totalSupply: contract.totalSupply,\n        isSpam: contract.isSpam,\n        media: contract.media,\n        numDistinctTokensOwned: contract.numDistinctTokensOwned,\n        tokenId: contract.tokenId,\n        totalBalance: contract.totalBalance,\n        name: contract.name,\n        title: contract.title,\n        openSea: parseOpenSeaMetadata(contract === null || contract === void 0 ? void 0 : contract.opensea),\n        symbol: contract === null || contract === void 0 ? void 0 : contract.symbol,\n        tokenType: parseNftTokenType(contract === null || contract === void 0 ? void 0 : contract.tokenType),\n        contractDeployer: contract.contractDeployer,\n        deployedBlockNumber: contract.deployedBlockNumber\n      };\n    })\n  };\n}\nfunction parseNftTokenId(tokenId) {\n  // We have to normalize the token id here since the backend sometimes\n  // returns the token ID as a hex string and sometimes as an integer.\n  return BigNumber.from(tokenId).toString();\n}\nfunction parseNftTokenType(tokenType) {\n  switch (tokenType) {\n    case 'erc721':\n    case 'ERC721':\n      return NftTokenType.ERC721;\n    case 'erc1155':\n    case 'ERC1155':\n      return NftTokenType.ERC1155;\n    case 'no_supported_nft_standard':\n    case 'NO_SUPPORTED_NFT_STANDARD':\n      return NftTokenType.NO_SUPPORTED_NFT_STANDARD;\n    case 'not_a_contract':\n    case 'NOT_A_CONTRACT':\n      return NftTokenType.NOT_A_CONTRACT;\n    default:\n      return NftTokenType.UNKNOWN;\n  }\n}\nfunction parseSpamInfo(spamInfo) {\n  if (!spamInfo) {\n    return undefined;\n  }\n  const {\n    isSpam,\n    classifications\n  } = spamInfo;\n  return {\n    isSpam: isSpam === 'true',\n    classifications\n  };\n}\nfunction parseNftDescription(description) {\n  if (description === undefined) {\n    return '';\n  }\n  // TODO: Remove after backend adds JSON stringification.\n  if (!Array.isArray(description) && typeof description === 'object') {\n    return JSON.stringify(description);\n  }\n  return typeof description === 'string' ? description : description.join(' ');\n}\nfunction parseNftTokenUri(uri) {\n  if (uri && uri.raw.length === 0 && uri.gateway.length == 0) {\n    return undefined;\n  }\n  return uri;\n}\nfunction parseNftTokenUriArray(arr) {\n  if (arr === undefined) {\n    return [];\n  }\n  return arr.filter(uri => parseNftTokenUri(uri) !== undefined);\n}\nfunction parseOpenSeaMetadata(openSea) {\n  if (openSea === undefined) {\n    return undefined;\n  }\n  return {\n    floorPrice: openSea.floorPrice,\n    collectionName: openSea.collectionName,\n    safelistRequestStatus: openSea.safelistRequestStatus !== undefined ? stringToEnum(openSea.safelistRequestStatus, OpenSeaSafelistRequestStatus) : undefined,\n    imageUrl: openSea.imageUrl,\n    description: openSea.description,\n    externalUrl: openSea.externalUrl,\n    twitterUsername: openSea.twitterUsername,\n    discordUrl: openSea.discordUrl,\n    lastIngestedAt: openSea.lastIngestedAt\n  };\n}\nconst IS_BROWSER = typeof window !== 'undefined' && window !== null;\n/** Recursively converts all `null` fields to `undefined. */\n// TODO: Add typing support so it doesn't return `any`.\nfunction nullsToUndefined(obj) {\n  if (obj === null) {\n    return undefined;\n  }\n  // if `obj` is an object, recursively convert all `null` fields to `undefined`.\n  if (typeof obj === 'object') {\n    for (const key in obj) {\n      obj[key] = nullsToUndefined(obj[key]);\n    }\n  }\n  return obj;\n}\n\n/**\r\n * This file contains the underlying implementations for exposed API surface in\r\n * the {@link CoreNamespace}. By moving the methods out into a separate file,\r\n * other namespaces can access these methods without depending on the entire\r\n * CoreNamespace, or override the `srcMethod` param used for logging.\r\n */\n/**\r\n * Gets the asset transfers for the provided params.\r\n */\nfunction getAssetTransfers(config, params, srcMethod = 'getAssetTransfers') {\n  return __awaiter$1(this, void 0, void 0, function* () {\n    const provider = yield config.getProvider();\n    if (params.fromAddress) {\n      params.fromAddress = yield provider._getAddress(params.fromAddress);\n    }\n    if (params.toAddress) {\n      params.toAddress = yield provider._getAddress(params.toAddress);\n    }\n    return provider._send('alchemy_getAssetTransfers', [Object.assign(Object.assign({}, params), {\n      fromBlock: params.fromBlock != null ? formatBlock(params.fromBlock) : undefined,\n      toBlock: params.toBlock != null ? formatBlock(params.toBlock) : undefined,\n      maxCount: params.maxCount != null ? toHex(params.maxCount) : undefined\n    })], srcMethod);\n  });\n}\nfunction getTransactionReceipts(config, params, srcMethod = 'getTransactionReceipts') {\n  return __awaiter$1(this, void 0, void 0, function* () {\n    const provider = yield config.getProvider();\n    return provider._send('alchemy_getTransactionReceipts', [params], srcMethod);\n  });\n}\n/**\r\n * This method is based on the ethers implementation of getLogs, but is expanded\r\n * to support specifying an address array in the filter.\r\n *\r\n * The main modifications made to support an address array are:\r\n * - Custom `getFilter()` method that supports an address array\r\n * - Use of `arrayOf()` formatter to format the logs to avoid the `Formatter` import.\r\n * - Use of `provider.send()` to avoid formatting logic in `provider.perform()`.\r\n */\nfunction getLogs(config, filter) {\n  return __awaiter$1(this, void 0, void 0, function* () {\n    const provider = yield config.getProvider();\n    yield provider.getNetwork();\n    const params = yield resolveProperties({\n      filter: getFilter(config, filter)\n    });\n    const logs = yield provider.send('eth_getLogs', [params.filter]);\n    logs.forEach(log => {\n      if (log.removed == null) {\n        log.removed = false;\n      }\n    });\n    return arrayOf(provider.formatter.filterLog.bind(provider.formatter))(logs);\n  });\n}\n/**\r\n * This method is based on and copied from the ethers implementation of\r\n * `JsonRpcProvider._getFilter()`, but is extended to support an address array.\r\n *\r\n * This implementation is a hacky way to get around the ethers formatter. The\r\n * formatter is used to check the types of the `filter` params, but ethers does\r\n * not allow an array in the `address` field. To preserve the ethers formatter\r\n * on the other fields, we use the formatter to check the types of those other\r\n * fields, and then manually check the `address` field last.\r\n */\nfunction getFilter(config, filter) {\n  return __awaiter$1(this, void 0, void 0, function* () {\n    // START MODIFIED CODE\n    const provider = yield config.getProvider();\n    const resolvedFilter = yield filter;\n    let result = {};\n    // END MODIFIED CODE\n    ['blockHash', 'topics'].forEach(key => {\n      if (resolvedFilter[key] == null) {\n        return;\n      }\n      result[key] = resolvedFilter[key];\n    });\n    ['fromBlock', 'toBlock'].forEach(key => {\n      if (resolvedFilter[key] == null) {\n        return;\n      }\n      result[key] = provider._getBlockTag(resolvedFilter[key]);\n    });\n    // BEGIN MODIFIED CODE\n    // Format the `result` object using the ethers formatter without the `address`\n    // field.\n    result = provider.formatter.filter(yield resolveProperties(result));\n    // After formatting the other fields, manually format the `address` field\n    // before adding it to the `result` object.\n    if (Array.isArray(resolvedFilter.address)) {\n      result.address = yield Promise.all(resolvedFilter.address.map(address => __awaiter$1(this, void 0, void 0, function* () {\n        return provider._getAddress(address);\n      })));\n    } else if (resolvedFilter.address != null) {\n      result.address = yield provider._getAddress(resolvedFilter.address);\n    }\n    return result;\n    // END MODIFIED CODE\n  });\n}\n/**\r\n * DO NOT MODIFY.\r\n *\r\n * This function is directly copied over from ethers implementation of\r\n * `Formatter.arrayOf()`. It is copied here to avoid having to import the\r\n * `Formatter` class or `FormatterFunc` type from ethers, that are not part of\r\n * the default export.\r\n *\r\n * This function returns a function that applies the formatter to an array of\r\n * values, and is used to format the logs returned by `getLogs()`.\r\n */\nfunction arrayOf(format) {\n  return function (array) {\n    if (!Array.isArray(array)) {\n      throw new Error('not an array');\n    }\n    const result = [];\n    array.forEach(value => {\n      result.push(format(value));\n    });\n    return result;\n  };\n}\n\n/**\r\n * The core namespace contains all commonly-used [Ethers.js\r\n * Provider](https://docs.ethers.io/v5/api/providers/api-providers/#AlchemyProvider)\r\n * methods. If you are already using Ethers.js, you should be simply able to\r\n * replace the Ethers.js Provider object with `alchemy.core` when accessing\r\n * provider methods and it should just work.\r\n *\r\n * Do not call this constructor directly. Instead, instantiate an Alchemy object\r\n * with `const alchemy = new Alchemy(config)` and then access the core namespace\r\n * via `alchemy.core`.\r\n */\nclass CoreNamespace {\n  /** @internal */\n  constructor(config) {\n    this.config = config;\n  }\n  /**\r\n   * Returns the balance of a given address as of the provided block.\r\n   *\r\n   * @param addressOrName The address or name of the account to get the balance for.\r\n   * @param blockTag The optional block number or hash to get the balance for.\r\n   *   Defaults to 'latest' if unspecified.\r\n   * @public\r\n   */\n  getBalance(addressOrName, blockTag) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider.getBalance(addressOrName, blockTag);\n    });\n  }\n  /**\r\n   * Returns the contract code of the provided address at the block. If there is\r\n   * no contract deployed, the result is `0x`.\r\n   *\r\n   * @param addressOrName The address or name of the account to get the code for.\r\n   * @param blockTag The optional block number or hash to get the code for.\r\n   *   Defaults to 'latest' if unspecified.\r\n   * @public\r\n   */\n  getCode(addressOrName, blockTag) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider.getCode(addressOrName, blockTag);\n    });\n  }\n  /**\r\n   * Return the value of the provided position at the provided address, at the\r\n   * provided block in `Bytes32` format.\r\n   *\r\n   * @param addressOrName The address or name of the account to get the code for.\r\n   * @param position The position of the storage slot to get.\r\n   * @param blockTag The optional block number or hash to get the code for.\r\n   *   Defaults to 'latest' if unspecified.\r\n   * @public\r\n   */\n  getStorageAt(addressOrName, position, blockTag) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider.getStorageAt(addressOrName, position, blockTag);\n    });\n  }\n  /**\r\n   * Returns the number of transactions ever sent from the provided address, as\r\n   * of the provided block tag. This value is used as the nonce for the next\r\n   * transaction from the address sent to the network.\r\n   *\r\n   * @param addressOrName The address or name of the account to get the nonce for.\r\n   * @param blockTag The optional block number or hash to get the nonce for.\r\n   * @public\r\n   */\n  getTransactionCount(addressOrName, blockTag) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider.getTransactionCount(addressOrName, blockTag);\n    });\n  }\n  /**\r\n   * Returns the block from the network based on the provided block number or\r\n   * hash. Transactions on the block are represented as an array of transaction\r\n   * hashes. To get the full transaction details on the block, use\r\n   * {@link getBlockWithTransactions} instead.\r\n   *\r\n   * @param blockHashOrBlockTag The block number or hash to get the block for.\r\n   * @public\r\n   */\n  getBlock(blockHashOrBlockTag) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider.getBlock(blockHashOrBlockTag);\n    });\n  }\n  /**\r\n   * Returns the block from the network based on the provided block number or\r\n   * hash. Transactions on the block are represented as an array of\r\n   * {@link TransactionResponse} objects.\r\n   *\r\n   * @param blockHashOrBlockTag The block number or hash to get the block for.\r\n   * @public\r\n   */\n  getBlockWithTransactions(blockHashOrBlockTag) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider.getBlockWithTransactions(blockHashOrBlockTag);\n    });\n  }\n  /**\r\n   * Returns the {@link EthersNetworkAlias} Alchemy is connected to.\r\n   *\r\n   * @public\r\n   */\n  getNetwork() {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider.getNetwork();\n    });\n  }\n  /**\r\n   * Returns the block number of the most recently mined block.\r\n   *\r\n   * @public\r\n   */\n  getBlockNumber() {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider.getBlockNumber();\n    });\n  }\n  /**\r\n   * Returns the best guess of the current gas price to use in a transaction.\r\n   *\r\n   * @public\r\n   */\n  getGasPrice() {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider.getGasPrice();\n    });\n  }\n  /**\r\n   * Returns the recommended fee data to use in a transaction.\r\n   *\r\n   * For an EIP-1559 transaction, the maxFeePerGas and maxPriorityFeePerGas\r\n   * should be used.\r\n   *\r\n   * For legacy transactions and networks which do not support EIP-1559, the\r\n   * gasPrice should be used.\r\n   *\r\n   * @public\r\n   */\n  getFeeData() {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider.getFeeData();\n    });\n  }\n  /**\r\n   * Returns a Promise which will stall until the network has heen established,\r\n   * ignoring errors due to the target node not being active yet.\r\n   *\r\n   * This can be used for testing or attaching scripts to wait until the node is\r\n   * up and running smoothly.\r\n   *\r\n   * @public\r\n   */\n  ready() {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider.ready;\n    });\n  }\n  /**\r\n   * Returns the result of executing the transaction, using call. A call does\r\n   * not require any ether, but cannot change any state. This is useful for\r\n   * calling getters on Contracts.\r\n   *\r\n   * @param transaction The transaction to execute.\r\n   * @param blockTag The optional block number or hash to get the call for.\r\n   * @public\r\n   */\n  call(transaction, blockTag) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider.call(transaction, blockTag);\n    });\n  }\n  /**\r\n   * Returns an estimate of the amount of gas that would be required to submit\r\n   * transaction to the network.\r\n   *\r\n   * An estimate may not be accurate since there could be another transaction on\r\n   * the network that was not accounted for, but after being mined affects the\r\n   * relevant state.\r\n   *\r\n   * This is an alias for {@link TransactNamespace.estimateGas}.\r\n   *\r\n   * @param transaction The transaction to estimate gas for.\r\n   * @public\r\n   */\n  estimateGas(transaction) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider.estimateGas(transaction);\n    });\n  }\n  /**\r\n   * Returns the transaction with hash or null if the transaction is unknown.\r\n   *\r\n   * If a transaction has not been mined, this method will search the\r\n   * transaction pool. Various backends may have more restrictive transaction\r\n   * pool access (e.g. if the gas price is too low or the transaction was only\r\n   * recently sent and not yet indexed) in which case this method may also return null.\r\n   *\r\n   * NOTE: This is an alias for {@link TransactNamespace.getTransaction}.\r\n   *\r\n   * @param transactionHash The hash of the transaction to get.\r\n   * @public\r\n   */\n  getTransaction(transactionHash) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider.getTransaction(transactionHash);\n    });\n  }\n  /**\r\n   * Returns the transaction receipt for hash or null if the transaction has not\r\n   * been mined.\r\n   *\r\n   * To stall until the transaction has been mined, consider the\r\n   * waitForTransaction method below.\r\n   *\r\n   * @param transactionHash The hash of the transaction to get.\r\n   * @public\r\n   */\n  getTransactionReceipt(transactionHash) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider.getTransactionReceipt(transactionHash);\n    });\n  }\n  /**\r\n   * Submits transaction to the network to be mined. The transaction must be\r\n   * signed, and be valid (i.e. the nonce is correct and the account has\r\n   * sufficient balance to pay for the transaction).\r\n   *\r\n   * NOTE: This is an alias for {@link TransactNamespace.getTransaction}.\r\n   *\r\n   * @param signedTransaction The signed transaction to send.\r\n   * @public\r\n   */\n  sendTransaction(signedTransaction) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider.sendTransaction(signedTransaction);\n    });\n  }\n  /**\r\n   * Returns a promise which will not resolve until specified transaction hash is mined.\r\n   *\r\n   * If {@link confirmations} is 0, this method is non-blocking and if the\r\n   * transaction has not been mined returns null. Otherwise, this method will\r\n   * block until the transaction has confirmed blocks mined on top of the block\r\n   * in which it was mined.\r\n   *\r\n   * NOTE: This is an alias for {@link TransactNamespace.getTransaction}.\r\n   *\r\n   * @param transactionHash The hash of the transaction to wait for.\r\n   * @param confirmations The number of blocks to wait for.\r\n   * @param timeout The maximum time to wait for the transaction to confirm.\r\n   * @public\r\n   */\n  waitForTransaction(transactionHash, confirmations, timeout) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider.waitForTransaction(transactionHash, confirmations, timeout);\n    });\n  }\n  /**\r\n   * Returns an array of logs that match the provided filter.\r\n   *\r\n   * @param filter The filter object to use.\r\n   * @public\r\n   */\n  getLogs(filter) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      return getLogs(this.config, filter);\n    });\n  }\n  /**\r\n   * Allows sending a raw message to the Alchemy backend.\r\n   *\r\n   * @param method The method to call.\r\n   * @param params The parameters to pass to the method.\r\n   * @public\r\n   */\n  send(method, params) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider.send(method, params);\n    });\n  }\n  /**\r\n   * Finds the address that deployed the provided contract and block number it\r\n   * was deployed in.\r\n   *\r\n   * NOTE: This method performs a binary search across all blocks since genesis\r\n   * and can take a long time to complete. This method is a convenience method\r\n   * that will eventually be replaced by a single call to an Alchemy endpoint\r\n   * with this information cached.\r\n   *\r\n   * @param contractAddress - The contract address to find the deployer for.\r\n   * @beta\r\n   */\n  findContractDeployer(contractAddress) {\n    var _a;\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      const currentBlockNum = yield provider.getBlockNumber();\n      if ((yield provider.getCode(contractAddress, currentBlockNum)) === ETH_NULL_VALUE) {\n        throw new Error(`Contract '${contractAddress}' does not exist`);\n      }\n      // Binary search for the block number that the contract was deployed in.\n      const firstBlock = yield binarySearchFirstBlock(0, currentBlockNum + 1, contractAddress, this.config);\n      // Find the first transaction in the block that matches the provided address.\n      const txReceipts = yield getTransactionReceipts(this.config, {\n        blockNumber: toHex(firstBlock)\n      }, 'findContractDeployer');\n      const matchingReceipt = (_a = txReceipts.receipts) === null || _a === void 0 ? void 0 : _a.find(receipt => receipt.contractAddress === contractAddress.toLowerCase());\n      return {\n        deployerAddress: matchingReceipt === null || matchingReceipt === void 0 ? void 0 : matchingReceipt.from,\n        blockNumber: firstBlock\n      };\n    });\n  }\n  getTokenBalances(addressOrName, contractAddressesOrOptions) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      const address = yield provider._getAddress(addressOrName);\n      if (Array.isArray(contractAddressesOrOptions)) {\n        if (contractAddressesOrOptions.length > 1500) {\n          throw new Error('You cannot pass in more than 1500 contract addresses to getTokenBalances()');\n        }\n        if (contractAddressesOrOptions.length === 0) {\n          throw new Error('getTokenBalances() requires at least one contractAddress when using an array');\n        }\n        return provider._send('alchemy_getTokenBalances', [address, contractAddressesOrOptions], 'getTokenBalances');\n      } else {\n        const tokenType = contractAddressesOrOptions === undefined ? TokenBalanceType.ERC20 : contractAddressesOrOptions.type;\n        const params = [address, tokenType];\n        if ((contractAddressesOrOptions === null || contractAddressesOrOptions === void 0 ? void 0 : contractAddressesOrOptions.type) === TokenBalanceType.ERC20 && contractAddressesOrOptions.pageKey) {\n          params.push({\n            pageKey: contractAddressesOrOptions.pageKey\n          });\n        }\n        return provider._send('alchemy_getTokenBalances', params, 'getTokenBalances');\n      }\n    });\n  }\n  /**\r\n   * Returns the tokens that the specified address owns, along with the amount\r\n   * of each token and the relevant metadata.\r\n   *\r\n   * @param addressOrName The owner address to get the tokens with balances for.\r\n   * @param options Additional options to pass to the request.\r\n   * @public\r\n   */\n  getTokensForOwner(addressOrName, options) {\n    var _a;\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      const address = yield provider._getAddress(addressOrName);\n      const params = [address, (_a = options === null || options === void 0 ? void 0 : options.contractAddresses) !== null && _a !== void 0 ? _a : TokenBalanceType.ERC20];\n      if (options === null || options === void 0 ? void 0 : options.pageKey) {\n        params.push({\n          pageKey: options.pageKey\n        });\n      }\n      const response = yield provider._send('alchemy_getTokenBalances', params, 'getTokensForOwner');\n      const formattedBalances = response.tokenBalances.map(balance => ({\n        contractAddress: balance.contractAddress,\n        rawBalance: BigNumber.from(balance.tokenBalance).toString()\n      }));\n      const metadata = yield Promise.all(response.tokenBalances.map(token => provider._send('alchemy_getTokenMetadata', [token.contractAddress], 'getTokensForOwner', /* forceBatch= */true)));\n      const ownedTokens = formattedBalances.map((balance, index) => Object.assign(Object.assign(Object.assign({}, balance), metadata[index]), {\n        balance: metadata[index].decimals !== null ? formatUnits(balance.rawBalance, metadata[index].decimals) : undefined\n      }));\n      return {\n        tokens: ownedTokens.map(nullsToUndefined),\n        pageKey: response.pageKey\n      };\n    });\n  }\n  /**\r\n   * Returns metadata for a given token contract address.\r\n   *\r\n   * @param address The contract address to get metadata for.\r\n   * @public\r\n   */\n  getTokenMetadata(address) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider._send('alchemy_getTokenMetadata', [address], 'getTokenMetadata');\n    });\n  }\n  getAssetTransfers(params) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      return getAssetTransfers(this.config, params);\n    });\n  }\n  /**\r\n   * Gets all transaction receipts for a given block by number or block hash.\r\n   *\r\n   * @param params An object containing fields for the transaction receipt query.\r\n   * @public\r\n   */\n  getTransactionReceipts(params) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      return getTransactionReceipts(this.config, params);\n    });\n  }\n  /**\r\n   * Returns the underlying owner address for the provided ENS address, or `null`\r\n   * if the ENS name does not have an underlying address.\r\n   *\r\n   * @param name The ENS address name to resolve.\r\n   */\n  resolveName(name) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider.resolveName(name);\n    });\n  }\n  /**\r\n   * Performs a reverse lookup of the address in ENS using the Reverse Registrar. If the name does not exist, or the forward lookup does not match, null is returned.\r\n   *\r\n   * An ENS name requires additional configuration to setup a reverse record, so not all ENS addresses will map back to the original ENS domain.\r\n   *\r\n   * @param address The address to look up the ENS domain name for.\r\n   */\n  lookupAddress(address) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider.lookupAddress(address);\n    });\n  }\n}\n/**\r\n * Perform a binary search between an integer range of block numbers to find the\r\n * block number where the contract was deployed.\r\n *\r\n * @internal\r\n */\nfunction binarySearchFirstBlock(start, end, address, config) {\n  return __awaiter$1(this, void 0, void 0, function* () {\n    if (start >= end) {\n      return end;\n    }\n    const mid = Math.floor((start + end) / 2);\n    const provider = yield config.getProvider();\n    const code = yield provider.getCode(address, mid);\n    if (code === ETH_NULL_VALUE) {\n      return binarySearchFirstBlock(mid + 1, end, address, config);\n    }\n    return binarySearchFirstBlock(start, mid, address, config);\n  });\n}\n\n/**\r\n * The Debug namespace contains methods to access the non-standard RPC methods\r\n * for inspecting and debugging transactions.\r\n *\r\n * For more information on the different methods and use cases please read our\r\n * [documentation](https://docs.alchemy.com/reference/debug-api-quickstart).\r\n *\r\n * Do not call this constructor directly. Instead, instantiate an Alchemy object\r\n * with `const alchemy = new Alchemy(config)` and then access the debug namespace\r\n * via `alchemy.debug`.\r\n */\nclass DebugNamespace {\n  /** @internal */\n  constructor(config) {\n    this.config = config;\n  }\n  traceCall(transaction, blockIdentifier, tracer) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      const params = [transaction, blockIdentifier, parseTracerParams(tracer)];\n      return provider._send('debug_traceCall', params, 'traceCall');\n    });\n  }\n  traceTransaction(transactionHash, tracer, timeout) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      const params = [transactionHash, parseTracerParams(tracer, timeout)];\n      return provider._send('debug_traceTransaction', params, 'traceTransaction');\n    });\n  }\n  traceBlock(blockIdentifier, tracer) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      let method;\n      let params;\n      if (isHexString(blockIdentifier, 32)) {\n        method = 'debug_traceBlockByHash';\n        params = [blockIdentifier, parseTracerParams(tracer)];\n      } else {\n        method = 'debug_traceBlockByNumber';\n        const block = typeof blockIdentifier === 'number' ? hexStripZeros(hexValue(blockIdentifier)) : blockIdentifier;\n        params = [block, parseTracerParams(tracer)];\n      }\n      return provider._send(method, params, 'traceBlock');\n    });\n  }\n}\nfunction parseTracerParams(tracer, timeout) {\n  return Object.assign({\n    tracer: tracer.type\n  }, tracer.onlyTopCall !== undefined && {\n    tracerConfig: {\n      onlyTopCall: tracer.onlyTopCall,\n      timeout\n    }\n  });\n}\nfunction sanitizeTokenType(tokenType) {\n  if (tokenType === NftTokenType.ERC1155 || tokenType === NftTokenType.ERC721) {\n    return tokenType;\n  }\n  return undefined;\n}\n\n/**\r\n * The SDK has 4 log levels and a 5th option for disabling all logging. By\r\n * default, the log level is set to INFO.\r\n *\r\n * The order is a follows: DEBUG < INFO < WARN < ERROR\r\n *\r\n * All log types above the current log level will be outputted.\r\n */\nvar LogLevel;\n(function (LogLevel) {\n  LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\n  LogLevel[LogLevel[\"INFO\"] = 1] = \"INFO\";\n  LogLevel[LogLevel[\"WARN\"] = 2] = \"WARN\";\n  LogLevel[LogLevel[\"ERROR\"] = 3] = \"ERROR\";\n  LogLevel[LogLevel[\"SILENT\"] = 4] = \"SILENT\";\n})(LogLevel || (LogLevel = {}));\nconst logLevelStringToEnum = {\n  debug: LogLevel.DEBUG,\n  info: LogLevel.INFO,\n  warn: LogLevel.WARN,\n  error: LogLevel.ERROR,\n  silent: LogLevel.SILENT\n};\n// HACKY: Use the console method as a string rather than the function itself\n// in order to allow for mocking in tests.\nconst logLevelToConsoleFn = {\n  [LogLevel.DEBUG]: 'log',\n  [LogLevel.INFO]: 'info',\n  [LogLevel.WARN]: 'warn',\n  [LogLevel.ERROR]: 'error'\n};\nconst DEFAULT_LOG_LEVEL = LogLevel.INFO;\n/**\r\n * Configures the verbosity of logging. The default log level is `info`.\r\n *\r\n * @param logLevel - The verbosity of logging. Can be any of the following values:\r\n *\r\n *   - `debug`: The most verbose logging level.\r\n *   - `info`: The default logging level.\r\n *   - `warn`: A logging level for non-critical issues.\r\n *   - `error`: A logging level for critical issues.\r\n *   - `silent`: Turn off all logging.\r\n *\r\n * @public\r\n */\nfunction setLogLevel(logLevel) {\n  loggerClient.logLevel = logLevelStringToEnum[logLevel];\n}\nfunction logDebug(message, ...args) {\n  loggerClient.debug(message, args);\n}\nfunction logInfo(message, ...args) {\n  loggerClient.info(message, args);\n}\nfunction logWarn(message, ...args) {\n  loggerClient.warn(message, args);\n}\nclass Logger {\n  constructor() {\n    /** The log level of the given Logger instance. */\n    this._logLevel = DEFAULT_LOG_LEVEL;\n  }\n  get logLevel() {\n    return this._logLevel;\n  }\n  set logLevel(val) {\n    if (!(val in LogLevel)) {\n      throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\n    }\n    this._logLevel = val;\n  }\n  debug(...args) {\n    this._log(LogLevel.DEBUG, ...args);\n  }\n  info(...args) {\n    this._log(LogLevel.INFO, ...args);\n  }\n  warn(...args) {\n    this._log(LogLevel.WARN, ...args);\n  }\n  error(...args) {\n    this._log(LogLevel.ERROR, ...args);\n  }\n  /**\r\n   * Forwards log messages to their corresponding console counterparts if the\r\n   * log level allows it.\r\n   */\n  _log(logLevel, ...args) {\n    if (logLevel < this._logLevel) {\n      return;\n    }\n    const now = new Date().toISOString();\n    const method = logLevelToConsoleFn[logLevel];\n    if (method) {\n      console[method](`[${now}] Alchemy:`, ...args.map(stringify));\n    } else {\n      throw new Error(`Logger received an invalid logLevel (value: ${logLevel})`);\n    }\n  }\n}\nfunction stringify(obj) {\n  if (typeof obj === 'string') {\n    return obj;\n  } else {\n    try {\n      return JSON.stringify(obj);\n    } catch (e) {\n      // Failed to convert to JSON, log the object directly.\n      return obj;\n    }\n  }\n}\n// Instantiate default logger for the SDK.\nconst loggerClient = new Logger();\n\n// This file is autogenerated by injectVersion.js. Any changes will be\n// overwritten on commit!\nconst VERSION = '2.8.3';\n\n/**\r\n * Given a REST endpoint, method, and params, sends the request with axios and\r\n * returns the response.\r\n */\n/**\r\n * Helper function to send http requests using Axis.\r\n *\r\n * @private\r\n */\nfunction sendAxiosRequest(baseUrl, restApiName, methodName, params, overrides) {\n  var _a;\n  const requestUrl = baseUrl + '/' + restApiName;\n  const config = Object.assign(Object.assign({}, overrides), {\n    headers: Object.assign(Object.assign(Object.assign({}, overrides === null || overrides === void 0 ? void 0 : overrides.headers), !IS_BROWSER && {\n      'Accept-Encoding': 'gzip'\n    }), {\n      'Alchemy-Ethers-Sdk-Version': VERSION,\n      'Alchemy-Ethers-Sdk-Method': methodName\n    }),\n    method: (_a = overrides === null || overrides === void 0 ? void 0 : overrides.method) !== null && _a !== void 0 ? _a : 'GET',\n    url: requestUrl,\n    params\n  });\n  return axios(config);\n}\nconst DEFAULT_BACKOFF_INITIAL_DELAY_MS = 1000;\nconst DEFAULT_BACKOFF_MULTIPLIER = 1.5;\nconst DEFAULT_BACKOFF_MAX_DELAY_MS = 30 * 1000;\nconst DEFAULT_BACKOFF_MAX_ATTEMPTS = 5;\n/**\r\n * Helper class for implementing exponential backoff and max retry attempts.\r\n *\r\n * @private\r\n * @internal\r\n */\nclass ExponentialBackoff {\n  constructor(maxAttempts = DEFAULT_BACKOFF_MAX_ATTEMPTS) {\n    this.maxAttempts = maxAttempts;\n    this.initialDelayMs = DEFAULT_BACKOFF_INITIAL_DELAY_MS;\n    this.backoffMultiplier = DEFAULT_BACKOFF_MULTIPLIER;\n    this.maxDelayMs = DEFAULT_BACKOFF_MAX_DELAY_MS;\n    this.numAttempts = 0;\n    this.currentDelayMs = 0;\n    this.isInBackoff = false;\n  }\n  /**\r\n   * Returns a promise that resolves after the the backoff delay. The delay is\r\n   * increased for each attempt. The promise is rejected if the maximum number\r\n   * of attempts is exceeded.\r\n   */\n  // TODO: beautify this into an async iterator.\n  backoff() {\n    if (this.numAttempts >= this.maxAttempts) {\n      return Promise.reject(new Error(`Exceeded maximum number of attempts: ${this.maxAttempts}`));\n    }\n    if (this.isInBackoff) {\n      return Promise.reject(new Error('A backoff operation is already in progress'));\n    }\n    const backoffDelayWithJitterMs = this.withJitterMs(this.currentDelayMs);\n    if (backoffDelayWithJitterMs > 0) {\n      logDebug('ExponentialBackoff.backoff', `Backing off for ${backoffDelayWithJitterMs}ms`);\n    }\n    // Calculate the next delay.\n    this.currentDelayMs *= this.backoffMultiplier;\n    this.currentDelayMs = Math.max(this.currentDelayMs, this.initialDelayMs);\n    this.currentDelayMs = Math.min(this.currentDelayMs, this.maxDelayMs);\n    this.numAttempts += 1;\n    return new Promise(resolve => {\n      this.isInBackoff = true;\n      setTimeout(() => {\n        this.isInBackoff = false;\n        resolve();\n      }, backoffDelayWithJitterMs);\n    });\n  }\n  /**\r\n   * Applies +/- 50% jitter to the backoff delay, up to the max delay cap.\r\n   *\r\n   * @private\r\n   * @param delayMs\r\n   */\n  withJitterMs(delayMs) {\n    return Math.min(delayMs + (Math.random() - 0.5) * delayMs, this.maxDelayMs);\n  }\n}\n\n/**\r\n * A wrapper function to make http requests and retry if the request fails.\r\n *\r\n * @internal\r\n */\n// TODO: Wrap Axios error in AlchemyError.\nfunction requestHttpWithBackoff(config, apiType, restApiName, methodName, params, overrides) {\n  return __awaiter$1(this, void 0, void 0, function* () {\n    let lastError = undefined;\n    const backoff = new ExponentialBackoff(config.maxRetries);\n    for (let attempt = 0; attempt < config.maxRetries + 1; attempt++) {\n      try {\n        if (lastError !== undefined) {\n          logInfo('requestHttp', `Retrying after error: ${lastError.message}`);\n        }\n        try {\n          yield backoff.backoff();\n        } catch (err) {\n          // Backoff errors when the maximum number of attempts is reached. Break\n          // out of the loop to preserve the last error.\n          break;\n        }\n        const response = yield sendAxiosRequest(config._getRequestUrl(apiType), restApiName, methodName, params, Object.assign(Object.assign({}, overrides), {\n          timeout: config.requestTimeout\n        }));\n        if (response.status === 200) {\n          logDebug(restApiName, `Successful request: ${restApiName}`);\n          return response.data;\n        } else {\n          logInfo(restApiName, `Request failed: ${restApiName}, ${response.status}, ${response.data}`);\n          lastError = new Error(response.status + ': ' + response.data);\n        }\n      } catch (err) {\n        if (!axios.isAxiosError(err) || err.response === undefined) {\n          throw err;\n        }\n        // TODO: Standardize all errors into AlchemyError\n        lastError = new Error(err.response.status + ': ' + err.response.data);\n        if (!isRetryableHttpError(err, apiType)) {\n          break;\n        }\n      }\n    }\n    return Promise.reject(lastError);\n  });\n}\nfunction isRetryableHttpError(err, apiType) {\n  // TODO: remove 500s after webhooks are more stable.\n  const retryableCodes = apiType === AlchemyApiType.WEBHOOK ? [429, 500] : [429];\n  return err.response !== undefined && retryableCodes.includes(err.response.status);\n}\n/**\r\n * Fetches all pages in a paginated endpoint, given a `pageKey` field that\r\n * represents the property name containing the next page token.\r\n *\r\n * @internal\r\n */\nfunction paginateEndpoint(config, apiType, restApiName, methodName, reqPageKey, resPageKey, params) {\n  return __asyncGenerator(this, arguments, function* paginateEndpoint_1() {\n    let hasNext = true;\n    const requestParams = Object.assign({}, params);\n    while (hasNext) {\n      const response = yield __await(requestHttpWithBackoff(config, apiType, restApiName, methodName, requestParams));\n      yield yield __await(response);\n      if (response[resPageKey] !== undefined) {\n        requestParams[reqPageKey] = response[resPageKey];\n      } else {\n        hasNext = false;\n      }\n    }\n  });\n}\n\n/**\r\n * This file contains the underlying implementations for exposed API surface in\r\n * the {@link NftNamespace}. By moving the methods out into a separate file,\r\n * other namespaces can access these methods without depending on the entire\r\n * NftNamespace.\r\n */\n/**\r\n * Get the NFT metadata for the provided contract address.\r\n */\nfunction getNftMetadata(config, contractAddress, tokenId, options, srcMethod = 'getNftMetadata') {\n  return __awaiter$1(this, void 0, void 0, function* () {\n    const response = yield requestHttpWithBackoff(config, AlchemyApiType.NFT, 'getNFTMetadata', srcMethod, {\n      contractAddress,\n      tokenId: BigNumber.from(tokenId).toString(),\n      tokenType: sanitizeTokenType(options === null || options === void 0 ? void 0 : options.tokenType),\n      tokenUriTimeoutInMs: options === null || options === void 0 ? void 0 : options.tokenUriTimeoutInMs,\n      refreshCache: options === null || options === void 0 ? void 0 : options.refreshCache\n    });\n    return getNftFromRaw(response);\n  });\n}\nfunction getNftMetadataBatch(config, tokens, options) {\n  return __awaiter$1(this, void 0, void 0, function* () {\n    const data = {\n      tokens,\n      tokenUriTimeoutInMs: options === null || options === void 0 ? void 0 : options.tokenUriTimeoutInMs,\n      refreshCache: options === null || options === void 0 ? void 0 : options.refreshCache\n    };\n    const response = yield requestHttpWithBackoff(config, AlchemyApiType.NFT, 'getNFTMetadataBatch', 'getNftMetadataBatch', {}, {\n      method: 'POST',\n      data\n    });\n    return response.map(getNftFromRaw);\n  });\n}\nfunction getContractMetadata(config, contractAddress, srcMethod = 'getContractMetadata') {\n  return __awaiter$1(this, void 0, void 0, function* () {\n    const response = yield requestHttpWithBackoff(config, AlchemyApiType.NFT, 'getContractMetadata', srcMethod, {\n      contractAddress\n    });\n    return getNftContractFromRaw(response);\n  });\n}\nfunction getContractMetadataBatch(config, contractAddresses) {\n  return __awaiter$1(this, void 0, void 0, function* () {\n    const response = yield requestHttpWithBackoff(config, AlchemyApiType.NFT, 'getContractMetadataBatch', 'getContractMetadataBatch', {}, {\n      method: 'POST',\n      data: {\n        contractAddresses\n      }\n    });\n    return response.map(getNftContractFromRaw);\n  });\n}\nfunction getNftsForOwnerIterator(config, owner, options, srcMethod = 'getNftsForOwnerIterator') {\n  return __asyncGenerator(this, arguments, function* getNftsForOwnerIterator_1() {\n    var e_1, _a;\n    const withMetadata = omitMetadataToWithMetadata(options === null || options === void 0 ? void 0 : options.omitMetadata);\n    try {\n      for (var _b = __asyncValues(paginateEndpoint(config, AlchemyApiType.NFT, 'getNFTs', srcMethod, 'pageKey', 'pageKey', {\n          contractAddresses: options === null || options === void 0 ? void 0 : options.contractAddresses,\n          pageKey: options === null || options === void 0 ? void 0 : options.pageKey,\n          filters: options === null || options === void 0 ? void 0 : options.excludeFilters,\n          owner,\n          withMetadata\n        })), _c; _c = yield __await(_b.next()), !_c.done;) {\n        const response = _c.value;\n        for (const ownedNft of response.ownedNfts) {\n          yield yield __await(Object.assign(Object.assign({}, nftFromGetNftResponse(ownedNft)), {\n            balance: parseInt(ownedNft.balance)\n          }));\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  });\n}\nfunction getNftsForOwner(config, owner, options, srcMethod = 'getNftsForOwner') {\n  return __awaiter$1(this, void 0, void 0, function* () {\n    const withMetadata = omitMetadataToWithMetadata(options === null || options === void 0 ? void 0 : options.omitMetadata);\n    const response = yield requestHttpWithBackoff(config, AlchemyApiType.NFT, 'getNFTs', srcMethod, {\n      contractAddresses: options === null || options === void 0 ? void 0 : options.contractAddresses,\n      pageKey: options === null || options === void 0 ? void 0 : options.pageKey,\n      filters: options === null || options === void 0 ? void 0 : options.excludeFilters,\n      excludeFilters: options === null || options === void 0 ? void 0 : options.excludeFilters,\n      includeFilters: options === null || options === void 0 ? void 0 : options.includeFilters,\n      owner,\n      pageSize: options === null || options === void 0 ? void 0 : options.pageSize,\n      withMetadata,\n      tokenUriTimeoutInMs: options === null || options === void 0 ? void 0 : options.tokenUriTimeoutInMs,\n      orderBy: options === null || options === void 0 ? void 0 : options.orderBy\n    });\n    return {\n      ownedNfts: response.ownedNfts.map(res => Object.assign(Object.assign({}, nftFromGetNftResponse(res)), {\n        balance: parseInt(res.balance)\n      })),\n      pageKey: response.pageKey,\n      totalCount: response.totalCount,\n      blockHash: response.blockHash\n    };\n  });\n}\nfunction getNftsForContract(config, contractAddress, options, srcMethod = 'getNftsForContract') {\n  var _a;\n  return __awaiter$1(this, void 0, void 0, function* () {\n    const withMetadata = omitMetadataToWithMetadata(options === null || options === void 0 ? void 0 : options.omitMetadata);\n    const response = yield requestHttpWithBackoff(config, AlchemyApiType.NFT, 'getNFTsForCollection', srcMethod, {\n      contractAddress,\n      startToken: options === null || options === void 0 ? void 0 : options.pageKey,\n      withMetadata,\n      limit: (_a = options === null || options === void 0 ? void 0 : options.pageSize) !== null && _a !== void 0 ? _a : undefined,\n      tokenUriTimeoutInMs: options === null || options === void 0 ? void 0 : options.tokenUriTimeoutInMs\n    });\n    return {\n      nfts: response.nfts.map(res => nftFromGetNftContractResponse(res, contractAddress)),\n      pageKey: response.nextToken\n    };\n  });\n}\nfunction getNftsForContractIterator(config, contractAddress, options, srcMethod = 'getNftsForContractIterator') {\n  return __asyncGenerator(this, arguments, function* getNftsForContractIterator_1() {\n    var e_2, _a;\n    const withMetadata = omitMetadataToWithMetadata(options === null || options === void 0 ? void 0 : options.omitMetadata);\n    try {\n      for (var _b = __asyncValues(paginateEndpoint(config, AlchemyApiType.NFT, 'getNFTsForCollection', srcMethod, 'startToken', 'nextToken', {\n          contractAddress,\n          startToken: options === null || options === void 0 ? void 0 : options.pageKey,\n          withMetadata\n        })), _c; _c = yield __await(_b.next()), !_c.done;) {\n        const response = _c.value;\n        for (const nft of response.nfts) {\n          yield yield __await(nftFromGetNftContractResponse(nft, contractAddress));\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n  });\n}\nfunction getOwnersForContract(config, contractAddress, options, srcMethod = 'getOwnersForContract') {\n  return __awaiter$1(this, void 0, void 0, function* () {\n    // Cast to `any` to avoid more type wrangling.\n    const response = yield requestHttpWithBackoff(config, AlchemyApiType.NFT, 'getOwnersForCollection', srcMethod, Object.assign(Object.assign({}, options), {\n      contractAddress\n    }));\n    return Object.assign({\n      owners: response.ownerAddresses\n    }, response.pageKey !== undefined && {\n      pageKey: response.pageKey\n    });\n  });\n}\nfunction getContractsForOwner(config, owner, options, srcMethod = 'getContractsForOwner') {\n  return __awaiter$1(this, void 0, void 0, function* () {\n    const response = yield requestHttpWithBackoff(config, AlchemyApiType.NFT, 'getContractsForOwner', srcMethod, {\n      owner,\n      excludeFilters: options === null || options === void 0 ? void 0 : options.excludeFilters,\n      includeFilters: options === null || options === void 0 ? void 0 : options.includeFilters,\n      pageKey: options === null || options === void 0 ? void 0 : options.pageKey,\n      pageSize: options === null || options === void 0 ? void 0 : options.pageSize,\n      orderBy: options === null || options === void 0 ? void 0 : options.orderBy\n    });\n    return getContractsForOwnerFromRaw(response);\n  });\n}\nfunction getOwnersForNft(config, contractAddress, tokenId, options, srcMethod = 'getOwnersForNft') {\n  return __awaiter$1(this, void 0, void 0, function* () {\n    return requestHttpWithBackoff(config, AlchemyApiType.NFT, 'getOwnersForToken', srcMethod, Object.assign({\n      contractAddress,\n      tokenId: BigNumber.from(tokenId).toString()\n    }, options));\n  });\n}\nfunction getMintedNfts(config, owner, options) {\n  return __awaiter$1(this, void 0, void 0, function* () {\n    const provider = yield config.getProvider();\n    const ownerAddress = yield provider._getAddress(owner);\n    const category = nftTokenTypeToCategory(options === null || options === void 0 ? void 0 : options.tokenType);\n    const params = {\n      fromBlock: '0x0',\n      fromAddress: ETH_NULL_ADDRESS,\n      toAddress: ownerAddress,\n      excludeZeroValue: true,\n      contractAddresses: options === null || options === void 0 ? void 0 : options.contractAddresses,\n      category,\n      maxCount: 100,\n      pageKey: options === null || options === void 0 ? void 0 : options.pageKey\n    };\n    const response = yield getAssetTransfers(config, params, 'getMintedNfts');\n    return getNftsForTransfers(config, response);\n  });\n}\nfunction getTransfersForOwner(config, owner, transferType, options) {\n  return __awaiter$1(this, void 0, void 0, function* () {\n    const provider = yield config.getProvider();\n    const ownerAddress = yield provider._getAddress(owner);\n    const category = nftTokenTypeToCategory(options === null || options === void 0 ? void 0 : options.tokenType);\n    const params = {\n      fromBlock: '0x0',\n      excludeZeroValue: true,\n      contractAddresses: options === null || options === void 0 ? void 0 : options.contractAddresses,\n      category,\n      maxCount: 100,\n      pageKey: options === null || options === void 0 ? void 0 : options.pageKey\n    };\n    if (transferType === GetTransfersForOwnerTransferType.TO) {\n      params.toAddress = ownerAddress;\n    } else {\n      params.fromAddress = ownerAddress;\n    }\n    const transfersResponse = yield getAssetTransfers(config, params, 'getTransfersForOwner');\n    return getNftsForTransfers(config, transfersResponse);\n  });\n}\nfunction getTransfersForContract(config, contract, options) {\n  return __awaiter$1(this, void 0, void 0, function* () {\n    const category = [AssetTransfersCategory.ERC721, AssetTransfersCategory.ERC1155, AssetTransfersCategory.SPECIALNFT];\n    const provider = yield config.getProvider();\n    const fromBlock = (options === null || options === void 0 ? void 0 : options.fromBlock) ? provider.formatter.blockTag(yield provider._getBlockTag(options.fromBlock)) : '0x0';\n    const toBlock = (options === null || options === void 0 ? void 0 : options.toBlock) ? provider.formatter.blockTag(yield provider._getBlockTag(options.toBlock)) : undefined;\n    const params = {\n      fromBlock,\n      toBlock,\n      excludeZeroValue: true,\n      contractAddresses: [contract],\n      order: options === null || options === void 0 ? void 0 : options.order,\n      category,\n      maxCount: 100,\n      pageKey: options === null || options === void 0 ? void 0 : options.pageKey\n    };\n    const transfersResponse = yield getAssetTransfers(config, params, 'getTransfersForContract');\n    return getNftsForTransfers(config, transfersResponse);\n  });\n}\nfunction nftTokenTypeToCategory(tokenType) {\n  switch (tokenType) {\n    case NftTokenType.ERC721:\n      return [AssetTransfersCategory.ERC721];\n    case NftTokenType.ERC1155:\n      return [AssetTransfersCategory.ERC1155];\n    default:\n      return [AssetTransfersCategory.ERC721, AssetTransfersCategory.ERC1155, AssetTransfersCategory.SPECIALNFT];\n  }\n}\nfunction parse1155Transfer(transfer) {\n  return transfer.erc1155Metadata.map(metadata => ({\n    contractAddress: transfer.rawContract.address,\n    tokenId: metadata.tokenId,\n    tokenType: NftTokenType.ERC1155\n  }));\n}\nfunction checkNftOwnership(config, owner, contractAddresses, srcMethod = 'checkNftOwnership') {\n  return __awaiter$1(this, void 0, void 0, function* () {\n    if (contractAddresses.length === 0) {\n      throw new Error('Must provide at least one contract address');\n    }\n    const response = yield getNftsForOwner(config, owner, {\n      contractAddresses,\n      omitMetadata: true\n    }, srcMethod);\n    return response.ownedNfts.length > 0;\n  });\n}\nfunction verifyNftOwnership(config, owner, contractAddresses, srcMethod = 'verifyNftOwnership') {\n  return __awaiter$1(this, void 0, void 0, function* () {\n    if (typeof contractAddresses === 'string') {\n      const response = yield getNftsForOwner(config, owner, {\n        contractAddresses: [contractAddresses],\n        omitMetadata: true\n      }, srcMethod);\n      return response.ownedNfts.length > 0;\n    } else {\n      if (contractAddresses.length === 0) {\n        throw new Error('Must provide at least one contract address');\n      }\n      const response = yield getNftsForOwner(config, owner, {\n        contractAddresses,\n        omitMetadata: true\n      }, srcMethod);\n      // Create map where all input contract addresses are set to false, then flip\n      // owned nfts to true.\n      const result = contractAddresses.reduce((acc, curr) => {\n        acc[curr] = false;\n        return acc;\n      }, {});\n      for (const nft of response.ownedNfts) {\n        result[nft.contract.address] = true;\n      }\n      return result;\n    }\n  });\n}\nfunction isSpamContract(config, contractAddress, srcMethod = 'isSpamContract') {\n  return __awaiter$1(this, void 0, void 0, function* () {\n    return requestHttpWithBackoff(config, AlchemyApiType.NFT, 'isSpamContract', srcMethod, {\n      contractAddress\n    });\n  });\n}\nfunction getSpamContracts(config, srcMethod = 'getSpamContracts') {\n  return __awaiter$1(this, void 0, void 0, function* () {\n    return requestHttpWithBackoff(config, AlchemyApiType.NFT, 'getSpamContracts', srcMethod, undefined);\n  });\n}\nfunction getFloorPrice(config, contractAddress, srcMethod = 'getFloorPrice') {\n  return __awaiter$1(this, void 0, void 0, function* () {\n    return requestHttpWithBackoff(config, AlchemyApiType.NFT, 'getFloorPrice', srcMethod, {\n      contractAddress\n    });\n  });\n}\nfunction getNftSales(config, options = {}, srcMethod = 'getNftSales') {\n  return __awaiter$1(this, void 0, void 0, function* () {\n    // Avoid ts compiler complaining about the contractAddress field.\n    const params = Object.assign({}, options);\n    const response = yield requestHttpWithBackoff(config, AlchemyApiType.NFT, 'getNFTSales', srcMethod, {\n      fromBlock: params === null || params === void 0 ? void 0 : params.fromBlock,\n      toBlock: params === null || params === void 0 ? void 0 : params.toBlock,\n      order: params === null || params === void 0 ? void 0 : params.order,\n      marketplace: params === null || params === void 0 ? void 0 : params.marketplace,\n      contractAddress: params === null || params === void 0 ? void 0 : params.contractAddress,\n      tokenId: (params === null || params === void 0 ? void 0 : params.tokenId) ? BigNumber.from(params === null || params === void 0 ? void 0 : params.tokenId).toString() : undefined,\n      sellerAddress: params === null || params === void 0 ? void 0 : params.sellerAddress,\n      buyerAddress: params === null || params === void 0 ? void 0 : params.buyerAddress,\n      taker: params === null || params === void 0 ? void 0 : params.taker,\n      limit: params === null || params === void 0 ? void 0 : params.limit,\n      pageKey: params === null || params === void 0 ? void 0 : params.pageKey\n    });\n    return getNftSalesFromRaw(response);\n  });\n}\nfunction computeRarity(config, contractAddress, tokenId, srcMethod = 'computeRarity') {\n  return __awaiter$1(this, void 0, void 0, function* () {\n    const response = yield requestHttpWithBackoff(config, AlchemyApiType.NFT, 'computeRarity', srcMethod, {\n      contractAddress,\n      tokenId: BigNumber.from(tokenId).toString()\n    });\n    return getNftRarityFromRaw(response);\n  });\n}\nfunction searchContractMetadata(config, query, srcMethod = 'searchContractMetadata') {\n  return __awaiter$1(this, void 0, void 0, function* () {\n    const response = yield requestHttpWithBackoff(config, AlchemyApiType.NFT, 'searchContractMetadata', srcMethod, {\n      query\n    });\n    return response.map(getNftContractFromRaw);\n  });\n}\nfunction summarizeNftAttributes(config, contractAddress, srcMethod = 'summarizeNftAttributes') {\n  return __awaiter$1(this, void 0, void 0, function* () {\n    return requestHttpWithBackoff(config, AlchemyApiType.NFT, 'summarizeNftAttributes', srcMethod, {\n      contractAddress\n    });\n  });\n}\nfunction refreshNftMetadata(config, contractAddress, tokenId, srcMethod = 'refreshNftMetadata') {\n  return __awaiter$1(this, void 0, void 0, function* () {\n    const tokenIdString = BigNumber.from(tokenId).toString();\n    const first = yield getNftMetadata(config, contractAddress, tokenIdString, undefined, srcMethod);\n    const second = yield refresh(config, contractAddress, tokenIdString, srcMethod);\n    return first.timeLastUpdated !== second.timeLastUpdated;\n  });\n}\nfunction refreshContract(config, contractAddress, srcMethod = 'refreshContract') {\n  return __awaiter$1(this, void 0, void 0, function* () {\n    const response = yield requestHttpWithBackoff(config, AlchemyApiType.NFT, 'reingestContract', srcMethod, {\n      contractAddress\n    });\n    return {\n      contractAddress: response.contractAddress,\n      refreshState: parseReingestionState(response.reingestionState),\n      progress: response.progress\n    };\n  });\n}\nfunction refresh(config, contractAddress, tokenId, srcMethod) {\n  return __awaiter$1(this, void 0, void 0, function* () {\n    const response = yield requestHttpWithBackoff(config, AlchemyApiType.NFT, 'getNFTMetadata', srcMethod, {\n      contractAddress,\n      tokenId: BigNumber.from(tokenId).toString(),\n      refreshCache: true\n    });\n    return getNftFromRaw(response);\n  });\n}\n/**\r\n * Helper method to convert a NFT response received from Alchemy backend to an\r\n * SDK NFT type.\r\n *\r\n * @internal\r\n */\nfunction nftFromGetNftResponse(ownedNft) {\n  if (isNftWithMetadata(ownedNft)) {\n    return getNftFromRaw(ownedNft);\n  } else {\n    return getBaseNftFromRaw(ownedNft);\n  }\n}\n/**\r\n * Helper method to convert a NFT response received from Alchemy backend to an\r\n * SDK NFT type.\r\n *\r\n * @internal\r\n */\nfunction nftFromGetNftContractResponse(ownedNft, contractAddress) {\n  if (isNftWithMetadata(ownedNft)) {\n    return getNftFromRaw(ownedNft);\n  } else {\n    return getBaseNftFromRaw(ownedNft, contractAddress);\n  }\n}\n/** @internal */\n// TODO: more comprehensive type check\nfunction isNftWithMetadata(response) {\n  return response.title !== undefined;\n}\n/**\r\n * Given an AssetTransfersResponse, fetches the NFTs associated with the\r\n * transfers and collates them with transfer metadata.\r\n *\r\n * VISIBLE FOR TESTING\r\n */\nfunction getNftsForTransfers(config, response) {\n  return __awaiter$1(this, void 0, void 0, function* () {\n    const metadataTransfers = response.transfers.filter(transfer => transfer.rawContract.address !== null)\n    // Use flatMap to flatten 1155 transfers that contain multiple NFTs.\n    .flatMap(transfer => {\n      var _a;\n      const tokens = getTokensFromTransfer(transfer);\n      const metadata = {\n        from: transfer.from,\n        to: (_a = transfer.to) !== null && _a !== void 0 ? _a : undefined,\n        transactionHash: transfer.hash,\n        blockNumber: transfer.blockNum\n      };\n      return tokens.map(token => ({\n        metadata,\n        token\n      }));\n    });\n    if (metadataTransfers.length === 0) {\n      return {\n        nfts: []\n      };\n    }\n    // If we have more than 100 elements after unrolling 1155 transfers, split\n    // transfers into batches of 100 to stay under endpoint batch size limit.\n    const batchSize = 100;\n    const requestBatches = [];\n    for (let i = 0; i < metadataTransfers.length; i += batchSize) {\n      requestBatches.push(metadataTransfers.slice(i, i + batchSize));\n    }\n    const responseBatches = yield Promise.all(requestBatches.map(batch => getNftMetadataBatch(config, batch.map(transfer => transfer.token))));\n    const nfts = responseBatches.flat();\n    // The same NFT can be transferred multiple times in the same transfers response.\n    // We want to return one NFT for each transfer, so we create a mapping for\n    // each NFT to pair with the transfer metadata.\n    const nftsByTokenId = new Map();\n    nfts.forEach(nft => {\n      const key = `${nft.contract.address}-${BigNumber.from(nft.tokenId).toString()}`;\n      nftsByTokenId.set(key, nft);\n    });\n    const transferredNfts = metadataTransfers.map(t => {\n      const key = `${t.token.contractAddress}-${BigNumber.from(t.token.tokenId).toString()}`;\n      return Object.assign(Object.assign({}, nftsByTokenId.get(key)), t.metadata);\n    });\n    return {\n      nfts: transferredNfts,\n      pageKey: response.pageKey\n    };\n  });\n}\n/**\r\n * Returns the underlying NFT tokens from a transfer as the params for a\r\n * `getNftMetadataBatch` call. Handles the 1155 case where multiple NFTs can be\r\n * transferred in a single transaction.\r\n */\nfunction getTokensFromTransfer(transfer) {\n  // ERC1155 NFTs can contain multiple tokens in a single transfer, which\n  // requires special logic.\n  if (transfer.category === AssetTransfersCategory.ERC1155) {\n    return parse1155Transfer(transfer);\n  } else {\n    return [{\n      contractAddress: transfer.rawContract.address,\n      tokenId: transfer.tokenId,\n      tokenType: transfer.category === AssetTransfersCategory.ERC721 ? NftTokenType.ERC721 : undefined\n    }];\n  }\n}\n/**\r\n * Flips the `omitMetadata` SDK parameter type to the `withMetadata` parameter\r\n * required by the Alchemy API. If `omitMetadata` is undefined, the SDK defaults\r\n * to including metadata.\r\n *\r\n * @internal\r\n */\nfunction omitMetadataToWithMetadata(omitMetadata) {\n  return omitMetadata === undefined ? true : !omitMetadata;\n}\nfunction parseReingestionState(reingestionState) {\n  switch (reingestionState) {\n    case 'does_not_exist':\n      return RefreshState.DOES_NOT_EXIST;\n    case 'already_queued':\n      return RefreshState.ALREADY_QUEUED;\n    case 'in_progress':\n      return RefreshState.IN_PROGRESS;\n    case 'finished':\n      return RefreshState.FINISHED;\n    case 'queued':\n      return RefreshState.QUEUED;\n    case 'queue_failed':\n      return RefreshState.QUEUE_FAILED;\n    default:\n      throw new Error('Unknown reingestion state: ' + reingestionState);\n  }\n}\n\n/**\r\n * The NFT namespace contains all the functionality related to NFTs.\r\n *\r\n * Do not call this constructor directly. Instead, instantiate an Alchemy object\r\n * with `const alchemy = new Alchemy(config)` and then access the core namespace\r\n * via `alchemy.nft`.\r\n */\nclass NftNamespace {\n  /** @internal */\n  constructor(config) {\n    this.config = config;\n  }\n  getNftMetadata(contractAddress, tokenId, optionsOrTokenType, tokenUriTimeoutInMs) {\n    let options;\n    if (typeof optionsOrTokenType === 'object') {\n      options = {\n        tokenType: optionsOrTokenType.tokenType,\n        tokenUriTimeoutInMs: optionsOrTokenType.tokenUriTimeoutInMs,\n        refreshCache: optionsOrTokenType.refreshCache\n      };\n    } else {\n      options = {\n        tokenType: optionsOrTokenType,\n        tokenUriTimeoutInMs\n      };\n    }\n    return getNftMetadata(this.config, contractAddress, tokenId, options);\n  }\n  /**\r\n   * Gets the NFT metadata for multiple NFT tokens.\r\n   *\r\n   * @param tokens An array of NFT tokens to fetch metadata for.\r\n   * @param options Configuration options for making the request.\r\n   */\n  getNftMetadataBatch(tokens, options) {\n    return getNftMetadataBatch(this.config, tokens, options);\n  }\n  /**\r\n   * Get the NFT contract metadata associated with the provided parameters.\r\n   *\r\n   * @param contractAddress - The contract address of the NFT.\r\n   * @public\r\n   */\n  getContractMetadata(contractAddress) {\n    return getContractMetadata(this.config, contractAddress);\n  }\n  /**\r\n   * Get the NFT contract metadata for multiple NFT contracts in a single request.\r\n   *\r\n   * @param contractAddresses - An array of contract addresses to fetch metadata for.\r\n   */\n  getContractMetadataBatch(contractAddresses) {\n    return getContractMetadataBatch(this.config, contractAddresses);\n  }\n  getNftsForOwnerIterator(owner, options) {\n    return getNftsForOwnerIterator(this.config, owner, options);\n  }\n  getNftsForOwner(owner, options) {\n    return getNftsForOwner(this.config, owner, options);\n  }\n  getNftsForContract(contractAddress, options) {\n    return getNftsForContract(this.config, contractAddress, options);\n  }\n  getNftsForContractIterator(contractAddress, options) {\n    return getNftsForContractIterator(this.config, contractAddress, options);\n  }\n  getOwnersForContract(contractAddress, options) {\n    return getOwnersForContract(this.config, contractAddress, options);\n  }\n  /**\r\n   * Gets all the owners for a given NFT contract address and token ID.\r\n   *\r\n   * @param contractAddress - The NFT contract address.\r\n   * @param tokenId - Token id of the NFT.\r\n   * @param options - Optional parameters to use for the request.\r\n   * @beta\r\n   */\n  getOwnersForNft(contractAddress, tokenId, options) {\n    return getOwnersForNft(this.config, contractAddress, tokenId, options);\n  }\n  /**\r\n   * Gets all NFT contracts held by the specified owner address.\r\n   *\r\n   * @param owner - Address for NFT owner (can be in ENS format!).\r\n   * @param options - The optional parameters to use for the request.\r\n   * @public\r\n   */\n  getContractsForOwner(owner, options) {\n    return getContractsForOwner(this.config, owner, options);\n  }\n  /**\r\n   * Gets all NFT transfers for a given owner's address.\r\n   *\r\n   * @param owner The owner to get transfers for.\r\n   * @param category Whether to get transfers to or from the owner address.\r\n   * @param options Additional options for the request.\r\n   */\n  getTransfersForOwner(owner, category, options) {\n    return getTransfersForOwner(this.config, owner, category, options);\n  }\n  /**\r\n   * Gets all NFT transfers for a given NFT contract address.\r\n   *\r\n   * Defaults to all transfers for the contract. To get transfers for a specific\r\n   * block range, use {@link GetTransfersForContractOptions}.\r\n   *\r\n   * @param contract The NFT contract to get transfers for.\r\n   * @param options Additional options for the request.\r\n   */\n  getTransfersForContract(contract, options) {\n    return getTransfersForContract(this.config, contract, options);\n  }\n  /**\r\n   * Get all the NFTs minted by a specified owner address.\r\n   *\r\n   * @param owner - Address for the NFT owner (can be in ENS format).\r\n   * @param options - The optional parameters to use for the request.\r\n   */\n  getMintedNfts(owner, options) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      return getMintedNfts(this.config, owner, options);\n    });\n  }\n  /**\r\n   * DEPRECATED - Checks that the provided owner address owns one of more of the\r\n   * provided NFTs.\r\n   *\r\n   * @deprecated - Use {@link verifyNftOwnership} instead. This method will be\r\n   *   removed in a future release.\r\n   * @param owner - The owner address to check.\r\n   * @param contractAddresses - An array of NFT contract addresses to check ownership for.\r\n   */\n  checkNftOwnership(owner, contractAddresses) {\n    return checkNftOwnership(this.config, owner, contractAddresses);\n  }\n  verifyNftOwnership(owner, contractAddress) {\n    return verifyNftOwnership(this.config, owner, contractAddress);\n  }\n  /**\r\n   * Returns whether a contract is marked as spam or not by Alchemy. For more\r\n   * information on how we classify spam, go to our NFT API FAQ at\r\n   * https://docs.alchemy.com/alchemy/enhanced-apis/nft-api/nft-api-faq#nft-spam-classification.\r\n   *\r\n   * @param contractAddress - The contract address to check.\r\n   * @beta\r\n   */\n  isSpamContract(contractAddress) {\n    return isSpamContract(this.config, contractAddress);\n  }\n  /**\r\n   * Returns a list of all spam contracts marked by Alchemy. For details on how\r\n   * Alchemy marks spam contracts, go to\r\n   * https://docs.alchemy.com/alchemy/enhanced-apis/nft-api/nft-api-faq#nft-spam-classification.\r\n   *\r\n   * @beta\r\n   */\n  getSpamContracts() {\n    return getSpamContracts(this.config);\n  }\n  /**\r\n   * Returns the floor prices of a NFT contract by marketplace.\r\n   *\r\n   * @param contractAddress - The contract address for the NFT collection.\r\n   * @beta\r\n   */\n  getFloorPrice(contractAddress) {\n    return getFloorPrice(this.config, contractAddress);\n  }\n  getNftSales(options) {\n    return getNftSales(this.config, options);\n  }\n  /**\r\n   * Get the rarity of each attribute of an NFT.\r\n   *\r\n   * @param contractAddress - Contract address for the NFT collection.\r\n   * @param tokenId - Token id of the NFT.\r\n   */\n  computeRarity(contractAddress, tokenId) {\n    return computeRarity(this.config, contractAddress, tokenId);\n  }\n  /**\r\n   * Search for a keyword across metadata of all ERC-721 and ERC-1155 smart contracts.\r\n   *\r\n   * @param query - The search string that you want to search for in contract metadata.\r\n   */\n  searchContractMetadata(query) {\n    return searchContractMetadata(this.config, query);\n  }\n  /**\r\n   * Get a summary of attribute prevalence for an NFT collection.\r\n   *\r\n   * @param contractAddress - Contract address for the NFT collection.\r\n   */\n  summarizeNftAttributes(contractAddress) {\n    return summarizeNftAttributes(this.config, contractAddress);\n  }\n  /**\r\n   * Refreshes the cached metadata for a provided NFT contract address and token\r\n   * id. Returns a boolean value indicating whether the metadata was refreshed.\r\n   *\r\n   * This method is useful when you want to refresh the metadata for a NFT that\r\n   * has been updated since the last time it was fetched. Note that the backend\r\n   * only allows one refresh per token every 15 minutes, globally for all users.\r\n   * The last refresh time for an NFT can be accessed on the\r\n   * {@link Nft.timeLastUpdated} field.\r\n   *\r\n   * To trigger a refresh for all NFTs in a contract, use {@link refreshContract} instead.\r\n   *\r\n   * @param contractAddress - The contract address of the NFT.\r\n   * @param tokenId - The token id of the NFT.\r\n   */\n  refreshNftMetadata(contractAddress, tokenId) {\n    return refreshNftMetadata(this.config, contractAddress, tokenId);\n  }\n  /**\r\n   * Triggers a metadata refresh all NFTs in the provided contract address. This\r\n   * method is useful after an NFT collection is revealed.\r\n   *\r\n   * Refreshes are queued on the Alchemy backend and may take time to fully\r\n   * process. To refresh the metadata for a specific token, use the\r\n   * {@link refreshNftMetadata} method instead.\r\n   *\r\n   * @param contractAddress - The contract address of the NFT collection.\r\n   * @beta\r\n   */\n  refreshContract(contractAddress) {\n    return refreshContract(this.config, contractAddress);\n  }\n}\n\n/**\r\n * The Notify namespace contains methods used for creating, reading, updating,\r\n * and deleting webhooks in the Notify API.\r\n *\r\n * To use the methods in the API, you must provide your team's auth token in the\r\n * {@link AlchemySettings.authToken} field when configuring\r\n * {@link AlchemySettings}. The auth token can be found in the Alchemy Dashboard\r\n * on the Notify tab.\r\n *\r\n * Note that not all networks are supported in the Notify API. Please consult\r\n * the documentation for which networks are supported.\r\n *\r\n * Do not call this constructor directly. Instead, instantiate an Alchemy object\r\n * with `const alchemy = new Alchemy(config)` and then access the notify\r\n * namespace via `alchemy.notify`.\r\n */\nclass NotifyNamespace {\n  /** @internal */\n  constructor(config) {\n    this.config = config;\n  }\n  /**\r\n   * Get all webhooks on your team.\r\n   *\r\n   * The team is determined by the `authToken` provided into the {@link AlchemySettings}\r\n   * object when creating a new {@link Alchemy} instance.\r\n   *\r\n   * This method returns a response object containing all the webhooks\r\n   */\n  getAllWebhooks() {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      this.verifyConfig();\n      const response = yield this.sendWebhookRequest('team-webhooks', 'getAllWebhooks', {});\n      return {\n        webhooks: parseRawWebhookResponse(response),\n        totalCount: response.data.length\n      };\n    });\n  }\n  getAddresses(webhookOrId, options) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      this.verifyConfig();\n      const webhookId = typeof webhookOrId === 'string' ? webhookOrId : webhookOrId.id;\n      const response = yield this.sendWebhookRequest('webhook-addresses', 'getAddresses', {\n        webhook_id: webhookId,\n        limit: options === null || options === void 0 ? void 0 : options.limit,\n        after: options === null || options === void 0 ? void 0 : options.pageKey\n      });\n      return parseRawAddressActivityResponse(response);\n    });\n  }\n  getGraphqlQuery(webhookOrId) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      this.verifyConfig();\n      const webhookId = typeof webhookOrId === 'string' ? webhookOrId : webhookOrId.id;\n      const response = yield this.sendWebhookRequest('dashboard-webhook-graphql-query', 'getGraphqlQuery', {\n        webhook_id: webhookId\n      });\n      return parseRawCustomGraphqlWebhookResponse(response);\n    });\n  }\n  getNftFilters(webhookOrId, options) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      this.verifyConfig();\n      const webhookId = typeof webhookOrId === 'string' ? webhookOrId : webhookOrId.id;\n      const response = yield this.sendWebhookRequest('webhook-nft-filters', 'getNftFilters', {\n        webhook_id: webhookId,\n        limit: options === null || options === void 0 ? void 0 : options.limit,\n        after: options === null || options === void 0 ? void 0 : options.pageKey\n      });\n      return parseRawNftFiltersResponse(response);\n    });\n  }\n  updateWebhook(webhookOrId, update) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const webhookId = typeof webhookOrId === 'string' ? webhookOrId : webhookOrId.id;\n      let restApiName;\n      let methodName;\n      let method;\n      let data;\n      if ('isActive' in update) {\n        restApiName = 'update-webhook';\n        methodName = 'updateWebhook';\n        method = 'PUT';\n        data = {\n          webhook_id: webhookId,\n          is_active: update.isActive\n        };\n      } else if ('addFilters' in update || 'removeFilters' in update) {\n        restApiName = 'update-webhook-nft-filters';\n        methodName = 'updateWebhookNftFilters';\n        method = 'PATCH';\n        data = {\n          webhook_id: webhookId,\n          nft_filters_to_add: update.addFilters ? update.addFilters.map(nftFilterToParam) : [],\n          nft_filters_to_remove: update.removeFilters ? update.removeFilters.map(nftFilterToParam) : []\n        };\n      } else if ('addMetadataFilters' in update || 'removeMetadataFilters' in update) {\n        restApiName = 'update-webhook-nft-metadata-filters';\n        methodName = 'updateWebhookNftMetadataFilters';\n        method = 'PATCH';\n        data = {\n          webhook_id: webhookId,\n          nft_metadata_filters_to_add: update.addMetadataFilters ? update.addMetadataFilters.map(nftFilterToParam) : [],\n          nft_metadata_filters_to_remove: update.removeMetadataFilters ? update.removeMetadataFilters.map(nftFilterToParam) : []\n        };\n      } else if ('addAddresses' in update || 'removeAddresses' in update) {\n        restApiName = 'update-webhook-addresses';\n        methodName = 'webhook:updateWebhookAddresses';\n        method = 'PATCH';\n        data = {\n          webhook_id: webhookId,\n          addresses_to_add: yield this.resolveAddresses(update.addAddresses),\n          addresses_to_remove: yield this.resolveAddresses(update.removeAddresses)\n        };\n      } else if ('newAddresses' in update) {\n        restApiName = 'update-webhook-addresses';\n        methodName = 'webhook:updateWebhookAddress';\n        method = 'PUT';\n        data = {\n          webhook_id: webhookId,\n          addresses: yield this.resolveAddresses(update.newAddresses)\n        };\n      } else {\n        throw new Error('Invalid `update` param passed into `updateWebhook`');\n      }\n      yield this.sendWebhookRequest(restApiName, methodName, {}, {\n        method,\n        data\n      });\n    });\n  }\n  createWebhook(url, type, params) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      let appId;\n      if (type === WebhookType.MINED_TRANSACTION || type === WebhookType.DROPPED_TRANSACTION) {\n        if (!('appId' in params)) {\n          throw new Error('Transaction Webhooks require an app id.');\n        }\n        appId = params.appId;\n      }\n      let network = NETWORK_TO_WEBHOOK_NETWORK.get(this.config.network);\n      let nftFilterObj;\n      let addresses;\n      let graphqlQuery;\n      if (type === WebhookType.NFT_ACTIVITY || type === WebhookType.NFT_METADATA_UPDATE) {\n        if (!('filters' in params) || params.filters.length === 0) {\n          throw new Error('Nft Activity Webhooks require a non-empty array input.');\n        }\n        network = params.network ? NETWORK_TO_WEBHOOK_NETWORK.get(params.network) : network;\n        const filters = params.filters.map(filter => filter.tokenId ? {\n          contract_address: filter.contractAddress,\n          token_id: BigNumber.from(filter.tokenId).toString()\n        } : {\n          contract_address: filter.contractAddress\n        });\n        nftFilterObj = type === WebhookType.NFT_ACTIVITY ? {\n          nft_filters: filters\n        } : {\n          nft_metadata_filters: filters\n        };\n      } else if (type === WebhookType.ADDRESS_ACTIVITY) {\n        if (params === undefined || !('addresses' in params) || params.addresses.length === 0) {\n          throw new Error('Address Activity Webhooks require a non-empty array input.');\n        }\n        network = params.network ? NETWORK_TO_WEBHOOK_NETWORK.get(params.network) : network;\n        addresses = yield this.resolveAddresses(params.addresses);\n      } else if (type == WebhookType.GRAPHQL) {\n        if (params === undefined || !('graphqlQuery' in params) || params.graphqlQuery.length === 0) {\n          throw new Error('Custom Webhooks require a non-empty graphql query.');\n        }\n        network = params.network ? NETWORK_TO_WEBHOOK_NETWORK.get(params.network) : network;\n        graphqlQuery = params.graphqlQuery;\n      }\n      const data = Object.assign(Object.assign(Object.assign(Object.assign({\n        network,\n        webhook_type: type,\n        webhook_url: url\n      }, appId && {\n        app_id: appId\n      }), nftFilterObj), addresses && {\n        addresses\n      }), graphqlQuery && {\n        graphql_query: graphqlQuery\n      });\n      const response = yield this.sendWebhookRequest('create-webhook', 'createWebhook', {}, {\n        method: 'POST',\n        data\n      });\n      return parseRawWebhook(response.data);\n    });\n  }\n  deleteWebhook(webhookOrId) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      this.verifyConfig();\n      const webhookId = typeof webhookOrId === 'string' ? webhookOrId : webhookOrId.id;\n      const response = yield this.sendWebhookRequest('delete-webhook', 'deleteWebhook', {\n        webhook_id: webhookId\n      }, {\n        method: 'DELETE'\n      });\n      if ('message' in response) {\n        throw new Error(`Webhook not found. Failed to delete webhook: ${webhookId}`);\n      }\n    });\n  }\n  verifyConfig() {\n    if (this.config.authToken === undefined) {\n      throw new Error('Using the Notify API requires setting the Alchemy Auth Token in ' + 'the settings object when initializing Alchemy.');\n    }\n  }\n  sendWebhookRequest(restApiName, methodName, params, overrides) {\n    return requestHttpWithBackoff(this.config, AlchemyApiType.WEBHOOK, restApiName, methodName, params, Object.assign(Object.assign({}, overrides), {\n      headers: Object.assign({\n        'X-Alchemy-Token': this.config.authToken\n      }, overrides === null || overrides === void 0 ? void 0 : overrides.headers)\n    }));\n  }\n  /** Resolves ENS addresses to the raw address.\r\n   * @internal */\n  resolveAddresses(addresses) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      if (addresses === undefined) {\n        return [];\n      }\n      const resolvedAddresses = [];\n      const provider = yield this.config.getProvider();\n      for (const address of addresses) {\n        const rawAddress = yield provider.resolveName(address);\n        if (rawAddress === null) {\n          throw new Error(`Unable to resolve the ENS address: ${address}`);\n        }\n        resolvedAddresses.push(rawAddress);\n      }\n      return resolvedAddresses;\n    });\n  }\n}\n/**\r\n * Mapping of webhook network representations to the SDK's network representation.\r\n *\r\n * @internal\r\n */\nconst WEBHOOK_NETWORK_TO_NETWORK = {\n  ETH_MAINNET: Network.ETH_MAINNET,\n  ETH_GOERLI: Network.ETH_GOERLI,\n  ETH_SEPOLIA: Network.ETH_SEPOLIA,\n  ETH_ROPSTEN: Network.ETH_ROPSTEN,\n  ETH_RINKEBY: Network.ETH_RINKEBY,\n  ETH_KOVAN: Network.ETH_KOVAN,\n  MATIC_MAINNET: Network.MATIC_MAINNET,\n  MATIC_MUMBAI: Network.MATIC_MUMBAI,\n  ARB_MAINNET: Network.ARB_MAINNET,\n  ARB_GOERLI: Network.ARB_GOERLI,\n  ARB_RINKEBY: Network.ARB_RINKEBY,\n  OPT_MAINNET: Network.OPT_MAINNET,\n  OPT_GOERLI: Network.OPT_GOERLI,\n  OPT_KOVAN: Network.OPT_KOVAN\n};\n/** Mapping of the SDK's network representation the webhook API's network representation. */\nconst NETWORK_TO_WEBHOOK_NETWORK = Object.keys(Network).reduce((map, key) => {\n  if (key in WEBHOOK_NETWORK_TO_NETWORK) {\n    map.set(WEBHOOK_NETWORK_TO_NETWORK[key], key);\n  }\n  return map;\n}, new Map());\nfunction parseRawWebhookResponse(response) {\n  return response.data.map(parseRawWebhook);\n}\nfunction parseRawWebhook(rawWebhook) {\n  return Object.assign({\n    id: rawWebhook.id,\n    network: WEBHOOK_NETWORK_TO_NETWORK[rawWebhook.network],\n    type: rawWebhook.webhook_type,\n    url: rawWebhook.webhook_url,\n    isActive: rawWebhook.is_active,\n    timeCreated: new Date(rawWebhook.time_created).toISOString(),\n    signingKey: rawWebhook.signing_key,\n    version: rawWebhook.version\n  }, rawWebhook.app_id !== undefined && {\n    appId: rawWebhook.app_id\n  });\n}\nfunction parseRawAddressActivityResponse(response) {\n  return {\n    addresses: response.data,\n    totalCount: response.pagination.total_count,\n    pageKey: response.pagination.cursors.after\n  };\n}\nfunction parseRawCustomGraphqlWebhookResponse(response) {\n  return {\n    graphqlQuery: response.data.graphql_query\n  };\n}\nfunction parseRawNftFiltersResponse(response) {\n  return {\n    filters: response.data.map(f => f.token_id ? {\n      contractAddress: f.contract_address,\n      tokenId: BigNumber.from(f.token_id).toString()\n    } : {\n      contractAddress: f.contract_address\n    }),\n    totalCount: response.pagination.total_count,\n    pageKey: response.pagination.cursors.after\n  };\n}\nfunction nftFilterToParam(filter) {\n  return filter.tokenId ? {\n    contract_address: filter.contractAddress,\n    token_id: BigNumber.from(filter.tokenId).toString()\n  } : {\n    contract_address: filter.contractAddress\n  };\n}\n\n/**\r\n * Multiples to increment fee per gas when using\r\n * {@link TransactNamespace.sendGasOptimizedTransaction}.\r\n *\r\n * @internal\r\n */\nconst GAS_OPTIMIZED_TX_FEE_MULTIPLES = [0.9, 1, 1.1, 1.2, 1.3];\n/**\r\n * The Transact namespace contains methods used for sending transactions and\r\n * checking on the state of submitted transactions.\r\n *\r\n * Do not call this constructor directly. Instead, instantiate an Alchemy object\r\n * with `const alchemy = new Alchemy(config)` and then access the transact\r\n * namespace via `alchemy.transact`.\r\n */\nclass TransactNamespace {\n  /** @internal */\n  constructor(config) {\n    this.config = config;\n  }\n  /**\r\n   * Used to send a single transaction to Flashbots. Flashbots will attempt to\r\n   * send the transaction to miners for the next 25 blocks.\r\n   *\r\n   * Returns the transaction hash of the submitted transaction.\r\n   *\r\n   * @param signedTransaction The raw, signed transaction as a hash.\r\n   * @param maxBlockNumber Optional highest block number in which the\r\n   *   transaction should be included.\r\n   * @param options Options to configure the request.\r\n   */\n  sendPrivateTransaction(signedTransaction, maxBlockNumber, options) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      const hexBlockNumber = maxBlockNumber ? toHex(maxBlockNumber) : undefined;\n      return provider._send('eth_sendPrivateTransaction', [{\n        tx: signedTransaction,\n        maxBlockNumber: hexBlockNumber,\n        preferences: options\n      }], 'sendPrivateTransaction');\n    });\n  }\n  /**\r\n   * Stops the provided private transaction from being submitted for future\r\n   * blocks. A transaction can only be cancelled if the request is signed by the\r\n   * same key as the {@link sendPrivateTransaction} call submitting the\r\n   * transaction in first place.\r\n   *\r\n   * Please note that fast mode transactions cannot be cancelled using this method.\r\n   *\r\n   * Returns a boolean indicating whether the cancellation was successful.\r\n   *\r\n   * @param transactionHash Transaction hash of private tx to be cancelled\r\n   */\n  cancelPrivateTransaction(transactionHash) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider._send('eth_cancelPrivateTransaction', [{\n        txHash: transactionHash\n      }], 'cancelPrivateTransaction');\n    });\n  }\n  /**\r\n   * Simulates the asset changes resulting from a list of transactions simulated\r\n   * in sequence.\r\n   *\r\n   * Returns a list of asset changes for each transaction during simulation.\r\n   *\r\n   * @param transactions Transactions list of max 3 transactions to simulate.\r\n   * @param blockIdentifier Optional block identifier to simulate the\r\n   * transaction in.\r\n   */\n  simulateAssetChangesBundle(transactions, blockIdentifier) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      const params = blockIdentifier !== undefined ? [transactions, blockIdentifier] : [transactions];\n      const res = yield provider._send('alchemy_simulateAssetChangesBundle', params, 'simulateAssetChangesBundle');\n      return nullsToUndefined(res);\n    });\n  }\n  /**\r\n   * Simulates the asset changes resulting from a single transaction.\r\n   *\r\n   * Returns list of asset changes that occurred during the transaction\r\n   * simulation. Note that this method does not run the transaction on the\r\n   * blockchain.\r\n   *\r\n   * @param transaction The transaction to simulate.\r\n   * @param blockIdentifier Optional block identifier to simulate the\r\n   * transaction in.\r\n   */\n  simulateAssetChanges(transaction, blockIdentifier) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      const params = blockIdentifier !== undefined ? [transaction, blockIdentifier] : [transaction];\n      const res = yield provider._send('alchemy_simulateAssetChanges', params, 'simulateAssetChanges');\n      return nullsToUndefined(res);\n    });\n  }\n  /**\r\n   * Simulates a list of transactions in sequence and returns list of decoded\r\n   * traces and logs that occurred for each transaction during simulation.\r\n   *\r\n   * Note that this method does not run any transactions on the blockchain.\r\n   *\r\n   * @param transactions Transactions list of max 3 transactions to simulate.\r\n   * @param blockIdentifier Optional block identifier to simulate the\r\n   * transaction in.\r\n   */\n  simulateExecutionBundle(transactions, blockIdentifier) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      const params = blockIdentifier !== undefined ? [transactions, blockIdentifier] : [transactions];\n      const res = provider._send('alchemy_simulateExecutionBundle', params, 'simulateExecutionBundle');\n      return nullsToUndefined(res);\n    });\n  }\n  /**\r\n   * Simulates a single transaction and the resulting and returns list of\r\n   * decoded traces and logs that occurred during the transaction simulation.\r\n   *\r\n   * Note that this method does not run the transaction on the blockchain.\r\n   *\r\n   * @param transaction The transaction to simulate.\r\n   * @param blockIdentifier Optional block identifier to simulate the\r\n   * transaction in.\r\n   */\n  simulateExecution(transaction, blockIdentifier) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      const params = blockIdentifier !== undefined ? [transaction, blockIdentifier] : [transaction];\n      const res = provider._send('alchemy_simulateExecution', params, 'simulateExecution');\n      return nullsToUndefined(res);\n    });\n  }\n  /**\r\n   * Returns the transaction with hash or null if the transaction is unknown.\r\n   *\r\n   * If a transaction has not been mined, this method will search the\r\n   * transaction pool. Various backends may have more restrictive transaction\r\n   * pool access (e.g. if the gas price is too low or the transaction was only\r\n   * recently sent and not yet indexed) in which case this method may also return null.\r\n   *\r\n   * NOTE: This is an alias for {@link CoreNamespace.getTransaction}.\r\n   *\r\n   * @param transactionHash The hash of the transaction to get.\r\n   * @public\r\n   */\n  getTransaction(transactionHash) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider.getTransaction(transactionHash);\n    });\n  }\n  /**\r\n   * Submits transaction to the network to be mined. The transaction must be\r\n   * signed, and be valid (i.e. the nonce is correct and the account has\r\n   * sufficient balance to pay for the transaction).\r\n   *\r\n   * NOTE: This is an alias for {@link CoreNamespace.sendTransaction}.\r\n   *\r\n   * @param signedTransaction The signed transaction to send.\r\n   * @public\r\n   */\n  sendTransaction(signedTransaction) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider.sendTransaction(signedTransaction);\n    });\n  }\n  /**\r\n   * Returns an estimate of the amount of gas that would be required to submit\r\n   * transaction to the network.\r\n   *\r\n   * An estimate may not be accurate since there could be another transaction on\r\n   * the network that was not accounted for, but after being mined affects the\r\n   * relevant state.\r\n   *\r\n   * This is an alias for {@link CoreNamespace.estimateGas}.\r\n   *\r\n   * @param transaction The transaction to estimate gas for.\r\n   * @public\r\n   */\n  estimateGas(transaction) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider.estimateGas(transaction);\n    });\n  }\n  /**\r\n   * Returns a fee per gas (in wei) that is an estimate of how much you can pay\r\n   * as a priority fee, or \"tip\", to get a transaction included in the current block.\r\n   *\r\n   * This number is generally used to set the `maxPriorityFeePerGas` field in a\r\n   * transaction request.\r\n   *\r\n   * @public\r\n   */\n  getMaxPriorityFeePerGas() {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      const feeHex = yield provider._send('eth_maxPriorityFeePerGas', [], 'getMaxPriorityFeePerGas');\n      return fromHex(feeHex);\n    });\n  }\n  /**\r\n   * Returns a promise which will not resolve until specified transaction hash is mined.\r\n   *\r\n   * If {@link confirmations} is 0, this method is non-blocking and if the\r\n   * transaction has not been mined returns null. Otherwise, this method will\r\n   * block until the transaction has confirmed blocks mined on top of the block\r\n   * in which it was mined.\r\n   *\r\n   * NOTE: This is an alias for {@link CoreNamespace.waitForTransaction}.\r\n   *\r\n   * @param transactionHash The hash of the transaction to wait for.\r\n   * @param confirmations The number of blocks to wait for.\r\n   * @param timeout The maximum time to wait for the transaction to confirm.\r\n   * @public\r\n   */\n  waitForTransaction(transactionHash, confirmations, timeout) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider.waitForTransaction(transactionHash, confirmations, timeout);\n    });\n  }\n  sendGasOptimizedTransaction(transactionOrSignedTxs, wallet) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      if (Array.isArray(transactionOrSignedTxs)) {\n        return this._sendGasOptimizedTransaction(transactionOrSignedTxs, 'sendGasOptimizedTransactionPreSigned');\n      }\n      let gasLimit;\n      let priorityFee;\n      let baseFee;\n      const provider = yield this.config.getProvider();\n      try {\n        gasLimit = yield this.estimateGas(transactionOrSignedTxs);\n        priorityFee = yield this.getMaxPriorityFeePerGas();\n        const currentBlock = yield provider.getBlock('latest');\n        baseFee = currentBlock.baseFeePerGas.toNumber();\n      } catch (e) {\n        throw new Error(`Failed to estimate gas for transaction: ${e}`);\n      }\n      const gasSpreadTransactions = generateGasSpreadTransactions(transactionOrSignedTxs, gasLimit.toNumber(), baseFee, priorityFee);\n      const signedTransactions = yield Promise.all(gasSpreadTransactions.map(tx => wallet.signTransaction(tx)));\n      return this._sendGasOptimizedTransaction(signedTransactions, 'sendGasOptimizedTransactionGenerated');\n    });\n  }\n  /**\r\n   * Returns the state of the transaction job returned by the\r\n   * {@link sendGasOptimizedTransaction}.\r\n   *\r\n   * @param trackingId The tracking id from the response of the sent gas optimized transaction.\r\n   * @internal\r\n   */\n  // TODO(txjob): Remove internal tag once this feature is released.\n  getGasOptimizedTransactionStatus(trackingId) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider._send('alchemy_getGasOptimizedTransactionStatus', [trackingId], 'getGasOptimizedTransactionStatus');\n    });\n  }\n  /** @internal */\n  _sendGasOptimizedTransaction(signedTransactions, methodName) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider._send('alchemy_sendGasOptimizedTransaction', [{\n        rawTransactions: signedTransactions\n      }], methodName);\n    });\n  }\n}\n/**\r\n * Helper method to generate the raw transaction with the given gas limit and\r\n * priority fee across a spread of different gas prices.\r\n *\r\n * @internal\r\n */\n// Visible for testing\nfunction generateGasSpreadTransactions(transaction, gasLimit, baseFee, priorityFee) {\n  return GAS_OPTIMIZED_TX_FEE_MULTIPLES.map(feeMultiplier => {\n    return Object.assign(Object.assign({}, transaction), {\n      gasLimit,\n      maxFeePerGas: Math.round(baseFee * feeMultiplier + priorityFee * feeMultiplier),\n      maxPriorityFeePerGas: Math.round(feeMultiplier * priorityFee)\n    });\n  });\n}\n\n/** This file contains internal types used by the SDK and are not exposed to the end user. */\n/**\r\n * Prefix for `alchemy_pendingTransactions` subscriptions when serializing to\r\n * ethers events.\r\n *\r\n * This tag is used internally by ethers to track different event filters.\r\n */\nconst ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE = 'alchemy-pending-transactions';\n/**\r\n * Prefix for `alchemy_minedTransactions` subscriptions when serializing to ethers events.\r\n *\r\n * This tag is used internally by ethers to track different event filters.\r\n */\nconst ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE = 'alchemy-mined-transactions';\n/**\r\n * Array containing all the custom event tags used internally by ethers to track\r\n * event filters.\r\n */\nconst ALCHEMY_EVENT_TYPES = [ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE, ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE];\n\n/**\r\n * DO NOT MODIFY.\r\n *\r\n * Event class copied directly over from ethers.js's `BaseProvider` class.\r\n *\r\n * This class is used to represent events and their corresponding listeners. The\r\n * SDK needs to extend this class in order to support Alchemy's custom\r\n * Subscription API types. The original class is not exported by ethers. Minimal\r\n * changes have been made in order to get TS to compile.\r\n */\nclass Event {\n  constructor(tag, listener, once) {\n    this.listener = listener;\n    this.tag = tag;\n    this.once = once;\n    this._lastBlockNumber = -2;\n    this._inflight = false;\n  }\n  get event() {\n    switch (this.type) {\n      case 'tx':\n        return this.hash;\n      case 'filter':\n        return this.filter;\n      default:\n        return this.tag;\n    }\n  }\n  get type() {\n    return this.tag.split(':')[0];\n  }\n  get hash() {\n    const comps = this.tag.split(':');\n    if (comps[0] !== 'tx') {\n      throw new Error('Not a transaction event');\n    }\n    return comps[1];\n  }\n  get filter() {\n    const comps = this.tag.split(':');\n    if (comps[0] !== 'filter') {\n      throw new Error('Not a transaction event');\n    }\n    const address = comps[1];\n    const topics = deserializeTopics(comps[2]);\n    const filter = {};\n    if (topics.length > 0) {\n      filter.topics = topics;\n    }\n    if (address && address !== '*') {\n      filter.address = address;\n    }\n    return filter;\n  }\n  pollable() {\n    const PollableEvents = ['block', 'network', 'pending', 'poll'];\n    return this.tag.indexOf(':') >= 0 || PollableEvents.indexOf(this.tag) >= 0;\n  }\n}\n/**\r\n * Wrapper class around the ethers `Event` class in order to add support for\r\n * Alchemy's custom subscriptions types.\r\n *\r\n * The serialization and deserialization mechanism requires the order of the\r\n * fields to be the same across different {@link ALCHEMY_EVENT_TYPES}. Before\r\n * using a getter on a new event filter, make sure that the position of the\r\n * field in serialization is correct.\r\n *\r\n * The getters on this class deserialize the event tag generated by\r\n * {@link getAlchemyEventTag} into the original fields passed into the event.\r\n */\nclass EthersEvent extends Event {\n  /**\r\n   * Converts the event tag into the original `fromAddress` field in\r\n   * {@link AlchemyPendingTransactionsEventFilter}.\r\n   */\n  get fromAddress() {\n    const comps = this.tag.split(':');\n    if (comps[0] !== ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE) {\n      return undefined;\n    }\n    if (comps[1] && comps[1] !== '*') {\n      return deserializeAddressField(comps[1]);\n    } else {\n      return undefined;\n    }\n  }\n  /**\r\n   * Converts the event tag into the original `toAddress` field in\r\n   * {@link AlchemyPendingTransactionsEventFilter}.\r\n   */\n  get toAddress() {\n    const comps = this.tag.split(':');\n    if (comps[0] !== ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE) {\n      return undefined;\n    }\n    if (comps[2] && comps[2] !== '*') {\n      return deserializeAddressField(comps[2]);\n    } else {\n      return undefined;\n    }\n  }\n  /**\r\n   * Converts the event tag into the original `hashesOnly` field in\r\n   * {@link AlchemyPendingTransactionsEventFilter} and {@link AlchemyMinedTransactionsEventFilter}.\r\n   */\n  get hashesOnly() {\n    const comps = this.tag.split(':');\n    if (!ALCHEMY_EVENT_TYPES.includes(comps[0])) {\n      return undefined;\n    }\n    if (comps[3] && comps[3] !== '*') {\n      return comps[3] === 'true';\n    } else {\n      return undefined;\n    }\n  }\n  get includeRemoved() {\n    const comps = this.tag.split(':');\n    if (comps[0] !== ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE) {\n      return undefined;\n    }\n    if (comps[2] && comps[2] !== '*') {\n      return comps[2] === 'true';\n    } else {\n      return undefined;\n    }\n  }\n  get addresses() {\n    const comps = this.tag.split(':');\n    if (comps[0] !== ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE) {\n      return undefined;\n    }\n    if (comps[1] && comps[1] !== '*') {\n      return deserializeAddressesField(comps[1]);\n    } else {\n      return undefined;\n    }\n  }\n}\nfunction isAlchemyEvent(event) {\n  return typeof event === 'object' && 'method' in event;\n}\n/**\r\n * Creates a string representation of an `alchemy_pendingTransaction`\r\n * subscription filter that is compatible with the ethers implementation of\r\n * `getEventTag()`. The method is not an exported function in ethers, which is\r\n * why the SDK has its own implementation.\r\n *\r\n * The event tag is then deserialized by the SDK's {@link EthersEvent} getters.\r\n *\r\n * @example\r\n *   ```js\r\n *   // Returns 'alchemy-pending-transactions:0xABC:0xDEF|0xGHI:true'\r\n *   const eventTag =  getAlchemyEventTag(\r\n *   {\r\n *     \"method\": \"alchemy_pendingTransactions\",\r\n *     \"fromAddress\": \"0xABC\",\r\n *     \"toAddress\": [\"0xDEF\", \"0xGHI\"],\r\n *     \"hashesOnly: true\r\n *   });\r\n *   ```;\r\n *\r\n * @param event\r\n * @internal\r\n */\nfunction getAlchemyEventTag(event) {\n  if (!isAlchemyEvent(event)) {\n    throw new Error('Event tag requires AlchemyEventType');\n  }\n  if (event.method === AlchemySubscription.PENDING_TRANSACTIONS) {\n    return serializePendingTransactionsEvent(event);\n  } else if (event.method === AlchemySubscription.MINED_TRANSACTIONS) {\n    return serializeMinedTransactionsEvent(event);\n  } else {\n    throw new Error(`Unrecognized AlchemyFilterEvent: ${event}`);\n  }\n}\nfunction verifyAlchemyEventName(eventName) {\n  if (!Object.values(AlchemySubscription).includes(eventName.method)) {\n    throw new Error(`Invalid method name ${eventName.method}. Accepted method names: ${Object.values(AlchemySubscription)}`);\n  }\n}\n/**\r\n * Serializes the provided {@link AlchemyPendingTransactionsEventFilter} into an ethers\r\n * compatible event tag.\r\n *\r\n * For the example event:\r\n * ```\r\n *  {\r\n *     \"method\": \"alchemy_pendingTransactions\",\r\n *     \"fromAddress\": \"0xABC\",\r\n *     \"toAddress\": [\"0xDEF\", \"0xGHI\"],\r\n *     \"hashesOnly: true\r\n *   }\r\n * ```\r\n *\r\n * The resulting serialization is:\r\n * `alchemy_pendingTransactions:0xABC:0xDEF|0xGHI:true`\r\n *\r\n * If a field is omitted, it is replaced with a `*`.\r\n */\nfunction serializePendingTransactionsEvent(event) {\n  const fromAddress = serializeAddressField(event.fromAddress);\n  const toAddress = serializeAddressField(event.toAddress);\n  const hashesOnly = serializeBooleanField(event.hashesOnly);\n  return ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE + ':' + fromAddress + ':' + toAddress + ':' + hashesOnly;\n}\n/**\r\n * Serializes the provided {@link AlchemyPendingTransactionsEventFilter} into an ethers\r\n * compatible event tag.\r\n *\r\n * For the example event:\r\n * ```\r\n *  {\r\n *     \"method\": \"alchemy_minedTransactions\",\r\n *     \"addresses\": [\r\n *       {\r\n *         from: \"0xABC\"\r\n *       },\r\n *       {\r\n *         to: \"0xDEF\",\r\n *         from: \"0x123\"\r\n *       }\r\n *     ]\r\n *     \"includeRemoved\": false\r\n *     \"hashesOnly: true\r\n *   }\r\n * ```\r\n *\r\n * The resulting serialization is:\r\n * `alchemy_minedTransactions:*,0xABC|0xDEF,0x123:false:true`\r\n *\r\n * If a field is omitted, it is replaced with a `*`.\r\n *\r\n * The `addresses` array is split by the '|' character, and each to/from address\r\n * pair is separated by a ',' character.\r\n *\r\n */\nfunction serializeMinedTransactionsEvent(event) {\n  const addresses = serializeAddressesField(event.addresses);\n  const includeRemoved = serializeBooleanField(event.includeRemoved);\n  const hashesOnly = serializeBooleanField(event.hashesOnly);\n  return ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE + ':' + addresses + ':' + includeRemoved + ':' + hashesOnly;\n}\nfunction serializeAddressesField(addresses) {\n  if (addresses === undefined) {\n    return '*';\n  }\n  return addresses.map(filter => serializeAddressField(filter.to) + ',' + serializeAddressField(filter.from)).join('|');\n}\nfunction serializeAddressField(field) {\n  if (field === undefined) {\n    return '*';\n  } else if (Array.isArray(field)) {\n    return field.join('|');\n  } else {\n    return field;\n  }\n}\nfunction serializeBooleanField(field) {\n  if (field === undefined) {\n    return '*';\n  } else {\n    return field.toString();\n  }\n}\nfunction deserializeTopics(data) {\n  if (data === '') {\n    return [];\n  }\n  return data.split(/&/g).map(topic => {\n    if (topic === '') {\n      return [];\n    }\n    const comps = topic.split('|').map(topic => {\n      return topic === 'null' ? null : topic;\n    });\n    return comps.length === 1 ? comps[0] : comps;\n  });\n}\nfunction deserializeAddressField(data) {\n  if (data === '') {\n    return undefined;\n  }\n  const addresses = data.split('|');\n  return addresses.length === 1 ? addresses[0] : addresses;\n}\nfunction deserializeAddressesField(data) {\n  if (data === '') {\n    return undefined;\n  }\n  // Perform a cast here since TS doesn't know we're guaranteed a non-empty\n  // array from deserializing.\n  return data.split('|').map(addressStr => addressStr.split(',')).map(addressPair => Object.assign(Object.assign({}, addressPair[0] !== '*' && {\n    to: addressPair[0]\n  }), addressPair[1] !== '*' && {\n    from: addressPair[1]\n  }));\n}\n\n/**\r\n * The Websocket namespace contains all subscription related functions that\r\n * allow you to subscribe to events and receive updates as they occur. The\r\n * underlying WebSocket provider has additional logic to handle reconnections\r\n * and automatically backfills missed events.\r\n *\r\n * Do not call this constructor directly. Instead, instantiate an Alchemy object\r\n * with `const alchemy = new Alchemy(config)` and then access the core namespace\r\n * via `alchemy.ws`.\r\n */\nclass WebSocketNamespace {\n  /** @internal */\n  constructor(config) {\n    this.config = config;\n  }\n  /**\r\n   * Adds a listener to be triggered for each {@link eventName} event. Also\r\n   * includes Alchemy's Subscription API events. See {@link AlchemyEventType} for\r\n   * how to use them.\r\n   *\r\n   * @param eventName The event to listen for.\r\n   * @param listener The listener to call when the event is triggered.\r\n   * @public\r\n   */\n  on(eventName, listener) {\n    void (() => __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getWebSocketProvider();\n      const processedEvent = yield this._resolveEnsAlchemyEvent(eventName);\n      provider.on(processedEvent, listener);\n    }))();\n    return this;\n  }\n  /**\r\n   * Adds a listener to be triggered for only the next {@link eventName} event,\r\n   * after which it will be removed. Also includes Alchemy's Subscription API\r\n   * events. See {@link AlchemyEventType} for how to use them.\r\n   *\r\n   * @param eventName The event to listen for.\r\n   * @param listener The listener to call when the event is triggered.\r\n   * @public\r\n   */\n  once(eventName, listener) {\n    void (() => __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getWebSocketProvider();\n      const processedEvent = yield this._resolveEnsAlchemyEvent(eventName);\n      provider.once(processedEvent, listener);\n    }))();\n    return this;\n  }\n  /**\r\n   * Removes the provided {@link listener} for the {@link eventName} event. If no\r\n   * listener is provided, all listeners for the event will be removed.\r\n   *\r\n   * @param eventName The event to unlisten to.\r\n   * @param listener The listener to remove.\r\n   * @public\r\n   */\n  off(eventName, listener) {\n    void (() => __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getWebSocketProvider();\n      const processedEvent = yield this._resolveEnsAlchemyEvent(eventName);\n      return provider.off(processedEvent, listener);\n    }))();\n    return this;\n  }\n  /**\r\n   * Remove all listeners for the provided {@link eventName} event. If no event\r\n   * is provided, all events and their listeners are removed.\r\n   *\r\n   * @param eventName The event to remove all listeners for.\r\n   * @public\r\n   */\n  removeAllListeners(eventName) {\n    void (() => __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getWebSocketProvider();\n      const processedEvent = eventName ? yield this._resolveEnsAlchemyEvent(eventName) : undefined;\n      provider.removeAllListeners(processedEvent);\n    }))();\n    return this;\n  }\n  /**\r\n   * Returns the number of listeners for the provided {@link eventName} event. If\r\n   * no event is provided, the total number of listeners for all events is returned.\r\n   *\r\n   * @param eventName The event to get the number of listeners for.\r\n   * @public\r\n   */\n  listenerCount(eventName) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getWebSocketProvider();\n      const processedEvent = eventName ? yield this._resolveEnsAlchemyEvent(eventName) : undefined;\n      return provider.listenerCount(processedEvent);\n    });\n  }\n  /**\r\n   * Returns an array of listeners for the provided {@link eventName} event. If\r\n   * no event is provided, all listeners will be included.\r\n   *\r\n   * @param eventName The event to get the listeners for.\r\n   */\n  listeners(eventName) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getWebSocketProvider();\n      const processedEvent = eventName ? yield this._resolveEnsAlchemyEvent(eventName) : undefined;\n      return provider.listeners(processedEvent);\n    });\n  }\n  /**\r\n   * Converts ENS addresses in an Alchemy Event to the underlying resolved\r\n   * address.\r\n   *\r\n   * VISIBLE ONLY FOR TESTING.\r\n   *\r\n   * @internal\r\n   */\n  _resolveEnsAlchemyEvent(eventName) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      if (!isAlchemyEvent(eventName)) {\n        return eventName;\n      }\n      if (eventName.method === AlchemySubscription.MINED_TRANSACTIONS && eventName.addresses) {\n        const processedAddresses = [];\n        for (const address of eventName.addresses) {\n          if (address.to) {\n            address.to = yield this._resolveNameOrError(address.to);\n          }\n          if (address.from) {\n            address.from = yield this._resolveNameOrError(address.from);\n          }\n          processedAddresses.push(address);\n        }\n        eventName.addresses = processedAddresses;\n      } else if (eventName.method === AlchemySubscription.PENDING_TRANSACTIONS) {\n        if (eventName.fromAddress) {\n          if (typeof eventName.fromAddress === 'string') {\n            eventName.fromAddress = yield this._resolveNameOrError(eventName.fromAddress);\n          } else {\n            eventName.fromAddress = yield Promise.all(eventName.fromAddress.map(address => this._resolveNameOrError(address)));\n          }\n        }\n        if (eventName.toAddress) {\n          if (typeof eventName.toAddress === 'string') {\n            eventName.toAddress = yield this._resolveNameOrError(eventName.toAddress);\n          } else {\n            eventName.toAddress = yield Promise.all(eventName.toAddress.map(address => this._resolveNameOrError(address)));\n          }\n        }\n      }\n      return eventName;\n    });\n  }\n  /**\r\n   * Converts the provided ENS address or throws an error. This improves code\r\n   * readability and type safety in other methods.\r\n   *\r\n   * VISIBLE ONLY FOR TESTING.\r\n   *\r\n   * @internal\r\n   */\n  _resolveNameOrError(name) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      const resolved = yield provider.resolveName(name);\n      if (resolved === null) {\n        throw new Error(`Unable to resolve the ENS address: ${name}`);\n      }\n      return resolved;\n    });\n  }\n}\n\n/**\r\n * The Alchemy SDK client. This class is the main entry point into Alchemy's\r\n * APIs and separates functionality into different namespaces.\r\n *\r\n * Each SDK instance is associated with a specific network and API key. To use a\r\n * different network or API key, create a new instance of {@link Alchemy}.\r\n *\r\n * @public\r\n */\nclass Alchemy {\n  /**\r\n   * @param {string} [settings.apiKey] - The API key to use for Alchemy\r\n   * @param {Network} [settings.network] - The network to use for Alchemy\r\n   * @param {number} [settings.maxRetries] - The maximum number of retries to attempt\r\n   * @param {number} [settings.requestTimeout] - The timeout after which request should fail\r\n   * @public\r\n   */\n  constructor(settings) {\n    this.config = new AlchemyConfig(settings);\n    this.core = new CoreNamespace(this.config);\n    this.nft = new NftNamespace(this.config);\n    this.ws = new WebSocketNamespace(this.config);\n    this.transact = new TransactNamespace(this.config);\n    this.notify = new NotifyNamespace(this.config);\n    this.debug = new DebugNamespace(this.config);\n  }\n}\n\n/**\r\n * The Wallet class inherits Signer and can sign transactions and messages using\r\n * a private key as a standard Externally Owned Account (EOA).\r\n *\r\n * SDK's custom implementation of Ethers.js's 'Wallet'.\r\n *\r\n * Primary difference from Ethers.js 'Wallet' is that you can pass in either a\r\n * Provider or an Alchemy object. This implementation will intelligently detect\r\n * the format and set the provider accordingly.\r\n *\r\n * @public\r\n * @override\r\n */\nclass Wallet extends Wallet$1 {\n  /**\r\n   * Overload permits users to pass in either a standard Provider or an Alchemy\r\n   * object. The constructor will detect the object type and handle appropriately.\r\n   *\r\n   * @override\r\n   */\n  constructor(privateKey, alchemyOrProvider) {\n    // If object passed in is a provider, send to super\n    let superProvider;\n    if (alchemyOrProvider && Provider.isProvider(alchemyOrProvider)) {\n      superProvider = alchemyOrProvider;\n    }\n    super(privateKey, superProvider);\n    // If object passed in is an Alchemy object, just set Alchemy\n    if (alchemyOrProvider && !Provider.isProvider(alchemyOrProvider)) {\n      this.alchemyProviderPromise = alchemyOrProvider.config.getProvider();\n    }\n  }\n  //////////////////////////////////////////////////////////////////\n  // Set of overrides from Signer to handle async provider retrieval.\n  //////////////////////////////////////////////////////////////////\n  /**\r\n   * Returns the balance of this wallet at blockTag.\r\n   *\r\n   * @param blockTag The block to check the balance of\r\n   * @override\r\n   */\n  getBalance(blockTag) {\n    return this.getWallet().then(wallet => wallet.getBalance(blockTag));\n  }\n  /**\r\n   * Returns the number of transactions this account has ever sent. This is the\r\n   * value required to be included in transactions as the nonce.\r\n   *\r\n   * @param blockTag The block to check the transaction count on\r\n   * @override\r\n   */\n  getTransactionCount(blockTag) {\n    return this.getWallet().then(wallet => wallet.getTransactionCount(blockTag));\n  }\n  /**\r\n   * Returns the result of estimating the cost to send the transactionRequest,\r\n   * with this account address being used as the from field.\r\n   *\r\n   * @param transaction Transaction to estimate the gas on\r\n   * @override\r\n   */\n  estimateGas(transaction) {\n    return this.getWallet().then(wallet => wallet.estimateGas(transaction));\n  }\n  /**\r\n   * Returns the result of calling using the transactionRequest, with this\r\n   * account address being used as the from field.\r\n   *\r\n   * @param transaction To make a call on\r\n   * @param blockTag The block to make the call on\r\n   * @override\r\n   */\n  call(transaction, blockTag) {\n    return this.getWallet().then(wallet => wallet.call(transaction, blockTag));\n  }\n  /**\r\n   * Populates ALL keys for a transaction and checks that `from` matches this\r\n   * `Signer`. Resolves ENS names and populates fields like `gasPrice`, `gasLimit`,\r\n   * `nonce`, and `chainId` if they are not provided.\r\n   *\r\n   * @param transaction The transaction to populate.\r\n   * @override\r\n   */\n  populateTransaction(transaction) {\n    return this.getWallet().then(wallet => wallet.populateTransaction(transaction));\n  }\n  /**\r\n   * Populates all fields in a transaction, signs it and sends it to the network\r\n   *\r\n   * @param transaction The transaction to send.\r\n   * @override\r\n   */\n  sendTransaction(transaction) {\n    return this.getWallet().then(wallet => wallet.sendTransaction(transaction));\n  }\n  /**\r\n   * Returns the chain ID this wallet is connected to.\r\n   *\r\n   * @override\r\n   */\n  getChainId() {\n    return this.getWallet().then(wallet => wallet.getChainId());\n  }\n  /**\r\n   * Returns the current gas price.\r\n   *\r\n   * @override\r\n   */\n  getGasPrice() {\n    return this.getWallet().then(wallet => wallet.getGasPrice());\n  }\n  /**\r\n   * Returns the current recommended FeeData to use in a transaction.\r\n   *\r\n   * For an EIP-1559 transaction, the maxFeePerGas and maxPriorityFeePerGas\r\n   * should be used.\r\n   *\r\n   * For legacy transactions and networks which do not support EIP-1559, the\r\n   * gasPrice should be used.\r\n   *\r\n   * @override\r\n   */\n  getFeeData() {\n    return this.getWallet().then(wallet => wallet.getFeeData());\n  }\n  /**\r\n   * Looks up the address of name. If the name is not owned, or does not have a\r\n   * Resolver configured, or the Resolver does not have an address configured,\r\n   * null is returned.\r\n   *\r\n   * @param name Name of the ENS address\r\n   * @override\r\n   */\n  resolveName(name) {\n    return this.getWallet().then(wallet => wallet.resolveName(name));\n  }\n  getWallet() {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      if (!this.alchemyProviderPromise) {\n        return this.connect(this.provider);\n      }\n      return this.connect(yield this.alchemyProviderPromise);\n    });\n  }\n}\n\n/**\r\n * The Contract class is a wrapper around the Contract class from ethers.js and\r\n * is exported here for convenience.\r\n *\r\n * @public\r\n */\n// TODO: support passing in Alchemy instance into the contract.\nclass Contract extends Contract$1 {}\n/**\r\n * The ContractFactory class is a wrapper around the ContractFactory class from\r\n * ethers.js and is exported here for convenience.\r\n *\r\n * @public\r\n */\nclass ContractFactory extends ContractFactory$1 {}\nexport { ALCHEMY_EVENT_TYPES as A, NftOrdering as B, CustomNetworks as C, DEFAULT_ALCHEMY_API_KEY as D, EthersNetwork as E, NftSaleMarketplace as F, GetTransfersForOwnerTransferType as G, NftSaleTakerType as H, IS_BROWSER as I, SimulateAssetType as J, SimulateChangeType as K, DecodingAuthority as L, DebugCallType as M, Network as N, OpenSeaSafelistRequestStatus as O, GasOptimizedTransactionStatus as P, WebhookVersion as Q, RefreshState as R, SortingOrder as S, TokenBalanceType as T, WebhookType as U, VERSION as V, Wallet as W, CommitmentLevel as X, DebugTracerType as Y, __awaiter$1 as _, DEFAULT_NETWORK as a, getAlchemyWsUrl as b, EthersEvent as c, deepCopy as d, getAlchemyEventTag as e, fromHex as f, getAlchemyHttpUrl as g, ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE as h, isAlchemyEvent as i, AlchemySubscription as j, ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE as k, logWarn as l, Alchemy as m, noop as n, Contract as o, ContractFactory as p, isHex as q, AssetTransfersCategory as r, setLogLevel as s, toHex as t, AssetTransfersOrder as u, verifyAlchemyEventName as v, NftTokenType as w, NftSpamClassification as x, NftExcludeFilters as y, NftFilters as z };","map":{"version":3,"names":["formatUnits","isHexString","hexStripZeros","hexValue","BigNumber","axios","Provider","Wallet","Wallet$1","Contract","Contract$1","ContractFactory","ContractFactory$1","Network","TokenBalanceType","AssetTransfersCategory","AssetTransfersOrder","NftTokenType","NftSpamClassification","NftExcludeFilters","NftFilters","NftOrdering","GetTransfersForOwnerTransferType","SortingOrder","NftSaleMarketplace","NftSaleTakerType","RefreshState","OpenSeaSafelistRequestStatus","AlchemySubscription","SimulateAssetType","SimulateChangeType","DecodingAuthority","DebugCallType","GasOptimizedTransactionStatus","WebhookVersion","WebhookType","CommitmentLevel","DebugTracerType","__awaiter$1","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__values","o","s","Symbol","iterator","m","i","call","length","TypeError","__await","v","__asyncGenerator","asyncIterator","g","q","verb","n","a","b","push","resume","settle","r","fulfill","f","shift","__asyncValues","d","DEFAULT_ALCHEMY_API_KEY","DEFAULT_NETWORK","ETH_MAINNET","DEFAULT_MAX_RETRIES","DEFAULT_REQUEST_TIMEOUT","getAlchemyHttpUrl","network","apiKey","getAlchemyNftHttpUrl","getAlchemyWsUrl","getAlchemyWebhookHttpUrl","AlchemyApiType","EthersNetwork","ETH_ROPSTEN","ETH_GOERLI","ETH_KOVAN","ETH_RINKEBY","ETH_SEPOLIA","OPT_MAINNET","OPT_KOVAN","OPT_GOERLI","ARB_MAINNET","ARB_RINKEBY","ARB_GOERLI","MATIC_MAINNET","MATIC_MUMBAI","ASTAR_MAINNET","POLYGONZKEVM_MAINNET","POLYGONZKEVM_TESTNET","CustomNetworks","chainId","name","sepolia","noop","ETH_NULL_VALUE","ETH_NULL_ADDRESS","AlchemyConfig","constructor","config","maxRetries","url","authToken","batchRequests","requestTimeout","_getRequestUrl","apiType","undefined","NFT","WEBHOOK","getProvider","_baseAlchemyProvider","AlchemyProvider","getWebSocketProvider","_baseAlchemyWssProvider","AlchemyWebSocketProvider","version$1","_permanentCensorErrors","_censorErrors","LogLevels","debug","info","warning","error","off","_logLevel","_globalLogger","_checkNormalize","missing","forEach","form","normalize","Error","join","String","fromCharCode","message","_normalizeError","LogLevel$1","LogLevel","ErrorCode","HEX","Logger$1","version","Object","defineProperty","enumerable","writable","_log","logLevel","args","level","toLowerCase","throwArgumentError","console","log","levels","DEBUG","INFO","warn","WARNING","makeError","code","params","errors","UNKNOWN_ERROR","messageDetails","keys","key","Uint8Array","hex","JSON","stringify","toString","reason","NUMERIC_FAULT","fault","CALL_EXCEPTION","INSUFFICIENT_FUNDS","MISSING_NEW","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","TRANSACTION_REPLACED","UNPREDICTABLE_GAS_LIMIT","throwError","INVALID_ARGUMENT","argument","assert","condition","assertArgument","checkNormalize","UNSUPPORTED_OPERATION","operation","checkSafeUint53","checkArgumentCount","count","expectedCount","MISSING_ARGUMENT","UNEXPECTED_ARGUMENT","checkNew","target","kind","checkAbstract","globalLogger","setCensorship","censorship","permanent","setLogLevel","from","__awaiter","logger","defineReadOnly","object","resolveProperties","promises","map","results","all","reduce","accum","opaque","bigint","boolean","number","string","_isFrozen","Array","isArray","isFrozen","_deepCopy","freeze","item","deepCopy","fromHex","hexString","toNumber","toHex","num","toHexString","isHex","possibleHexString","test","formatBlock","block","Number","isInteger","stringToEnum","x","enumb","values","includes","getNftContractFromRaw","rawNftContract","address","contractMetadata","symbol","totalSupply","tokenType","parseNftTokenType","openSea","parseOpenSeaMetadata","contractDeployer","deployedBlockNumber","getBaseNftFromRaw","rawBaseNft","contractAddress","_a","contract","tokenId","id","tokenMetadata","getNftFromRaw","rawNft","_b","_c","_d","_e","_f","_g","spamInfo","parseSpamInfo","parseNftTokenId","title","description","parseNftDescription","timeLastUpdated","metadataError","rawMetadata","metadata","tokenUri","parseNftTokenUri","media","parseNftTokenUriArray","getNftSalesFromRaw","rawNftSales","pageKey","nftSales","rawNftSale","marketplace","parseNftSaleMarketplace","quantity","buyerAddress","sellerAddress","taker","parseNftTaker","sellerFee","marketplaceFee","protocolFee","royaltyFee","blockNumber","logIndex","bundleIndex","transactionHash","LOOKSRARE","SEAPORT","X2Y2","WYVERN","CRYPTOPUNKS","UNKNOWN","BUYER","SELLER","getNftRarityFromRaw","rawNftRarity","prevalence","trait_type","traitType","getContractsForOwnerFromRaw","rawContractsForOwner","totalCount","contracts","isSpam","numDistinctTokensOwned","totalBalance","opensea","ERC721","ERC1155","NO_SUPPORTED_NFT_STANDARD","NOT_A_CONTRACT","classifications","uri","raw","gateway","arr","filter","floorPrice","collectionName","safelistRequestStatus","imageUrl","externalUrl","twitterUsername","discordUrl","lastIngestedAt","IS_BROWSER","window","nullsToUndefined","obj","getAssetTransfers","srcMethod","provider","fromAddress","_getAddress","toAddress","_send","assign","fromBlock","toBlock","maxCount","getTransactionReceipts","getLogs","getNetwork","getFilter","logs","send","removed","arrayOf","formatter","filterLog","bind","resolvedFilter","_getBlockTag","format","array","CoreNamespace","getBalance","addressOrName","blockTag","getCode","getStorageAt","position","getTransactionCount","getBlock","blockHashOrBlockTag","getBlockWithTransactions","getBlockNumber","getGasPrice","getFeeData","ready","transaction","estimateGas","getTransaction","getTransactionReceipt","sendTransaction","signedTransaction","waitForTransaction","confirmations","timeout","method","findContractDeployer","currentBlockNum","firstBlock","binarySearchFirstBlock","txReceipts","matchingReceipt","receipts","find","receipt","deployerAddress","getTokenBalances","contractAddressesOrOptions","ERC20","type","getTokensForOwner","options","contractAddresses","response","formattedBalances","tokenBalances","balance","rawBalance","tokenBalance","token","ownedTokens","index","decimals","tokens","getTokenMetadata","resolveName","lookupAddress","start","end","mid","Math","floor","DebugNamespace","traceCall","blockIdentifier","tracer","parseTracerParams","traceTransaction","traceBlock","onlyTopCall","tracerConfig","sanitizeTokenType","logLevelStringToEnum","WARN","ERROR","silent","SILENT","logLevelToConsoleFn","DEFAULT_LOG_LEVEL","loggerClient","logDebug","logInfo","logWarn","Logger","val","now","Date","toISOString","VERSION","sendAxiosRequest","baseUrl","restApiName","methodName","overrides","requestUrl","headers","DEFAULT_BACKOFF_INITIAL_DELAY_MS","DEFAULT_BACKOFF_MULTIPLIER","DEFAULT_BACKOFF_MAX_DELAY_MS","DEFAULT_BACKOFF_MAX_ATTEMPTS","ExponentialBackoff","maxAttempts","initialDelayMs","backoffMultiplier","maxDelayMs","numAttempts","currentDelayMs","isInBackoff","backoff","backoffDelayWithJitterMs","withJitterMs","max","min","setTimeout","delayMs","random","requestHttpWithBackoff","lastError","attempt","err","status","data","isAxiosError","isRetryableHttpError","retryableCodes","paginateEndpoint","reqPageKey","resPageKey","arguments","paginateEndpoint_1","hasNext","requestParams","getNftMetadata","tokenUriTimeoutInMs","refreshCache","getNftMetadataBatch","getContractMetadata","getContractMetadataBatch","getNftsForOwnerIterator","owner","getNftsForOwnerIterator_1","e_1","withMetadata","omitMetadataToWithMetadata","omitMetadata","filters","excludeFilters","ownedNft","ownedNfts","nftFromGetNftResponse","parseInt","e_1_1","return","getNftsForOwner","includeFilters","pageSize","orderBy","res","blockHash","getNftsForContract","startToken","limit","nfts","nftFromGetNftContractResponse","nextToken","getNftsForContractIterator","getNftsForContractIterator_1","e_2","nft","e_2_1","getOwnersForContract","owners","ownerAddresses","getContractsForOwner","getOwnersForNft","getMintedNfts","ownerAddress","category","nftTokenTypeToCategory","excludeZeroValue","getNftsForTransfers","getTransfersForOwner","transferType","TO","transfersResponse","getTransfersForContract","SPECIALNFT","order","parse1155Transfer","transfer","erc1155Metadata","rawContract","checkNftOwnership","verifyNftOwnership","acc","curr","isSpamContract","getSpamContracts","getFloorPrice","getNftSales","computeRarity","searchContractMetadata","query","summarizeNftAttributes","refreshNftMetadata","tokenIdString","first","second","refresh","refreshContract","refreshState","parseReingestionState","reingestionState","progress","isNftWithMetadata","metadataTransfers","transfers","flatMap","getTokensFromTransfer","to","hash","blockNum","batchSize","requestBatches","slice","responseBatches","batch","flat","nftsByTokenId","Map","set","transferredNfts","t","get","DOES_NOT_EXIST","ALREADY_QUEUED","IN_PROGRESS","FINISHED","QUEUED","QUEUE_FAILED","NftNamespace","optionsOrTokenType","NotifyNamespace","getAllWebhooks","verifyConfig","sendWebhookRequest","webhooks","parseRawWebhookResponse","getAddresses","webhookOrId","webhookId","webhook_id","after","parseRawAddressActivityResponse","getGraphqlQuery","parseRawCustomGraphqlWebhookResponse","getNftFilters","parseRawNftFiltersResponse","updateWebhook","update","is_active","isActive","nft_filters_to_add","addFilters","nftFilterToParam","nft_filters_to_remove","removeFilters","nft_metadata_filters_to_add","addMetadataFilters","nft_metadata_filters_to_remove","removeMetadataFilters","addresses_to_add","resolveAddresses","addAddresses","addresses_to_remove","removeAddresses","addresses","newAddresses","createWebhook","appId","MINED_TRANSACTION","DROPPED_TRANSACTION","NETWORK_TO_WEBHOOK_NETWORK","nftFilterObj","graphqlQuery","NFT_ACTIVITY","NFT_METADATA_UPDATE","contract_address","token_id","nft_filters","nft_metadata_filters","ADDRESS_ACTIVITY","GRAPHQL","webhook_type","webhook_url","app_id","graphql_query","parseRawWebhook","deleteWebhook","resolvedAddresses","rawAddress","WEBHOOK_NETWORK_TO_NETWORK","rawWebhook","timeCreated","time_created","signingKey","signing_key","pagination","total_count","cursors","GAS_OPTIMIZED_TX_FEE_MULTIPLES","TransactNamespace","sendPrivateTransaction","maxBlockNumber","hexBlockNumber","tx","preferences","cancelPrivateTransaction","txHash","simulateAssetChangesBundle","transactions","simulateAssetChanges","simulateExecutionBundle","simulateExecution","getMaxPriorityFeePerGas","feeHex","sendGasOptimizedTransaction","transactionOrSignedTxs","wallet","_sendGasOptimizedTransaction","gasLimit","priorityFee","baseFee","currentBlock","baseFeePerGas","gasSpreadTransactions","generateGasSpreadTransactions","signedTransactions","signTransaction","getGasOptimizedTransactionStatus","trackingId","rawTransactions","feeMultiplier","maxFeePerGas","round","maxPriorityFeePerGas","ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE","ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE","ALCHEMY_EVENT_TYPES","Event","tag","listener","once","_lastBlockNumber","_inflight","event","split","comps","topics","deserializeTopics","pollable","PollableEvents","indexOf","EthersEvent","deserializeAddressField","hashesOnly","includeRemoved","deserializeAddressesField","isAlchemyEvent","getAlchemyEventTag","PENDING_TRANSACTIONS","serializePendingTransactionsEvent","MINED_TRANSACTIONS","serializeMinedTransactionsEvent","verifyAlchemyEventName","eventName","serializeAddressField","serializeBooleanField","serializeAddressesField","field","topic","addressStr","addressPair","WebSocketNamespace","on","processedEvent","_resolveEnsAlchemyEvent","removeAllListeners","listenerCount","listeners","processedAddresses","_resolveNameOrError","resolved","Alchemy","settings","core","ws","transact","notify","privateKey","alchemyOrProvider","superProvider","isProvider","alchemyProviderPromise","getWallet","populateTransaction","getChainId","connect","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","Q","R","S","T","U","V","W","X","Y","_","c","h","j","k","l","p","u","w","y","z"],"sources":["F:/DDesktop/MEAN_BC/mean-stack-authentication-authorization-master/angular-15-client/node_modules/alchemy-sdk/dist/esm/index-596122b1.js"],"sourcesContent":["import { formatUnits, isHexString, hexStripZeros, hexValue } from './api/utils';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport axios from 'axios';\nimport { Provider } from '@ethersproject/abstract-provider';\nimport { Wallet as Wallet$1 } from '@ethersproject/wallet';\nimport { Contract as Contract$1, ContractFactory as ContractFactory$1 } from '@ethersproject/contracts';\n\n/**\r\n * The supported networks by Alchemy. Note that some functions are not available\r\n * on all networks. Please refer to the Alchemy documentation for which APIs are\r\n * available on which networks\r\n * {@link https://docs.alchemy.com/alchemy/apis/feature-support-by-chain}\r\n *\r\n * @public\r\n */\r\nvar Network;\r\n(function (Network) {\r\n    Network[\"ETH_MAINNET\"] = \"eth-mainnet\";\r\n    /** @deprecated - Will be removed in subsequent versions */\r\n    Network[\"ETH_ROPSTEN\"] = \"eth-ropsten\";\r\n    Network[\"ETH_GOERLI\"] = \"eth-goerli\";\r\n    /** @deprecated - Will be removed in subsequent versions */\r\n    Network[\"ETH_KOVAN\"] = \"eth-kovan\";\r\n    /** @deprecated - Will be removed in subsequent versions */\r\n    Network[\"ETH_RINKEBY\"] = \"eth-rinkeby\";\r\n    Network[\"ETH_SEPOLIA\"] = \"eth-sepolia\";\r\n    Network[\"OPT_MAINNET\"] = \"opt-mainnet\";\r\n    /** @deprecated - Will be removed in subsequent versions */\r\n    Network[\"OPT_KOVAN\"] = \"opt-kovan\";\r\n    Network[\"OPT_GOERLI\"] = \"opt-goerli\";\r\n    Network[\"ARB_MAINNET\"] = \"arb-mainnet\";\r\n    /** @deprecated - Will be removed in subsequent versions */\r\n    Network[\"ARB_RINKEBY\"] = \"arb-rinkeby\";\r\n    Network[\"ARB_GOERLI\"] = \"arb-goerli\";\r\n    Network[\"MATIC_MAINNET\"] = \"polygon-mainnet\";\r\n    Network[\"MATIC_MUMBAI\"] = \"polygon-mumbai\";\r\n    Network[\"ASTAR_MAINNET\"] = \"astar-mainnet\";\r\n    Network[\"POLYGONZKEVM_MAINNET\"] = \"polygonzkevm-mainnet\";\r\n    Network[\"POLYGONZKEVM_TESTNET\"] = \"polygonzkevm-testnet\";\r\n})(Network || (Network = {}));\r\n/** Token Types for the `getTokenBalances()` endpoint. */\r\nvar TokenBalanceType;\r\n(function (TokenBalanceType) {\r\n    /**\r\n     * Option to fetch the top 100 tokens by 24-hour volume. This option is only\r\n     * available on Mainnet in Ethereum, Polygon, and Arbitrum.\r\n     */\r\n    TokenBalanceType[\"DEFAULT_TOKENS\"] = \"DEFAULT_TOKENS\";\r\n    /**\r\n     * Option to fetch the set of ERC-20 tokens that the address as ever held. his\r\n     * list is produced by an address's historical transfer activity and includes\r\n     * all tokens that the address has ever received.\r\n     */\r\n    TokenBalanceType[\"ERC20\"] = \"erc20\";\r\n})(TokenBalanceType || (TokenBalanceType = {}));\r\n/**\r\n * Categories of transfers to use with the {@link AssetTransfersParams} request\r\n * object when using {@link CoreNamespace.getAssetTransfers}.\r\n *\r\n * @public\r\n */\r\nvar AssetTransfersCategory;\r\n(function (AssetTransfersCategory) {\r\n    /**\r\n     * Top level ETH transactions that occur where the `fromAddress` is an\r\n     * external user-created address. External addresses have private keys and are\r\n     * accessed by users.\r\n     */\r\n    AssetTransfersCategory[\"EXTERNAL\"] = \"external\";\r\n    /**\r\n     * Top level ETH transactions that occur where the `fromAddress` is an\r\n     * internal, smart contract address. For example, a smart contract calling\r\n     * another smart contract or sending\r\n     */\r\n    AssetTransfersCategory[\"INTERNAL\"] = \"internal\";\r\n    /** ERC20 transfers. */\r\n    AssetTransfersCategory[\"ERC20\"] = \"erc20\";\r\n    /** ERC721 transfers. */\r\n    AssetTransfersCategory[\"ERC721\"] = \"erc721\";\r\n    /** ERC1155 transfers. */\r\n    AssetTransfersCategory[\"ERC1155\"] = \"erc1155\";\r\n    /** Special contracts that don't follow ERC 721/1155, (ex: CryptoKitties). */\r\n    AssetTransfersCategory[\"SPECIALNFT\"] = \"specialnft\";\r\n})(AssetTransfersCategory || (AssetTransfersCategory = {}));\r\n/**\r\n * Enum for the order of the {@link AssetTransfersParams} request object when\r\n * using {@link CoreNamespace.getAssetTransfers}.\r\n *\r\n * @deprecated Use {@link SortingOrder} instead. This enum will be removed in a\r\n *   future version.\r\n * @public\r\n */\r\nvar AssetTransfersOrder;\r\n(function (AssetTransfersOrder) {\r\n    AssetTransfersOrder[\"ASCENDING\"] = \"asc\";\r\n    AssetTransfersOrder[\"DESCENDING\"] = \"desc\";\r\n})(AssetTransfersOrder || (AssetTransfersOrder = {}));\r\n/**\r\n * An enum for specifying the token type on NFTs.\r\n *\r\n * @public\r\n */\r\nvar NftTokenType;\r\n(function (NftTokenType) {\r\n    NftTokenType[\"ERC721\"] = \"ERC721\";\r\n    NftTokenType[\"ERC1155\"] = \"ERC1155\";\r\n    NftTokenType[\"NO_SUPPORTED_NFT_STANDARD\"] = \"NO_SUPPORTED_NFT_STANDARD\";\r\n    NftTokenType[\"NOT_A_CONTRACT\"] = \"NOT_A_CONTRACT\";\r\n    NftTokenType[\"UNKNOWN\"] = \"UNKNOWN\";\r\n})(NftTokenType || (NftTokenType = {}));\r\n/** Potential reasons why an NFT contract was classified as spam. */\r\nvar NftSpamClassification;\r\n(function (NftSpamClassification) {\r\n    NftSpamClassification[\"Erc721TooManyOwners\"] = \"Erc721TooManyOwners\";\r\n    NftSpamClassification[\"Erc721TooManyTokens\"] = \"Erc721TooManyTokens\";\r\n    NftSpamClassification[\"Erc721DishonestTotalSupply\"] = \"Erc721DishonestTotalSupply\";\r\n    NftSpamClassification[\"MostlyHoneyPotOwners\"] = \"MostlyHoneyPotOwners\";\r\n    NftSpamClassification[\"OwnedByMostHoneyPots\"] = \"OwnedByMostHoneyPots\";\r\n})(NftSpamClassification || (NftSpamClassification = {}));\r\n/**\r\n * Enum of NFT filters that can be applied to a {@link getNftsForOwner} request.\r\n * NFTs that match one or more of these filters are excluded from the response.\r\n *\r\n * @deprecated Use {@link NftFilters} instead. This enum will be removed in a\r\n *   future version.\r\n *\r\n * @beta\r\n */\r\nvar NftExcludeFilters;\r\n(function (NftExcludeFilters) {\r\n    /** Exclude NFTs that have been classified as spam. */\r\n    NftExcludeFilters[\"SPAM\"] = \"SPAM\";\r\n    /** Exclude NFTs that have been airdropped to a user. */\r\n    NftExcludeFilters[\"AIRDROPS\"] = \"AIRDROPS\";\r\n})(NftExcludeFilters || (NftExcludeFilters = {}));\r\n/**\r\n * Enum of NFT filters that can be applied to a {@link getNftsForOwner} or a\r\n * {@link getContractsForOwner} request.\r\n *\r\n * @beta\r\n */\r\nvar NftFilters;\r\n(function (NftFilters) {\r\n    /** NFTs that have been classified as spam. */\r\n    NftFilters[\"SPAM\"] = \"SPAM\";\r\n    /** NFTs that have been airdropped to a user. */\r\n    NftFilters[\"AIRDROPS\"] = \"AIRDROPS\";\r\n})(NftFilters || (NftFilters = {}));\r\n/**\r\n * Enum of ordering that can be applied to a {@link getNftsForOwner} or a\r\n * {@link getContractsForOwner} response.\r\n *\r\n * @beta\r\n */\r\nvar NftOrdering;\r\n(function (NftOrdering) {\r\n    NftOrdering[\"TRANSFERTIME\"] = \"TRANSFERTIME\";\r\n})(NftOrdering || (NftOrdering = {}));\r\n/**\r\n * The type of transfer for the request. Note that using `TO` will also include\r\n * NFTs that were minted by the owner.\r\n */\r\nvar GetTransfersForOwnerTransferType;\r\n(function (GetTransfersForOwnerTransferType) {\r\n    GetTransfersForOwnerTransferType[\"TO\"] = \"TO\";\r\n    GetTransfersForOwnerTransferType[\"FROM\"] = \"FROM\";\r\n})(GetTransfersForOwnerTransferType || (GetTransfersForOwnerTransferType = {}));\r\n/**\r\n * Enum for representing the supported sorting orders of the API.\r\n *\r\n * @public\r\n */\r\nvar SortingOrder;\r\n(function (SortingOrder) {\r\n    SortingOrder[\"ASCENDING\"] = \"asc\";\r\n    SortingOrder[\"DESCENDING\"] = \"desc\";\r\n})(SortingOrder || (SortingOrder = {}));\r\n/**\r\n * Enum representing the supported NFT marketplaces by the\r\n * {@link NftNamespace.getNftSales} method.\r\n *\r\n * @public\r\n */\r\nvar NftSaleMarketplace;\r\n(function (NftSaleMarketplace) {\r\n    NftSaleMarketplace[\"SEAPORT\"] = \"seaport\";\r\n    NftSaleMarketplace[\"LOOKSRARE\"] = \"looksrare\";\r\n    NftSaleMarketplace[\"X2Y2\"] = \"x2y2\";\r\n    NftSaleMarketplace[\"WYVERN\"] = \"wyvern\";\r\n    NftSaleMarketplace[\"CRYPTOPUNKS\"] = \"cryptopunks\";\r\n    NftSaleMarketplace[\"UNKNOWN\"] = \"unknown\";\r\n})(NftSaleMarketplace || (NftSaleMarketplace = {}));\r\n/**\r\n * Enum for specifying the taker type for the {@link NftNamespace.getNftSales}\r\n * method.\r\n *\r\n * @public\r\n */\r\nvar NftSaleTakerType;\r\n(function (NftSaleTakerType) {\r\n    NftSaleTakerType[\"BUYER\"] = \"buyer\";\r\n    NftSaleTakerType[\"SELLER\"] = \"seller\";\r\n})(NftSaleTakerType || (NftSaleTakerType = {}));\r\n/** The current state of the NFT contract refresh process. */\r\nvar RefreshState;\r\n(function (RefreshState) {\r\n    /** The provided contract is not an NFT or does not contain metadata. */\r\n    RefreshState[\"DOES_NOT_EXIST\"] = \"does_not_exist\";\r\n    /** The contract has already been queued for refresh. */\r\n    RefreshState[\"ALREADY_QUEUED\"] = \"already_queued\";\r\n    /** The contract is currently being refreshed. */\r\n    RefreshState[\"IN_PROGRESS\"] = \"in_progress\";\r\n    /** The contract refresh is complete. */\r\n    RefreshState[\"FINISHED\"] = \"finished\";\r\n    /** The contract refresh has been queued and await execution. */\r\n    RefreshState[\"QUEUED\"] = \"queued\";\r\n    /** The contract was unable to be queued due to an internal error. */\r\n    RefreshState[\"QUEUE_FAILED\"] = \"queue_failed\";\r\n})(RefreshState || (RefreshState = {}));\r\n/** An OpenSea collection's approval status. */\r\nvar OpenSeaSafelistRequestStatus;\r\n(function (OpenSeaSafelistRequestStatus) {\r\n    /** Verified collection. */\r\n    OpenSeaSafelistRequestStatus[\"VERIFIED\"] = \"verified\";\r\n    /** Collections that are approved on open sea and can be found in search results. */\r\n    OpenSeaSafelistRequestStatus[\"APPROVED\"] = \"approved\";\r\n    /** Collections that requested safelisting on OpenSea. */\r\n    OpenSeaSafelistRequestStatus[\"REQUESTED\"] = \"requested\";\r\n    /** Brand new collections. */\r\n    OpenSeaSafelistRequestStatus[\"NOT_REQUESTED\"] = \"not_requested\";\r\n})(OpenSeaSafelistRequestStatus || (OpenSeaSafelistRequestStatus = {}));\r\n/**\r\n * Method names for Alchemy's custom Subscription API endpoints.\r\n *\r\n * This value is provided in the `method` field when creating an event filter on\r\n * the Websocket Namespace.\r\n */\r\nvar AlchemySubscription;\r\n(function (AlchemySubscription) {\r\n    AlchemySubscription[\"PENDING_TRANSACTIONS\"] = \"alchemy_pendingTransactions\";\r\n    AlchemySubscription[\"MINED_TRANSACTIONS\"] = \"alchemy_minedTransactions\";\r\n})(AlchemySubscription || (AlchemySubscription = {}));\r\n/**\r\n * Asset type returned when calling {@link TransactNamespace.simulateAssetChanges}.\r\n * Allows you to determine if the assets approved or / and transferred are\r\n * native, tokens or NFTs.\r\n */\r\nvar SimulateAssetType;\r\n(function (SimulateAssetType) {\r\n    /**\r\n     * Native transfers that involve the currency of the chain the simulation is\r\n     * run on (ex: ETH for Ethereum, MATIC for Polygon, ETH for Arbitrum).\r\n     */\r\n    SimulateAssetType[\"NATIVE\"] = \"NATIVE\";\r\n    /** ERC20 approval or transfers. */\r\n    SimulateAssetType[\"ERC20\"] = \"ERC20\";\r\n    /** ERC721 approval or transfers. */\r\n    SimulateAssetType[\"ERC721\"] = \"ERC721\";\r\n    /** ERC1155 approval or transfers. */\r\n    SimulateAssetType[\"ERC1155\"] = \"ERC1155\";\r\n    /**\r\n     * Special contracts that don't follow ERC 721/1155.Currently limited to\r\n     * CryptoKitties and CryptoPunks.\r\n     */\r\n    SimulateAssetType[\"SPECIAL_NFT\"] = \"SPECIAL_NFT\";\r\n})(SimulateAssetType || (SimulateAssetType = {}));\r\n/**\r\n * Change type returned when calling {@link TransactNamespace.simulateAssetChanges}.\r\n */\r\nvar SimulateChangeType;\r\n(function (SimulateChangeType) {\r\n    /**\r\n     * Represents a transaction that approved or disapproved permissions for a\r\n     * contract.\r\n     *\r\n     * APPROVE without token ID → approve all tokens\r\n     * APPROVE without amount → approve all amount\r\n     * APPROVE with zero amount → approval being cleared\r\n     */\r\n    SimulateChangeType[\"APPROVE\"] = \"APPROVE\";\r\n    /**\r\n     * Represents a transaction that transferred tokens from one address to another.\r\n     */\r\n    SimulateChangeType[\"TRANSFER\"] = \"TRANSFER\";\r\n})(SimulateChangeType || (SimulateChangeType = {}));\r\n/**\r\n * Authority used to decode calls and logs when using the\r\n * {@link TransactNamespace.simulateExecution} method.\r\n */\r\nvar DecodingAuthority;\r\n(function (DecodingAuthority) {\r\n    DecodingAuthority[\"ETHERSCAN\"] = \"ETHERSCAN\";\r\n})(DecodingAuthority || (DecodingAuthority = {}));\r\n/** The type of call in a debug call trace. */\r\nvar DebugCallType;\r\n(function (DebugCallType) {\r\n    DebugCallType[\"CREATE\"] = \"CREATE\";\r\n    DebugCallType[\"CALL\"] = \"CALL\";\r\n    DebugCallType[\"STATICCALL\"] = \"STATICCALL\";\r\n    DebugCallType[\"DELEGATECALL\"] = \"DELEGATECALL\";\r\n})(DebugCallType || (DebugCallType = {}));\r\n/**\r\n * Potential transaction job statuses for a {@link GasOptimizedTransactionResponse}\r\n *\r\n * @internal\r\n */\r\n// TODO(txjob): Remove internal tag once this feature is released.\r\nvar GasOptimizedTransactionStatus;\r\n(function (GasOptimizedTransactionStatus) {\r\n    GasOptimizedTransactionStatus[\"UNSPECIFIED\"] = \"TRANSACTION_JOB_STATUS_UNSPECIFIED\";\r\n    GasOptimizedTransactionStatus[\"IN_PROGRESS\"] = \"IN_PROGRESS\";\r\n    GasOptimizedTransactionStatus[\"COMPLETE\"] = \"COMPLETE\";\r\n    GasOptimizedTransactionStatus[\"ABANDONED\"] = \"ABANDONED\";\r\n})(GasOptimizedTransactionStatus || (GasOptimizedTransactionStatus = {}));\r\n/** The version of the webhook. All newly created webhooks default to V2. */\r\nvar WebhookVersion;\r\n(function (WebhookVersion) {\r\n    WebhookVersion[\"V1\"] = \"V1\";\r\n    WebhookVersion[\"V2\"] = \"V2\";\r\n})(WebhookVersion || (WebhookVersion = {}));\r\n/** The type of {@link Webhook}. */\r\nvar WebhookType;\r\n(function (WebhookType) {\r\n    WebhookType[\"MINED_TRANSACTION\"] = \"MINED_TRANSACTION\";\r\n    WebhookType[\"DROPPED_TRANSACTION\"] = \"DROPPED_TRANSACTION\";\r\n    WebhookType[\"ADDRESS_ACTIVITY\"] = \"ADDRESS_ACTIVITY\";\r\n    WebhookType[\"NFT_ACTIVITY\"] = \"NFT_ACTIVITY\";\r\n    WebhookType[\"NFT_METADATA_UPDATE\"] = \"NFT_METADATA_UPDATE\";\r\n    WebhookType[\"GRAPHQL\"] = \"GRAPHQL\";\r\n})(WebhookType || (WebhookType = {}));\r\n/**\r\n * Commitment level of the target block with using methods in the\r\n * {@link DebugNamespace}\r\n */\r\nvar CommitmentLevel;\r\n(function (CommitmentLevel) {\r\n    /**\r\n     * Sample next block inferred by Alchemy built on top of the latest block.\r\n     * This contains the set of transactions taken from the local mempool and\r\n     * is a proxy for blocks that have not been mined yet.\r\n     */\r\n    CommitmentLevel[\"PENDING\"] = \"pending\";\r\n    /**\r\n     * The most recent block in the canonical chain observed by Alchemy. Note that\r\n     * this block may be re-orged out of the canonical chain.\r\n     */\r\n    CommitmentLevel[\"LATEST\"] = \"latest\";\r\n    /**\r\n     * The most recent crypto-economically secure block that cannot be re-orged\r\n     * outside of manual intervention driven by community coordination. This is\r\n     * only available on {@link Network.ETH_GOERLI} and {@link Network.ETH_SEPOLIA}.\r\n     */\r\n    CommitmentLevel[\"SAFE\"] = \"safe\";\r\n    /**\r\n     * The most recent secure block that has been accepted by >2/3 of validators.\r\n     * This block is very unlikely to be re-orged. This is only available on\r\n     * {@link Network.ETH_GOERLI} and {@link Network.ETH_SEPOLIA}.\r\n     */\r\n    CommitmentLevel[\"FINALIZED\"] = \"finalized\";\r\n    /**\r\n     * The lowest numbered block available that is usually the first block created.\r\n     */\r\n    CommitmentLevel[\"EARLIEST\"] = \"earliest\";\r\n})(CommitmentLevel || (CommitmentLevel = {}));\r\n/**\r\n * The type of tracer to use when running debug methods in the\r\n * {@link DebugNamespace}.\r\n */\r\nvar DebugTracerType;\r\n(function (DebugTracerType) {\r\n    DebugTracerType[\"CALL_TRACER\"] = \"callTracer\";\r\n    DebugTracerType[\"PRESTATE_TRACER\"] = \"prestateTracer\";\r\n})(DebugTracerType || (DebugTracerType = {}));\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __awaiter$1(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nfunction __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nfunction __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nfunction __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\n\nconst DEFAULT_ALCHEMY_API_KEY = 'demo';\r\nconst DEFAULT_NETWORK = Network.ETH_MAINNET;\r\nconst DEFAULT_MAX_RETRIES = 5;\r\nconst DEFAULT_REQUEST_TIMEOUT = 0; // 0 = no timeout\r\n/**\r\n * Returns the base URL for making Alchemy API requests. The `alchemy.com`\r\n * endpoints only work with non eth json-rpc requests.\r\n *\r\n * @internal\r\n */\r\nfunction getAlchemyHttpUrl(network, apiKey) {\r\n    return `https://${network}.g.alchemy.com/v2/${apiKey}`;\r\n}\r\nfunction getAlchemyNftHttpUrl(network, apiKey) {\r\n    return `https://${network}.g.alchemy.com/nft/v2/${apiKey}`;\r\n}\r\nfunction getAlchemyWsUrl(network, apiKey) {\r\n    return `wss://${network}.g.alchemy.com/v2/${apiKey}`;\r\n}\r\nfunction getAlchemyWebhookHttpUrl() {\r\n    return 'https://dashboard.alchemy.com/api';\r\n}\r\nvar AlchemyApiType;\r\n(function (AlchemyApiType) {\r\n    AlchemyApiType[AlchemyApiType[\"BASE\"] = 0] = \"BASE\";\r\n    AlchemyApiType[AlchemyApiType[\"NFT\"] = 1] = \"NFT\";\r\n    AlchemyApiType[AlchemyApiType[\"WEBHOOK\"] = 2] = \"WEBHOOK\";\r\n})(AlchemyApiType || (AlchemyApiType = {}));\r\n/**\r\n * Mapping of network names to their corresponding Network strings used to\r\n * create an Ethers.js Provider instance.\r\n */\r\nconst EthersNetwork = {\r\n    [Network.ETH_MAINNET]: 'mainnet',\r\n    [Network.ETH_ROPSTEN]: 'ropsten',\r\n    [Network.ETH_GOERLI]: 'goerli',\r\n    [Network.ETH_KOVAN]: 'kovan',\r\n    [Network.ETH_RINKEBY]: 'rinkeby',\r\n    [Network.ETH_SEPOLIA]: 'sepolia',\r\n    [Network.OPT_MAINNET]: 'optimism',\r\n    [Network.OPT_KOVAN]: 'optimism-kovan',\r\n    [Network.OPT_GOERLI]: 'optimism-goerli',\r\n    [Network.ARB_MAINNET]: 'arbitrum',\r\n    [Network.ARB_RINKEBY]: 'arbitrum-rinkeby',\r\n    [Network.ARB_GOERLI]: 'arbitrum-goerli',\r\n    [Network.MATIC_MAINNET]: 'matic',\r\n    [Network.MATIC_MUMBAI]: 'maticmum',\r\n    [Network.ASTAR_MAINNET]: 'astar-mainnet',\r\n    [Network.POLYGONZKEVM_MAINNET]: 'polygonzkevm-mainnet',\r\n    [Network.POLYGONZKEVM_TESTNET]: 'polygonzkevm-testnet'\r\n};\r\n/**\r\n * Mapping of network names to their corresponding Ethers Network objects. These\r\n * networks are not yet supported by Ethers and are listed here to be overriden\r\n * in the provider.\r\n */\r\nconst CustomNetworks = {\r\n    'arbitrum-goerli': {\r\n        chainId: 421613,\r\n        name: 'arbitrum-goerli'\r\n    },\r\n    'astar-mainnet': {\r\n        chainId: 592,\r\n        name: 'astar-mainnet'\r\n    },\r\n    sepolia: {\r\n        chainId: 11155111,\r\n        name: 'sepolia'\r\n    },\r\n    'polygonzkevm-mainnet': {\r\n        chainId: 1101,\r\n        name: 'polygonzkevm-mainnet'\r\n    },\r\n    'polygonzkevm-testnet': {\r\n        chainId: 1442,\r\n        name: 'polygonzkevm-testnet'\r\n    }\r\n};\r\nfunction noop() {\r\n    // It's a no-op\r\n}\r\nconst ETH_NULL_VALUE = '0x';\r\nconst ETH_NULL_ADDRESS = '0x0000000000000000000000000000000000000000';\n\n/**\r\n * This class holds the config information for the SDK client instance and\r\n * exposes the underlying providers for more advanced use cases.\r\n *\r\n * @public\r\n */\r\nclass AlchemyConfig {\r\n    constructor(config) {\r\n        this.apiKey = (config === null || config === void 0 ? void 0 : config.apiKey) || DEFAULT_ALCHEMY_API_KEY;\r\n        this.network = (config === null || config === void 0 ? void 0 : config.network) || DEFAULT_NETWORK;\r\n        this.maxRetries = (config === null || config === void 0 ? void 0 : config.maxRetries) || DEFAULT_MAX_RETRIES;\r\n        this.url = config === null || config === void 0 ? void 0 : config.url;\r\n        this.authToken = config === null || config === void 0 ? void 0 : config.authToken;\r\n        this.batchRequests = (config === null || config === void 0 ? void 0 : config.batchRequests) || false;\r\n        this.requestTimeout = (config === null || config === void 0 ? void 0 : config.requestTimeout) || DEFAULT_REQUEST_TIMEOUT;\r\n    }\r\n    /**\r\n     * Returns the URL endpoint to send the HTTP request to. If a custom URL was\r\n     * provided in the config, that URL is returned. Otherwise, the default URL is\r\n     * from the network and API key.\r\n     *\r\n     * @param apiType - The type of API to get the URL for.\r\n     * @internal\r\n     */\r\n    _getRequestUrl(apiType) {\r\n        if (this.url !== undefined) {\r\n            return this.url;\r\n        }\r\n        else if (apiType === AlchemyApiType.NFT) {\r\n            return getAlchemyNftHttpUrl(this.network, this.apiKey);\r\n        }\r\n        else if (apiType === AlchemyApiType.WEBHOOK) {\r\n            return getAlchemyWebhookHttpUrl();\r\n        }\r\n        else {\r\n            return getAlchemyHttpUrl(this.network, this.apiKey);\r\n        }\r\n    }\r\n    /**\r\n     * Returns an AlchemyProvider instance. Only one provider is created per\r\n     * Alchemy instance.\r\n     *\r\n     * The AlchemyProvider is a wrapper around ether's `AlchemyProvider` class and\r\n     * has been expanded to support Alchemy's Enhanced APIs.\r\n     *\r\n     * Most common methods on the provider are available as top-level methods on\r\n     * the {@link Alchemy} instance, but the provider is exposed here to access\r\n     * other less-common methods.\r\n     *\r\n     * @public\r\n     */\r\n    getProvider() {\r\n        if (!this._baseAlchemyProvider) {\r\n            this._baseAlchemyProvider = (() => __awaiter$1(this, void 0, void 0, function* () {\r\n                const { AlchemyProvider } = yield import('./alchemy-provider-afa3762a.js');\r\n                return new AlchemyProvider(this);\r\n            }))();\r\n        }\r\n        return this._baseAlchemyProvider;\r\n    }\r\n    /**\r\n     * Returns an AlchemyWebsocketProvider instance. Only one provider is created\r\n     * per Alchemy instance.\r\n     *\r\n     * The AlchemyWebSocketProvider is a wrapper around ether's\r\n     * `AlchemyWebSocketProvider` class and has been expanded to support Alchemy's\r\n     * Subscription APIs, automatic backfilling, and other performance improvements.\r\n     *\r\n     * Most common methods on the provider are available as top-level methods on\r\n     * the {@link Alchemy} instance, but the provider is exposed here to access\r\n     * other less-common methods.\r\n     */\r\n    getWebSocketProvider() {\r\n        if (!this._baseAlchemyWssProvider) {\r\n            this._baseAlchemyWssProvider = (() => __awaiter$1(this, void 0, void 0, function* () {\r\n                const { AlchemyWebSocketProvider } = yield import('./alchemy-websocket-provider-b8ed8f71.js');\r\n                return new AlchemyWebSocketProvider(this);\r\n            }))();\r\n        }\r\n        return this._baseAlchemyWssProvider;\r\n    }\r\n}\n\nconst version$1 = \"logger/5.7.0\";\n\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\nlet _globalLogger = null;\nfunction _checkNormalize() {\n    try {\n        const missing = [];\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                }\n                ;\n            }\n            catch (error) {\n                missing.push(form);\n            }\n        });\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\");\n        }\n    }\n    catch (error) {\n        return error.message;\n    }\n    return null;\n}\nconst _normalizeError = _checkNormalize();\nvar LogLevel$1;\n(function (LogLevel) {\n    LogLevel[\"DEBUG\"] = \"DEBUG\";\n    LogLevel[\"INFO\"] = \"INFO\";\n    LogLevel[\"WARNING\"] = \"WARNING\";\n    LogLevel[\"ERROR\"] = \"ERROR\";\n    LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel$1 || (LogLevel$1 = {}));\nvar ErrorCode;\n(function (ErrorCode) {\n    ///////////////////\n    // Generic Errors\n    // Unknown Error\n    ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n    // Not Implemented\n    ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n    // Unsupported Operation\n    //   - operation\n    ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n    // Some sort of bad response from the server\n    ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n    // Timeout\n    ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n    ///////////////////\n    // Operational  Errors\n    // Buffer Overrun\n    ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n    ///////////////////\n    // Argument Errors\n    // Missing new operator to an object\n    //  - name: The name of the class\n    ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n    ///////////////////\n    // Blockchain Errors\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n    // Insufficient funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n    ///////////////////\n    // Interaction Errors\n    // The user rejected the action, such as signing a message or sending\n    // a transaction\n    ErrorCode[\"ACTION_REJECTED\"] = \"ACTION_REJECTED\";\n})(ErrorCode || (ErrorCode = {}));\nconst HEX = \"0123456789abcdef\";\nclass Logger$1 {\n    constructor(version) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n    _log(logLevel, args) {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) {\n            return;\n        }\n        console.log.apply(console, args);\n    }\n    debug(...args) {\n        this._log(Logger$1.levels.DEBUG, args);\n    }\n    info(...args) {\n        this._log(Logger$1.levels.INFO, args);\n    }\n    warn(...args) {\n        this._log(Logger$1.levels.WARNING, args);\n    }\n    makeError(message, code, params) {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, {});\n        }\n        if (!code) {\n            code = Logger$1.errors.UNKNOWN_ERROR;\n        }\n        if (!params) {\n            params = {};\n        }\n        const messageDetails = [];\n        Object.keys(params).forEach((key) => {\n            const value = params[key];\n            try {\n                if (value instanceof Uint8Array) {\n                    let hex = \"\";\n                    for (let i = 0; i < value.length; i++) {\n                        hex += HEX[value[i] >> 4];\n                        hex += HEX[value[i] & 0x0f];\n                    }\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n                }\n                else {\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n                }\n            }\n            catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${code}`);\n        messageDetails.push(`version=${this.version}`);\n        const reason = message;\n        let url = \"\";\n        switch (code) {\n            case ErrorCode.NUMERIC_FAULT: {\n                url = \"NUMERIC_FAULT\";\n                const fault = message;\n                switch (fault) {\n                    case \"overflow\":\n                    case \"underflow\":\n                    case \"division-by-zero\":\n                        url += \"-\" + fault;\n                        break;\n                    case \"negative-power\":\n                    case \"negative-width\":\n                        url += \"-unsupported\";\n                        break;\n                    case \"unbound-bitwise-result\":\n                        url += \"-unbound-result\";\n                        break;\n                }\n                break;\n            }\n            case ErrorCode.CALL_EXCEPTION:\n            case ErrorCode.INSUFFICIENT_FUNDS:\n            case ErrorCode.MISSING_NEW:\n            case ErrorCode.NONCE_EXPIRED:\n            case ErrorCode.REPLACEMENT_UNDERPRICED:\n            case ErrorCode.TRANSACTION_REPLACED:\n            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n                url = code;\n                break;\n        }\n        if (url) {\n            message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n        }\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n        // @TODO: Any??\n        const error = new Error(message);\n        error.reason = reason;\n        error.code = code;\n        Object.keys(params).forEach(function (key) {\n            error[key] = params[key];\n        });\n        return error;\n    }\n    throwError(message, code, params) {\n        throw this.makeError(message, code, params);\n    }\n    throwArgumentError(message, name, value) {\n        return this.throwError(message, Logger$1.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n    assert(condition, message, code, params) {\n        if (!!condition) {\n            return;\n        }\n        this.throwError(message, code, params);\n    }\n    assertArgument(condition, message, name, value) {\n        if (!!condition) {\n            return;\n        }\n        this.throwArgumentError(message, name, value);\n    }\n    checkNormalize(message) {\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger$1.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n    checkSafeUint53(value, message) {\n        if (typeof (value) !== \"number\") {\n            return;\n        }\n        if (message == null) {\n            message = \"value not safe\";\n        }\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger$1.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n        if (value % 1) {\n            this.throwError(message, Logger$1.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n    checkArgumentCount(count, expectedCount, message) {\n        if (message) {\n            message = \": \" + message;\n        }\n        else {\n            message = \"\";\n        }\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger$1.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger$1.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n    checkNew(target, kind) {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger$1.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    checkAbstract(target, kind) {\n        if (target === kind) {\n            this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger$1.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: \"new\" });\n        }\n        else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger$1.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    static globalLogger() {\n        if (!_globalLogger) {\n            _globalLogger = new Logger$1(version$1);\n        }\n        return _globalLogger;\n    }\n    static setCensorship(censorship, permanent) {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger$1.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        if (_permanentCensorErrors) {\n            if (!censorship) {\n                return;\n            }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger$1.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n    static setLogLevel(logLevel) {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger$1.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n    static from(version) {\n        return new Logger$1(version);\n    }\n}\nLogger$1.errors = ErrorCode;\nLogger$1.levels = LogLevel$1;\n\nconst version = \"properties/5.7.0\";\n\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nconst logger = new Logger$1(version);\nfunction defineReadOnly(object, name, value) {\n    Object.defineProperty(object, name, {\n        enumerable: true,\n        value: value,\n        writable: false,\n    });\n}\nfunction resolveProperties(object) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const promises = Object.keys(object).map((key) => {\n            const value = object[key];\n            return Promise.resolve(value).then((v) => ({ key: key, value: v }));\n        });\n        const results = yield Promise.all(promises);\n        return results.reduce((accum, result) => {\n            accum[(result.key)] = result.value;\n            return accum;\n        }, {});\n    });\n}\nconst opaque = { bigint: true, boolean: true, \"function\": true, number: true, string: true };\nfunction _isFrozen(object) {\n    // Opaque objects are not mutable, so safe to copy by assignment\n    if (object === undefined || object === null || opaque[typeof (object)]) {\n        return true;\n    }\n    if (Array.isArray(object) || typeof (object) === \"object\") {\n        if (!Object.isFrozen(object)) {\n            return false;\n        }\n        const keys = Object.keys(object);\n        for (let i = 0; i < keys.length; i++) {\n            let value = null;\n            try {\n                value = object[keys[i]];\n            }\n            catch (error) {\n                // If accessing a value triggers an error, it is a getter\n                // designed to do so (e.g. Result) and is therefore \"frozen\"\n                continue;\n            }\n            if (!_isFrozen(value)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return logger.throwArgumentError(`Cannot deepCopy ${typeof (object)}`, \"object\", object);\n}\n// Returns a new copy of object, such that no properties may be replaced.\n// New properties may be added only to objects.\nfunction _deepCopy(object) {\n    if (_isFrozen(object)) {\n        return object;\n    }\n    // Arrays are mutable, so we need to create a copy\n    if (Array.isArray(object)) {\n        return Object.freeze(object.map((item) => deepCopy(item)));\n    }\n    if (typeof (object) === \"object\") {\n        const result = {};\n        for (const key in object) {\n            const value = object[key];\n            if (value === undefined) {\n                continue;\n            }\n            defineReadOnly(result, key, deepCopy(value));\n        }\n        return result;\n    }\n    return logger.throwArgumentError(`Cannot deepCopy ${typeof (object)}`, \"object\", object);\n}\nfunction deepCopy(object) {\n    return _deepCopy(object);\n}\n\n/**\r\n * Converts a hex string to a decimal number.\r\n *\r\n * @param hexString - The hex string to convert.\r\n * @public\r\n */\r\nfunction fromHex(hexString) {\r\n    return BigNumber.from(hexString).toNumber();\r\n}\r\n/**\r\n * Converts a number to a hex string.\r\n *\r\n * @param num - The number to convert to hex.\r\n * @public\r\n */\r\nfunction toHex(num) {\r\n    return BigNumber.from(num).toHexString();\r\n}\r\n/**\r\n * Checks if a value is a hex string.\r\n *\r\n * @param possibleHexString - The value to check.\r\n * @public\r\n */\r\nfunction isHex(possibleHexString) {\r\n    return /^0x[0-9a-fA-F]+$/.test(possibleHexString);\r\n}\n\nfunction formatBlock(block) {\r\n    if (typeof block === 'string') {\r\n        return block;\r\n    }\r\n    else if (Number.isInteger(block)) {\r\n        return toHex(block);\r\n    }\r\n    return block.toString();\r\n}\r\nfunction stringToEnum(x, enumb) {\r\n    return Object.values(enumb).includes(x) ? x : undefined;\r\n}\r\nfunction getNftContractFromRaw(rawNftContract) {\r\n    return {\r\n        address: rawNftContract.address,\r\n        name: rawNftContract.contractMetadata.name,\r\n        symbol: rawNftContract.contractMetadata.symbol,\r\n        totalSupply: rawNftContract.contractMetadata.totalSupply,\r\n        tokenType: parseNftTokenType(rawNftContract.contractMetadata.tokenType),\r\n        openSea: parseOpenSeaMetadata(rawNftContract.contractMetadata.openSea),\r\n        contractDeployer: rawNftContract.contractMetadata.contractDeployer,\r\n        deployedBlockNumber: rawNftContract.contractMetadata.deployedBlockNumber\r\n    };\r\n}\r\nfunction getBaseNftFromRaw(rawBaseNft, contractAddress) {\r\n    var _a;\r\n    return {\r\n        contract: contractAddress\r\n            ? { address: contractAddress }\r\n            : rawBaseNft.contract,\r\n        tokenId: BigNumber.from(rawBaseNft.id.tokenId).toString(),\r\n        tokenType: parseNftTokenType((_a = rawBaseNft.id.tokenMetadata) === null || _a === void 0 ? void 0 : _a.tokenType)\r\n    };\r\n}\r\nfunction getNftFromRaw(rawNft) {\r\n    var _a, _b, _c, _d, _e, _f, _g;\r\n    try {\r\n        const tokenType = parseNftTokenType((_a = rawNft.id.tokenMetadata) === null || _a === void 0 ? void 0 : _a.tokenType);\r\n        const spamInfo = parseSpamInfo(rawNft.spamInfo);\r\n        return {\r\n            contract: {\r\n                address: rawNft.contract.address,\r\n                name: (_b = rawNft.contractMetadata) === null || _b === void 0 ? void 0 : _b.name,\r\n                symbol: (_c = rawNft.contractMetadata) === null || _c === void 0 ? void 0 : _c.symbol,\r\n                totalSupply: (_d = rawNft.contractMetadata) === null || _d === void 0 ? void 0 : _d.totalSupply,\r\n                tokenType,\r\n                openSea: parseOpenSeaMetadata((_e = rawNft.contractMetadata) === null || _e === void 0 ? void 0 : _e.openSea),\r\n                contractDeployer: (_f = rawNft.contractMetadata) === null || _f === void 0 ? void 0 : _f.contractDeployer,\r\n                deployedBlockNumber: (_g = rawNft.contractMetadata) === null || _g === void 0 ? void 0 : _g.deployedBlockNumber\r\n            },\r\n            tokenId: parseNftTokenId(rawNft.id.tokenId),\r\n            tokenType,\r\n            title: rawNft.title,\r\n            description: parseNftDescription(rawNft.description),\r\n            timeLastUpdated: rawNft.timeLastUpdated,\r\n            metadataError: rawNft.error,\r\n            rawMetadata: rawNft.metadata,\r\n            tokenUri: parseNftTokenUri(rawNft.tokenUri),\r\n            media: parseNftTokenUriArray(rawNft.media),\r\n            spamInfo\r\n        };\r\n    }\r\n    catch (e) {\r\n        throw new Error('Error parsing the NFT response: ' + e);\r\n    }\r\n}\r\nfunction getNftSalesFromRaw(rawNftSales) {\r\n    return {\r\n        pageKey: rawNftSales === null || rawNftSales === void 0 ? void 0 : rawNftSales.pageKey,\r\n        nftSales: rawNftSales.nftSales.map(rawNftSale => ({\r\n            marketplace: parseNftSaleMarketplace(rawNftSale.marketplace),\r\n            contractAddress: rawNftSale.contractAddress,\r\n            tokenId: rawNftSale.tokenId,\r\n            quantity: rawNftSale.quantity,\r\n            buyerAddress: rawNftSale.buyerAddress,\r\n            sellerAddress: rawNftSale.sellerAddress,\r\n            taker: parseNftTaker(rawNftSale.taker),\r\n            sellerFee: rawNftSale === null || rawNftSale === void 0 ? void 0 : rawNftSale.sellerFee,\r\n            marketplaceFee: rawNftSale === null || rawNftSale === void 0 ? void 0 : rawNftSale.protocolFee,\r\n            protocolFee: rawNftSale === null || rawNftSale === void 0 ? void 0 : rawNftSale.protocolFee,\r\n            royaltyFee: rawNftSale === null || rawNftSale === void 0 ? void 0 : rawNftSale.royaltyFee,\r\n            blockNumber: rawNftSale === null || rawNftSale === void 0 ? void 0 : rawNftSale.blockNumber,\r\n            logIndex: rawNftSale.logIndex,\r\n            bundleIndex: rawNftSale.bundleIndex,\r\n            transactionHash: rawNftSale.transactionHash\r\n        }))\r\n    };\r\n}\r\nfunction parseNftSaleMarketplace(marketplace) {\r\n    switch (marketplace) {\r\n        case 'looksrare':\r\n            return NftSaleMarketplace.LOOKSRARE;\r\n        case 'seaport':\r\n            return NftSaleMarketplace.SEAPORT;\r\n        case 'x2y2':\r\n            return NftSaleMarketplace.X2Y2;\r\n        case 'wyvern':\r\n            return NftSaleMarketplace.WYVERN;\r\n        case 'cryptopunks':\r\n            return NftSaleMarketplace.CRYPTOPUNKS;\r\n        default:\r\n            return NftSaleMarketplace.UNKNOWN;\r\n    }\r\n}\r\nfunction parseNftTaker(taker) {\r\n    // The `.toLowerCase()` call is needed because the API returns the capitalized values\r\n    switch (taker.toLowerCase()) {\r\n        case 'buyer':\r\n            return NftSaleTakerType.BUYER;\r\n        case 'seller':\r\n            return NftSaleTakerType.SELLER;\r\n        default:\r\n            throw new Error(`Unsupported NftSaleTakerType ${taker}`);\r\n    }\r\n}\r\nfunction getNftRarityFromRaw(rawNftRarity) {\r\n    return rawNftRarity.map(({ prevalence, trait_type, value }) => ({\r\n        prevalence,\r\n        traitType: trait_type,\r\n        value\r\n    }));\r\n}\r\nfunction getContractsForOwnerFromRaw(rawContractsForOwner) {\r\n    return {\r\n        pageKey: rawContractsForOwner === null || rawContractsForOwner === void 0 ? void 0 : rawContractsForOwner.pageKey,\r\n        totalCount: rawContractsForOwner.totalCount,\r\n        contracts: rawContractsForOwner.contracts.map(contract => {\r\n            return {\r\n                address: contract.address,\r\n                totalSupply: contract.totalSupply,\r\n                isSpam: contract.isSpam,\r\n                media: contract.media,\r\n                numDistinctTokensOwned: contract.numDistinctTokensOwned,\r\n                tokenId: contract.tokenId,\r\n                totalBalance: contract.totalBalance,\r\n                name: contract.name,\r\n                title: contract.title,\r\n                openSea: parseOpenSeaMetadata(contract === null || contract === void 0 ? void 0 : contract.opensea),\r\n                symbol: contract === null || contract === void 0 ? void 0 : contract.symbol,\r\n                tokenType: parseNftTokenType(contract === null || contract === void 0 ? void 0 : contract.tokenType),\r\n                contractDeployer: contract.contractDeployer,\r\n                deployedBlockNumber: contract.deployedBlockNumber\r\n            };\r\n        })\r\n    };\r\n}\r\nfunction parseNftTokenId(tokenId) {\r\n    // We have to normalize the token id here since the backend sometimes\r\n    // returns the token ID as a hex string and sometimes as an integer.\r\n    return BigNumber.from(tokenId).toString();\r\n}\r\nfunction parseNftTokenType(tokenType) {\r\n    switch (tokenType) {\r\n        case 'erc721':\r\n        case 'ERC721':\r\n            return NftTokenType.ERC721;\r\n        case 'erc1155':\r\n        case 'ERC1155':\r\n            return NftTokenType.ERC1155;\r\n        case 'no_supported_nft_standard':\r\n        case 'NO_SUPPORTED_NFT_STANDARD':\r\n            return NftTokenType.NO_SUPPORTED_NFT_STANDARD;\r\n        case 'not_a_contract':\r\n        case 'NOT_A_CONTRACT':\r\n            return NftTokenType.NOT_A_CONTRACT;\r\n        default:\r\n            return NftTokenType.UNKNOWN;\r\n    }\r\n}\r\nfunction parseSpamInfo(spamInfo) {\r\n    if (!spamInfo) {\r\n        return undefined;\r\n    }\r\n    const { isSpam, classifications } = spamInfo;\r\n    return {\r\n        isSpam: isSpam === 'true',\r\n        classifications\r\n    };\r\n}\r\nfunction parseNftDescription(description) {\r\n    if (description === undefined) {\r\n        return '';\r\n    }\r\n    // TODO: Remove after backend adds JSON stringification.\r\n    if (!Array.isArray(description) && typeof description === 'object') {\r\n        return JSON.stringify(description);\r\n    }\r\n    return typeof description === 'string' ? description : description.join(' ');\r\n}\r\nfunction parseNftTokenUri(uri) {\r\n    if (uri && uri.raw.length === 0 && uri.gateway.length == 0) {\r\n        return undefined;\r\n    }\r\n    return uri;\r\n}\r\nfunction parseNftTokenUriArray(arr) {\r\n    if (arr === undefined) {\r\n        return [];\r\n    }\r\n    return arr.filter(uri => parseNftTokenUri(uri) !== undefined);\r\n}\r\nfunction parseOpenSeaMetadata(openSea) {\r\n    if (openSea === undefined) {\r\n        return undefined;\r\n    }\r\n    return {\r\n        floorPrice: openSea.floorPrice,\r\n        collectionName: openSea.collectionName,\r\n        safelistRequestStatus: openSea.safelistRequestStatus !== undefined\r\n            ? stringToEnum(openSea.safelistRequestStatus, OpenSeaSafelistRequestStatus)\r\n            : undefined,\r\n        imageUrl: openSea.imageUrl,\r\n        description: openSea.description,\r\n        externalUrl: openSea.externalUrl,\r\n        twitterUsername: openSea.twitterUsername,\r\n        discordUrl: openSea.discordUrl,\r\n        lastIngestedAt: openSea.lastIngestedAt\r\n    };\r\n}\r\nconst IS_BROWSER = typeof window !== 'undefined' && window !== null;\r\n/** Recursively converts all `null` fields to `undefined. */\r\n// TODO: Add typing support so it doesn't return `any`.\r\nfunction nullsToUndefined(obj) {\r\n    if (obj === null) {\r\n        return undefined;\r\n    }\r\n    // if `obj` is an object, recursively convert all `null` fields to `undefined`.\r\n    if (typeof obj === 'object') {\r\n        for (const key in obj) {\r\n            obj[key] = nullsToUndefined(obj[key]);\r\n        }\r\n    }\r\n    return obj;\r\n}\n\n/**\r\n * This file contains the underlying implementations for exposed API surface in\r\n * the {@link CoreNamespace}. By moving the methods out into a separate file,\r\n * other namespaces can access these methods without depending on the entire\r\n * CoreNamespace, or override the `srcMethod` param used for logging.\r\n */\r\n/**\r\n * Gets the asset transfers for the provided params.\r\n */\r\nfunction getAssetTransfers(config, params, srcMethod = 'getAssetTransfers') {\r\n    return __awaiter$1(this, void 0, void 0, function* () {\r\n        const provider = yield config.getProvider();\r\n        if (params.fromAddress) {\r\n            params.fromAddress = yield provider._getAddress(params.fromAddress);\r\n        }\r\n        if (params.toAddress) {\r\n            params.toAddress = yield provider._getAddress(params.toAddress);\r\n        }\r\n        return provider._send('alchemy_getAssetTransfers', [\r\n            Object.assign(Object.assign({}, params), { fromBlock: params.fromBlock != null ? formatBlock(params.fromBlock) : undefined, toBlock: params.toBlock != null ? formatBlock(params.toBlock) : undefined, maxCount: params.maxCount != null ? toHex(params.maxCount) : undefined })\r\n        ], srcMethod);\r\n    });\r\n}\r\nfunction getTransactionReceipts(config, params, srcMethod = 'getTransactionReceipts') {\r\n    return __awaiter$1(this, void 0, void 0, function* () {\r\n        const provider = yield config.getProvider();\r\n        return provider._send('alchemy_getTransactionReceipts', [params], srcMethod);\r\n    });\r\n}\r\n/**\r\n * This method is based on the ethers implementation of getLogs, but is expanded\r\n * to support specifying an address array in the filter.\r\n *\r\n * The main modifications made to support an address array are:\r\n * - Custom `getFilter()` method that supports an address array\r\n * - Use of `arrayOf()` formatter to format the logs to avoid the `Formatter` import.\r\n * - Use of `provider.send()` to avoid formatting logic in `provider.perform()`.\r\n */\r\nfunction getLogs(config, filter) {\r\n    return __awaiter$1(this, void 0, void 0, function* () {\r\n        const provider = yield config.getProvider();\r\n        yield provider.getNetwork();\r\n        const params = yield resolveProperties({\r\n            filter: getFilter(config, filter)\r\n        });\r\n        const logs = yield provider.send('eth_getLogs', [params.filter]);\r\n        logs.forEach(log => {\r\n            if (log.removed == null) {\r\n                log.removed = false;\r\n            }\r\n        });\r\n        return arrayOf(provider.formatter.filterLog.bind(provider.formatter))(logs);\r\n    });\r\n}\r\n/**\r\n * This method is based on and copied from the ethers implementation of\r\n * `JsonRpcProvider._getFilter()`, but is extended to support an address array.\r\n *\r\n * This implementation is a hacky way to get around the ethers formatter. The\r\n * formatter is used to check the types of the `filter` params, but ethers does\r\n * not allow an array in the `address` field. To preserve the ethers formatter\r\n * on the other fields, we use the formatter to check the types of those other\r\n * fields, and then manually check the `address` field last.\r\n */\r\nfunction getFilter(config, filter) {\r\n    return __awaiter$1(this, void 0, void 0, function* () {\r\n        // START MODIFIED CODE\r\n        const provider = yield config.getProvider();\r\n        const resolvedFilter = yield filter;\r\n        let result = {};\r\n        // END MODIFIED CODE\r\n        ['blockHash', 'topics'].forEach(key => {\r\n            if (resolvedFilter[key] == null) {\r\n                return;\r\n            }\r\n            result[key] = resolvedFilter[key];\r\n        });\r\n        ['fromBlock', 'toBlock'].forEach(key => {\r\n            if (resolvedFilter[key] == null) {\r\n                return;\r\n            }\r\n            result[key] = provider._getBlockTag(resolvedFilter[key]);\r\n        });\r\n        // BEGIN MODIFIED CODE\r\n        // Format the `result` object using the ethers formatter without the `address`\r\n        // field.\r\n        result = provider.formatter.filter(yield resolveProperties(result));\r\n        // After formatting the other fields, manually format the `address` field\r\n        // before adding it to the `result` object.\r\n        if (Array.isArray(resolvedFilter.address)) {\r\n            result.address = yield Promise.all(resolvedFilter.address.map((address) => __awaiter$1(this, void 0, void 0, function* () { return provider._getAddress(address); })));\r\n        }\r\n        else if (resolvedFilter.address != null) {\r\n            result.address = yield provider._getAddress(resolvedFilter.address);\r\n        }\r\n        return result;\r\n        // END MODIFIED CODE\r\n    });\r\n}\r\n/**\r\n * DO NOT MODIFY.\r\n *\r\n * This function is directly copied over from ethers implementation of\r\n * `Formatter.arrayOf()`. It is copied here to avoid having to import the\r\n * `Formatter` class or `FormatterFunc` type from ethers, that are not part of\r\n * the default export.\r\n *\r\n * This function returns a function that applies the formatter to an array of\r\n * values, and is used to format the logs returned by `getLogs()`.\r\n */\r\nfunction arrayOf(format) {\r\n    return function (array) {\r\n        if (!Array.isArray(array)) {\r\n            throw new Error('not an array');\r\n        }\r\n        const result = [];\r\n        array.forEach(value => {\r\n            result.push(format(value));\r\n        });\r\n        return result;\r\n    };\r\n}\n\n/**\r\n * The core namespace contains all commonly-used [Ethers.js\r\n * Provider](https://docs.ethers.io/v5/api/providers/api-providers/#AlchemyProvider)\r\n * methods. If you are already using Ethers.js, you should be simply able to\r\n * replace the Ethers.js Provider object with `alchemy.core` when accessing\r\n * provider methods and it should just work.\r\n *\r\n * Do not call this constructor directly. Instead, instantiate an Alchemy object\r\n * with `const alchemy = new Alchemy(config)` and then access the core namespace\r\n * via `alchemy.core`.\r\n */\r\nclass CoreNamespace {\r\n    /** @internal */\r\n    constructor(config) {\r\n        this.config = config;\r\n    }\r\n    /**\r\n     * Returns the balance of a given address as of the provided block.\r\n     *\r\n     * @param addressOrName The address or name of the account to get the balance for.\r\n     * @param blockTag The optional block number or hash to get the balance for.\r\n     *   Defaults to 'latest' if unspecified.\r\n     * @public\r\n     */\r\n    getBalance(addressOrName, blockTag) {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            const provider = yield this.config.getProvider();\r\n            return provider.getBalance(addressOrName, blockTag);\r\n        });\r\n    }\r\n    /**\r\n     * Returns the contract code of the provided address at the block. If there is\r\n     * no contract deployed, the result is `0x`.\r\n     *\r\n     * @param addressOrName The address or name of the account to get the code for.\r\n     * @param blockTag The optional block number or hash to get the code for.\r\n     *   Defaults to 'latest' if unspecified.\r\n     * @public\r\n     */\r\n    getCode(addressOrName, blockTag) {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            const provider = yield this.config.getProvider();\r\n            return provider.getCode(addressOrName, blockTag);\r\n        });\r\n    }\r\n    /**\r\n     * Return the value of the provided position at the provided address, at the\r\n     * provided block in `Bytes32` format.\r\n     *\r\n     * @param addressOrName The address or name of the account to get the code for.\r\n     * @param position The position of the storage slot to get.\r\n     * @param blockTag The optional block number or hash to get the code for.\r\n     *   Defaults to 'latest' if unspecified.\r\n     * @public\r\n     */\r\n    getStorageAt(addressOrName, position, blockTag) {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            const provider = yield this.config.getProvider();\r\n            return provider.getStorageAt(addressOrName, position, blockTag);\r\n        });\r\n    }\r\n    /**\r\n     * Returns the number of transactions ever sent from the provided address, as\r\n     * of the provided block tag. This value is used as the nonce for the next\r\n     * transaction from the address sent to the network.\r\n     *\r\n     * @param addressOrName The address or name of the account to get the nonce for.\r\n     * @param blockTag The optional block number or hash to get the nonce for.\r\n     * @public\r\n     */\r\n    getTransactionCount(addressOrName, blockTag) {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            const provider = yield this.config.getProvider();\r\n            return provider.getTransactionCount(addressOrName, blockTag);\r\n        });\r\n    }\r\n    /**\r\n     * Returns the block from the network based on the provided block number or\r\n     * hash. Transactions on the block are represented as an array of transaction\r\n     * hashes. To get the full transaction details on the block, use\r\n     * {@link getBlockWithTransactions} instead.\r\n     *\r\n     * @param blockHashOrBlockTag The block number or hash to get the block for.\r\n     * @public\r\n     */\r\n    getBlock(blockHashOrBlockTag) {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            const provider = yield this.config.getProvider();\r\n            return provider.getBlock(blockHashOrBlockTag);\r\n        });\r\n    }\r\n    /**\r\n     * Returns the block from the network based on the provided block number or\r\n     * hash. Transactions on the block are represented as an array of\r\n     * {@link TransactionResponse} objects.\r\n     *\r\n     * @param blockHashOrBlockTag The block number or hash to get the block for.\r\n     * @public\r\n     */\r\n    getBlockWithTransactions(blockHashOrBlockTag) {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            const provider = yield this.config.getProvider();\r\n            return provider.getBlockWithTransactions(blockHashOrBlockTag);\r\n        });\r\n    }\r\n    /**\r\n     * Returns the {@link EthersNetworkAlias} Alchemy is connected to.\r\n     *\r\n     * @public\r\n     */\r\n    getNetwork() {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            const provider = yield this.config.getProvider();\r\n            return provider.getNetwork();\r\n        });\r\n    }\r\n    /**\r\n     * Returns the block number of the most recently mined block.\r\n     *\r\n     * @public\r\n     */\r\n    getBlockNumber() {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            const provider = yield this.config.getProvider();\r\n            return provider.getBlockNumber();\r\n        });\r\n    }\r\n    /**\r\n     * Returns the best guess of the current gas price to use in a transaction.\r\n     *\r\n     * @public\r\n     */\r\n    getGasPrice() {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            const provider = yield this.config.getProvider();\r\n            return provider.getGasPrice();\r\n        });\r\n    }\r\n    /**\r\n     * Returns the recommended fee data to use in a transaction.\r\n     *\r\n     * For an EIP-1559 transaction, the maxFeePerGas and maxPriorityFeePerGas\r\n     * should be used.\r\n     *\r\n     * For legacy transactions and networks which do not support EIP-1559, the\r\n     * gasPrice should be used.\r\n     *\r\n     * @public\r\n     */\r\n    getFeeData() {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            const provider = yield this.config.getProvider();\r\n            return provider.getFeeData();\r\n        });\r\n    }\r\n    /**\r\n     * Returns a Promise which will stall until the network has heen established,\r\n     * ignoring errors due to the target node not being active yet.\r\n     *\r\n     * This can be used for testing or attaching scripts to wait until the node is\r\n     * up and running smoothly.\r\n     *\r\n     * @public\r\n     */\r\n    ready() {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            const provider = yield this.config.getProvider();\r\n            return provider.ready;\r\n        });\r\n    }\r\n    /**\r\n     * Returns the result of executing the transaction, using call. A call does\r\n     * not require any ether, but cannot change any state. This is useful for\r\n     * calling getters on Contracts.\r\n     *\r\n     * @param transaction The transaction to execute.\r\n     * @param blockTag The optional block number or hash to get the call for.\r\n     * @public\r\n     */\r\n    call(transaction, blockTag) {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            const provider = yield this.config.getProvider();\r\n            return provider.call(transaction, blockTag);\r\n        });\r\n    }\r\n    /**\r\n     * Returns an estimate of the amount of gas that would be required to submit\r\n     * transaction to the network.\r\n     *\r\n     * An estimate may not be accurate since there could be another transaction on\r\n     * the network that was not accounted for, but after being mined affects the\r\n     * relevant state.\r\n     *\r\n     * This is an alias for {@link TransactNamespace.estimateGas}.\r\n     *\r\n     * @param transaction The transaction to estimate gas for.\r\n     * @public\r\n     */\r\n    estimateGas(transaction) {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            const provider = yield this.config.getProvider();\r\n            return provider.estimateGas(transaction);\r\n        });\r\n    }\r\n    /**\r\n     * Returns the transaction with hash or null if the transaction is unknown.\r\n     *\r\n     * If a transaction has not been mined, this method will search the\r\n     * transaction pool. Various backends may have more restrictive transaction\r\n     * pool access (e.g. if the gas price is too low or the transaction was only\r\n     * recently sent and not yet indexed) in which case this method may also return null.\r\n     *\r\n     * NOTE: This is an alias for {@link TransactNamespace.getTransaction}.\r\n     *\r\n     * @param transactionHash The hash of the transaction to get.\r\n     * @public\r\n     */\r\n    getTransaction(transactionHash) {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            const provider = yield this.config.getProvider();\r\n            return provider.getTransaction(transactionHash);\r\n        });\r\n    }\r\n    /**\r\n     * Returns the transaction receipt for hash or null if the transaction has not\r\n     * been mined.\r\n     *\r\n     * To stall until the transaction has been mined, consider the\r\n     * waitForTransaction method below.\r\n     *\r\n     * @param transactionHash The hash of the transaction to get.\r\n     * @public\r\n     */\r\n    getTransactionReceipt(transactionHash) {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            const provider = yield this.config.getProvider();\r\n            return provider.getTransactionReceipt(transactionHash);\r\n        });\r\n    }\r\n    /**\r\n     * Submits transaction to the network to be mined. The transaction must be\r\n     * signed, and be valid (i.e. the nonce is correct and the account has\r\n     * sufficient balance to pay for the transaction).\r\n     *\r\n     * NOTE: This is an alias for {@link TransactNamespace.getTransaction}.\r\n     *\r\n     * @param signedTransaction The signed transaction to send.\r\n     * @public\r\n     */\r\n    sendTransaction(signedTransaction) {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            const provider = yield this.config.getProvider();\r\n            return provider.sendTransaction(signedTransaction);\r\n        });\r\n    }\r\n    /**\r\n     * Returns a promise which will not resolve until specified transaction hash is mined.\r\n     *\r\n     * If {@link confirmations} is 0, this method is non-blocking and if the\r\n     * transaction has not been mined returns null. Otherwise, this method will\r\n     * block until the transaction has confirmed blocks mined on top of the block\r\n     * in which it was mined.\r\n     *\r\n     * NOTE: This is an alias for {@link TransactNamespace.getTransaction}.\r\n     *\r\n     * @param transactionHash The hash of the transaction to wait for.\r\n     * @param confirmations The number of blocks to wait for.\r\n     * @param timeout The maximum time to wait for the transaction to confirm.\r\n     * @public\r\n     */\r\n    waitForTransaction(transactionHash, confirmations, timeout) {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            const provider = yield this.config.getProvider();\r\n            return provider.waitForTransaction(transactionHash, confirmations, timeout);\r\n        });\r\n    }\r\n    /**\r\n     * Returns an array of logs that match the provided filter.\r\n     *\r\n     * @param filter The filter object to use.\r\n     * @public\r\n     */\r\n    getLogs(filter) {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            return getLogs(this.config, filter);\r\n        });\r\n    }\r\n    /**\r\n     * Allows sending a raw message to the Alchemy backend.\r\n     *\r\n     * @param method The method to call.\r\n     * @param params The parameters to pass to the method.\r\n     * @public\r\n     */\r\n    send(method, params) {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            const provider = yield this.config.getProvider();\r\n            return provider.send(method, params);\r\n        });\r\n    }\r\n    /**\r\n     * Finds the address that deployed the provided contract and block number it\r\n     * was deployed in.\r\n     *\r\n     * NOTE: This method performs a binary search across all blocks since genesis\r\n     * and can take a long time to complete. This method is a convenience method\r\n     * that will eventually be replaced by a single call to an Alchemy endpoint\r\n     * with this information cached.\r\n     *\r\n     * @param contractAddress - The contract address to find the deployer for.\r\n     * @beta\r\n     */\r\n    findContractDeployer(contractAddress) {\r\n        var _a;\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            const provider = yield this.config.getProvider();\r\n            const currentBlockNum = yield provider.getBlockNumber();\r\n            if ((yield provider.getCode(contractAddress, currentBlockNum)) ===\r\n                ETH_NULL_VALUE) {\r\n                throw new Error(`Contract '${contractAddress}' does not exist`);\r\n            }\r\n            // Binary search for the block number that the contract was deployed in.\r\n            const firstBlock = yield binarySearchFirstBlock(0, currentBlockNum + 1, contractAddress, this.config);\r\n            // Find the first transaction in the block that matches the provided address.\r\n            const txReceipts = yield getTransactionReceipts(this.config, {\r\n                blockNumber: toHex(firstBlock)\r\n            }, 'findContractDeployer');\r\n            const matchingReceipt = (_a = txReceipts.receipts) === null || _a === void 0 ? void 0 : _a.find(receipt => receipt.contractAddress === contractAddress.toLowerCase());\r\n            return {\r\n                deployerAddress: matchingReceipt === null || matchingReceipt === void 0 ? void 0 : matchingReceipt.from,\r\n                blockNumber: firstBlock\r\n            };\r\n        });\r\n    }\r\n    getTokenBalances(addressOrName, contractAddressesOrOptions) {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            const provider = yield this.config.getProvider();\r\n            const address = yield provider._getAddress(addressOrName);\r\n            if (Array.isArray(contractAddressesOrOptions)) {\r\n                if (contractAddressesOrOptions.length > 1500) {\r\n                    throw new Error('You cannot pass in more than 1500 contract addresses to getTokenBalances()');\r\n                }\r\n                if (contractAddressesOrOptions.length === 0) {\r\n                    throw new Error('getTokenBalances() requires at least one contractAddress when using an array');\r\n                }\r\n                return provider._send('alchemy_getTokenBalances', [address, contractAddressesOrOptions], 'getTokenBalances');\r\n            }\r\n            else {\r\n                const tokenType = contractAddressesOrOptions === undefined\r\n                    ? TokenBalanceType.ERC20\r\n                    : contractAddressesOrOptions.type;\r\n                const params = [address, tokenType];\r\n                if ((contractAddressesOrOptions === null || contractAddressesOrOptions === void 0 ? void 0 : contractAddressesOrOptions.type) === TokenBalanceType.ERC20 &&\r\n                    contractAddressesOrOptions.pageKey) {\r\n                    params.push({ pageKey: contractAddressesOrOptions.pageKey });\r\n                }\r\n                return provider._send('alchemy_getTokenBalances', params, 'getTokenBalances');\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Returns the tokens that the specified address owns, along with the amount\r\n     * of each token and the relevant metadata.\r\n     *\r\n     * @param addressOrName The owner address to get the tokens with balances for.\r\n     * @param options Additional options to pass to the request.\r\n     * @public\r\n     */\r\n    getTokensForOwner(addressOrName, options) {\r\n        var _a;\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            const provider = yield this.config.getProvider();\r\n            const address = yield provider._getAddress(addressOrName);\r\n            const params = [\r\n                address,\r\n                (_a = options === null || options === void 0 ? void 0 : options.contractAddresses) !== null && _a !== void 0 ? _a : TokenBalanceType.ERC20\r\n            ];\r\n            if (options === null || options === void 0 ? void 0 : options.pageKey) {\r\n                params.push({ pageKey: options.pageKey });\r\n            }\r\n            const response = (yield provider._send('alchemy_getTokenBalances', params, 'getTokensForOwner'));\r\n            const formattedBalances = response.tokenBalances.map(balance => ({\r\n                contractAddress: balance.contractAddress,\r\n                rawBalance: BigNumber.from(balance.tokenBalance).toString()\r\n            }));\r\n            const metadata = yield Promise.all(response.tokenBalances.map(token => provider._send('alchemy_getTokenMetadata', [token.contractAddress], 'getTokensForOwner', \r\n            /* forceBatch= */ true)));\r\n            const ownedTokens = formattedBalances.map((balance, index) => (Object.assign(Object.assign(Object.assign({}, balance), metadata[index]), { balance: metadata[index].decimals !== null\r\n                    ? formatUnits(balance.rawBalance, metadata[index].decimals)\r\n                    : undefined })));\r\n            return {\r\n                tokens: ownedTokens.map(nullsToUndefined),\r\n                pageKey: response.pageKey\r\n            };\r\n        });\r\n    }\r\n    /**\r\n     * Returns metadata for a given token contract address.\r\n     *\r\n     * @param address The contract address to get metadata for.\r\n     * @public\r\n     */\r\n    getTokenMetadata(address) {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            const provider = yield this.config.getProvider();\r\n            return provider._send('alchemy_getTokenMetadata', [address], 'getTokenMetadata');\r\n        });\r\n    }\r\n    getAssetTransfers(params) {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            return getAssetTransfers(this.config, params);\r\n        });\r\n    }\r\n    /**\r\n     * Gets all transaction receipts for a given block by number or block hash.\r\n     *\r\n     * @param params An object containing fields for the transaction receipt query.\r\n     * @public\r\n     */\r\n    getTransactionReceipts(params) {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            return getTransactionReceipts(this.config, params);\r\n        });\r\n    }\r\n    /**\r\n     * Returns the underlying owner address for the provided ENS address, or `null`\r\n     * if the ENS name does not have an underlying address.\r\n     *\r\n     * @param name The ENS address name to resolve.\r\n     */\r\n    resolveName(name) {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            const provider = yield this.config.getProvider();\r\n            return provider.resolveName(name);\r\n        });\r\n    }\r\n    /**\r\n     * Performs a reverse lookup of the address in ENS using the Reverse Registrar. If the name does not exist, or the forward lookup does not match, null is returned.\r\n     *\r\n     * An ENS name requires additional configuration to setup a reverse record, so not all ENS addresses will map back to the original ENS domain.\r\n     *\r\n     * @param address The address to look up the ENS domain name for.\r\n     */\r\n    lookupAddress(address) {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            const provider = yield this.config.getProvider();\r\n            return provider.lookupAddress(address);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Perform a binary search between an integer range of block numbers to find the\r\n * block number where the contract was deployed.\r\n *\r\n * @internal\r\n */\r\nfunction binarySearchFirstBlock(start, end, address, config) {\r\n    return __awaiter$1(this, void 0, void 0, function* () {\r\n        if (start >= end) {\r\n            return end;\r\n        }\r\n        const mid = Math.floor((start + end) / 2);\r\n        const provider = yield config.getProvider();\r\n        const code = yield provider.getCode(address, mid);\r\n        if (code === ETH_NULL_VALUE) {\r\n            return binarySearchFirstBlock(mid + 1, end, address, config);\r\n        }\r\n        return binarySearchFirstBlock(start, mid, address, config);\r\n    });\r\n}\n\n/**\r\n * The Debug namespace contains methods to access the non-standard RPC methods\r\n * for inspecting and debugging transactions.\r\n *\r\n * For more information on the different methods and use cases please read our\r\n * [documentation](https://docs.alchemy.com/reference/debug-api-quickstart).\r\n *\r\n * Do not call this constructor directly. Instead, instantiate an Alchemy object\r\n * with `const alchemy = new Alchemy(config)` and then access the debug namespace\r\n * via `alchemy.debug`.\r\n */\r\nclass DebugNamespace {\r\n    /** @internal */\r\n    constructor(config) {\r\n        this.config = config;\r\n    }\r\n    traceCall(transaction, blockIdentifier, tracer) {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            const provider = yield this.config.getProvider();\r\n            const params = [transaction, blockIdentifier, parseTracerParams(tracer)];\r\n            return provider._send('debug_traceCall', params, 'traceCall');\r\n        });\r\n    }\r\n    traceTransaction(transactionHash, tracer, timeout) {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            const provider = yield this.config.getProvider();\r\n            const params = [transactionHash, parseTracerParams(tracer, timeout)];\r\n            return provider._send('debug_traceTransaction', params, 'traceTransaction');\r\n        });\r\n    }\r\n    traceBlock(blockIdentifier, tracer) {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            const provider = yield this.config.getProvider();\r\n            let method;\r\n            let params;\r\n            if (isHexString(blockIdentifier, 32)) {\r\n                method = 'debug_traceBlockByHash';\r\n                params = [blockIdentifier, parseTracerParams(tracer)];\r\n            }\r\n            else {\r\n                method = 'debug_traceBlockByNumber';\r\n                const block = typeof blockIdentifier === 'number'\r\n                    ? hexStripZeros(hexValue(blockIdentifier))\r\n                    : blockIdentifier;\r\n                params = [block, parseTracerParams(tracer)];\r\n            }\r\n            return provider._send(method, params, 'traceBlock');\r\n        });\r\n    }\r\n}\r\nfunction parseTracerParams(tracer, timeout) {\r\n    return Object.assign({ tracer: tracer.type }, (tracer.onlyTopCall !== undefined && {\r\n        tracerConfig: {\r\n            onlyTopCall: tracer.onlyTopCall,\r\n            timeout\r\n        }\r\n    }));\r\n}\n\nfunction sanitizeTokenType(tokenType) {\r\n    if (tokenType === NftTokenType.ERC1155 || tokenType === NftTokenType.ERC721) {\r\n        return tokenType;\r\n    }\r\n    return undefined;\r\n}\n\n/**\r\n * The SDK has 4 log levels and a 5th option for disabling all logging. By\r\n * default, the log level is set to INFO.\r\n *\r\n * The order is a follows: DEBUG < INFO < WARN < ERROR\r\n *\r\n * All log types above the current log level will be outputted.\r\n */\r\nvar LogLevel;\r\n(function (LogLevel) {\r\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\r\n    LogLevel[LogLevel[\"INFO\"] = 1] = \"INFO\";\r\n    LogLevel[LogLevel[\"WARN\"] = 2] = \"WARN\";\r\n    LogLevel[LogLevel[\"ERROR\"] = 3] = \"ERROR\";\r\n    LogLevel[LogLevel[\"SILENT\"] = 4] = \"SILENT\";\r\n})(LogLevel || (LogLevel = {}));\r\nconst logLevelStringToEnum = {\r\n    debug: LogLevel.DEBUG,\r\n    info: LogLevel.INFO,\r\n    warn: LogLevel.WARN,\r\n    error: LogLevel.ERROR,\r\n    silent: LogLevel.SILENT\r\n};\r\n// HACKY: Use the console method as a string rather than the function itself\r\n// in order to allow for mocking in tests.\r\nconst logLevelToConsoleFn = {\r\n    [LogLevel.DEBUG]: 'log',\r\n    [LogLevel.INFO]: 'info',\r\n    [LogLevel.WARN]: 'warn',\r\n    [LogLevel.ERROR]: 'error'\r\n};\r\nconst DEFAULT_LOG_LEVEL = LogLevel.INFO;\r\n/**\r\n * Configures the verbosity of logging. The default log level is `info`.\r\n *\r\n * @param logLevel - The verbosity of logging. Can be any of the following values:\r\n *\r\n *   - `debug`: The most verbose logging level.\r\n *   - `info`: The default logging level.\r\n *   - `warn`: A logging level for non-critical issues.\r\n *   - `error`: A logging level for critical issues.\r\n *   - `silent`: Turn off all logging.\r\n *\r\n * @public\r\n */\r\nfunction setLogLevel(logLevel) {\r\n    loggerClient.logLevel = logLevelStringToEnum[logLevel];\r\n}\r\nfunction logDebug(message, ...args) {\r\n    loggerClient.debug(message, args);\r\n}\r\nfunction logInfo(message, ...args) {\r\n    loggerClient.info(message, args);\r\n}\r\nfunction logWarn(message, ...args) {\r\n    loggerClient.warn(message, args);\r\n}\r\nclass Logger {\r\n    constructor() {\r\n        /** The log level of the given Logger instance. */\r\n        this._logLevel = DEFAULT_LOG_LEVEL;\r\n    }\r\n    get logLevel() {\r\n        return this._logLevel;\r\n    }\r\n    set logLevel(val) {\r\n        if (!(val in LogLevel)) {\r\n            throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\r\n        }\r\n        this._logLevel = val;\r\n    }\r\n    debug(...args) {\r\n        this._log(LogLevel.DEBUG, ...args);\r\n    }\r\n    info(...args) {\r\n        this._log(LogLevel.INFO, ...args);\r\n    }\r\n    warn(...args) {\r\n        this._log(LogLevel.WARN, ...args);\r\n    }\r\n    error(...args) {\r\n        this._log(LogLevel.ERROR, ...args);\r\n    }\r\n    /**\r\n     * Forwards log messages to their corresponding console counterparts if the\r\n     * log level allows it.\r\n     */\r\n    _log(logLevel, ...args) {\r\n        if (logLevel < this._logLevel) {\r\n            return;\r\n        }\r\n        const now = new Date().toISOString();\r\n        const method = logLevelToConsoleFn[logLevel];\r\n        if (method) {\r\n            console[method](`[${now}] Alchemy:`, ...args.map(stringify));\r\n        }\r\n        else {\r\n            throw new Error(`Logger received an invalid logLevel (value: ${logLevel})`);\r\n        }\r\n    }\r\n}\r\nfunction stringify(obj) {\r\n    if (typeof obj === 'string') {\r\n        return obj;\r\n    }\r\n    else {\r\n        try {\r\n            return JSON.stringify(obj);\r\n        }\r\n        catch (e) {\r\n            // Failed to convert to JSON, log the object directly.\r\n            return obj;\r\n        }\r\n    }\r\n}\r\n// Instantiate default logger for the SDK.\r\nconst loggerClient = new Logger();\n\n// This file is autogenerated by injectVersion.js. Any changes will be\r\n// overwritten on commit!\r\nconst VERSION = '2.8.3';\n\n/**\r\n * Given a REST endpoint, method, and params, sends the request with axios and\r\n * returns the response.\r\n */\r\n/**\r\n * Helper function to send http requests using Axis.\r\n *\r\n * @private\r\n */\r\nfunction sendAxiosRequest(baseUrl, restApiName, methodName, params, overrides) {\r\n    var _a;\r\n    const requestUrl = baseUrl + '/' + restApiName;\r\n    const config = Object.assign(Object.assign({}, overrides), { headers: Object.assign(Object.assign(Object.assign({}, overrides === null || overrides === void 0 ? void 0 : overrides.headers), (!IS_BROWSER && { 'Accept-Encoding': 'gzip' })), { 'Alchemy-Ethers-Sdk-Version': VERSION, 'Alchemy-Ethers-Sdk-Method': methodName }), method: (_a = overrides === null || overrides === void 0 ? void 0 : overrides.method) !== null && _a !== void 0 ? _a : 'GET', url: requestUrl, params });\r\n    return axios(config);\r\n}\n\nconst DEFAULT_BACKOFF_INITIAL_DELAY_MS = 1000;\r\nconst DEFAULT_BACKOFF_MULTIPLIER = 1.5;\r\nconst DEFAULT_BACKOFF_MAX_DELAY_MS = 30 * 1000;\r\nconst DEFAULT_BACKOFF_MAX_ATTEMPTS = 5;\r\n/**\r\n * Helper class for implementing exponential backoff and max retry attempts.\r\n *\r\n * @private\r\n * @internal\r\n */\r\nclass ExponentialBackoff {\r\n    constructor(maxAttempts = DEFAULT_BACKOFF_MAX_ATTEMPTS) {\r\n        this.maxAttempts = maxAttempts;\r\n        this.initialDelayMs = DEFAULT_BACKOFF_INITIAL_DELAY_MS;\r\n        this.backoffMultiplier = DEFAULT_BACKOFF_MULTIPLIER;\r\n        this.maxDelayMs = DEFAULT_BACKOFF_MAX_DELAY_MS;\r\n        this.numAttempts = 0;\r\n        this.currentDelayMs = 0;\r\n        this.isInBackoff = false;\r\n    }\r\n    /**\r\n     * Returns a promise that resolves after the the backoff delay. The delay is\r\n     * increased for each attempt. The promise is rejected if the maximum number\r\n     * of attempts is exceeded.\r\n     */\r\n    // TODO: beautify this into an async iterator.\r\n    backoff() {\r\n        if (this.numAttempts >= this.maxAttempts) {\r\n            return Promise.reject(new Error(`Exceeded maximum number of attempts: ${this.maxAttempts}`));\r\n        }\r\n        if (this.isInBackoff) {\r\n            return Promise.reject(new Error('A backoff operation is already in progress'));\r\n        }\r\n        const backoffDelayWithJitterMs = this.withJitterMs(this.currentDelayMs);\r\n        if (backoffDelayWithJitterMs > 0) {\r\n            logDebug('ExponentialBackoff.backoff', `Backing off for ${backoffDelayWithJitterMs}ms`);\r\n        }\r\n        // Calculate the next delay.\r\n        this.currentDelayMs *= this.backoffMultiplier;\r\n        this.currentDelayMs = Math.max(this.currentDelayMs, this.initialDelayMs);\r\n        this.currentDelayMs = Math.min(this.currentDelayMs, this.maxDelayMs);\r\n        this.numAttempts += 1;\r\n        return new Promise(resolve => {\r\n            this.isInBackoff = true;\r\n            setTimeout(() => {\r\n                this.isInBackoff = false;\r\n                resolve();\r\n            }, backoffDelayWithJitterMs);\r\n        });\r\n    }\r\n    /**\r\n     * Applies +/- 50% jitter to the backoff delay, up to the max delay cap.\r\n     *\r\n     * @private\r\n     * @param delayMs\r\n     */\r\n    withJitterMs(delayMs) {\r\n        return Math.min(delayMs + (Math.random() - 0.5) * delayMs, this.maxDelayMs);\r\n    }\r\n}\n\n/**\r\n * A wrapper function to make http requests and retry if the request fails.\r\n *\r\n * @internal\r\n */\r\n// TODO: Wrap Axios error in AlchemyError.\r\nfunction requestHttpWithBackoff(config, apiType, restApiName, methodName, params, overrides) {\r\n    return __awaiter$1(this, void 0, void 0, function* () {\r\n        let lastError = undefined;\r\n        const backoff = new ExponentialBackoff(config.maxRetries);\r\n        for (let attempt = 0; attempt < config.maxRetries + 1; attempt++) {\r\n            try {\r\n                if (lastError !== undefined) {\r\n                    logInfo('requestHttp', `Retrying after error: ${lastError.message}`);\r\n                }\r\n                try {\r\n                    yield backoff.backoff();\r\n                }\r\n                catch (err) {\r\n                    // Backoff errors when the maximum number of attempts is reached. Break\r\n                    // out of the loop to preserve the last error.\r\n                    break;\r\n                }\r\n                const response = yield sendAxiosRequest(config._getRequestUrl(apiType), restApiName, methodName, params, Object.assign(Object.assign({}, overrides), { timeout: config.requestTimeout }));\r\n                if (response.status === 200) {\r\n                    logDebug(restApiName, `Successful request: ${restApiName}`);\r\n                    return response.data;\r\n                }\r\n                else {\r\n                    logInfo(restApiName, `Request failed: ${restApiName}, ${response.status}, ${response.data}`);\r\n                    lastError = new Error(response.status + ': ' + response.data);\r\n                }\r\n            }\r\n            catch (err) {\r\n                if (!axios.isAxiosError(err) || err.response === undefined) {\r\n                    throw err;\r\n                }\r\n                // TODO: Standardize all errors into AlchemyError\r\n                lastError = new Error(err.response.status + ': ' + err.response.data);\r\n                if (!isRetryableHttpError(err, apiType)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return Promise.reject(lastError);\r\n    });\r\n}\r\nfunction isRetryableHttpError(err, apiType) {\r\n    // TODO: remove 500s after webhooks are more stable.\r\n    const retryableCodes = apiType === AlchemyApiType.WEBHOOK ? [429, 500] : [429];\r\n    return (err.response !== undefined && retryableCodes.includes(err.response.status));\r\n}\r\n/**\r\n * Fetches all pages in a paginated endpoint, given a `pageKey` field that\r\n * represents the property name containing the next page token.\r\n *\r\n * @internal\r\n */\r\nfunction paginateEndpoint(config, apiType, restApiName, methodName, reqPageKey, resPageKey, params) {\r\n    return __asyncGenerator(this, arguments, function* paginateEndpoint_1() {\r\n        let hasNext = true;\r\n        const requestParams = Object.assign({}, params);\r\n        while (hasNext) {\r\n            const response = yield __await(requestHttpWithBackoff(config, apiType, restApiName, methodName, requestParams));\r\n            yield yield __await(response);\r\n            if (response[resPageKey] !== undefined) {\r\n                requestParams[reqPageKey] = response[resPageKey];\r\n            }\r\n            else {\r\n                hasNext = false;\r\n            }\r\n        }\r\n    });\r\n}\n\n/**\r\n * This file contains the underlying implementations for exposed API surface in\r\n * the {@link NftNamespace}. By moving the methods out into a separate file,\r\n * other namespaces can access these methods without depending on the entire\r\n * NftNamespace.\r\n */\r\n/**\r\n * Get the NFT metadata for the provided contract address.\r\n */\r\nfunction getNftMetadata(config, contractAddress, tokenId, options, srcMethod = 'getNftMetadata') {\r\n    return __awaiter$1(this, void 0, void 0, function* () {\r\n        const response = yield requestHttpWithBackoff(config, AlchemyApiType.NFT, 'getNFTMetadata', srcMethod, {\r\n            contractAddress,\r\n            tokenId: BigNumber.from(tokenId).toString(),\r\n            tokenType: sanitizeTokenType(options === null || options === void 0 ? void 0 : options.tokenType),\r\n            tokenUriTimeoutInMs: options === null || options === void 0 ? void 0 : options.tokenUriTimeoutInMs,\r\n            refreshCache: options === null || options === void 0 ? void 0 : options.refreshCache\r\n        });\r\n        return getNftFromRaw(response);\r\n    });\r\n}\r\nfunction getNftMetadataBatch(config, tokens, options) {\r\n    return __awaiter$1(this, void 0, void 0, function* () {\r\n        const data = {\r\n            tokens,\r\n            tokenUriTimeoutInMs: options === null || options === void 0 ? void 0 : options.tokenUriTimeoutInMs,\r\n            refreshCache: options === null || options === void 0 ? void 0 : options.refreshCache\r\n        };\r\n        const response = yield requestHttpWithBackoff(config, AlchemyApiType.NFT, 'getNFTMetadataBatch', 'getNftMetadataBatch', {}, {\r\n            method: 'POST',\r\n            data\r\n        });\r\n        return response.map(getNftFromRaw);\r\n    });\r\n}\r\nfunction getContractMetadata(config, contractAddress, srcMethod = 'getContractMetadata') {\r\n    return __awaiter$1(this, void 0, void 0, function* () {\r\n        const response = yield requestHttpWithBackoff(config, AlchemyApiType.NFT, 'getContractMetadata', srcMethod, {\r\n            contractAddress\r\n        });\r\n        return getNftContractFromRaw(response);\r\n    });\r\n}\r\nfunction getContractMetadataBatch(config, contractAddresses) {\r\n    return __awaiter$1(this, void 0, void 0, function* () {\r\n        const response = yield requestHttpWithBackoff(config, AlchemyApiType.NFT, 'getContractMetadataBatch', 'getContractMetadataBatch', {}, {\r\n            method: 'POST',\r\n            data: { contractAddresses }\r\n        });\r\n        return response.map(getNftContractFromRaw);\r\n    });\r\n}\r\nfunction getNftsForOwnerIterator(config, owner, options, srcMethod = 'getNftsForOwnerIterator') {\r\n    return __asyncGenerator(this, arguments, function* getNftsForOwnerIterator_1() {\r\n        var e_1, _a;\r\n        const withMetadata = omitMetadataToWithMetadata(options === null || options === void 0 ? void 0 : options.omitMetadata);\r\n        try {\r\n            for (var _b = __asyncValues(paginateEndpoint(config, AlchemyApiType.NFT, 'getNFTs', srcMethod, 'pageKey', 'pageKey', {\r\n                contractAddresses: options === null || options === void 0 ? void 0 : options.contractAddresses,\r\n                pageKey: options === null || options === void 0 ? void 0 : options.pageKey,\r\n                filters: options === null || options === void 0 ? void 0 : options.excludeFilters,\r\n                owner,\r\n                withMetadata\r\n            })), _c; _c = yield __await(_b.next()), !_c.done;) {\r\n                const response = _c.value;\r\n                for (const ownedNft of response.ownedNfts) {\r\n                    yield yield __await(Object.assign(Object.assign({}, nftFromGetNftResponse(ownedNft)), { balance: parseInt(ownedNft.balance) }));\r\n                }\r\n            }\r\n        }\r\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n        finally {\r\n            try {\r\n                if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));\r\n            }\r\n            finally { if (e_1) throw e_1.error; }\r\n        }\r\n    });\r\n}\r\nfunction getNftsForOwner(config, owner, options, srcMethod = 'getNftsForOwner') {\r\n    return __awaiter$1(this, void 0, void 0, function* () {\r\n        const withMetadata = omitMetadataToWithMetadata(options === null || options === void 0 ? void 0 : options.omitMetadata);\r\n        const response = yield requestHttpWithBackoff(config, AlchemyApiType.NFT, 'getNFTs', srcMethod, {\r\n            contractAddresses: options === null || options === void 0 ? void 0 : options.contractAddresses,\r\n            pageKey: options === null || options === void 0 ? void 0 : options.pageKey,\r\n            filters: options === null || options === void 0 ? void 0 : options.excludeFilters,\r\n            excludeFilters: options === null || options === void 0 ? void 0 : options.excludeFilters,\r\n            includeFilters: options === null || options === void 0 ? void 0 : options.includeFilters,\r\n            owner,\r\n            pageSize: options === null || options === void 0 ? void 0 : options.pageSize,\r\n            withMetadata,\r\n            tokenUriTimeoutInMs: options === null || options === void 0 ? void 0 : options.tokenUriTimeoutInMs,\r\n            orderBy: options === null || options === void 0 ? void 0 : options.orderBy\r\n        });\r\n        return {\r\n            ownedNfts: response.ownedNfts.map(res => (Object.assign(Object.assign({}, nftFromGetNftResponse(res)), { balance: parseInt(res.balance) }))),\r\n            pageKey: response.pageKey,\r\n            totalCount: response.totalCount,\r\n            blockHash: response.blockHash\r\n        };\r\n    });\r\n}\r\nfunction getNftsForContract(config, contractAddress, options, srcMethod = 'getNftsForContract') {\r\n    var _a;\r\n    return __awaiter$1(this, void 0, void 0, function* () {\r\n        const withMetadata = omitMetadataToWithMetadata(options === null || options === void 0 ? void 0 : options.omitMetadata);\r\n        const response = yield requestHttpWithBackoff(config, AlchemyApiType.NFT, 'getNFTsForCollection', srcMethod, {\r\n            contractAddress,\r\n            startToken: options === null || options === void 0 ? void 0 : options.pageKey,\r\n            withMetadata,\r\n            limit: (_a = options === null || options === void 0 ? void 0 : options.pageSize) !== null && _a !== void 0 ? _a : undefined,\r\n            tokenUriTimeoutInMs: options === null || options === void 0 ? void 0 : options.tokenUriTimeoutInMs\r\n        });\r\n        return {\r\n            nfts: response.nfts.map(res => nftFromGetNftContractResponse(res, contractAddress)),\r\n            pageKey: response.nextToken\r\n        };\r\n    });\r\n}\r\nfunction getNftsForContractIterator(config, contractAddress, options, srcMethod = 'getNftsForContractIterator') {\r\n    return __asyncGenerator(this, arguments, function* getNftsForContractIterator_1() {\r\n        var e_2, _a;\r\n        const withMetadata = omitMetadataToWithMetadata(options === null || options === void 0 ? void 0 : options.omitMetadata);\r\n        try {\r\n            for (var _b = __asyncValues(paginateEndpoint(config, AlchemyApiType.NFT, 'getNFTsForCollection', srcMethod, 'startToken', 'nextToken', {\r\n                contractAddress,\r\n                startToken: options === null || options === void 0 ? void 0 : options.pageKey,\r\n                withMetadata\r\n            })), _c; _c = yield __await(_b.next()), !_c.done;) {\r\n                const response = _c.value;\r\n                for (const nft of response.nfts) {\r\n                    yield yield __await(nftFromGetNftContractResponse(nft, contractAddress));\r\n                }\r\n            }\r\n        }\r\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\r\n        finally {\r\n            try {\r\n                if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));\r\n            }\r\n            finally { if (e_2) throw e_2.error; }\r\n        }\r\n    });\r\n}\r\nfunction getOwnersForContract(config, contractAddress, options, srcMethod = 'getOwnersForContract') {\r\n    return __awaiter$1(this, void 0, void 0, function* () {\r\n        // Cast to `any` to avoid more type wrangling.\r\n        const response = yield requestHttpWithBackoff(config, AlchemyApiType.NFT, 'getOwnersForCollection', srcMethod, Object.assign(Object.assign({}, options), { contractAddress }));\r\n        return Object.assign({ owners: response.ownerAddresses }, (response.pageKey !== undefined && { pageKey: response.pageKey }));\r\n    });\r\n}\r\nfunction getContractsForOwner(config, owner, options, srcMethod = 'getContractsForOwner') {\r\n    return __awaiter$1(this, void 0, void 0, function* () {\r\n        const response = yield requestHttpWithBackoff(config, AlchemyApiType.NFT, 'getContractsForOwner', srcMethod, {\r\n            owner,\r\n            excludeFilters: options === null || options === void 0 ? void 0 : options.excludeFilters,\r\n            includeFilters: options === null || options === void 0 ? void 0 : options.includeFilters,\r\n            pageKey: options === null || options === void 0 ? void 0 : options.pageKey,\r\n            pageSize: options === null || options === void 0 ? void 0 : options.pageSize,\r\n            orderBy: options === null || options === void 0 ? void 0 : options.orderBy\r\n        });\r\n        return getContractsForOwnerFromRaw(response);\r\n    });\r\n}\r\nfunction getOwnersForNft(config, contractAddress, tokenId, options, srcMethod = 'getOwnersForNft') {\r\n    return __awaiter$1(this, void 0, void 0, function* () {\r\n        return requestHttpWithBackoff(config, AlchemyApiType.NFT, 'getOwnersForToken', srcMethod, Object.assign({ contractAddress, tokenId: BigNumber.from(tokenId).toString() }, options));\r\n    });\r\n}\r\nfunction getMintedNfts(config, owner, options) {\r\n    return __awaiter$1(this, void 0, void 0, function* () {\r\n        const provider = yield config.getProvider();\r\n        const ownerAddress = yield provider._getAddress(owner);\r\n        const category = nftTokenTypeToCategory(options === null || options === void 0 ? void 0 : options.tokenType);\r\n        const params = {\r\n            fromBlock: '0x0',\r\n            fromAddress: ETH_NULL_ADDRESS,\r\n            toAddress: ownerAddress,\r\n            excludeZeroValue: true,\r\n            contractAddresses: options === null || options === void 0 ? void 0 : options.contractAddresses,\r\n            category,\r\n            maxCount: 100,\r\n            pageKey: options === null || options === void 0 ? void 0 : options.pageKey\r\n        };\r\n        const response = yield getAssetTransfers(config, params, 'getMintedNfts');\r\n        return getNftsForTransfers(config, response);\r\n    });\r\n}\r\nfunction getTransfersForOwner(config, owner, transferType, options) {\r\n    return __awaiter$1(this, void 0, void 0, function* () {\r\n        const provider = yield config.getProvider();\r\n        const ownerAddress = yield provider._getAddress(owner);\r\n        const category = nftTokenTypeToCategory(options === null || options === void 0 ? void 0 : options.tokenType);\r\n        const params = {\r\n            fromBlock: '0x0',\r\n            excludeZeroValue: true,\r\n            contractAddresses: options === null || options === void 0 ? void 0 : options.contractAddresses,\r\n            category,\r\n            maxCount: 100,\r\n            pageKey: options === null || options === void 0 ? void 0 : options.pageKey\r\n        };\r\n        if (transferType === GetTransfersForOwnerTransferType.TO) {\r\n            params.toAddress = ownerAddress;\r\n        }\r\n        else {\r\n            params.fromAddress = ownerAddress;\r\n        }\r\n        const transfersResponse = yield getAssetTransfers(config, params, 'getTransfersForOwner');\r\n        return getNftsForTransfers(config, transfersResponse);\r\n    });\r\n}\r\nfunction getTransfersForContract(config, contract, options) {\r\n    return __awaiter$1(this, void 0, void 0, function* () {\r\n        const category = [\r\n            AssetTransfersCategory.ERC721,\r\n            AssetTransfersCategory.ERC1155,\r\n            AssetTransfersCategory.SPECIALNFT\r\n        ];\r\n        const provider = yield config.getProvider();\r\n        const fromBlock = (options === null || options === void 0 ? void 0 : options.fromBlock)\r\n            ? provider.formatter.blockTag(yield provider._getBlockTag(options.fromBlock))\r\n            : '0x0';\r\n        const toBlock = (options === null || options === void 0 ? void 0 : options.toBlock)\r\n            ? provider.formatter.blockTag(yield provider._getBlockTag(options.toBlock))\r\n            : undefined;\r\n        const params = {\r\n            fromBlock,\r\n            toBlock,\r\n            excludeZeroValue: true,\r\n            contractAddresses: [contract],\r\n            order: options === null || options === void 0 ? void 0 : options.order,\r\n            category,\r\n            maxCount: 100,\r\n            pageKey: options === null || options === void 0 ? void 0 : options.pageKey\r\n        };\r\n        const transfersResponse = yield getAssetTransfers(config, params, 'getTransfersForContract');\r\n        return getNftsForTransfers(config, transfersResponse);\r\n    });\r\n}\r\nfunction nftTokenTypeToCategory(tokenType) {\r\n    switch (tokenType) {\r\n        case NftTokenType.ERC721:\r\n            return [AssetTransfersCategory.ERC721];\r\n        case NftTokenType.ERC1155:\r\n            return [AssetTransfersCategory.ERC1155];\r\n        default:\r\n            return [\r\n                AssetTransfersCategory.ERC721,\r\n                AssetTransfersCategory.ERC1155,\r\n                AssetTransfersCategory.SPECIALNFT\r\n            ];\r\n    }\r\n}\r\nfunction parse1155Transfer(transfer) {\r\n    return transfer.erc1155Metadata.map(metadata => ({\r\n        contractAddress: transfer.rawContract.address,\r\n        tokenId: metadata.tokenId,\r\n        tokenType: NftTokenType.ERC1155\r\n    }));\r\n}\r\nfunction checkNftOwnership(config, owner, contractAddresses, srcMethod = 'checkNftOwnership') {\r\n    return __awaiter$1(this, void 0, void 0, function* () {\r\n        if (contractAddresses.length === 0) {\r\n            throw new Error('Must provide at least one contract address');\r\n        }\r\n        const response = yield getNftsForOwner(config, owner, {\r\n            contractAddresses,\r\n            omitMetadata: true\r\n        }, srcMethod);\r\n        return response.ownedNfts.length > 0;\r\n    });\r\n}\r\nfunction verifyNftOwnership(config, owner, contractAddresses, srcMethod = 'verifyNftOwnership') {\r\n    return __awaiter$1(this, void 0, void 0, function* () {\r\n        if (typeof contractAddresses === 'string') {\r\n            const response = yield getNftsForOwner(config, owner, {\r\n                contractAddresses: [contractAddresses],\r\n                omitMetadata: true\r\n            }, srcMethod);\r\n            return response.ownedNfts.length > 0;\r\n        }\r\n        else {\r\n            if (contractAddresses.length === 0) {\r\n                throw new Error('Must provide at least one contract address');\r\n            }\r\n            const response = yield getNftsForOwner(config, owner, {\r\n                contractAddresses,\r\n                omitMetadata: true\r\n            }, srcMethod);\r\n            // Create map where all input contract addresses are set to false, then flip\r\n            // owned nfts to true.\r\n            const result = contractAddresses.reduce((acc, curr) => {\r\n                acc[curr] = false;\r\n                return acc;\r\n            }, {});\r\n            for (const nft of response.ownedNfts) {\r\n                result[nft.contract.address] = true;\r\n            }\r\n            return result;\r\n        }\r\n    });\r\n}\r\nfunction isSpamContract(config, contractAddress, srcMethod = 'isSpamContract') {\r\n    return __awaiter$1(this, void 0, void 0, function* () {\r\n        return requestHttpWithBackoff(config, AlchemyApiType.NFT, 'isSpamContract', srcMethod, {\r\n            contractAddress\r\n        });\r\n    });\r\n}\r\nfunction getSpamContracts(config, srcMethod = 'getSpamContracts') {\r\n    return __awaiter$1(this, void 0, void 0, function* () {\r\n        return requestHttpWithBackoff(config, AlchemyApiType.NFT, 'getSpamContracts', srcMethod, undefined);\r\n    });\r\n}\r\nfunction getFloorPrice(config, contractAddress, srcMethod = 'getFloorPrice') {\r\n    return __awaiter$1(this, void 0, void 0, function* () {\r\n        return requestHttpWithBackoff(config, AlchemyApiType.NFT, 'getFloorPrice', srcMethod, {\r\n            contractAddress\r\n        });\r\n    });\r\n}\r\nfunction getNftSales(config, options = {}, srcMethod = 'getNftSales') {\r\n    return __awaiter$1(this, void 0, void 0, function* () {\r\n        // Avoid ts compiler complaining about the contractAddress field.\r\n        const params = Object.assign({}, options);\r\n        const response = yield requestHttpWithBackoff(config, AlchemyApiType.NFT, 'getNFTSales', srcMethod, {\r\n            fromBlock: params === null || params === void 0 ? void 0 : params.fromBlock,\r\n            toBlock: params === null || params === void 0 ? void 0 : params.toBlock,\r\n            order: params === null || params === void 0 ? void 0 : params.order,\r\n            marketplace: params === null || params === void 0 ? void 0 : params.marketplace,\r\n            contractAddress: params === null || params === void 0 ? void 0 : params.contractAddress,\r\n            tokenId: (params === null || params === void 0 ? void 0 : params.tokenId)\r\n                ? BigNumber.from(params === null || params === void 0 ? void 0 : params.tokenId).toString()\r\n                : undefined,\r\n            sellerAddress: params === null || params === void 0 ? void 0 : params.sellerAddress,\r\n            buyerAddress: params === null || params === void 0 ? void 0 : params.buyerAddress,\r\n            taker: params === null || params === void 0 ? void 0 : params.taker,\r\n            limit: params === null || params === void 0 ? void 0 : params.limit,\r\n            pageKey: params === null || params === void 0 ? void 0 : params.pageKey\r\n        });\r\n        return getNftSalesFromRaw(response);\r\n    });\r\n}\r\nfunction computeRarity(config, contractAddress, tokenId, srcMethod = 'computeRarity') {\r\n    return __awaiter$1(this, void 0, void 0, function* () {\r\n        const response = yield requestHttpWithBackoff(config, AlchemyApiType.NFT, 'computeRarity', srcMethod, {\r\n            contractAddress,\r\n            tokenId: BigNumber.from(tokenId).toString()\r\n        });\r\n        return getNftRarityFromRaw(response);\r\n    });\r\n}\r\nfunction searchContractMetadata(config, query, srcMethod = 'searchContractMetadata') {\r\n    return __awaiter$1(this, void 0, void 0, function* () {\r\n        const response = yield requestHttpWithBackoff(config, AlchemyApiType.NFT, 'searchContractMetadata', srcMethod, {\r\n            query\r\n        });\r\n        return response.map(getNftContractFromRaw);\r\n    });\r\n}\r\nfunction summarizeNftAttributes(config, contractAddress, srcMethod = 'summarizeNftAttributes') {\r\n    return __awaiter$1(this, void 0, void 0, function* () {\r\n        return requestHttpWithBackoff(config, AlchemyApiType.NFT, 'summarizeNftAttributes', srcMethod, {\r\n            contractAddress\r\n        });\r\n    });\r\n}\r\nfunction refreshNftMetadata(config, contractAddress, tokenId, srcMethod = 'refreshNftMetadata') {\r\n    return __awaiter$1(this, void 0, void 0, function* () {\r\n        const tokenIdString = BigNumber.from(tokenId).toString();\r\n        const first = yield getNftMetadata(config, contractAddress, tokenIdString, undefined, srcMethod);\r\n        const second = yield refresh(config, contractAddress, tokenIdString, srcMethod);\r\n        return first.timeLastUpdated !== second.timeLastUpdated;\r\n    });\r\n}\r\nfunction refreshContract(config, contractAddress, srcMethod = 'refreshContract') {\r\n    return __awaiter$1(this, void 0, void 0, function* () {\r\n        const response = yield requestHttpWithBackoff(config, AlchemyApiType.NFT, 'reingestContract', srcMethod, {\r\n            contractAddress\r\n        });\r\n        return {\r\n            contractAddress: response.contractAddress,\r\n            refreshState: parseReingestionState(response.reingestionState),\r\n            progress: response.progress\r\n        };\r\n    });\r\n}\r\nfunction refresh(config, contractAddress, tokenId, srcMethod) {\r\n    return __awaiter$1(this, void 0, void 0, function* () {\r\n        const response = yield requestHttpWithBackoff(config, AlchemyApiType.NFT, 'getNFTMetadata', srcMethod, {\r\n            contractAddress,\r\n            tokenId: BigNumber.from(tokenId).toString(),\r\n            refreshCache: true\r\n        });\r\n        return getNftFromRaw(response);\r\n    });\r\n}\r\n/**\r\n * Helper method to convert a NFT response received from Alchemy backend to an\r\n * SDK NFT type.\r\n *\r\n * @internal\r\n */\r\nfunction nftFromGetNftResponse(ownedNft) {\r\n    if (isNftWithMetadata(ownedNft)) {\r\n        return getNftFromRaw(ownedNft);\r\n    }\r\n    else {\r\n        return getBaseNftFromRaw(ownedNft);\r\n    }\r\n}\r\n/**\r\n * Helper method to convert a NFT response received from Alchemy backend to an\r\n * SDK NFT type.\r\n *\r\n * @internal\r\n */\r\nfunction nftFromGetNftContractResponse(ownedNft, contractAddress) {\r\n    if (isNftWithMetadata(ownedNft)) {\r\n        return getNftFromRaw(ownedNft);\r\n    }\r\n    else {\r\n        return getBaseNftFromRaw(ownedNft, contractAddress);\r\n    }\r\n}\r\n/** @internal */\r\n// TODO: more comprehensive type check\r\nfunction isNftWithMetadata(response) {\r\n    return response.title !== undefined;\r\n}\r\n/**\r\n * Given an AssetTransfersResponse, fetches the NFTs associated with the\r\n * transfers and collates them with transfer metadata.\r\n *\r\n * VISIBLE FOR TESTING\r\n */\r\nfunction getNftsForTransfers(config, response) {\r\n    return __awaiter$1(this, void 0, void 0, function* () {\r\n        const metadataTransfers = response.transfers\r\n            .filter(transfer => transfer.rawContract.address !== null)\r\n            // Use flatMap to flatten 1155 transfers that contain multiple NFTs.\r\n            .flatMap(transfer => {\r\n            var _a;\r\n            const tokens = getTokensFromTransfer(transfer);\r\n            const metadata = {\r\n                from: transfer.from,\r\n                to: (_a = transfer.to) !== null && _a !== void 0 ? _a : undefined,\r\n                transactionHash: transfer.hash,\r\n                blockNumber: transfer.blockNum\r\n            };\r\n            return tokens.map(token => ({ metadata, token }));\r\n        });\r\n        if (metadataTransfers.length === 0) {\r\n            return { nfts: [] };\r\n        }\r\n        // If we have more than 100 elements after unrolling 1155 transfers, split\r\n        // transfers into batches of 100 to stay under endpoint batch size limit.\r\n        const batchSize = 100;\r\n        const requestBatches = [];\r\n        for (let i = 0; i < metadataTransfers.length; i += batchSize) {\r\n            requestBatches.push(metadataTransfers.slice(i, i + batchSize));\r\n        }\r\n        const responseBatches = yield Promise.all(requestBatches.map(batch => getNftMetadataBatch(config, batch.map(transfer => transfer.token))));\r\n        const nfts = responseBatches.flat();\r\n        // The same NFT can be transferred multiple times in the same transfers response.\r\n        // We want to return one NFT for each transfer, so we create a mapping for\r\n        // each NFT to pair with the transfer metadata.\r\n        const nftsByTokenId = new Map();\r\n        nfts.forEach(nft => {\r\n            const key = `${nft.contract.address}-${BigNumber.from(nft.tokenId).toString()}`;\r\n            nftsByTokenId.set(key, nft);\r\n        });\r\n        const transferredNfts = metadataTransfers.map(t => {\r\n            const key = `${t.token.contractAddress}-${BigNumber.from(t.token.tokenId).toString()}`;\r\n            return Object.assign(Object.assign({}, nftsByTokenId.get(key)), t.metadata);\r\n        });\r\n        return {\r\n            nfts: transferredNfts,\r\n            pageKey: response.pageKey\r\n        };\r\n    });\r\n}\r\n/**\r\n * Returns the underlying NFT tokens from a transfer as the params for a\r\n * `getNftMetadataBatch` call. Handles the 1155 case where multiple NFTs can be\r\n * transferred in a single transaction.\r\n */\r\nfunction getTokensFromTransfer(transfer) {\r\n    // ERC1155 NFTs can contain multiple tokens in a single transfer, which\r\n    // requires special logic.\r\n    if (transfer.category === AssetTransfersCategory.ERC1155) {\r\n        return parse1155Transfer(transfer);\r\n    }\r\n    else {\r\n        return [\r\n            {\r\n                contractAddress: transfer.rawContract.address,\r\n                tokenId: transfer.tokenId,\r\n                tokenType: transfer.category === AssetTransfersCategory.ERC721\r\n                    ? NftTokenType.ERC721\r\n                    : undefined\r\n            }\r\n        ];\r\n    }\r\n}\r\n/**\r\n * Flips the `omitMetadata` SDK parameter type to the `withMetadata` parameter\r\n * required by the Alchemy API. If `omitMetadata` is undefined, the SDK defaults\r\n * to including metadata.\r\n *\r\n * @internal\r\n */\r\nfunction omitMetadataToWithMetadata(omitMetadata) {\r\n    return omitMetadata === undefined ? true : !omitMetadata;\r\n}\r\nfunction parseReingestionState(reingestionState) {\r\n    switch (reingestionState) {\r\n        case 'does_not_exist':\r\n            return RefreshState.DOES_NOT_EXIST;\r\n        case 'already_queued':\r\n            return RefreshState.ALREADY_QUEUED;\r\n        case 'in_progress':\r\n            return RefreshState.IN_PROGRESS;\r\n        case 'finished':\r\n            return RefreshState.FINISHED;\r\n        case 'queued':\r\n            return RefreshState.QUEUED;\r\n        case 'queue_failed':\r\n            return RefreshState.QUEUE_FAILED;\r\n        default:\r\n            throw new Error('Unknown reingestion state: ' + reingestionState);\r\n    }\r\n}\n\n/**\r\n * The NFT namespace contains all the functionality related to NFTs.\r\n *\r\n * Do not call this constructor directly. Instead, instantiate an Alchemy object\r\n * with `const alchemy = new Alchemy(config)` and then access the core namespace\r\n * via `alchemy.nft`.\r\n */\r\nclass NftNamespace {\r\n    /** @internal */\r\n    constructor(config) {\r\n        this.config = config;\r\n    }\r\n    getNftMetadata(contractAddress, tokenId, optionsOrTokenType, tokenUriTimeoutInMs) {\r\n        let options;\r\n        if (typeof optionsOrTokenType === 'object') {\r\n            options = {\r\n                tokenType: optionsOrTokenType.tokenType,\r\n                tokenUriTimeoutInMs: optionsOrTokenType.tokenUriTimeoutInMs,\r\n                refreshCache: optionsOrTokenType.refreshCache\r\n            };\r\n        }\r\n        else {\r\n            options = {\r\n                tokenType: optionsOrTokenType,\r\n                tokenUriTimeoutInMs\r\n            };\r\n        }\r\n        return getNftMetadata(this.config, contractAddress, tokenId, options);\r\n    }\r\n    /**\r\n     * Gets the NFT metadata for multiple NFT tokens.\r\n     *\r\n     * @param tokens An array of NFT tokens to fetch metadata for.\r\n     * @param options Configuration options for making the request.\r\n     */\r\n    getNftMetadataBatch(tokens, options) {\r\n        return getNftMetadataBatch(this.config, tokens, options);\r\n    }\r\n    /**\r\n     * Get the NFT contract metadata associated with the provided parameters.\r\n     *\r\n     * @param contractAddress - The contract address of the NFT.\r\n     * @public\r\n     */\r\n    getContractMetadata(contractAddress) {\r\n        return getContractMetadata(this.config, contractAddress);\r\n    }\r\n    /**\r\n     * Get the NFT contract metadata for multiple NFT contracts in a single request.\r\n     *\r\n     * @param contractAddresses - An array of contract addresses to fetch metadata for.\r\n     */\r\n    getContractMetadataBatch(contractAddresses) {\r\n        return getContractMetadataBatch(this.config, contractAddresses);\r\n    }\r\n    getNftsForOwnerIterator(owner, options) {\r\n        return getNftsForOwnerIterator(this.config, owner, options);\r\n    }\r\n    getNftsForOwner(owner, options) {\r\n        return getNftsForOwner(this.config, owner, options);\r\n    }\r\n    getNftsForContract(contractAddress, options) {\r\n        return getNftsForContract(this.config, contractAddress, options);\r\n    }\r\n    getNftsForContractIterator(contractAddress, options) {\r\n        return getNftsForContractIterator(this.config, contractAddress, options);\r\n    }\r\n    getOwnersForContract(contractAddress, options) {\r\n        return getOwnersForContract(this.config, contractAddress, options);\r\n    }\r\n    /**\r\n     * Gets all the owners for a given NFT contract address and token ID.\r\n     *\r\n     * @param contractAddress - The NFT contract address.\r\n     * @param tokenId - Token id of the NFT.\r\n     * @param options - Optional parameters to use for the request.\r\n     * @beta\r\n     */\r\n    getOwnersForNft(contractAddress, tokenId, options) {\r\n        return getOwnersForNft(this.config, contractAddress, tokenId, options);\r\n    }\r\n    /**\r\n     * Gets all NFT contracts held by the specified owner address.\r\n     *\r\n     * @param owner - Address for NFT owner (can be in ENS format!).\r\n     * @param options - The optional parameters to use for the request.\r\n     * @public\r\n     */\r\n    getContractsForOwner(owner, options) {\r\n        return getContractsForOwner(this.config, owner, options);\r\n    }\r\n    /**\r\n     * Gets all NFT transfers for a given owner's address.\r\n     *\r\n     * @param owner The owner to get transfers for.\r\n     * @param category Whether to get transfers to or from the owner address.\r\n     * @param options Additional options for the request.\r\n     */\r\n    getTransfersForOwner(owner, category, options) {\r\n        return getTransfersForOwner(this.config, owner, category, options);\r\n    }\r\n    /**\r\n     * Gets all NFT transfers for a given NFT contract address.\r\n     *\r\n     * Defaults to all transfers for the contract. To get transfers for a specific\r\n     * block range, use {@link GetTransfersForContractOptions}.\r\n     *\r\n     * @param contract The NFT contract to get transfers for.\r\n     * @param options Additional options for the request.\r\n     */\r\n    getTransfersForContract(contract, options) {\r\n        return getTransfersForContract(this.config, contract, options);\r\n    }\r\n    /**\r\n     * Get all the NFTs minted by a specified owner address.\r\n     *\r\n     * @param owner - Address for the NFT owner (can be in ENS format).\r\n     * @param options - The optional parameters to use for the request.\r\n     */\r\n    getMintedNfts(owner, options) {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            return getMintedNfts(this.config, owner, options);\r\n        });\r\n    }\r\n    /**\r\n     * DEPRECATED - Checks that the provided owner address owns one of more of the\r\n     * provided NFTs.\r\n     *\r\n     * @deprecated - Use {@link verifyNftOwnership} instead. This method will be\r\n     *   removed in a future release.\r\n     * @param owner - The owner address to check.\r\n     * @param contractAddresses - An array of NFT contract addresses to check ownership for.\r\n     */\r\n    checkNftOwnership(owner, contractAddresses) {\r\n        return checkNftOwnership(this.config, owner, contractAddresses);\r\n    }\r\n    verifyNftOwnership(owner, contractAddress) {\r\n        return verifyNftOwnership(this.config, owner, contractAddress);\r\n    }\r\n    /**\r\n     * Returns whether a contract is marked as spam or not by Alchemy. For more\r\n     * information on how we classify spam, go to our NFT API FAQ at\r\n     * https://docs.alchemy.com/alchemy/enhanced-apis/nft-api/nft-api-faq#nft-spam-classification.\r\n     *\r\n     * @param contractAddress - The contract address to check.\r\n     * @beta\r\n     */\r\n    isSpamContract(contractAddress) {\r\n        return isSpamContract(this.config, contractAddress);\r\n    }\r\n    /**\r\n     * Returns a list of all spam contracts marked by Alchemy. For details on how\r\n     * Alchemy marks spam contracts, go to\r\n     * https://docs.alchemy.com/alchemy/enhanced-apis/nft-api/nft-api-faq#nft-spam-classification.\r\n     *\r\n     * @beta\r\n     */\r\n    getSpamContracts() {\r\n        return getSpamContracts(this.config);\r\n    }\r\n    /**\r\n     * Returns the floor prices of a NFT contract by marketplace.\r\n     *\r\n     * @param contractAddress - The contract address for the NFT collection.\r\n     * @beta\r\n     */\r\n    getFloorPrice(contractAddress) {\r\n        return getFloorPrice(this.config, contractAddress);\r\n    }\r\n    getNftSales(options) {\r\n        return getNftSales(this.config, options);\r\n    }\r\n    /**\r\n     * Get the rarity of each attribute of an NFT.\r\n     *\r\n     * @param contractAddress - Contract address for the NFT collection.\r\n     * @param tokenId - Token id of the NFT.\r\n     */\r\n    computeRarity(contractAddress, tokenId) {\r\n        return computeRarity(this.config, contractAddress, tokenId);\r\n    }\r\n    /**\r\n     * Search for a keyword across metadata of all ERC-721 and ERC-1155 smart contracts.\r\n     *\r\n     * @param query - The search string that you want to search for in contract metadata.\r\n     */\r\n    searchContractMetadata(query) {\r\n        return searchContractMetadata(this.config, query);\r\n    }\r\n    /**\r\n     * Get a summary of attribute prevalence for an NFT collection.\r\n     *\r\n     * @param contractAddress - Contract address for the NFT collection.\r\n     */\r\n    summarizeNftAttributes(contractAddress) {\r\n        return summarizeNftAttributes(this.config, contractAddress);\r\n    }\r\n    /**\r\n     * Refreshes the cached metadata for a provided NFT contract address and token\r\n     * id. Returns a boolean value indicating whether the metadata was refreshed.\r\n     *\r\n     * This method is useful when you want to refresh the metadata for a NFT that\r\n     * has been updated since the last time it was fetched. Note that the backend\r\n     * only allows one refresh per token every 15 minutes, globally for all users.\r\n     * The last refresh time for an NFT can be accessed on the\r\n     * {@link Nft.timeLastUpdated} field.\r\n     *\r\n     * To trigger a refresh for all NFTs in a contract, use {@link refreshContract} instead.\r\n     *\r\n     * @param contractAddress - The contract address of the NFT.\r\n     * @param tokenId - The token id of the NFT.\r\n     */\r\n    refreshNftMetadata(contractAddress, tokenId) {\r\n        return refreshNftMetadata(this.config, contractAddress, tokenId);\r\n    }\r\n    /**\r\n     * Triggers a metadata refresh all NFTs in the provided contract address. This\r\n     * method is useful after an NFT collection is revealed.\r\n     *\r\n     * Refreshes are queued on the Alchemy backend and may take time to fully\r\n     * process. To refresh the metadata for a specific token, use the\r\n     * {@link refreshNftMetadata} method instead.\r\n     *\r\n     * @param contractAddress - The contract address of the NFT collection.\r\n     * @beta\r\n     */\r\n    refreshContract(contractAddress) {\r\n        return refreshContract(this.config, contractAddress);\r\n    }\r\n}\n\n/**\r\n * The Notify namespace contains methods used for creating, reading, updating,\r\n * and deleting webhooks in the Notify API.\r\n *\r\n * To use the methods in the API, you must provide your team's auth token in the\r\n * {@link AlchemySettings.authToken} field when configuring\r\n * {@link AlchemySettings}. The auth token can be found in the Alchemy Dashboard\r\n * on the Notify tab.\r\n *\r\n * Note that not all networks are supported in the Notify API. Please consult\r\n * the documentation for which networks are supported.\r\n *\r\n * Do not call this constructor directly. Instead, instantiate an Alchemy object\r\n * with `const alchemy = new Alchemy(config)` and then access the notify\r\n * namespace via `alchemy.notify`.\r\n */\r\nclass NotifyNamespace {\r\n    /** @internal */\r\n    constructor(config) {\r\n        this.config = config;\r\n    }\r\n    /**\r\n     * Get all webhooks on your team.\r\n     *\r\n     * The team is determined by the `authToken` provided into the {@link AlchemySettings}\r\n     * object when creating a new {@link Alchemy} instance.\r\n     *\r\n     * This method returns a response object containing all the webhooks\r\n     */\r\n    getAllWebhooks() {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            this.verifyConfig();\r\n            const response = yield this.sendWebhookRequest('team-webhooks', 'getAllWebhooks', {});\r\n            return {\r\n                webhooks: parseRawWebhookResponse(response),\r\n                totalCount: response.data.length\r\n            };\r\n        });\r\n    }\r\n    getAddresses(webhookOrId, options) {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            this.verifyConfig();\r\n            const webhookId = typeof webhookOrId === 'string' ? webhookOrId : webhookOrId.id;\r\n            const response = yield this.sendWebhookRequest('webhook-addresses', 'getAddresses', {\r\n                webhook_id: webhookId,\r\n                limit: options === null || options === void 0 ? void 0 : options.limit,\r\n                after: options === null || options === void 0 ? void 0 : options.pageKey\r\n            });\r\n            return parseRawAddressActivityResponse(response);\r\n        });\r\n    }\r\n    getGraphqlQuery(webhookOrId) {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            this.verifyConfig();\r\n            const webhookId = typeof webhookOrId === 'string' ? webhookOrId : webhookOrId.id;\r\n            const response = yield this.sendWebhookRequest('dashboard-webhook-graphql-query', 'getGraphqlQuery', {\r\n                webhook_id: webhookId\r\n            });\r\n            return parseRawCustomGraphqlWebhookResponse(response);\r\n        });\r\n    }\r\n    getNftFilters(webhookOrId, options) {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            this.verifyConfig();\r\n            const webhookId = typeof webhookOrId === 'string' ? webhookOrId : webhookOrId.id;\r\n            const response = yield this.sendWebhookRequest('webhook-nft-filters', 'getNftFilters', {\r\n                webhook_id: webhookId,\r\n                limit: options === null || options === void 0 ? void 0 : options.limit,\r\n                after: options === null || options === void 0 ? void 0 : options.pageKey\r\n            });\r\n            return parseRawNftFiltersResponse(response);\r\n        });\r\n    }\r\n    updateWebhook(webhookOrId, update) {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            const webhookId = typeof webhookOrId === 'string' ? webhookOrId : webhookOrId.id;\r\n            let restApiName;\r\n            let methodName;\r\n            let method;\r\n            let data;\r\n            if ('isActive' in update) {\r\n                restApiName = 'update-webhook';\r\n                methodName = 'updateWebhook';\r\n                method = 'PUT';\r\n                data = {\r\n                    webhook_id: webhookId,\r\n                    is_active: update.isActive\r\n                };\r\n            }\r\n            else if ('addFilters' in update || 'removeFilters' in update) {\r\n                restApiName = 'update-webhook-nft-filters';\r\n                methodName = 'updateWebhookNftFilters';\r\n                method = 'PATCH';\r\n                data = {\r\n                    webhook_id: webhookId,\r\n                    nft_filters_to_add: update.addFilters\r\n                        ? update.addFilters.map(nftFilterToParam)\r\n                        : [],\r\n                    nft_filters_to_remove: update.removeFilters\r\n                        ? update.removeFilters.map(nftFilterToParam)\r\n                        : []\r\n                };\r\n            }\r\n            else if ('addMetadataFilters' in update ||\r\n                'removeMetadataFilters' in update) {\r\n                restApiName = 'update-webhook-nft-metadata-filters';\r\n                methodName = 'updateWebhookNftMetadataFilters';\r\n                method = 'PATCH';\r\n                data = {\r\n                    webhook_id: webhookId,\r\n                    nft_metadata_filters_to_add: update.addMetadataFilters\r\n                        ? update.addMetadataFilters.map(nftFilterToParam)\r\n                        : [],\r\n                    nft_metadata_filters_to_remove: update.removeMetadataFilters\r\n                        ? update.removeMetadataFilters.map(nftFilterToParam)\r\n                        : []\r\n                };\r\n            }\r\n            else if ('addAddresses' in update || 'removeAddresses' in update) {\r\n                restApiName = 'update-webhook-addresses';\r\n                methodName = 'webhook:updateWebhookAddresses';\r\n                method = 'PATCH';\r\n                data = {\r\n                    webhook_id: webhookId,\r\n                    addresses_to_add: yield this.resolveAddresses(update.addAddresses),\r\n                    addresses_to_remove: yield this.resolveAddresses(update.removeAddresses)\r\n                };\r\n            }\r\n            else if ('newAddresses' in update) {\r\n                restApiName = 'update-webhook-addresses';\r\n                methodName = 'webhook:updateWebhookAddress';\r\n                method = 'PUT';\r\n                data = {\r\n                    webhook_id: webhookId,\r\n                    addresses: yield this.resolveAddresses(update.newAddresses)\r\n                };\r\n            }\r\n            else {\r\n                throw new Error('Invalid `update` param passed into `updateWebhook`');\r\n            }\r\n            yield this.sendWebhookRequest(restApiName, methodName, {}, {\r\n                method,\r\n                data\r\n            });\r\n        });\r\n    }\r\n    createWebhook(url, type, params) {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            let appId;\r\n            if (type === WebhookType.MINED_TRANSACTION ||\r\n                type === WebhookType.DROPPED_TRANSACTION) {\r\n                if (!('appId' in params)) {\r\n                    throw new Error('Transaction Webhooks require an app id.');\r\n                }\r\n                appId = params.appId;\r\n            }\r\n            let network = NETWORK_TO_WEBHOOK_NETWORK.get(this.config.network);\r\n            let nftFilterObj;\r\n            let addresses;\r\n            let graphqlQuery;\r\n            if (type === WebhookType.NFT_ACTIVITY ||\r\n                type === WebhookType.NFT_METADATA_UPDATE) {\r\n                if (!('filters' in params) || params.filters.length === 0) {\r\n                    throw new Error('Nft Activity Webhooks require a non-empty array input.');\r\n                }\r\n                network = params.network\r\n                    ? NETWORK_TO_WEBHOOK_NETWORK.get(params.network)\r\n                    : network;\r\n                const filters = params.filters.map(filter => filter.tokenId\r\n                    ? {\r\n                        contract_address: filter.contractAddress,\r\n                        token_id: BigNumber.from(filter.tokenId).toString()\r\n                    }\r\n                    : {\r\n                        contract_address: filter.contractAddress\r\n                    });\r\n                nftFilterObj =\r\n                    type === WebhookType.NFT_ACTIVITY\r\n                        ? { nft_filters: filters }\r\n                        : { nft_metadata_filters: filters };\r\n            }\r\n            else if (type === WebhookType.ADDRESS_ACTIVITY) {\r\n                if (params === undefined ||\r\n                    !('addresses' in params) ||\r\n                    params.addresses.length === 0) {\r\n                    throw new Error('Address Activity Webhooks require a non-empty array input.');\r\n                }\r\n                network = params.network\r\n                    ? NETWORK_TO_WEBHOOK_NETWORK.get(params.network)\r\n                    : network;\r\n                addresses = yield this.resolveAddresses(params.addresses);\r\n            }\r\n            else if (type == WebhookType.GRAPHQL) {\r\n                if (params === undefined ||\r\n                    !('graphqlQuery' in params) ||\r\n                    params.graphqlQuery.length === 0) {\r\n                    throw new Error('Custom Webhooks require a non-empty graphql query.');\r\n                }\r\n                network = params.network\r\n                    ? NETWORK_TO_WEBHOOK_NETWORK.get(params.network)\r\n                    : network;\r\n                graphqlQuery = params.graphqlQuery;\r\n            }\r\n            const data = Object.assign(Object.assign(Object.assign(Object.assign({ network, webhook_type: type, webhook_url: url }, (appId && { app_id: appId })), nftFilterObj), (addresses && { addresses })), (graphqlQuery && { graphql_query: graphqlQuery }));\r\n            const response = yield this.sendWebhookRequest('create-webhook', 'createWebhook', {}, {\r\n                method: 'POST',\r\n                data\r\n            });\r\n            return parseRawWebhook(response.data);\r\n        });\r\n    }\r\n    deleteWebhook(webhookOrId) {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            this.verifyConfig();\r\n            const webhookId = typeof webhookOrId === 'string' ? webhookOrId : webhookOrId.id;\r\n            const response = yield this.sendWebhookRequest('delete-webhook', 'deleteWebhook', {\r\n                webhook_id: webhookId\r\n            }, {\r\n                method: 'DELETE'\r\n            });\r\n            if ('message' in response) {\r\n                throw new Error(`Webhook not found. Failed to delete webhook: ${webhookId}`);\r\n            }\r\n        });\r\n    }\r\n    verifyConfig() {\r\n        if (this.config.authToken === undefined) {\r\n            throw new Error('Using the Notify API requires setting the Alchemy Auth Token in ' +\r\n                'the settings object when initializing Alchemy.');\r\n        }\r\n    }\r\n    sendWebhookRequest(restApiName, methodName, params, overrides) {\r\n        return requestHttpWithBackoff(this.config, AlchemyApiType.WEBHOOK, restApiName, methodName, params, Object.assign(Object.assign({}, overrides), { headers: Object.assign({ 'X-Alchemy-Token': this.config.authToken }, overrides === null || overrides === void 0 ? void 0 : overrides.headers) }));\r\n    }\r\n    /** Resolves ENS addresses to the raw address.\r\n     * @internal */\r\n    resolveAddresses(addresses) {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            if (addresses === undefined) {\r\n                return [];\r\n            }\r\n            const resolvedAddresses = [];\r\n            const provider = yield this.config.getProvider();\r\n            for (const address of addresses) {\r\n                const rawAddress = yield provider.resolveName(address);\r\n                if (rawAddress === null) {\r\n                    throw new Error(`Unable to resolve the ENS address: ${address}`);\r\n                }\r\n                resolvedAddresses.push(rawAddress);\r\n            }\r\n            return resolvedAddresses;\r\n        });\r\n    }\r\n}\r\n/**\r\n * Mapping of webhook network representations to the SDK's network representation.\r\n *\r\n * @internal\r\n */\r\nconst WEBHOOK_NETWORK_TO_NETWORK = {\r\n    ETH_MAINNET: Network.ETH_MAINNET,\r\n    ETH_GOERLI: Network.ETH_GOERLI,\r\n    ETH_SEPOLIA: Network.ETH_SEPOLIA,\r\n    ETH_ROPSTEN: Network.ETH_ROPSTEN,\r\n    ETH_RINKEBY: Network.ETH_RINKEBY,\r\n    ETH_KOVAN: Network.ETH_KOVAN,\r\n    MATIC_MAINNET: Network.MATIC_MAINNET,\r\n    MATIC_MUMBAI: Network.MATIC_MUMBAI,\r\n    ARB_MAINNET: Network.ARB_MAINNET,\r\n    ARB_GOERLI: Network.ARB_GOERLI,\r\n    ARB_RINKEBY: Network.ARB_RINKEBY,\r\n    OPT_MAINNET: Network.OPT_MAINNET,\r\n    OPT_GOERLI: Network.OPT_GOERLI,\r\n    OPT_KOVAN: Network.OPT_KOVAN\r\n};\r\n/** Mapping of the SDK's network representation the webhook API's network representation. */\r\nconst NETWORK_TO_WEBHOOK_NETWORK = Object.keys(Network).reduce((map, key) => {\r\n    if (key in WEBHOOK_NETWORK_TO_NETWORK) {\r\n        map.set(WEBHOOK_NETWORK_TO_NETWORK[key], key);\r\n    }\r\n    return map;\r\n}, new Map());\r\nfunction parseRawWebhookResponse(response) {\r\n    return response.data.map(parseRawWebhook);\r\n}\r\nfunction parseRawWebhook(rawWebhook) {\r\n    return Object.assign({ id: rawWebhook.id, network: WEBHOOK_NETWORK_TO_NETWORK[rawWebhook.network], type: rawWebhook.webhook_type, url: rawWebhook.webhook_url, isActive: rawWebhook.is_active, timeCreated: new Date(rawWebhook.time_created).toISOString(), signingKey: rawWebhook.signing_key, version: rawWebhook.version }, (rawWebhook.app_id !== undefined && { appId: rawWebhook.app_id }));\r\n}\r\nfunction parseRawAddressActivityResponse(response) {\r\n    return {\r\n        addresses: response.data,\r\n        totalCount: response.pagination.total_count,\r\n        pageKey: response.pagination.cursors.after\r\n    };\r\n}\r\nfunction parseRawCustomGraphqlWebhookResponse(response) {\r\n    return {\r\n        graphqlQuery: response.data.graphql_query\r\n    };\r\n}\r\nfunction parseRawNftFiltersResponse(response) {\r\n    return {\r\n        filters: response.data.map(f => f.token_id\r\n            ? {\r\n                contractAddress: f.contract_address,\r\n                tokenId: BigNumber.from(f.token_id).toString()\r\n            }\r\n            : {\r\n                contractAddress: f.contract_address\r\n            }),\r\n        totalCount: response.pagination.total_count,\r\n        pageKey: response.pagination.cursors.after\r\n    };\r\n}\r\nfunction nftFilterToParam(filter) {\r\n    return filter.tokenId\r\n        ? {\r\n            contract_address: filter.contractAddress,\r\n            token_id: BigNumber.from(filter.tokenId).toString()\r\n        }\r\n        : {\r\n            contract_address: filter.contractAddress\r\n        };\r\n}\n\n/**\r\n * Multiples to increment fee per gas when using\r\n * {@link TransactNamespace.sendGasOptimizedTransaction}.\r\n *\r\n * @internal\r\n */\r\nconst GAS_OPTIMIZED_TX_FEE_MULTIPLES = [0.9, 1, 1.1, 1.2, 1.3];\r\n/**\r\n * The Transact namespace contains methods used for sending transactions and\r\n * checking on the state of submitted transactions.\r\n *\r\n * Do not call this constructor directly. Instead, instantiate an Alchemy object\r\n * with `const alchemy = new Alchemy(config)` and then access the transact\r\n * namespace via `alchemy.transact`.\r\n */\r\nclass TransactNamespace {\r\n    /** @internal */\r\n    constructor(config) {\r\n        this.config = config;\r\n    }\r\n    /**\r\n     * Used to send a single transaction to Flashbots. Flashbots will attempt to\r\n     * send the transaction to miners for the next 25 blocks.\r\n     *\r\n     * Returns the transaction hash of the submitted transaction.\r\n     *\r\n     * @param signedTransaction The raw, signed transaction as a hash.\r\n     * @param maxBlockNumber Optional highest block number in which the\r\n     *   transaction should be included.\r\n     * @param options Options to configure the request.\r\n     */\r\n    sendPrivateTransaction(signedTransaction, maxBlockNumber, options) {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            const provider = yield this.config.getProvider();\r\n            const hexBlockNumber = maxBlockNumber ? toHex(maxBlockNumber) : undefined;\r\n            return provider._send('eth_sendPrivateTransaction', [\r\n                {\r\n                    tx: signedTransaction,\r\n                    maxBlockNumber: hexBlockNumber,\r\n                    preferences: options\r\n                }\r\n            ], 'sendPrivateTransaction');\r\n        });\r\n    }\r\n    /**\r\n     * Stops the provided private transaction from being submitted for future\r\n     * blocks. A transaction can only be cancelled if the request is signed by the\r\n     * same key as the {@link sendPrivateTransaction} call submitting the\r\n     * transaction in first place.\r\n     *\r\n     * Please note that fast mode transactions cannot be cancelled using this method.\r\n     *\r\n     * Returns a boolean indicating whether the cancellation was successful.\r\n     *\r\n     * @param transactionHash Transaction hash of private tx to be cancelled\r\n     */\r\n    cancelPrivateTransaction(transactionHash) {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            const provider = yield this.config.getProvider();\r\n            return provider._send('eth_cancelPrivateTransaction', [\r\n                {\r\n                    txHash: transactionHash\r\n                }\r\n            ], 'cancelPrivateTransaction');\r\n        });\r\n    }\r\n    /**\r\n     * Simulates the asset changes resulting from a list of transactions simulated\r\n     * in sequence.\r\n     *\r\n     * Returns a list of asset changes for each transaction during simulation.\r\n     *\r\n     * @param transactions Transactions list of max 3 transactions to simulate.\r\n     * @param blockIdentifier Optional block identifier to simulate the\r\n     * transaction in.\r\n     */\r\n    simulateAssetChangesBundle(transactions, blockIdentifier) {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            const provider = yield this.config.getProvider();\r\n            const params = blockIdentifier !== undefined\r\n                ? [transactions, blockIdentifier]\r\n                : [transactions];\r\n            const res = yield provider._send('alchemy_simulateAssetChangesBundle', params, 'simulateAssetChangesBundle');\r\n            return nullsToUndefined(res);\r\n        });\r\n    }\r\n    /**\r\n     * Simulates the asset changes resulting from a single transaction.\r\n     *\r\n     * Returns list of asset changes that occurred during the transaction\r\n     * simulation. Note that this method does not run the transaction on the\r\n     * blockchain.\r\n     *\r\n     * @param transaction The transaction to simulate.\r\n     * @param blockIdentifier Optional block identifier to simulate the\r\n     * transaction in.\r\n     */\r\n    simulateAssetChanges(transaction, blockIdentifier) {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            const provider = yield this.config.getProvider();\r\n            const params = blockIdentifier !== undefined\r\n                ? [transaction, blockIdentifier]\r\n                : [transaction];\r\n            const res = yield provider._send('alchemy_simulateAssetChanges', params, 'simulateAssetChanges');\r\n            return nullsToUndefined(res);\r\n        });\r\n    }\r\n    /**\r\n     * Simulates a list of transactions in sequence and returns list of decoded\r\n     * traces and logs that occurred for each transaction during simulation.\r\n     *\r\n     * Note that this method does not run any transactions on the blockchain.\r\n     *\r\n     * @param transactions Transactions list of max 3 transactions to simulate.\r\n     * @param blockIdentifier Optional block identifier to simulate the\r\n     * transaction in.\r\n     */\r\n    simulateExecutionBundle(transactions, blockIdentifier) {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            const provider = yield this.config.getProvider();\r\n            const params = blockIdentifier !== undefined\r\n                ? [transactions, blockIdentifier]\r\n                : [transactions];\r\n            const res = provider._send('alchemy_simulateExecutionBundle', params, 'simulateExecutionBundle');\r\n            return nullsToUndefined(res);\r\n        });\r\n    }\r\n    /**\r\n     * Simulates a single transaction and the resulting and returns list of\r\n     * decoded traces and logs that occurred during the transaction simulation.\r\n     *\r\n     * Note that this method does not run the transaction on the blockchain.\r\n     *\r\n     * @param transaction The transaction to simulate.\r\n     * @param blockIdentifier Optional block identifier to simulate the\r\n     * transaction in.\r\n     */\r\n    simulateExecution(transaction, blockIdentifier) {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            const provider = yield this.config.getProvider();\r\n            const params = blockIdentifier !== undefined\r\n                ? [transaction, blockIdentifier]\r\n                : [transaction];\r\n            const res = provider._send('alchemy_simulateExecution', params, 'simulateExecution');\r\n            return nullsToUndefined(res);\r\n        });\r\n    }\r\n    /**\r\n     * Returns the transaction with hash or null if the transaction is unknown.\r\n     *\r\n     * If a transaction has not been mined, this method will search the\r\n     * transaction pool. Various backends may have more restrictive transaction\r\n     * pool access (e.g. if the gas price is too low or the transaction was only\r\n     * recently sent and not yet indexed) in which case this method may also return null.\r\n     *\r\n     * NOTE: This is an alias for {@link CoreNamespace.getTransaction}.\r\n     *\r\n     * @param transactionHash The hash of the transaction to get.\r\n     * @public\r\n     */\r\n    getTransaction(transactionHash) {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            const provider = yield this.config.getProvider();\r\n            return provider.getTransaction(transactionHash);\r\n        });\r\n    }\r\n    /**\r\n     * Submits transaction to the network to be mined. The transaction must be\r\n     * signed, and be valid (i.e. the nonce is correct and the account has\r\n     * sufficient balance to pay for the transaction).\r\n     *\r\n     * NOTE: This is an alias for {@link CoreNamespace.sendTransaction}.\r\n     *\r\n     * @param signedTransaction The signed transaction to send.\r\n     * @public\r\n     */\r\n    sendTransaction(signedTransaction) {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            const provider = yield this.config.getProvider();\r\n            return provider.sendTransaction(signedTransaction);\r\n        });\r\n    }\r\n    /**\r\n     * Returns an estimate of the amount of gas that would be required to submit\r\n     * transaction to the network.\r\n     *\r\n     * An estimate may not be accurate since there could be another transaction on\r\n     * the network that was not accounted for, but after being mined affects the\r\n     * relevant state.\r\n     *\r\n     * This is an alias for {@link CoreNamespace.estimateGas}.\r\n     *\r\n     * @param transaction The transaction to estimate gas for.\r\n     * @public\r\n     */\r\n    estimateGas(transaction) {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            const provider = yield this.config.getProvider();\r\n            return provider.estimateGas(transaction);\r\n        });\r\n    }\r\n    /**\r\n     * Returns a fee per gas (in wei) that is an estimate of how much you can pay\r\n     * as a priority fee, or \"tip\", to get a transaction included in the current block.\r\n     *\r\n     * This number is generally used to set the `maxPriorityFeePerGas` field in a\r\n     * transaction request.\r\n     *\r\n     * @public\r\n     */\r\n    getMaxPriorityFeePerGas() {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            const provider = yield this.config.getProvider();\r\n            const feeHex = yield provider._send('eth_maxPriorityFeePerGas', [], 'getMaxPriorityFeePerGas');\r\n            return fromHex(feeHex);\r\n        });\r\n    }\r\n    /**\r\n     * Returns a promise which will not resolve until specified transaction hash is mined.\r\n     *\r\n     * If {@link confirmations} is 0, this method is non-blocking and if the\r\n     * transaction has not been mined returns null. Otherwise, this method will\r\n     * block until the transaction has confirmed blocks mined on top of the block\r\n     * in which it was mined.\r\n     *\r\n     * NOTE: This is an alias for {@link CoreNamespace.waitForTransaction}.\r\n     *\r\n     * @param transactionHash The hash of the transaction to wait for.\r\n     * @param confirmations The number of blocks to wait for.\r\n     * @param timeout The maximum time to wait for the transaction to confirm.\r\n     * @public\r\n     */\r\n    waitForTransaction(transactionHash, confirmations, timeout) {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            const provider = yield this.config.getProvider();\r\n            return provider.waitForTransaction(transactionHash, confirmations, timeout);\r\n        });\r\n    }\r\n    sendGasOptimizedTransaction(transactionOrSignedTxs, wallet) {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            if (Array.isArray(transactionOrSignedTxs)) {\r\n                return this._sendGasOptimizedTransaction(transactionOrSignedTxs, 'sendGasOptimizedTransactionPreSigned');\r\n            }\r\n            let gasLimit;\r\n            let priorityFee;\r\n            let baseFee;\r\n            const provider = yield this.config.getProvider();\r\n            try {\r\n                gasLimit = yield this.estimateGas(transactionOrSignedTxs);\r\n                priorityFee = yield this.getMaxPriorityFeePerGas();\r\n                const currentBlock = yield provider.getBlock('latest');\r\n                baseFee = currentBlock.baseFeePerGas.toNumber();\r\n            }\r\n            catch (e) {\r\n                throw new Error(`Failed to estimate gas for transaction: ${e}`);\r\n            }\r\n            const gasSpreadTransactions = generateGasSpreadTransactions(transactionOrSignedTxs, gasLimit.toNumber(), baseFee, priorityFee);\r\n            const signedTransactions = yield Promise.all(gasSpreadTransactions.map(tx => wallet.signTransaction(tx)));\r\n            return this._sendGasOptimizedTransaction(signedTransactions, 'sendGasOptimizedTransactionGenerated');\r\n        });\r\n    }\r\n    /**\r\n     * Returns the state of the transaction job returned by the\r\n     * {@link sendGasOptimizedTransaction}.\r\n     *\r\n     * @param trackingId The tracking id from the response of the sent gas optimized transaction.\r\n     * @internal\r\n     */\r\n    // TODO(txjob): Remove internal tag once this feature is released.\r\n    getGasOptimizedTransactionStatus(trackingId) {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            const provider = yield this.config.getProvider();\r\n            return provider._send('alchemy_getGasOptimizedTransactionStatus', [trackingId], 'getGasOptimizedTransactionStatus');\r\n        });\r\n    }\r\n    /** @internal */\r\n    _sendGasOptimizedTransaction(signedTransactions, methodName) {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            const provider = yield this.config.getProvider();\r\n            return provider._send('alchemy_sendGasOptimizedTransaction', [\r\n                {\r\n                    rawTransactions: signedTransactions\r\n                }\r\n            ], methodName);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Helper method to generate the raw transaction with the given gas limit and\r\n * priority fee across a spread of different gas prices.\r\n *\r\n * @internal\r\n */\r\n// Visible for testing\r\nfunction generateGasSpreadTransactions(transaction, gasLimit, baseFee, priorityFee) {\r\n    return GAS_OPTIMIZED_TX_FEE_MULTIPLES.map(feeMultiplier => {\r\n        return Object.assign(Object.assign({}, transaction), { gasLimit, maxFeePerGas: Math.round(baseFee * feeMultiplier + priorityFee * feeMultiplier), maxPriorityFeePerGas: Math.round(feeMultiplier * priorityFee) });\r\n    });\r\n}\n\n/** This file contains internal types used by the SDK and are not exposed to the end user. */\r\n/**\r\n * Prefix for `alchemy_pendingTransactions` subscriptions when serializing to\r\n * ethers events.\r\n *\r\n * This tag is used internally by ethers to track different event filters.\r\n */\r\nconst ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE = 'alchemy-pending-transactions';\r\n/**\r\n * Prefix for `alchemy_minedTransactions` subscriptions when serializing to ethers events.\r\n *\r\n * This tag is used internally by ethers to track different event filters.\r\n */\r\nconst ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE = 'alchemy-mined-transactions';\r\n/**\r\n * Array containing all the custom event tags used internally by ethers to track\r\n * event filters.\r\n */\r\nconst ALCHEMY_EVENT_TYPES = [\r\n    ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE,\r\n    ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE\r\n];\n\n/**\r\n * DO NOT MODIFY.\r\n *\r\n * Event class copied directly over from ethers.js's `BaseProvider` class.\r\n *\r\n * This class is used to represent events and their corresponding listeners. The\r\n * SDK needs to extend this class in order to support Alchemy's custom\r\n * Subscription API types. The original class is not exported by ethers. Minimal\r\n * changes have been made in order to get TS to compile.\r\n */\r\nclass Event {\r\n    constructor(tag, listener, once) {\r\n        this.listener = listener;\r\n        this.tag = tag;\r\n        this.once = once;\r\n        this._lastBlockNumber = -2;\r\n        this._inflight = false;\r\n    }\r\n    get event() {\r\n        switch (this.type) {\r\n            case 'tx':\r\n                return this.hash;\r\n            case 'filter':\r\n                return this.filter;\r\n            default:\r\n                return this.tag;\r\n        }\r\n    }\r\n    get type() {\r\n        return this.tag.split(':')[0];\r\n    }\r\n    get hash() {\r\n        const comps = this.tag.split(':');\r\n        if (comps[0] !== 'tx') {\r\n            throw new Error('Not a transaction event');\r\n        }\r\n        return comps[1];\r\n    }\r\n    get filter() {\r\n        const comps = this.tag.split(':');\r\n        if (comps[0] !== 'filter') {\r\n            throw new Error('Not a transaction event');\r\n        }\r\n        const address = comps[1];\r\n        const topics = deserializeTopics(comps[2]);\r\n        const filter = {};\r\n        if (topics.length > 0) {\r\n            filter.topics = topics;\r\n        }\r\n        if (address && address !== '*') {\r\n            filter.address = address;\r\n        }\r\n        return filter;\r\n    }\r\n    pollable() {\r\n        const PollableEvents = ['block', 'network', 'pending', 'poll'];\r\n        return this.tag.indexOf(':') >= 0 || PollableEvents.indexOf(this.tag) >= 0;\r\n    }\r\n}\r\n/**\r\n * Wrapper class around the ethers `Event` class in order to add support for\r\n * Alchemy's custom subscriptions types.\r\n *\r\n * The serialization and deserialization mechanism requires the order of the\r\n * fields to be the same across different {@link ALCHEMY_EVENT_TYPES}. Before\r\n * using a getter on a new event filter, make sure that the position of the\r\n * field in serialization is correct.\r\n *\r\n * The getters on this class deserialize the event tag generated by\r\n * {@link getAlchemyEventTag} into the original fields passed into the event.\r\n */\r\nclass EthersEvent extends Event {\r\n    /**\r\n     * Converts the event tag into the original `fromAddress` field in\r\n     * {@link AlchemyPendingTransactionsEventFilter}.\r\n     */\r\n    get fromAddress() {\r\n        const comps = this.tag.split(':');\r\n        if (comps[0] !== ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE) {\r\n            return undefined;\r\n        }\r\n        if (comps[1] && comps[1] !== '*') {\r\n            return deserializeAddressField(comps[1]);\r\n        }\r\n        else {\r\n            return undefined;\r\n        }\r\n    }\r\n    /**\r\n     * Converts the event tag into the original `toAddress` field in\r\n     * {@link AlchemyPendingTransactionsEventFilter}.\r\n     */\r\n    get toAddress() {\r\n        const comps = this.tag.split(':');\r\n        if (comps[0] !== ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE) {\r\n            return undefined;\r\n        }\r\n        if (comps[2] && comps[2] !== '*') {\r\n            return deserializeAddressField(comps[2]);\r\n        }\r\n        else {\r\n            return undefined;\r\n        }\r\n    }\r\n    /**\r\n     * Converts the event tag into the original `hashesOnly` field in\r\n     * {@link AlchemyPendingTransactionsEventFilter} and {@link AlchemyMinedTransactionsEventFilter}.\r\n     */\r\n    get hashesOnly() {\r\n        const comps = this.tag.split(':');\r\n        if (!ALCHEMY_EVENT_TYPES.includes(comps[0])) {\r\n            return undefined;\r\n        }\r\n        if (comps[3] && comps[3] !== '*') {\r\n            return comps[3] === 'true';\r\n        }\r\n        else {\r\n            return undefined;\r\n        }\r\n    }\r\n    get includeRemoved() {\r\n        const comps = this.tag.split(':');\r\n        if (comps[0] !== ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE) {\r\n            return undefined;\r\n        }\r\n        if (comps[2] && comps[2] !== '*') {\r\n            return comps[2] === 'true';\r\n        }\r\n        else {\r\n            return undefined;\r\n        }\r\n    }\r\n    get addresses() {\r\n        const comps = this.tag.split(':');\r\n        if (comps[0] !== ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE) {\r\n            return undefined;\r\n        }\r\n        if (comps[1] && comps[1] !== '*') {\r\n            return deserializeAddressesField(comps[1]);\r\n        }\r\n        else {\r\n            return undefined;\r\n        }\r\n    }\r\n}\r\nfunction isAlchemyEvent(event) {\r\n    return typeof event === 'object' && 'method' in event;\r\n}\r\n/**\r\n * Creates a string representation of an `alchemy_pendingTransaction`\r\n * subscription filter that is compatible with the ethers implementation of\r\n * `getEventTag()`. The method is not an exported function in ethers, which is\r\n * why the SDK has its own implementation.\r\n *\r\n * The event tag is then deserialized by the SDK's {@link EthersEvent} getters.\r\n *\r\n * @example\r\n *   ```js\r\n *   // Returns 'alchemy-pending-transactions:0xABC:0xDEF|0xGHI:true'\r\n *   const eventTag =  getAlchemyEventTag(\r\n *   {\r\n *     \"method\": \"alchemy_pendingTransactions\",\r\n *     \"fromAddress\": \"0xABC\",\r\n *     \"toAddress\": [\"0xDEF\", \"0xGHI\"],\r\n *     \"hashesOnly: true\r\n *   });\r\n *   ```;\r\n *\r\n * @param event\r\n * @internal\r\n */\r\nfunction getAlchemyEventTag(event) {\r\n    if (!isAlchemyEvent(event)) {\r\n        throw new Error('Event tag requires AlchemyEventType');\r\n    }\r\n    if (event.method === AlchemySubscription.PENDING_TRANSACTIONS) {\r\n        return serializePendingTransactionsEvent(event);\r\n    }\r\n    else if (event.method === AlchemySubscription.MINED_TRANSACTIONS) {\r\n        return serializeMinedTransactionsEvent(event);\r\n    }\r\n    else {\r\n        throw new Error(`Unrecognized AlchemyFilterEvent: ${event}`);\r\n    }\r\n}\r\nfunction verifyAlchemyEventName(eventName) {\r\n    if (!Object.values(AlchemySubscription).includes(eventName.method)) {\r\n        throw new Error(`Invalid method name ${eventName.method}. Accepted method names: ${Object.values(AlchemySubscription)}`);\r\n    }\r\n}\r\n/**\r\n * Serializes the provided {@link AlchemyPendingTransactionsEventFilter} into an ethers\r\n * compatible event tag.\r\n *\r\n * For the example event:\r\n * ```\r\n *  {\r\n *     \"method\": \"alchemy_pendingTransactions\",\r\n *     \"fromAddress\": \"0xABC\",\r\n *     \"toAddress\": [\"0xDEF\", \"0xGHI\"],\r\n *     \"hashesOnly: true\r\n *   }\r\n * ```\r\n *\r\n * The resulting serialization is:\r\n * `alchemy_pendingTransactions:0xABC:0xDEF|0xGHI:true`\r\n *\r\n * If a field is omitted, it is replaced with a `*`.\r\n */\r\nfunction serializePendingTransactionsEvent(event) {\r\n    const fromAddress = serializeAddressField(event.fromAddress);\r\n    const toAddress = serializeAddressField(event.toAddress);\r\n    const hashesOnly = serializeBooleanField(event.hashesOnly);\r\n    return (ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE +\r\n        ':' +\r\n        fromAddress +\r\n        ':' +\r\n        toAddress +\r\n        ':' +\r\n        hashesOnly);\r\n}\r\n/**\r\n * Serializes the provided {@link AlchemyPendingTransactionsEventFilter} into an ethers\r\n * compatible event tag.\r\n *\r\n * For the example event:\r\n * ```\r\n *  {\r\n *     \"method\": \"alchemy_minedTransactions\",\r\n *     \"addresses\": [\r\n *       {\r\n *         from: \"0xABC\"\r\n *       },\r\n *       {\r\n *         to: \"0xDEF\",\r\n *         from: \"0x123\"\r\n *       }\r\n *     ]\r\n *     \"includeRemoved\": false\r\n *     \"hashesOnly: true\r\n *   }\r\n * ```\r\n *\r\n * The resulting serialization is:\r\n * `alchemy_minedTransactions:*,0xABC|0xDEF,0x123:false:true`\r\n *\r\n * If a field is omitted, it is replaced with a `*`.\r\n *\r\n * The `addresses` array is split by the '|' character, and each to/from address\r\n * pair is separated by a ',' character.\r\n *\r\n */\r\nfunction serializeMinedTransactionsEvent(event) {\r\n    const addresses = serializeAddressesField(event.addresses);\r\n    const includeRemoved = serializeBooleanField(event.includeRemoved);\r\n    const hashesOnly = serializeBooleanField(event.hashesOnly);\r\n    return (ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE +\r\n        ':' +\r\n        addresses +\r\n        ':' +\r\n        includeRemoved +\r\n        ':' +\r\n        hashesOnly);\r\n}\r\nfunction serializeAddressesField(addresses) {\r\n    if (addresses === undefined) {\r\n        return '*';\r\n    }\r\n    return addresses\r\n        .map(filter => serializeAddressField(filter.to) +\r\n        ',' +\r\n        serializeAddressField(filter.from))\r\n        .join('|');\r\n}\r\nfunction serializeAddressField(field) {\r\n    if (field === undefined) {\r\n        return '*';\r\n    }\r\n    else if (Array.isArray(field)) {\r\n        return field.join('|');\r\n    }\r\n    else {\r\n        return field;\r\n    }\r\n}\r\nfunction serializeBooleanField(field) {\r\n    if (field === undefined) {\r\n        return '*';\r\n    }\r\n    else {\r\n        return field.toString();\r\n    }\r\n}\r\nfunction deserializeTopics(data) {\r\n    if (data === '') {\r\n        return [];\r\n    }\r\n    return data.split(/&/g).map(topic => {\r\n        if (topic === '') {\r\n            return [];\r\n        }\r\n        const comps = topic.split('|').map(topic => {\r\n            return topic === 'null' ? null : topic;\r\n        });\r\n        return comps.length === 1 ? comps[0] : comps;\r\n    });\r\n}\r\nfunction deserializeAddressField(data) {\r\n    if (data === '') {\r\n        return undefined;\r\n    }\r\n    const addresses = data.split('|');\r\n    return addresses.length === 1 ? addresses[0] : addresses;\r\n}\r\nfunction deserializeAddressesField(data) {\r\n    if (data === '') {\r\n        return undefined;\r\n    }\r\n    // Perform a cast here since TS doesn't know we're guaranteed a non-empty\r\n    // array from deserializing.\r\n    return data\r\n        .split('|')\r\n        .map(addressStr => addressStr.split(','))\r\n        .map(addressPair => (Object.assign(Object.assign({}, (addressPair[0] !== '*' && { to: addressPair[0] })), (addressPair[1] !== '*' && { from: addressPair[1] }))));\r\n}\n\n/**\r\n * The Websocket namespace contains all subscription related functions that\r\n * allow you to subscribe to events and receive updates as they occur. The\r\n * underlying WebSocket provider has additional logic to handle reconnections\r\n * and automatically backfills missed events.\r\n *\r\n * Do not call this constructor directly. Instead, instantiate an Alchemy object\r\n * with `const alchemy = new Alchemy(config)` and then access the core namespace\r\n * via `alchemy.ws`.\r\n */\r\nclass WebSocketNamespace {\r\n    /** @internal */\r\n    constructor(config) {\r\n        this.config = config;\r\n    }\r\n    /**\r\n     * Adds a listener to be triggered for each {@link eventName} event. Also\r\n     * includes Alchemy's Subscription API events. See {@link AlchemyEventType} for\r\n     * how to use them.\r\n     *\r\n     * @param eventName The event to listen for.\r\n     * @param listener The listener to call when the event is triggered.\r\n     * @public\r\n     */\r\n    on(eventName, listener) {\r\n        void (() => __awaiter$1(this, void 0, void 0, function* () {\r\n            const provider = yield this.config.getWebSocketProvider();\r\n            const processedEvent = yield this._resolveEnsAlchemyEvent(eventName);\r\n            provider.on(processedEvent, listener);\r\n        }))();\r\n        return this;\r\n    }\r\n    /**\r\n     * Adds a listener to be triggered for only the next {@link eventName} event,\r\n     * after which it will be removed. Also includes Alchemy's Subscription API\r\n     * events. See {@link AlchemyEventType} for how to use them.\r\n     *\r\n     * @param eventName The event to listen for.\r\n     * @param listener The listener to call when the event is triggered.\r\n     * @public\r\n     */\r\n    once(eventName, listener) {\r\n        void (() => __awaiter$1(this, void 0, void 0, function* () {\r\n            const provider = yield this.config.getWebSocketProvider();\r\n            const processedEvent = yield this._resolveEnsAlchemyEvent(eventName);\r\n            provider.once(processedEvent, listener);\r\n        }))();\r\n        return this;\r\n    }\r\n    /**\r\n     * Removes the provided {@link listener} for the {@link eventName} event. If no\r\n     * listener is provided, all listeners for the event will be removed.\r\n     *\r\n     * @param eventName The event to unlisten to.\r\n     * @param listener The listener to remove.\r\n     * @public\r\n     */\r\n    off(eventName, listener) {\r\n        void (() => __awaiter$1(this, void 0, void 0, function* () {\r\n            const provider = yield this.config.getWebSocketProvider();\r\n            const processedEvent = yield this._resolveEnsAlchemyEvent(eventName);\r\n            return provider.off(processedEvent, listener);\r\n        }))();\r\n        return this;\r\n    }\r\n    /**\r\n     * Remove all listeners for the provided {@link eventName} event. If no event\r\n     * is provided, all events and their listeners are removed.\r\n     *\r\n     * @param eventName The event to remove all listeners for.\r\n     * @public\r\n     */\r\n    removeAllListeners(eventName) {\r\n        void (() => __awaiter$1(this, void 0, void 0, function* () {\r\n            const provider = yield this.config.getWebSocketProvider();\r\n            const processedEvent = eventName\r\n                ? yield this._resolveEnsAlchemyEvent(eventName)\r\n                : undefined;\r\n            provider.removeAllListeners(processedEvent);\r\n        }))();\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns the number of listeners for the provided {@link eventName} event. If\r\n     * no event is provided, the total number of listeners for all events is returned.\r\n     *\r\n     * @param eventName The event to get the number of listeners for.\r\n     * @public\r\n     */\r\n    listenerCount(eventName) {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            const provider = yield this.config.getWebSocketProvider();\r\n            const processedEvent = eventName\r\n                ? yield this._resolveEnsAlchemyEvent(eventName)\r\n                : undefined;\r\n            return provider.listenerCount(processedEvent);\r\n        });\r\n    }\r\n    /**\r\n     * Returns an array of listeners for the provided {@link eventName} event. If\r\n     * no event is provided, all listeners will be included.\r\n     *\r\n     * @param eventName The event to get the listeners for.\r\n     */\r\n    listeners(eventName) {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            const provider = yield this.config.getWebSocketProvider();\r\n            const processedEvent = eventName\r\n                ? yield this._resolveEnsAlchemyEvent(eventName)\r\n                : undefined;\r\n            return provider.listeners(processedEvent);\r\n        });\r\n    }\r\n    /**\r\n     * Converts ENS addresses in an Alchemy Event to the underlying resolved\r\n     * address.\r\n     *\r\n     * VISIBLE ONLY FOR TESTING.\r\n     *\r\n     * @internal\r\n     */\r\n    _resolveEnsAlchemyEvent(eventName) {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            if (!isAlchemyEvent(eventName)) {\r\n                return eventName;\r\n            }\r\n            if (eventName.method === AlchemySubscription.MINED_TRANSACTIONS &&\r\n                eventName.addresses) {\r\n                const processedAddresses = [];\r\n                for (const address of eventName.addresses) {\r\n                    if (address.to) {\r\n                        address.to = yield this._resolveNameOrError(address.to);\r\n                    }\r\n                    if (address.from) {\r\n                        address.from = yield this._resolveNameOrError(address.from);\r\n                    }\r\n                    processedAddresses.push(address);\r\n                }\r\n                eventName.addresses =\r\n                    processedAddresses;\r\n            }\r\n            else if (eventName.method === AlchemySubscription.PENDING_TRANSACTIONS) {\r\n                if (eventName.fromAddress) {\r\n                    if (typeof eventName.fromAddress === 'string') {\r\n                        eventName.fromAddress = yield this._resolveNameOrError(eventName.fromAddress);\r\n                    }\r\n                    else {\r\n                        eventName.fromAddress = yield Promise.all(eventName.fromAddress.map(address => this._resolveNameOrError(address)));\r\n                    }\r\n                }\r\n                if (eventName.toAddress) {\r\n                    if (typeof eventName.toAddress === 'string') {\r\n                        eventName.toAddress = yield this._resolveNameOrError(eventName.toAddress);\r\n                    }\r\n                    else {\r\n                        eventName.toAddress = yield Promise.all(eventName.toAddress.map(address => this._resolveNameOrError(address)));\r\n                    }\r\n                }\r\n            }\r\n            return eventName;\r\n        });\r\n    }\r\n    /**\r\n     * Converts the provided ENS address or throws an error. This improves code\r\n     * readability and type safety in other methods.\r\n     *\r\n     * VISIBLE ONLY FOR TESTING.\r\n     *\r\n     * @internal\r\n     */\r\n    _resolveNameOrError(name) {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            const provider = yield this.config.getProvider();\r\n            const resolved = yield provider.resolveName(name);\r\n            if (resolved === null) {\r\n                throw new Error(`Unable to resolve the ENS address: ${name}`);\r\n            }\r\n            return resolved;\r\n        });\r\n    }\r\n}\n\n/**\r\n * The Alchemy SDK client. This class is the main entry point into Alchemy's\r\n * APIs and separates functionality into different namespaces.\r\n *\r\n * Each SDK instance is associated with a specific network and API key. To use a\r\n * different network or API key, create a new instance of {@link Alchemy}.\r\n *\r\n * @public\r\n */\r\nclass Alchemy {\r\n    /**\r\n     * @param {string} [settings.apiKey] - The API key to use for Alchemy\r\n     * @param {Network} [settings.network] - The network to use for Alchemy\r\n     * @param {number} [settings.maxRetries] - The maximum number of retries to attempt\r\n     * @param {number} [settings.requestTimeout] - The timeout after which request should fail\r\n     * @public\r\n     */\r\n    constructor(settings) {\r\n        this.config = new AlchemyConfig(settings);\r\n        this.core = new CoreNamespace(this.config);\r\n        this.nft = new NftNamespace(this.config);\r\n        this.ws = new WebSocketNamespace(this.config);\r\n        this.transact = new TransactNamespace(this.config);\r\n        this.notify = new NotifyNamespace(this.config);\r\n        this.debug = new DebugNamespace(this.config);\r\n    }\r\n}\n\n/**\r\n * The Wallet class inherits Signer and can sign transactions and messages using\r\n * a private key as a standard Externally Owned Account (EOA).\r\n *\r\n * SDK's custom implementation of Ethers.js's 'Wallet'.\r\n *\r\n * Primary difference from Ethers.js 'Wallet' is that you can pass in either a\r\n * Provider or an Alchemy object. This implementation will intelligently detect\r\n * the format and set the provider accordingly.\r\n *\r\n * @public\r\n * @override\r\n */\r\nclass Wallet extends Wallet$1 {\r\n    /**\r\n     * Overload permits users to pass in either a standard Provider or an Alchemy\r\n     * object. The constructor will detect the object type and handle appropriately.\r\n     *\r\n     * @override\r\n     */\r\n    constructor(privateKey, alchemyOrProvider) {\r\n        // If object passed in is a provider, send to super\r\n        let superProvider;\r\n        if (alchemyOrProvider && Provider.isProvider(alchemyOrProvider)) {\r\n            superProvider = alchemyOrProvider;\r\n        }\r\n        super(privateKey, superProvider);\r\n        // If object passed in is an Alchemy object, just set Alchemy\r\n        if (alchemyOrProvider && !Provider.isProvider(alchemyOrProvider)) {\r\n            this.alchemyProviderPromise = alchemyOrProvider.config.getProvider();\r\n        }\r\n    }\r\n    //////////////////////////////////////////////////////////////////\r\n    // Set of overrides from Signer to handle async provider retrieval.\r\n    //////////////////////////////////////////////////////////////////\r\n    /**\r\n     * Returns the balance of this wallet at blockTag.\r\n     *\r\n     * @param blockTag The block to check the balance of\r\n     * @override\r\n     */\r\n    getBalance(blockTag) {\r\n        return this.getWallet().then(wallet => wallet.getBalance(blockTag));\r\n    }\r\n    /**\r\n     * Returns the number of transactions this account has ever sent. This is the\r\n     * value required to be included in transactions as the nonce.\r\n     *\r\n     * @param blockTag The block to check the transaction count on\r\n     * @override\r\n     */\r\n    getTransactionCount(blockTag) {\r\n        return this.getWallet().then(wallet => wallet.getTransactionCount(blockTag));\r\n    }\r\n    /**\r\n     * Returns the result of estimating the cost to send the transactionRequest,\r\n     * with this account address being used as the from field.\r\n     *\r\n     * @param transaction Transaction to estimate the gas on\r\n     * @override\r\n     */\r\n    estimateGas(transaction) {\r\n        return this.getWallet().then(wallet => wallet.estimateGas(transaction));\r\n    }\r\n    /**\r\n     * Returns the result of calling using the transactionRequest, with this\r\n     * account address being used as the from field.\r\n     *\r\n     * @param transaction To make a call on\r\n     * @param blockTag The block to make the call on\r\n     * @override\r\n     */\r\n    call(transaction, blockTag) {\r\n        return this.getWallet().then(wallet => wallet.call(transaction, blockTag));\r\n    }\r\n    /**\r\n     * Populates ALL keys for a transaction and checks that `from` matches this\r\n     * `Signer`. Resolves ENS names and populates fields like `gasPrice`, `gasLimit`,\r\n     * `nonce`, and `chainId` if they are not provided.\r\n     *\r\n     * @param transaction The transaction to populate.\r\n     * @override\r\n     */\r\n    populateTransaction(transaction) {\r\n        return this.getWallet().then(wallet => wallet.populateTransaction(transaction));\r\n    }\r\n    /**\r\n     * Populates all fields in a transaction, signs it and sends it to the network\r\n     *\r\n     * @param transaction The transaction to send.\r\n     * @override\r\n     */\r\n    sendTransaction(transaction) {\r\n        return this.getWallet().then(wallet => wallet.sendTransaction(transaction));\r\n    }\r\n    /**\r\n     * Returns the chain ID this wallet is connected to.\r\n     *\r\n     * @override\r\n     */\r\n    getChainId() {\r\n        return this.getWallet().then(wallet => wallet.getChainId());\r\n    }\r\n    /**\r\n     * Returns the current gas price.\r\n     *\r\n     * @override\r\n     */\r\n    getGasPrice() {\r\n        return this.getWallet().then(wallet => wallet.getGasPrice());\r\n    }\r\n    /**\r\n     * Returns the current recommended FeeData to use in a transaction.\r\n     *\r\n     * For an EIP-1559 transaction, the maxFeePerGas and maxPriorityFeePerGas\r\n     * should be used.\r\n     *\r\n     * For legacy transactions and networks which do not support EIP-1559, the\r\n     * gasPrice should be used.\r\n     *\r\n     * @override\r\n     */\r\n    getFeeData() {\r\n        return this.getWallet().then(wallet => wallet.getFeeData());\r\n    }\r\n    /**\r\n     * Looks up the address of name. If the name is not owned, or does not have a\r\n     * Resolver configured, or the Resolver does not have an address configured,\r\n     * null is returned.\r\n     *\r\n     * @param name Name of the ENS address\r\n     * @override\r\n     */\r\n    resolveName(name) {\r\n        return this.getWallet().then(wallet => wallet.resolveName(name));\r\n    }\r\n    getWallet() {\r\n        return __awaiter$1(this, void 0, void 0, function* () {\r\n            if (!this.alchemyProviderPromise) {\r\n                return this.connect(this.provider);\r\n            }\r\n            return this.connect(yield this.alchemyProviderPromise);\r\n        });\r\n    }\r\n}\n\n/**\r\n * The Contract class is a wrapper around the Contract class from ethers.js and\r\n * is exported here for convenience.\r\n *\r\n * @public\r\n */\r\n// TODO: support passing in Alchemy instance into the contract.\r\nclass Contract extends Contract$1 {\r\n}\r\n/**\r\n * The ContractFactory class is a wrapper around the ContractFactory class from\r\n * ethers.js and is exported here for convenience.\r\n *\r\n * @public\r\n */\r\nclass ContractFactory extends ContractFactory$1 {\r\n}\n\nexport { ALCHEMY_EVENT_TYPES as A, NftOrdering as B, CustomNetworks as C, DEFAULT_ALCHEMY_API_KEY as D, EthersNetwork as E, NftSaleMarketplace as F, GetTransfersForOwnerTransferType as G, NftSaleTakerType as H, IS_BROWSER as I, SimulateAssetType as J, SimulateChangeType as K, DecodingAuthority as L, DebugCallType as M, Network as N, OpenSeaSafelistRequestStatus as O, GasOptimizedTransactionStatus as P, WebhookVersion as Q, RefreshState as R, SortingOrder as S, TokenBalanceType as T, WebhookType as U, VERSION as V, Wallet as W, CommitmentLevel as X, DebugTracerType as Y, __awaiter$1 as _, DEFAULT_NETWORK as a, getAlchemyWsUrl as b, EthersEvent as c, deepCopy as d, getAlchemyEventTag as e, fromHex as f, getAlchemyHttpUrl as g, ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE as h, isAlchemyEvent as i, AlchemySubscription as j, ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE as k, logWarn as l, Alchemy as m, noop as n, Contract as o, ContractFactory as p, isHex as q, AssetTransfersCategory as r, setLogLevel as s, toHex as t, AssetTransfersOrder as u, verifyAlchemyEventName as v, NftTokenType as w, NftSpamClassification as x, NftExcludeFilters as y, NftFilters as z };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}