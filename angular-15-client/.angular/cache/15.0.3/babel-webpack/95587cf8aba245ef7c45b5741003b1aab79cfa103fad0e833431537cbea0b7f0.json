{"ast":null,"code":"\"use strict\";\n\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n///////////////////////////////\nexport var UnicodeNormalizationForm;\n(function (UnicodeNormalizationForm) {\n  UnicodeNormalizationForm[\"current\"] = \"\";\n  UnicodeNormalizationForm[\"NFC\"] = \"NFC\";\n  UnicodeNormalizationForm[\"NFD\"] = \"NFD\";\n  UnicodeNormalizationForm[\"NFKC\"] = \"NFKC\";\n  UnicodeNormalizationForm[\"NFKD\"] = \"NFKD\";\n})(UnicodeNormalizationForm || (UnicodeNormalizationForm = {}));\n;\nexport var Utf8ErrorReason;\n(function (Utf8ErrorReason) {\n  // A continuation byte was present where there was nothing to continue\n  // - offset = the index the codepoint began in\n  Utf8ErrorReason[\"UNEXPECTED_CONTINUE\"] = \"unexpected continuation byte\";\n  // An invalid (non-continuation) byte to start a UTF-8 codepoint was found\n  // - offset = the index the codepoint began in\n  Utf8ErrorReason[\"BAD_PREFIX\"] = \"bad codepoint prefix\";\n  // The string is too short to process the expected codepoint\n  // - offset = the index the codepoint began in\n  Utf8ErrorReason[\"OVERRUN\"] = \"string overrun\";\n  // A missing continuation byte was expected but not found\n  // - offset = the index the continuation byte was expected at\n  Utf8ErrorReason[\"MISSING_CONTINUE\"] = \"missing continuation byte\";\n  // The computed code point is outside the range for UTF-8\n  // - offset       = start of this codepoint\n  // - badCodepoint = the computed codepoint; outside the UTF-8 range\n  Utf8ErrorReason[\"OUT_OF_RANGE\"] = \"out of UTF-8 range\";\n  // UTF-8 strings may not contain UTF-16 surrogate pairs\n  // - offset       = start of this codepoint\n  // - badCodepoint = the computed codepoint; inside the UTF-16 surrogate range\n  Utf8ErrorReason[\"UTF16_SURROGATE\"] = \"UTF-16 surrogate\";\n  // The string is an overlong representation\n  // - offset       = start of this codepoint\n  // - badCodepoint = the computed codepoint; already bounds checked\n  Utf8ErrorReason[\"OVERLONG\"] = \"overlong representation\";\n})(Utf8ErrorReason || (Utf8ErrorReason = {}));\n;\nfunction errorFunc(reason, offset, bytes, output, badCodepoint) {\n  return logger.throwArgumentError(`invalid codepoint at offset ${offset}; ${reason}`, \"bytes\", bytes);\n}\nfunction ignoreFunc(reason, offset, bytes, output, badCodepoint) {\n  // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes\n  if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {\n    let i = 0;\n    for (let o = offset + 1; o < bytes.length; o++) {\n      if (bytes[o] >> 6 !== 0x02) {\n        break;\n      }\n      i++;\n    }\n    return i;\n  }\n  // This byte runs us past the end of the string, so just jump to the end\n  // (but the first byte was read already read and therefore skipped)\n  if (reason === Utf8ErrorReason.OVERRUN) {\n    return bytes.length - offset - 1;\n  }\n  // Nothing to skip\n  return 0;\n}\nfunction replaceFunc(reason, offset, bytes, output, badCodepoint) {\n  // Overlong representations are otherwise \"valid\" code points; just non-deistingtished\n  if (reason === Utf8ErrorReason.OVERLONG) {\n    output.push(badCodepoint);\n    return 0;\n  }\n  // Put the replacement character into the output\n  output.push(0xfffd);\n  // Otherwise, process as if ignoring errors\n  return ignoreFunc(reason, offset, bytes, output, badCodepoint);\n}\n// Common error handing strategies\nexport const Utf8ErrorFuncs = Object.freeze({\n  error: errorFunc,\n  ignore: ignoreFunc,\n  replace: replaceFunc\n});\n// http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499\nfunction getUtf8CodePoints(bytes, onError) {\n  if (onError == null) {\n    onError = Utf8ErrorFuncs.error;\n  }\n  bytes = arrayify(bytes);\n  const result = [];\n  let i = 0;\n  // Invalid bytes are ignored\n  while (i < bytes.length) {\n    const c = bytes[i++];\n    // 0xxx xxxx\n    if (c >> 7 === 0) {\n      result.push(c);\n      continue;\n    }\n    // Multibyte; how many bytes left for this character?\n    let extraLength = null;\n    let overlongMask = null;\n    // 110x xxxx 10xx xxxx\n    if ((c & 0xe0) === 0xc0) {\n      extraLength = 1;\n      overlongMask = 0x7f;\n      // 1110 xxxx 10xx xxxx 10xx xxxx\n    } else if ((c & 0xf0) === 0xe0) {\n      extraLength = 2;\n      overlongMask = 0x7ff;\n      // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx\n    } else if ((c & 0xf8) === 0xf0) {\n      extraLength = 3;\n      overlongMask = 0xffff;\n    } else {\n      if ((c & 0xc0) === 0x80) {\n        i += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i - 1, bytes, result);\n      } else {\n        i += onError(Utf8ErrorReason.BAD_PREFIX, i - 1, bytes, result);\n      }\n      continue;\n    }\n    // Do we have enough bytes in our data?\n    if (i - 1 + extraLength >= bytes.length) {\n      i += onError(Utf8ErrorReason.OVERRUN, i - 1, bytes, result);\n      continue;\n    }\n    // Remove the length prefix from the char\n    let res = c & (1 << 8 - extraLength - 1) - 1;\n    for (let j = 0; j < extraLength; j++) {\n      let nextChar = bytes[i];\n      // Invalid continuation byte\n      if ((nextChar & 0xc0) != 0x80) {\n        i += onError(Utf8ErrorReason.MISSING_CONTINUE, i, bytes, result);\n        res = null;\n        break;\n      }\n      ;\n      res = res << 6 | nextChar & 0x3f;\n      i++;\n    }\n    // See above loop for invalid continuation byte\n    if (res === null) {\n      continue;\n    }\n    // Maximum code point\n    if (res > 0x10ffff) {\n      i += onError(Utf8ErrorReason.OUT_OF_RANGE, i - 1 - extraLength, bytes, result, res);\n      continue;\n    }\n    // Reserved for UTF-16 surrogate halves\n    if (res >= 0xd800 && res <= 0xdfff) {\n      i += onError(Utf8ErrorReason.UTF16_SURROGATE, i - 1 - extraLength, bytes, result, res);\n      continue;\n    }\n    // Check for overlong sequences (more bytes than needed)\n    if (res <= overlongMask) {\n      i += onError(Utf8ErrorReason.OVERLONG, i - 1 - extraLength, bytes, result, res);\n      continue;\n    }\n    result.push(res);\n  }\n  return result;\n}\n// http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array\nexport function toUtf8Bytes(str, form = UnicodeNormalizationForm.current) {\n  if (form != UnicodeNormalizationForm.current) {\n    logger.checkNormalize();\n    str = str.normalize(form);\n  }\n  let result = [];\n  for (let i = 0; i < str.length; i++) {\n    const c = str.charCodeAt(i);\n    if (c < 0x80) {\n      result.push(c);\n    } else if (c < 0x800) {\n      result.push(c >> 6 | 0xc0);\n      result.push(c & 0x3f | 0x80);\n    } else if ((c & 0xfc00) == 0xd800) {\n      i++;\n      const c2 = str.charCodeAt(i);\n      if (i >= str.length || (c2 & 0xfc00) !== 0xdc00) {\n        throw new Error(\"invalid utf-8 string\");\n      }\n      // Surrogate Pair\n      const pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);\n      result.push(pair >> 18 | 0xf0);\n      result.push(pair >> 12 & 0x3f | 0x80);\n      result.push(pair >> 6 & 0x3f | 0x80);\n      result.push(pair & 0x3f | 0x80);\n    } else {\n      result.push(c >> 12 | 0xe0);\n      result.push(c >> 6 & 0x3f | 0x80);\n      result.push(c & 0x3f | 0x80);\n    }\n  }\n  return arrayify(result);\n}\n;\nfunction escapeChar(value) {\n  const hex = \"0000\" + value.toString(16);\n  return \"\\\\u\" + hex.substring(hex.length - 4);\n}\nexport function _toEscapedUtf8String(bytes, onError) {\n  return '\"' + getUtf8CodePoints(bytes, onError).map(codePoint => {\n    if (codePoint < 256) {\n      switch (codePoint) {\n        case 8:\n          return \"\\\\b\";\n        case 9:\n          return \"\\\\t\";\n        case 10:\n          return \"\\\\n\";\n        case 13:\n          return \"\\\\r\";\n        case 34:\n          return \"\\\\\\\"\";\n        case 92:\n          return \"\\\\\\\\\";\n      }\n      if (codePoint >= 32 && codePoint < 127) {\n        return String.fromCharCode(codePoint);\n      }\n    }\n    if (codePoint <= 0xffff) {\n      return escapeChar(codePoint);\n    }\n    codePoint -= 0x10000;\n    return escapeChar((codePoint >> 10 & 0x3ff) + 0xd800) + escapeChar((codePoint & 0x3ff) + 0xdc00);\n  }).join(\"\") + '\"';\n}\nexport function _toUtf8String(codePoints) {\n  return codePoints.map(codePoint => {\n    if (codePoint <= 0xffff) {\n      return String.fromCharCode(codePoint);\n    }\n    codePoint -= 0x10000;\n    return String.fromCharCode((codePoint >> 10 & 0x3ff) + 0xd800, (codePoint & 0x3ff) + 0xdc00);\n  }).join(\"\");\n}\nexport function toUtf8String(bytes, onError) {\n  return _toUtf8String(getUtf8CodePoints(bytes, onError));\n}\nexport function toUtf8CodePoints(str, form = UnicodeNormalizationForm.current) {\n  return getUtf8CodePoints(toUtf8Bytes(str, form));\n}","map":{"version":3,"names":["arrayify","Logger","version","logger","UnicodeNormalizationForm","Utf8ErrorReason","errorFunc","reason","offset","bytes","output","badCodepoint","throwArgumentError","ignoreFunc","BAD_PREFIX","UNEXPECTED_CONTINUE","i","o","length","OVERRUN","replaceFunc","OVERLONG","push","Utf8ErrorFuncs","Object","freeze","error","ignore","replace","getUtf8CodePoints","onError","result","c","extraLength","overlongMask","res","j","nextChar","MISSING_CONTINUE","OUT_OF_RANGE","UTF16_SURROGATE","toUtf8Bytes","str","form","current","checkNormalize","normalize","charCodeAt","c2","Error","pair","escapeChar","value","hex","toString","substring","_toEscapedUtf8String","map","codePoint","String","fromCharCode","join","_toUtf8String","codePoints","toUtf8String","toUtf8CodePoints"],"sources":["F:/DDesktop/MEAN_BC/mean-stack-authentication-authorization-master/angular-15-client/node_modules/@ethersproject/strings/lib.esm/utf8.js"],"sourcesContent":["\"use strict\";\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n///////////////////////////////\nexport var UnicodeNormalizationForm;\n(function (UnicodeNormalizationForm) {\n    UnicodeNormalizationForm[\"current\"] = \"\";\n    UnicodeNormalizationForm[\"NFC\"] = \"NFC\";\n    UnicodeNormalizationForm[\"NFD\"] = \"NFD\";\n    UnicodeNormalizationForm[\"NFKC\"] = \"NFKC\";\n    UnicodeNormalizationForm[\"NFKD\"] = \"NFKD\";\n})(UnicodeNormalizationForm || (UnicodeNormalizationForm = {}));\n;\nexport var Utf8ErrorReason;\n(function (Utf8ErrorReason) {\n    // A continuation byte was present where there was nothing to continue\n    // - offset = the index the codepoint began in\n    Utf8ErrorReason[\"UNEXPECTED_CONTINUE\"] = \"unexpected continuation byte\";\n    // An invalid (non-continuation) byte to start a UTF-8 codepoint was found\n    // - offset = the index the codepoint began in\n    Utf8ErrorReason[\"BAD_PREFIX\"] = \"bad codepoint prefix\";\n    // The string is too short to process the expected codepoint\n    // - offset = the index the codepoint began in\n    Utf8ErrorReason[\"OVERRUN\"] = \"string overrun\";\n    // A missing continuation byte was expected but not found\n    // - offset = the index the continuation byte was expected at\n    Utf8ErrorReason[\"MISSING_CONTINUE\"] = \"missing continuation byte\";\n    // The computed code point is outside the range for UTF-8\n    // - offset       = start of this codepoint\n    // - badCodepoint = the computed codepoint; outside the UTF-8 range\n    Utf8ErrorReason[\"OUT_OF_RANGE\"] = \"out of UTF-8 range\";\n    // UTF-8 strings may not contain UTF-16 surrogate pairs\n    // - offset       = start of this codepoint\n    // - badCodepoint = the computed codepoint; inside the UTF-16 surrogate range\n    Utf8ErrorReason[\"UTF16_SURROGATE\"] = \"UTF-16 surrogate\";\n    // The string is an overlong representation\n    // - offset       = start of this codepoint\n    // - badCodepoint = the computed codepoint; already bounds checked\n    Utf8ErrorReason[\"OVERLONG\"] = \"overlong representation\";\n})(Utf8ErrorReason || (Utf8ErrorReason = {}));\n;\nfunction errorFunc(reason, offset, bytes, output, badCodepoint) {\n    return logger.throwArgumentError(`invalid codepoint at offset ${offset}; ${reason}`, \"bytes\", bytes);\n}\nfunction ignoreFunc(reason, offset, bytes, output, badCodepoint) {\n    // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes\n    if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {\n        let i = 0;\n        for (let o = offset + 1; o < bytes.length; o++) {\n            if (bytes[o] >> 6 !== 0x02) {\n                break;\n            }\n            i++;\n        }\n        return i;\n    }\n    // This byte runs us past the end of the string, so just jump to the end\n    // (but the first byte was read already read and therefore skipped)\n    if (reason === Utf8ErrorReason.OVERRUN) {\n        return bytes.length - offset - 1;\n    }\n    // Nothing to skip\n    return 0;\n}\nfunction replaceFunc(reason, offset, bytes, output, badCodepoint) {\n    // Overlong representations are otherwise \"valid\" code points; just non-deistingtished\n    if (reason === Utf8ErrorReason.OVERLONG) {\n        output.push(badCodepoint);\n        return 0;\n    }\n    // Put the replacement character into the output\n    output.push(0xfffd);\n    // Otherwise, process as if ignoring errors\n    return ignoreFunc(reason, offset, bytes, output, badCodepoint);\n}\n// Common error handing strategies\nexport const Utf8ErrorFuncs = Object.freeze({\n    error: errorFunc,\n    ignore: ignoreFunc,\n    replace: replaceFunc\n});\n// http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499\nfunction getUtf8CodePoints(bytes, onError) {\n    if (onError == null) {\n        onError = Utf8ErrorFuncs.error;\n    }\n    bytes = arrayify(bytes);\n    const result = [];\n    let i = 0;\n    // Invalid bytes are ignored\n    while (i < bytes.length) {\n        const c = bytes[i++];\n        // 0xxx xxxx\n        if (c >> 7 === 0) {\n            result.push(c);\n            continue;\n        }\n        // Multibyte; how many bytes left for this character?\n        let extraLength = null;\n        let overlongMask = null;\n        // 110x xxxx 10xx xxxx\n        if ((c & 0xe0) === 0xc0) {\n            extraLength = 1;\n            overlongMask = 0x7f;\n            // 1110 xxxx 10xx xxxx 10xx xxxx\n        }\n        else if ((c & 0xf0) === 0xe0) {\n            extraLength = 2;\n            overlongMask = 0x7ff;\n            // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx\n        }\n        else if ((c & 0xf8) === 0xf0) {\n            extraLength = 3;\n            overlongMask = 0xffff;\n        }\n        else {\n            if ((c & 0xc0) === 0x80) {\n                i += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i - 1, bytes, result);\n            }\n            else {\n                i += onError(Utf8ErrorReason.BAD_PREFIX, i - 1, bytes, result);\n            }\n            continue;\n        }\n        // Do we have enough bytes in our data?\n        if (i - 1 + extraLength >= bytes.length) {\n            i += onError(Utf8ErrorReason.OVERRUN, i - 1, bytes, result);\n            continue;\n        }\n        // Remove the length prefix from the char\n        let res = c & ((1 << (8 - extraLength - 1)) - 1);\n        for (let j = 0; j < extraLength; j++) {\n            let nextChar = bytes[i];\n            // Invalid continuation byte\n            if ((nextChar & 0xc0) != 0x80) {\n                i += onError(Utf8ErrorReason.MISSING_CONTINUE, i, bytes, result);\n                res = null;\n                break;\n            }\n            ;\n            res = (res << 6) | (nextChar & 0x3f);\n            i++;\n        }\n        // See above loop for invalid continuation byte\n        if (res === null) {\n            continue;\n        }\n        // Maximum code point\n        if (res > 0x10ffff) {\n            i += onError(Utf8ErrorReason.OUT_OF_RANGE, i - 1 - extraLength, bytes, result, res);\n            continue;\n        }\n        // Reserved for UTF-16 surrogate halves\n        if (res >= 0xd800 && res <= 0xdfff) {\n            i += onError(Utf8ErrorReason.UTF16_SURROGATE, i - 1 - extraLength, bytes, result, res);\n            continue;\n        }\n        // Check for overlong sequences (more bytes than needed)\n        if (res <= overlongMask) {\n            i += onError(Utf8ErrorReason.OVERLONG, i - 1 - extraLength, bytes, result, res);\n            continue;\n        }\n        result.push(res);\n    }\n    return result;\n}\n// http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array\nexport function toUtf8Bytes(str, form = UnicodeNormalizationForm.current) {\n    if (form != UnicodeNormalizationForm.current) {\n        logger.checkNormalize();\n        str = str.normalize(form);\n    }\n    let result = [];\n    for (let i = 0; i < str.length; i++) {\n        const c = str.charCodeAt(i);\n        if (c < 0x80) {\n            result.push(c);\n        }\n        else if (c < 0x800) {\n            result.push((c >> 6) | 0xc0);\n            result.push((c & 0x3f) | 0x80);\n        }\n        else if ((c & 0xfc00) == 0xd800) {\n            i++;\n            const c2 = str.charCodeAt(i);\n            if (i >= str.length || (c2 & 0xfc00) !== 0xdc00) {\n                throw new Error(\"invalid utf-8 string\");\n            }\n            // Surrogate Pair\n            const pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);\n            result.push((pair >> 18) | 0xf0);\n            result.push(((pair >> 12) & 0x3f) | 0x80);\n            result.push(((pair >> 6) & 0x3f) | 0x80);\n            result.push((pair & 0x3f) | 0x80);\n        }\n        else {\n            result.push((c >> 12) | 0xe0);\n            result.push(((c >> 6) & 0x3f) | 0x80);\n            result.push((c & 0x3f) | 0x80);\n        }\n    }\n    return arrayify(result);\n}\n;\nfunction escapeChar(value) {\n    const hex = (\"0000\" + value.toString(16));\n    return \"\\\\u\" + hex.substring(hex.length - 4);\n}\nexport function _toEscapedUtf8String(bytes, onError) {\n    return '\"' + getUtf8CodePoints(bytes, onError).map((codePoint) => {\n        if (codePoint < 256) {\n            switch (codePoint) {\n                case 8: return \"\\\\b\";\n                case 9: return \"\\\\t\";\n                case 10: return \"\\\\n\";\n                case 13: return \"\\\\r\";\n                case 34: return \"\\\\\\\"\";\n                case 92: return \"\\\\\\\\\";\n            }\n            if (codePoint >= 32 && codePoint < 127) {\n                return String.fromCharCode(codePoint);\n            }\n        }\n        if (codePoint <= 0xffff) {\n            return escapeChar(codePoint);\n        }\n        codePoint -= 0x10000;\n        return escapeChar(((codePoint >> 10) & 0x3ff) + 0xd800) + escapeChar((codePoint & 0x3ff) + 0xdc00);\n    }).join(\"\") + '\"';\n}\nexport function _toUtf8String(codePoints) {\n    return codePoints.map((codePoint) => {\n        if (codePoint <= 0xffff) {\n            return String.fromCharCode(codePoint);\n        }\n        codePoint -= 0x10000;\n        return String.fromCharCode((((codePoint >> 10) & 0x3ff) + 0xd800), ((codePoint & 0x3ff) + 0xdc00));\n    }).join(\"\");\n}\nexport function toUtf8String(bytes, onError) {\n    return _toUtf8String(getUtf8CodePoints(bytes, onError));\n}\nexport function toUtf8CodePoints(str, form = UnicodeNormalizationForm.current) {\n    return getUtf8CodePoints(toUtf8Bytes(str, form));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}