{"ast":null,"code":"\"use strict\";\n\nimport { arrayify, concat, hexDataLength, hexDataSlice, isHexString, stripZeros } from \"@ethersproject/bytes\";\nimport { BigNumber, _base16To36, _base36To16 } from \"@ethersproject/bignumber\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { encode } from \"@ethersproject/rlp\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nfunction getChecksumAddress(address) {\n  if (!isHexString(address, 20)) {\n    logger.throwArgumentError(\"invalid address\", \"address\", address);\n  }\n  address = address.toLowerCase();\n  const chars = address.substring(2).split(\"\");\n  const expanded = new Uint8Array(40);\n  for (let i = 0; i < 40; i++) {\n    expanded[i] = chars[i].charCodeAt(0);\n  }\n  const hashed = arrayify(keccak256(expanded));\n  for (let i = 0; i < 40; i += 2) {\n    if (hashed[i >> 1] >> 4 >= 8) {\n      chars[i] = chars[i].toUpperCase();\n    }\n    if ((hashed[i >> 1] & 0x0f) >= 8) {\n      chars[i + 1] = chars[i + 1].toUpperCase();\n    }\n  }\n  return \"0x\" + chars.join(\"\");\n}\n// Shims for environments that are missing some required constants and functions\nconst MAX_SAFE_INTEGER = 0x1fffffffffffff;\nfunction log10(x) {\n  if (Math.log10) {\n    return Math.log10(x);\n  }\n  return Math.log(x) / Math.LN10;\n}\n// See: https://en.wikipedia.org/wiki/International_Bank_Account_Number\n// Create lookup table\nconst ibanLookup = {};\nfor (let i = 0; i < 10; i++) {\n  ibanLookup[String(i)] = String(i);\n}\nfor (let i = 0; i < 26; i++) {\n  ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);\n}\n// How many decimal digits can we process? (for 64-bit float, this is 15)\nconst safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));\nfunction ibanChecksum(address) {\n  address = address.toUpperCase();\n  address = address.substring(4) + address.substring(0, 2) + \"00\";\n  let expanded = address.split(\"\").map(c => {\n    return ibanLookup[c];\n  }).join(\"\");\n  // Javascript can handle integers safely up to 15 (decimal) digits\n  while (expanded.length >= safeDigits) {\n    let block = expanded.substring(0, safeDigits);\n    expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);\n  }\n  let checksum = String(98 - parseInt(expanded, 10) % 97);\n  while (checksum.length < 2) {\n    checksum = \"0\" + checksum;\n  }\n  return checksum;\n}\n;\nexport function getAddress(address) {\n  let result = null;\n  if (typeof address !== \"string\") {\n    logger.throwArgumentError(\"invalid address\", \"address\", address);\n  }\n  if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {\n    // Missing the 0x prefix\n    if (address.substring(0, 2) !== \"0x\") {\n      address = \"0x\" + address;\n    }\n    result = getChecksumAddress(address);\n    // It is a checksummed address with a bad checksum\n    if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {\n      logger.throwArgumentError(\"bad address checksum\", \"address\", address);\n    }\n    // Maybe ICAP? (we only support direct mode)\n  } else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {\n    // It is an ICAP address with a bad checksum\n    if (address.substring(2, 4) !== ibanChecksum(address)) {\n      logger.throwArgumentError(\"bad icap checksum\", \"address\", address);\n    }\n    result = _base36To16(address.substring(4));\n    while (result.length < 40) {\n      result = \"0\" + result;\n    }\n    result = getChecksumAddress(\"0x\" + result);\n  } else {\n    logger.throwArgumentError(\"invalid address\", \"address\", address);\n  }\n  return result;\n}\nexport function isAddress(address) {\n  try {\n    getAddress(address);\n    return true;\n  } catch (error) {}\n  return false;\n}\nexport function getIcapAddress(address) {\n  let base36 = _base16To36(getAddress(address).substring(2)).toUpperCase();\n  while (base36.length < 30) {\n    base36 = \"0\" + base36;\n  }\n  return \"XE\" + ibanChecksum(\"XE00\" + base36) + base36;\n}\n// http://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed\nexport function getContractAddress(transaction) {\n  let from = null;\n  try {\n    from = getAddress(transaction.from);\n  } catch (error) {\n    logger.throwArgumentError(\"missing from address\", \"transaction\", transaction);\n  }\n  const nonce = stripZeros(arrayify(BigNumber.from(transaction.nonce).toHexString()));\n  return getAddress(hexDataSlice(keccak256(encode([from, nonce])), 12));\n}\nexport function getCreate2Address(from, salt, initCodeHash) {\n  if (hexDataLength(salt) !== 32) {\n    logger.throwArgumentError(\"salt must be 32 bytes\", \"salt\", salt);\n  }\n  if (hexDataLength(initCodeHash) !== 32) {\n    logger.throwArgumentError(\"initCodeHash must be 32 bytes\", \"initCodeHash\", initCodeHash);\n  }\n  return getAddress(hexDataSlice(keccak256(concat([\"0xff\", getAddress(from), salt, initCodeHash])), 12));\n}","map":{"version":3,"names":["arrayify","concat","hexDataLength","hexDataSlice","isHexString","stripZeros","BigNumber","_base16To36","_base36To16","keccak256","encode","Logger","version","logger","getChecksumAddress","address","throwArgumentError","toLowerCase","chars","substring","split","expanded","Uint8Array","i","charCodeAt","hashed","toUpperCase","join","MAX_SAFE_INTEGER","log10","x","Math","log","LN10","ibanLookup","String","fromCharCode","safeDigits","floor","ibanChecksum","map","c","length","block","parseInt","checksum","getAddress","result","match","isAddress","error","getIcapAddress","base36","getContractAddress","transaction","from","nonce","toHexString","getCreate2Address","salt","initCodeHash"],"sources":["F:/DDesktop/MEAN_BC/mean-stack-authentication-authorization-master/angular-15-client/node_modules/@ethersproject/address/lib.esm/index.js"],"sourcesContent":["\"use strict\";\nimport { arrayify, concat, hexDataLength, hexDataSlice, isHexString, stripZeros } from \"@ethersproject/bytes\";\nimport { BigNumber, _base16To36, _base36To16 } from \"@ethersproject/bignumber\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { encode } from \"@ethersproject/rlp\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nfunction getChecksumAddress(address) {\n    if (!isHexString(address, 20)) {\n        logger.throwArgumentError(\"invalid address\", \"address\", address);\n    }\n    address = address.toLowerCase();\n    const chars = address.substring(2).split(\"\");\n    const expanded = new Uint8Array(40);\n    for (let i = 0; i < 40; i++) {\n        expanded[i] = chars[i].charCodeAt(0);\n    }\n    const hashed = arrayify(keccak256(expanded));\n    for (let i = 0; i < 40; i += 2) {\n        if ((hashed[i >> 1] >> 4) >= 8) {\n            chars[i] = chars[i].toUpperCase();\n        }\n        if ((hashed[i >> 1] & 0x0f) >= 8) {\n            chars[i + 1] = chars[i + 1].toUpperCase();\n        }\n    }\n    return \"0x\" + chars.join(\"\");\n}\n// Shims for environments that are missing some required constants and functions\nconst MAX_SAFE_INTEGER = 0x1fffffffffffff;\nfunction log10(x) {\n    if (Math.log10) {\n        return Math.log10(x);\n    }\n    return Math.log(x) / Math.LN10;\n}\n// See: https://en.wikipedia.org/wiki/International_Bank_Account_Number\n// Create lookup table\nconst ibanLookup = {};\nfor (let i = 0; i < 10; i++) {\n    ibanLookup[String(i)] = String(i);\n}\nfor (let i = 0; i < 26; i++) {\n    ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);\n}\n// How many decimal digits can we process? (for 64-bit float, this is 15)\nconst safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));\nfunction ibanChecksum(address) {\n    address = address.toUpperCase();\n    address = address.substring(4) + address.substring(0, 2) + \"00\";\n    let expanded = address.split(\"\").map((c) => { return ibanLookup[c]; }).join(\"\");\n    // Javascript can handle integers safely up to 15 (decimal) digits\n    while (expanded.length >= safeDigits) {\n        let block = expanded.substring(0, safeDigits);\n        expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);\n    }\n    let checksum = String(98 - (parseInt(expanded, 10) % 97));\n    while (checksum.length < 2) {\n        checksum = \"0\" + checksum;\n    }\n    return checksum;\n}\n;\nexport function getAddress(address) {\n    let result = null;\n    if (typeof (address) !== \"string\") {\n        logger.throwArgumentError(\"invalid address\", \"address\", address);\n    }\n    if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {\n        // Missing the 0x prefix\n        if (address.substring(0, 2) !== \"0x\") {\n            address = \"0x\" + address;\n        }\n        result = getChecksumAddress(address);\n        // It is a checksummed address with a bad checksum\n        if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {\n            logger.throwArgumentError(\"bad address checksum\", \"address\", address);\n        }\n        // Maybe ICAP? (we only support direct mode)\n    }\n    else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {\n        // It is an ICAP address with a bad checksum\n        if (address.substring(2, 4) !== ibanChecksum(address)) {\n            logger.throwArgumentError(\"bad icap checksum\", \"address\", address);\n        }\n        result = _base36To16(address.substring(4));\n        while (result.length < 40) {\n            result = \"0\" + result;\n        }\n        result = getChecksumAddress(\"0x\" + result);\n    }\n    else {\n        logger.throwArgumentError(\"invalid address\", \"address\", address);\n    }\n    return result;\n}\nexport function isAddress(address) {\n    try {\n        getAddress(address);\n        return true;\n    }\n    catch (error) { }\n    return false;\n}\nexport function getIcapAddress(address) {\n    let base36 = _base16To36(getAddress(address).substring(2)).toUpperCase();\n    while (base36.length < 30) {\n        base36 = \"0\" + base36;\n    }\n    return \"XE\" + ibanChecksum(\"XE00\" + base36) + base36;\n}\n// http://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed\nexport function getContractAddress(transaction) {\n    let from = null;\n    try {\n        from = getAddress(transaction.from);\n    }\n    catch (error) {\n        logger.throwArgumentError(\"missing from address\", \"transaction\", transaction);\n    }\n    const nonce = stripZeros(arrayify(BigNumber.from(transaction.nonce).toHexString()));\n    return getAddress(hexDataSlice(keccak256(encode([from, nonce])), 12));\n}\nexport function getCreate2Address(from, salt, initCodeHash) {\n    if (hexDataLength(salt) !== 32) {\n        logger.throwArgumentError(\"salt must be 32 bytes\", \"salt\", salt);\n    }\n    if (hexDataLength(initCodeHash) !== 32) {\n        logger.throwArgumentError(\"initCodeHash must be 32 bytes\", \"initCodeHash\", initCodeHash);\n    }\n    return getAddress(hexDataSlice(keccak256(concat([\"0xff\", getAddress(from), salt, initCodeHash])), 12));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}