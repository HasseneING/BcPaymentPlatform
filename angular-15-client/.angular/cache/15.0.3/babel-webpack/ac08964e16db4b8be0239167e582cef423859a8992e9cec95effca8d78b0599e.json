{"ast":null,"code":"import _asyncToGenerator from \"F:/DDesktop/MEAN_BC/mean-stack-authentication-authorization-master/angular-15-client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpHeaders } from '@angular/common/http';\nimport Web3 from 'web3';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst API_URL = 'http://localhost:8080/api/test/';\nconst AUTH_API = 'http://localhost:8080/api/auth/';\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport class UserService {\n  constructor(http) {\n    var _this = this;\n    this.http = http;\n    this.contractAddress = \"0x52E963CBddCA90626efa7535c33d8219230d5D39\";\n    this.abiContract = [{\n      \"inputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"constructor\"\n    }, {\n      \"inputs\": [],\n      \"name\": \"balance\",\n      \"outputs\": [{\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }, {\n      \"inputs\": [],\n      \"name\": \"balanceRecieved\",\n      \"outputs\": [{\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }, {\n      \"inputs\": [],\n      \"name\": \"deposit\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    }, {\n      \"inputs\": [],\n      \"name\": \"getContractBalance\",\n      \"outputs\": [{\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }, {\n      \"inputs\": [],\n      \"name\": \"receiver\",\n      \"outputs\": [{\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }, {\n      \"inputs\": [],\n      \"name\": \"transactionValue\",\n      \"outputs\": [{\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }, {\n      \"inputs\": [],\n      \"name\": \"withdrawAllToOwner\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }, {\n      \"inputs\": [{\n        \"internalType\": \"uint256\",\n        \"name\": \"_transactionValue\",\n        \"type\": \"uint256\"\n      }, {\n        \"internalType\": \"address\",\n        \"name\": \"_other\",\n        \"type\": \"address\"\n      }],\n      \"name\": \"withdrawToOther\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    }, {\n      \"inputs\": [{\n        \"internalType\": \"uint256\",\n        \"name\": \"_transactionValue\",\n        \"type\": \"uint256\"\n      }],\n      \"name\": \"withdrawToOwner\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    }, {\n      \"stateMutability\": \"payable\",\n      \"type\": \"receive\"\n    }];\n    this.connectWallet = /*#__PURE__*/_asyncToGenerator(function* () {\n      try {\n        if (!_this.ethereum) return alert(\"Please install meta mask\");\n        const accounts = yield _this.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n      } catch (e) {\n        throw new Error(\"No thereum object found\");\n      }\n    });\n    this.checkWalletConnected = /*#__PURE__*/_asyncToGenerator(function* () {\n      try {\n        if (!_this.ethereum) return alert(\"Please install meta mask \");\n        const accounts = yield _this.ethereum.request({\n          method: 'eth_accounts'\n        });\n        return accounts;\n      } catch (e) {\n        throw new Error(\"No ethereum object found\");\n      }\n    });\n    const {\n      ethereum\n    } = window;\n    this.ethereum = ethereum;\n    const provider = \"wss://sepolia.infura.io/v3/acaa2699bfc84be092239f5676e3192a\";\n    var web3Provider = new Web3.providers.HttpProvider(provider);\n    this.web3 = new Web3(web3Provider);\n  }\n  update(forwarderAddr, id) {\n    console.log('updateing');\n    return this.http.put(AUTH_API + 'signout/' + id,\n    //this is an update route SOMEHOW\n    {\n      forwarderAddr\n    }, httpOptions);\n  }\n  transactToAddress(from, To, ethValue) {\n    const params = [{\n      from: from,\n      to: To,\n      value: this.web3.utils.numberToHex(this.web3.utils.toWei(String(ethValue), 'ether'))\n    }];\n    this.ethereum.request({\n      method: 'eth_sendTransaction',\n      params\n    }).then(result => {\n      console.log(\"sepolia.etherscan.io/\" + result);\n    }).catch(error => {});\n  }\n  getPublicContent() {\n    return this.http.get(API_URL + 'all', {\n      responseType: 'text'\n    });\n  }\n  getUserBoard() {\n    return this.http.get(API_URL + 'user', {\n      responseType: 'text'\n    });\n  }\n  getModeratorBoard() {\n    return this.http.get(API_URL + 'mod', {\n      responseType: 'text'\n    });\n  }\n  getAdminBoard() {\n    return this.http.get(API_URL + 'admin', {\n      responseType: 'text'\n    });\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","Web3","API_URL","AUTH_API","httpOptions","headers","UserService","constructor","http","ethereum","alert","accounts","request","method","e","Error","window","provider","web3Provider","providers","HttpProvider","web3","update","forwarderAddr","id","console","log","put","transactToAddress","from","To","ethValue","params","to","value","utils","numberToHex","toWei","String","then","result","catch","error","getPublicContent","get","responseType","getUserBoard","getModeratorBoard","getAdminBoard","factory","providedIn"],"sourceRoot":"","sources":["F:\\DDesktop\\MEAN_BC\\mean-stack-authentication-authorization-master\\angular-15-client\\src\\app\\_services\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport Web3 from 'web3';\n\nconst API_URL = 'http://localhost:8080/api/test/';\nconst AUTH_API = 'http://localhost:8080/api/auth/';\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserService {\n\n\n  public contractAddress=\"0x52E963CBddCA90626efa7535c33d8219230d5D39\";\n  public abiContract=[\n      {\n        \"inputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"constructor\"\n      },\n      {\n        \"inputs\": [],\n        \"name\": \"balance\",\n        \"outputs\": [\n          {\n            \"internalType\": \"uint256\",\n            \"name\": \"\",\n            \"type\": \"uint256\"\n          }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n      },\n      {\n        \"inputs\": [],\n        \"name\": \"balanceRecieved\",\n        \"outputs\": [\n          {\n            \"internalType\": \"uint256\",\n            \"name\": \"\",\n            \"type\": \"uint256\"\n          }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n      },\n      {\n        \"inputs\": [],\n        \"name\": \"deposit\",\n        \"outputs\": [],\n        \"stateMutability\": \"payable\",\n        \"type\": \"function\"\n      },\n      {\n        \"inputs\": [],\n        \"name\": \"getContractBalance\",\n        \"outputs\": [\n          {\n            \"internalType\": \"uint256\",\n            \"name\": \"\",\n            \"type\": \"uint256\"\n          }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n      },\n      {\n        \"inputs\": [],\n        \"name\": \"receiver\",\n        \"outputs\": [\n          {\n            \"internalType\": \"address\",\n            \"name\": \"\",\n            \"type\": \"address\"\n          }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n      },\n      {\n        \"inputs\": [],\n        \"name\": \"transactionValue\",\n        \"outputs\": [\n          {\n            \"internalType\": \"uint256\",\n            \"name\": \"\",\n            \"type\": \"uint256\"\n          }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n      },\n      {\n        \"inputs\": [],\n        \"name\": \"withdrawAllToOwner\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n      },\n      {\n        \"inputs\": [\n          {\n            \"internalType\": \"uint256\",\n            \"name\": \"_transactionValue\",\n            \"type\": \"uint256\"\n          },\n          {\n            \"internalType\": \"address\",\n            \"name\": \"_other\",\n            \"type\": \"address\"\n          }\n        ],\n        \"name\": \"withdrawToOther\",\n        \"outputs\": [],\n        \"stateMutability\": \"payable\",\n        \"type\": \"function\"\n      },\n      {\n        \"inputs\": [\n          {\n            \"internalType\": \"uint256\",\n            \"name\": \"_transactionValue\",\n            \"type\": \"uint256\"\n          }\n        ],\n        \"name\": \"withdrawToOwner\",\n        \"outputs\": [],\n        \"stateMutability\": \"payable\",\n        \"type\": \"function\"\n      },\n      {\n        \"stateMutability\": \"payable\",\n        \"type\": \"receive\"\n      }\n    ];\n\n\n  public ethereum;\n  private web3;\n  constructor(private http: HttpClient) {\n    const {ethereum} = <any>window;\n    this.ethereum = ethereum;\n    const provider = \"wss://sepolia.infura.io/v3/acaa2699bfc84be092239f5676e3192a\";\n    var web3Provider = new Web3.providers.HttpProvider(provider);\n    this.web3 = new Web3(web3Provider);\n  }\n\n  public connectWallet = async () => {\n    try{\n      if(!this.ethereum) return alert(\"Please install meta mask\");\n      const accounts = await this.ethereum.request({method: 'eth_requestAccounts'});\n    }\n    catch(e){\n       throw new Error(\"No thereum object found\")\n    }\n  }\n\n  public checkWalletConnected = async () => {\n    try{\n      if(!this.ethereum) return alert(\"Please install meta mask \")\n      const accounts = await this.ethereum.request({method: 'eth_accounts'});\n      return accounts;\n    }\n    catch(e){\n      throw new Error(\"No ethereum object found\");\n    }\n  }\n\n  update(forwarderAddr: string, id: string): Observable<any> {\n    console.log('updateing');\n    return this.http.put(\n      AUTH_API + 'signout/'+id,//this is an update route SOMEHOW\n      {forwarderAddr},\n      httpOptions\n    );\n  }\n  transactToAddress(from:String,To:String,ethValue:String){\n    const params = [\n      {\n        from: from,//this.walletId,\n        to: To,//this.forwarderAddress,\n        value: this.web3.utils.numberToHex(this.web3.utils.toWei(String(ethValue), 'ether')),\n      }\n    ]\n    this.ethereum\n      .request({\n        method: 'eth_sendTransaction',\n        params,\n      })\n      .then((result: any) => {\n        console.log(\"sepolia.etherscan.io/\"+result);\n      })\n      .catch((error: any) => {\n      });\n\n  };\n\n  \n  getPublicContent(): Observable<any> {\n    return this.http.get(API_URL + 'all', { responseType: 'text' });\n  }\n\n  getUserBoard(): Observable<any> {\n    return this.http.get(API_URL + 'user', { responseType: 'text' });\n  }\n  \n  getModeratorBoard(): Observable<any> {\n    return this.http.get(API_URL + 'mod', { responseType: 'text' });\n  }\n\n  getAdminBoard(): Observable<any> {\n    return this.http.get(API_URL + 'admin', { responseType: 'text' });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}