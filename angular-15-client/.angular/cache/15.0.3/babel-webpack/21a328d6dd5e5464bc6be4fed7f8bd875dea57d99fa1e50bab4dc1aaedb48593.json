{"ast":null,"code":"\"use strict\";\n\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexDataLength, hexDataSlice, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { accessListify, parse as parseTransaction } from \"@ethersproject/transactions\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport class Formatter {\n  constructor() {\n    this.formats = this.getDefaultFormats();\n  }\n  getDefaultFormats() {\n    const formats = {};\n    const address = this.address.bind(this);\n    const bigNumber = this.bigNumber.bind(this);\n    const blockTag = this.blockTag.bind(this);\n    const data = this.data.bind(this);\n    const hash = this.hash.bind(this);\n    const hex = this.hex.bind(this);\n    const number = this.number.bind(this);\n    const type = this.type.bind(this);\n    const strictData = v => {\n      return this.data(v, true);\n    };\n    formats.transaction = {\n      hash: hash,\n      type: type,\n      accessList: Formatter.allowNull(this.accessList.bind(this), null),\n      blockHash: Formatter.allowNull(hash, null),\n      blockNumber: Formatter.allowNull(number, null),\n      transactionIndex: Formatter.allowNull(number, null),\n      confirmations: Formatter.allowNull(number, null),\n      from: address,\n      // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)\n      // must be set\n      gasPrice: Formatter.allowNull(bigNumber),\n      maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n      maxFeePerGas: Formatter.allowNull(bigNumber),\n      gasLimit: bigNumber,\n      to: Formatter.allowNull(address, null),\n      value: bigNumber,\n      nonce: number,\n      data: data,\n      r: Formatter.allowNull(this.uint256),\n      s: Formatter.allowNull(this.uint256),\n      v: Formatter.allowNull(number),\n      creates: Formatter.allowNull(address, null),\n      raw: Formatter.allowNull(data)\n    };\n    formats.transactionRequest = {\n      from: Formatter.allowNull(address),\n      nonce: Formatter.allowNull(number),\n      gasLimit: Formatter.allowNull(bigNumber),\n      gasPrice: Formatter.allowNull(bigNumber),\n      maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n      maxFeePerGas: Formatter.allowNull(bigNumber),\n      to: Formatter.allowNull(address),\n      value: Formatter.allowNull(bigNumber),\n      data: Formatter.allowNull(strictData),\n      type: Formatter.allowNull(number),\n      accessList: Formatter.allowNull(this.accessList.bind(this), null)\n    };\n    formats.receiptLog = {\n      transactionIndex: number,\n      blockNumber: number,\n      transactionHash: hash,\n      address: address,\n      topics: Formatter.arrayOf(hash),\n      data: data,\n      logIndex: number,\n      blockHash: hash\n    };\n    formats.receipt = {\n      to: Formatter.allowNull(this.address, null),\n      from: Formatter.allowNull(this.address, null),\n      contractAddress: Formatter.allowNull(address, null),\n      transactionIndex: number,\n      // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n      root: Formatter.allowNull(hex),\n      gasUsed: bigNumber,\n      logsBloom: Formatter.allowNull(data),\n      blockHash: hash,\n      transactionHash: hash,\n      logs: Formatter.arrayOf(this.receiptLog.bind(this)),\n      blockNumber: number,\n      confirmations: Formatter.allowNull(number, null),\n      cumulativeGasUsed: bigNumber,\n      effectiveGasPrice: Formatter.allowNull(bigNumber),\n      status: Formatter.allowNull(number),\n      type: type\n    };\n    formats.block = {\n      hash: Formatter.allowNull(hash),\n      parentHash: hash,\n      number: number,\n      timestamp: number,\n      nonce: Formatter.allowNull(hex),\n      difficulty: this.difficulty.bind(this),\n      gasLimit: bigNumber,\n      gasUsed: bigNumber,\n      miner: Formatter.allowNull(address),\n      extraData: data,\n      transactions: Formatter.allowNull(Formatter.arrayOf(hash)),\n      baseFeePerGas: Formatter.allowNull(bigNumber)\n    };\n    formats.blockWithTransactions = shallowCopy(formats.block);\n    formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));\n    formats.filter = {\n      fromBlock: Formatter.allowNull(blockTag, undefined),\n      toBlock: Formatter.allowNull(blockTag, undefined),\n      blockHash: Formatter.allowNull(hash, undefined),\n      address: Formatter.allowNull(address, undefined),\n      topics: Formatter.allowNull(this.topics.bind(this), undefined)\n    };\n    formats.filterLog = {\n      blockNumber: Formatter.allowNull(number),\n      blockHash: Formatter.allowNull(hash),\n      transactionIndex: number,\n      removed: Formatter.allowNull(this.boolean.bind(this)),\n      address: address,\n      data: Formatter.allowFalsish(data, \"0x\"),\n      topics: Formatter.arrayOf(hash),\n      transactionHash: hash,\n      logIndex: number\n    };\n    return formats;\n  }\n  accessList(accessList) {\n    return accessListify(accessList || []);\n  }\n  // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number\n  // Strict! Used on input.\n  number(number) {\n    if (number === \"0x\") {\n      return 0;\n    }\n    return BigNumber.from(number).toNumber();\n  }\n  type(number) {\n    if (number === \"0x\" || number == null) {\n      return 0;\n    }\n    return BigNumber.from(number).toNumber();\n  }\n  // Strict! Used on input.\n  bigNumber(value) {\n    return BigNumber.from(value);\n  }\n  // Requires a boolean, \"true\" or  \"false\"; returns a boolean\n  boolean(value) {\n    if (typeof value === \"boolean\") {\n      return value;\n    }\n    if (typeof value === \"string\") {\n      value = value.toLowerCase();\n      if (value === \"true\") {\n        return true;\n      }\n      if (value === \"false\") {\n        return false;\n      }\n    }\n    throw new Error(\"invalid boolean - \" + value);\n  }\n  hex(value, strict) {\n    if (typeof value === \"string\") {\n      if (!strict && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n      }\n      if (isHexString(value)) {\n        return value.toLowerCase();\n      }\n    }\n    return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n  }\n  data(value, strict) {\n    const result = this.hex(value, strict);\n    if (result.length % 2 !== 0) {\n      throw new Error(\"invalid data; odd-length - \" + value);\n    }\n    return result;\n  }\n  // Requires an address\n  // Strict! Used on input.\n  address(value) {\n    return getAddress(value);\n  }\n  callAddress(value) {\n    if (!isHexString(value, 32)) {\n      return null;\n    }\n    const address = getAddress(hexDataSlice(value, 12));\n    return address === AddressZero ? null : address;\n  }\n  contractAddress(value) {\n    return getContractAddress(value);\n  }\n  // Strict! Used on input.\n  blockTag(blockTag) {\n    if (blockTag == null) {\n      return \"latest\";\n    }\n    if (blockTag === \"earliest\") {\n      return \"0x0\";\n    }\n    switch (blockTag) {\n      case \"earliest\":\n        return \"0x0\";\n      case \"latest\":\n      case \"pending\":\n      case \"safe\":\n      case \"finalized\":\n        return blockTag;\n    }\n    if (typeof blockTag === \"number\" || isHexString(blockTag)) {\n      return hexValue(blockTag);\n    }\n    throw new Error(\"invalid blockTag\");\n  }\n  // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.\n  hash(value, strict) {\n    const result = this.hex(value, strict);\n    if (hexDataLength(result) !== 32) {\n      return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n    }\n    return result;\n  }\n  // Returns the difficulty as a number, or if too large (i.e. PoA network) null\n  difficulty(value) {\n    if (value == null) {\n      return null;\n    }\n    const v = BigNumber.from(value);\n    try {\n      return v.toNumber();\n    } catch (error) {}\n    return null;\n  }\n  uint256(value) {\n    if (!isHexString(value)) {\n      throw new Error(\"invalid uint256\");\n    }\n    return hexZeroPad(value, 32);\n  }\n  _block(value, format) {\n    if (value.author != null && value.miner == null) {\n      value.miner = value.author;\n    }\n    // The difficulty may need to come from _difficulty in recursed blocks\n    const difficulty = value._difficulty != null ? value._difficulty : value.difficulty;\n    const result = Formatter.check(format, value);\n    result._difficulty = difficulty == null ? null : BigNumber.from(difficulty);\n    return result;\n  }\n  block(value) {\n    return this._block(value, this.formats.block);\n  }\n  blockWithTransactions(value) {\n    return this._block(value, this.formats.blockWithTransactions);\n  }\n  // Strict! Used on input.\n  transactionRequest(value) {\n    return Formatter.check(this.formats.transactionRequest, value);\n  }\n  transactionResponse(transaction) {\n    // Rename gas to gasLimit\n    if (transaction.gas != null && transaction.gasLimit == null) {\n      transaction.gasLimit = transaction.gas;\n    }\n    // Some clients (TestRPC) do strange things like return 0x0 for the\n    // 0 address; correct this to be a real address\n    if (transaction.to && BigNumber.from(transaction.to).isZero()) {\n      transaction.to = \"0x0000000000000000000000000000000000000000\";\n    }\n    // Rename input to data\n    if (transaction.input != null && transaction.data == null) {\n      transaction.data = transaction.input;\n    }\n    // If to and creates are empty, populate the creates from the transaction\n    if (transaction.to == null && transaction.creates == null) {\n      transaction.creates = this.contractAddress(transaction);\n    }\n    if ((transaction.type === 1 || transaction.type === 2) && transaction.accessList == null) {\n      transaction.accessList = [];\n    }\n    const result = Formatter.check(this.formats.transaction, transaction);\n    if (transaction.chainId != null) {\n      let chainId = transaction.chainId;\n      if (isHexString(chainId)) {\n        chainId = BigNumber.from(chainId).toNumber();\n      }\n      result.chainId = chainId;\n    } else {\n      let chainId = transaction.networkId;\n      // geth-etc returns chainId\n      if (chainId == null && result.v == null) {\n        chainId = transaction.chainId;\n      }\n      if (isHexString(chainId)) {\n        chainId = BigNumber.from(chainId).toNumber();\n      }\n      if (typeof chainId !== \"number\" && result.v != null) {\n        chainId = (result.v - 35) / 2;\n        if (chainId < 0) {\n          chainId = 0;\n        }\n        chainId = parseInt(chainId);\n      }\n      if (typeof chainId !== \"number\") {\n        chainId = 0;\n      }\n      result.chainId = chainId;\n    }\n    // 0x0000... should actually be null\n    if (result.blockHash && result.blockHash.replace(/0/g, \"\") === \"x\") {\n      result.blockHash = null;\n    }\n    return result;\n  }\n  transaction(value) {\n    return parseTransaction(value);\n  }\n  receiptLog(value) {\n    return Formatter.check(this.formats.receiptLog, value);\n  }\n  receipt(value) {\n    const result = Formatter.check(this.formats.receipt, value);\n    // RSK incorrectly implemented EIP-658, so we munge things a bit here for it\n    if (result.root != null) {\n      if (result.root.length <= 4) {\n        // Could be 0x00, 0x0, 0x01 or 0x1\n        const value = BigNumber.from(result.root).toNumber();\n        if (value === 0 || value === 1) {\n          // Make sure if both are specified, they match\n          if (result.status != null && result.status !== value) {\n            logger.throwArgumentError(\"alt-root-status/status mismatch\", \"value\", {\n              root: result.root,\n              status: result.status\n            });\n          }\n          result.status = value;\n          delete result.root;\n        } else {\n          logger.throwArgumentError(\"invalid alt-root-status\", \"value.root\", result.root);\n        }\n      } else if (result.root.length !== 66) {\n        // Must be a valid bytes32\n        logger.throwArgumentError(\"invalid root hash\", \"value.root\", result.root);\n      }\n    }\n    if (result.status != null) {\n      result.byzantium = true;\n    }\n    return result;\n  }\n  topics(value) {\n    if (Array.isArray(value)) {\n      return value.map(v => this.topics(v));\n    } else if (value != null) {\n      return this.hash(value, true);\n    }\n    return null;\n  }\n  filter(value) {\n    return Formatter.check(this.formats.filter, value);\n  }\n  filterLog(value) {\n    return Formatter.check(this.formats.filterLog, value);\n  }\n  static check(format, object) {\n    const result = {};\n    for (const key in format) {\n      try {\n        const value = format[key](object[key]);\n        if (value !== undefined) {\n          result[key] = value;\n        }\n      } catch (error) {\n        error.checkKey = key;\n        error.checkValue = object[key];\n        throw error;\n      }\n    }\n    return result;\n  }\n  // if value is null-ish, nullValue is returned\n  static allowNull(format, nullValue) {\n    return function (value) {\n      if (value == null) {\n        return nullValue;\n      }\n      return format(value);\n    };\n  }\n  // If value is false-ish, replaceValue is returned\n  static allowFalsish(format, replaceValue) {\n    return function (value) {\n      if (!value) {\n        return replaceValue;\n      }\n      return format(value);\n    };\n  }\n  // Requires an Array satisfying check\n  static arrayOf(format) {\n    return function (array) {\n      if (!Array.isArray(array)) {\n        throw new Error(\"not an array\");\n      }\n      const result = [];\n      array.forEach(function (value) {\n        result.push(format(value));\n      });\n      return result;\n    };\n  }\n}\nexport function isCommunityResourcable(value) {\n  return value && typeof value.isCommunityResource === \"function\";\n}\nexport function isCommunityResource(value) {\n  return isCommunityResourcable(value) && value.isCommunityResource();\n}\n// Show the throttle message only once\nlet throttleMessage = false;\nexport function showThrottleMessage() {\n  if (throttleMessage) {\n    return;\n  }\n  throttleMessage = true;\n  console.log(\"========= NOTICE =========\");\n  console.log(\"Request-Rate Exceeded  (this message will not be repeated)\");\n  console.log(\"\");\n  console.log(\"The default API keys for each service are provided as a highly-throttled,\");\n  console.log(\"community resource for low-traffic projects and early prototyping.\");\n  console.log(\"\");\n  console.log(\"While your application will continue to function, we highly recommended\");\n  console.log(\"signing up for your own API keys to improve performance, increase your\");\n  console.log(\"request rate/limit and enable other perks, such as metrics and advanced APIs.\");\n  console.log(\"\");\n  console.log(\"For more details: https:/\\/docs.ethers.io/api-keys/\");\n  console.log(\"==========================\");\n}","map":{"version":3,"names":["getAddress","getContractAddress","BigNumber","hexDataLength","hexDataSlice","hexValue","hexZeroPad","isHexString","AddressZero","shallowCopy","accessListify","parse","parseTransaction","Logger","version","logger","Formatter","constructor","formats","getDefaultFormats","address","bind","bigNumber","blockTag","data","hash","hex","number","type","strictData","v","transaction","accessList","allowNull","blockHash","blockNumber","transactionIndex","confirmations","from","gasPrice","maxPriorityFeePerGas","maxFeePerGas","gasLimit","to","value","nonce","r","uint256","s","creates","raw","transactionRequest","receiptLog","transactionHash","topics","arrayOf","logIndex","receipt","contractAddress","root","gasUsed","logsBloom","logs","cumulativeGasUsed","effectiveGasPrice","status","block","parentHash","timestamp","difficulty","miner","extraData","transactions","baseFeePerGas","blockWithTransactions","transactionResponse","filter","fromBlock","undefined","toBlock","filterLog","removed","boolean","allowFalsish","toNumber","toLowerCase","Error","strict","substring","throwArgumentError","result","length","callAddress","error","_block","format","author","_difficulty","check","gas","isZero","input","chainId","networkId","parseInt","replace","byzantium","Array","isArray","map","object","key","checkKey","checkValue","nullValue","replaceValue","array","forEach","push","isCommunityResourcable","isCommunityResource","throttleMessage","showThrottleMessage","console","log"],"sources":["F:/DDesktop/MEAN_BC/mean-stack-authentication-authorization-master/angular-15-client/node_modules/@ethersproject/providers/lib.esm/formatter.js"],"sourcesContent":["\"use strict\";\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexDataLength, hexDataSlice, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { accessListify, parse as parseTransaction } from \"@ethersproject/transactions\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport class Formatter {\n    constructor() {\n        this.formats = this.getDefaultFormats();\n    }\n    getDefaultFormats() {\n        const formats = ({});\n        const address = this.address.bind(this);\n        const bigNumber = this.bigNumber.bind(this);\n        const blockTag = this.blockTag.bind(this);\n        const data = this.data.bind(this);\n        const hash = this.hash.bind(this);\n        const hex = this.hex.bind(this);\n        const number = this.number.bind(this);\n        const type = this.type.bind(this);\n        const strictData = (v) => { return this.data(v, true); };\n        formats.transaction = {\n            hash: hash,\n            type: type,\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n            blockHash: Formatter.allowNull(hash, null),\n            blockNumber: Formatter.allowNull(number, null),\n            transactionIndex: Formatter.allowNull(number, null),\n            confirmations: Formatter.allowNull(number, null),\n            from: address,\n            // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)\n            // must be set\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n            gasLimit: bigNumber,\n            to: Formatter.allowNull(address, null),\n            value: bigNumber,\n            nonce: number,\n            data: data,\n            r: Formatter.allowNull(this.uint256),\n            s: Formatter.allowNull(this.uint256),\n            v: Formatter.allowNull(number),\n            creates: Formatter.allowNull(address, null),\n            raw: Formatter.allowNull(data),\n        };\n        formats.transactionRequest = {\n            from: Formatter.allowNull(address),\n            nonce: Formatter.allowNull(number),\n            gasLimit: Formatter.allowNull(bigNumber),\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n            to: Formatter.allowNull(address),\n            value: Formatter.allowNull(bigNumber),\n            data: Formatter.allowNull(strictData),\n            type: Formatter.allowNull(number),\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n        };\n        formats.receiptLog = {\n            transactionIndex: number,\n            blockNumber: number,\n            transactionHash: hash,\n            address: address,\n            topics: Formatter.arrayOf(hash),\n            data: data,\n            logIndex: number,\n            blockHash: hash,\n        };\n        formats.receipt = {\n            to: Formatter.allowNull(this.address, null),\n            from: Formatter.allowNull(this.address, null),\n            contractAddress: Formatter.allowNull(address, null),\n            transactionIndex: number,\n            // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n            root: Formatter.allowNull(hex),\n            gasUsed: bigNumber,\n            logsBloom: Formatter.allowNull(data),\n            blockHash: hash,\n            transactionHash: hash,\n            logs: Formatter.arrayOf(this.receiptLog.bind(this)),\n            blockNumber: number,\n            confirmations: Formatter.allowNull(number, null),\n            cumulativeGasUsed: bigNumber,\n            effectiveGasPrice: Formatter.allowNull(bigNumber),\n            status: Formatter.allowNull(number),\n            type: type\n        };\n        formats.block = {\n            hash: Formatter.allowNull(hash),\n            parentHash: hash,\n            number: number,\n            timestamp: number,\n            nonce: Formatter.allowNull(hex),\n            difficulty: this.difficulty.bind(this),\n            gasLimit: bigNumber,\n            gasUsed: bigNumber,\n            miner: Formatter.allowNull(address),\n            extraData: data,\n            transactions: Formatter.allowNull(Formatter.arrayOf(hash)),\n            baseFeePerGas: Formatter.allowNull(bigNumber)\n        };\n        formats.blockWithTransactions = shallowCopy(formats.block);\n        formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));\n        formats.filter = {\n            fromBlock: Formatter.allowNull(blockTag, undefined),\n            toBlock: Formatter.allowNull(blockTag, undefined),\n            blockHash: Formatter.allowNull(hash, undefined),\n            address: Formatter.allowNull(address, undefined),\n            topics: Formatter.allowNull(this.topics.bind(this), undefined),\n        };\n        formats.filterLog = {\n            blockNumber: Formatter.allowNull(number),\n            blockHash: Formatter.allowNull(hash),\n            transactionIndex: number,\n            removed: Formatter.allowNull(this.boolean.bind(this)),\n            address: address,\n            data: Formatter.allowFalsish(data, \"0x\"),\n            topics: Formatter.arrayOf(hash),\n            transactionHash: hash,\n            logIndex: number,\n        };\n        return formats;\n    }\n    accessList(accessList) {\n        return accessListify(accessList || []);\n    }\n    // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number\n    // Strict! Used on input.\n    number(number) {\n        if (number === \"0x\") {\n            return 0;\n        }\n        return BigNumber.from(number).toNumber();\n    }\n    type(number) {\n        if (number === \"0x\" || number == null) {\n            return 0;\n        }\n        return BigNumber.from(number).toNumber();\n    }\n    // Strict! Used on input.\n    bigNumber(value) {\n        return BigNumber.from(value);\n    }\n    // Requires a boolean, \"true\" or  \"false\"; returns a boolean\n    boolean(value) {\n        if (typeof (value) === \"boolean\") {\n            return value;\n        }\n        if (typeof (value) === \"string\") {\n            value = value.toLowerCase();\n            if (value === \"true\") {\n                return true;\n            }\n            if (value === \"false\") {\n                return false;\n            }\n        }\n        throw new Error(\"invalid boolean - \" + value);\n    }\n    hex(value, strict) {\n        if (typeof (value) === \"string\") {\n            if (!strict && value.substring(0, 2) !== \"0x\") {\n                value = \"0x\" + value;\n            }\n            if (isHexString(value)) {\n                return value.toLowerCase();\n            }\n        }\n        return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n    }\n    data(value, strict) {\n        const result = this.hex(value, strict);\n        if ((result.length % 2) !== 0) {\n            throw new Error(\"invalid data; odd-length - \" + value);\n        }\n        return result;\n    }\n    // Requires an address\n    // Strict! Used on input.\n    address(value) {\n        return getAddress(value);\n    }\n    callAddress(value) {\n        if (!isHexString(value, 32)) {\n            return null;\n        }\n        const address = getAddress(hexDataSlice(value, 12));\n        return (address === AddressZero) ? null : address;\n    }\n    contractAddress(value) {\n        return getContractAddress(value);\n    }\n    // Strict! Used on input.\n    blockTag(blockTag) {\n        if (blockTag == null) {\n            return \"latest\";\n        }\n        if (blockTag === \"earliest\") {\n            return \"0x0\";\n        }\n        switch (blockTag) {\n            case \"earliest\": return \"0x0\";\n            case \"latest\":\n            case \"pending\":\n            case \"safe\":\n            case \"finalized\":\n                return blockTag;\n        }\n        if (typeof (blockTag) === \"number\" || isHexString(blockTag)) {\n            return hexValue(blockTag);\n        }\n        throw new Error(\"invalid blockTag\");\n    }\n    // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.\n    hash(value, strict) {\n        const result = this.hex(value, strict);\n        if (hexDataLength(result) !== 32) {\n            return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n        }\n        return result;\n    }\n    // Returns the difficulty as a number, or if too large (i.e. PoA network) null\n    difficulty(value) {\n        if (value == null) {\n            return null;\n        }\n        const v = BigNumber.from(value);\n        try {\n            return v.toNumber();\n        }\n        catch (error) { }\n        return null;\n    }\n    uint256(value) {\n        if (!isHexString(value)) {\n            throw new Error(\"invalid uint256\");\n        }\n        return hexZeroPad(value, 32);\n    }\n    _block(value, format) {\n        if (value.author != null && value.miner == null) {\n            value.miner = value.author;\n        }\n        // The difficulty may need to come from _difficulty in recursed blocks\n        const difficulty = (value._difficulty != null) ? value._difficulty : value.difficulty;\n        const result = Formatter.check(format, value);\n        result._difficulty = ((difficulty == null) ? null : BigNumber.from(difficulty));\n        return result;\n    }\n    block(value) {\n        return this._block(value, this.formats.block);\n    }\n    blockWithTransactions(value) {\n        return this._block(value, this.formats.blockWithTransactions);\n    }\n    // Strict! Used on input.\n    transactionRequest(value) {\n        return Formatter.check(this.formats.transactionRequest, value);\n    }\n    transactionResponse(transaction) {\n        // Rename gas to gasLimit\n        if (transaction.gas != null && transaction.gasLimit == null) {\n            transaction.gasLimit = transaction.gas;\n        }\n        // Some clients (TestRPC) do strange things like return 0x0 for the\n        // 0 address; correct this to be a real address\n        if (transaction.to && BigNumber.from(transaction.to).isZero()) {\n            transaction.to = \"0x0000000000000000000000000000000000000000\";\n        }\n        // Rename input to data\n        if (transaction.input != null && transaction.data == null) {\n            transaction.data = transaction.input;\n        }\n        // If to and creates are empty, populate the creates from the transaction\n        if (transaction.to == null && transaction.creates == null) {\n            transaction.creates = this.contractAddress(transaction);\n        }\n        if ((transaction.type === 1 || transaction.type === 2) && transaction.accessList == null) {\n            transaction.accessList = [];\n        }\n        const result = Formatter.check(this.formats.transaction, transaction);\n        if (transaction.chainId != null) {\n            let chainId = transaction.chainId;\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n            result.chainId = chainId;\n        }\n        else {\n            let chainId = transaction.networkId;\n            // geth-etc returns chainId\n            if (chainId == null && result.v == null) {\n                chainId = transaction.chainId;\n            }\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n            if (typeof (chainId) !== \"number\" && result.v != null) {\n                chainId = (result.v - 35) / 2;\n                if (chainId < 0) {\n                    chainId = 0;\n                }\n                chainId = parseInt(chainId);\n            }\n            if (typeof (chainId) !== \"number\") {\n                chainId = 0;\n            }\n            result.chainId = chainId;\n        }\n        // 0x0000... should actually be null\n        if (result.blockHash && result.blockHash.replace(/0/g, \"\") === \"x\") {\n            result.blockHash = null;\n        }\n        return result;\n    }\n    transaction(value) {\n        return parseTransaction(value);\n    }\n    receiptLog(value) {\n        return Formatter.check(this.formats.receiptLog, value);\n    }\n    receipt(value) {\n        const result = Formatter.check(this.formats.receipt, value);\n        // RSK incorrectly implemented EIP-658, so we munge things a bit here for it\n        if (result.root != null) {\n            if (result.root.length <= 4) {\n                // Could be 0x00, 0x0, 0x01 or 0x1\n                const value = BigNumber.from(result.root).toNumber();\n                if (value === 0 || value === 1) {\n                    // Make sure if both are specified, they match\n                    if (result.status != null && (result.status !== value)) {\n                        logger.throwArgumentError(\"alt-root-status/status mismatch\", \"value\", { root: result.root, status: result.status });\n                    }\n                    result.status = value;\n                    delete result.root;\n                }\n                else {\n                    logger.throwArgumentError(\"invalid alt-root-status\", \"value.root\", result.root);\n                }\n            }\n            else if (result.root.length !== 66) {\n                // Must be a valid bytes32\n                logger.throwArgumentError(\"invalid root hash\", \"value.root\", result.root);\n            }\n        }\n        if (result.status != null) {\n            result.byzantium = true;\n        }\n        return result;\n    }\n    topics(value) {\n        if (Array.isArray(value)) {\n            return value.map((v) => this.topics(v));\n        }\n        else if (value != null) {\n            return this.hash(value, true);\n        }\n        return null;\n    }\n    filter(value) {\n        return Formatter.check(this.formats.filter, value);\n    }\n    filterLog(value) {\n        return Formatter.check(this.formats.filterLog, value);\n    }\n    static check(format, object) {\n        const result = {};\n        for (const key in format) {\n            try {\n                const value = format[key](object[key]);\n                if (value !== undefined) {\n                    result[key] = value;\n                }\n            }\n            catch (error) {\n                error.checkKey = key;\n                error.checkValue = object[key];\n                throw error;\n            }\n        }\n        return result;\n    }\n    // if value is null-ish, nullValue is returned\n    static allowNull(format, nullValue) {\n        return (function (value) {\n            if (value == null) {\n                return nullValue;\n            }\n            return format(value);\n        });\n    }\n    // If value is false-ish, replaceValue is returned\n    static allowFalsish(format, replaceValue) {\n        return (function (value) {\n            if (!value) {\n                return replaceValue;\n            }\n            return format(value);\n        });\n    }\n    // Requires an Array satisfying check\n    static arrayOf(format) {\n        return (function (array) {\n            if (!Array.isArray(array)) {\n                throw new Error(\"not an array\");\n            }\n            const result = [];\n            array.forEach(function (value) {\n                result.push(format(value));\n            });\n            return result;\n        });\n    }\n}\nexport function isCommunityResourcable(value) {\n    return (value && typeof (value.isCommunityResource) === \"function\");\n}\nexport function isCommunityResource(value) {\n    return (isCommunityResourcable(value) && value.isCommunityResource());\n}\n// Show the throttle message only once\nlet throttleMessage = false;\nexport function showThrottleMessage() {\n    if (throttleMessage) {\n        return;\n    }\n    throttleMessage = true;\n    console.log(\"========= NOTICE =========\");\n    console.log(\"Request-Rate Exceeded  (this message will not be repeated)\");\n    console.log(\"\");\n    console.log(\"The default API keys for each service are provided as a highly-throttled,\");\n    console.log(\"community resource for low-traffic projects and early prototyping.\");\n    console.log(\"\");\n    console.log(\"While your application will continue to function, we highly recommended\");\n    console.log(\"signing up for your own API keys to improve performance, increase your\");\n    console.log(\"request rate/limit and enable other perks, such as metrics and advanced APIs.\");\n    console.log(\"\");\n    console.log(\"For more details: https:/\\/docs.ethers.io/api-keys/\");\n    console.log(\"==========================\");\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}