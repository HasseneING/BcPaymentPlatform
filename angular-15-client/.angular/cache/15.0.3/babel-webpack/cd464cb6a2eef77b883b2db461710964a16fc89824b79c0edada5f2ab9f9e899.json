{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\nimport { WebSocket } from \"./ws\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n/**\n *  Notes:\n *\n *  This provider differs a bit from the polling providers. One main\n *  difference is how it handles consistency. The polling providers\n *  will stall responses to ensure a consistent state, while this\n *  WebSocket provider assumes the connected backend will manage this.\n *\n *  For example, if a polling provider emits an event which indicates\n *  the event occurred in blockhash XXX, a call to fetch that block by\n *  its hash XXX, if not present will retry until it is present. This\n *  can occur when querying a pool of nodes that are mildly out of sync\n *  with each other.\n */\nlet NextId = 1;\n// For more info about the Real-time Event API see:\n//   https://geth.ethereum.org/docs/rpc/pubsub\nexport class WebSocketProvider extends JsonRpcProvider {\n  constructor(url, network) {\n    // This will be added in the future; please open an issue to expedite\n    if (network === \"any\") {\n      logger.throwError(\"WebSocketProvider does not support 'any' network yet\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"network:any\"\n      });\n    }\n    if (typeof url === \"string\") {\n      super(url, network);\n    } else {\n      super(\"_websocket\", network);\n    }\n    this._pollingInterval = -1;\n    this._wsReady = false;\n    if (typeof url === \"string\") {\n      defineReadOnly(this, \"_websocket\", new WebSocket(this.connection.url));\n    } else {\n      defineReadOnly(this, \"_websocket\", url);\n    }\n    defineReadOnly(this, \"_requests\", {});\n    defineReadOnly(this, \"_subs\", {});\n    defineReadOnly(this, \"_subIds\", {});\n    defineReadOnly(this, \"_detectNetwork\", super.detectNetwork());\n    // Stall sending requests until the socket is open...\n    this.websocket.onopen = () => {\n      this._wsReady = true;\n      Object.keys(this._requests).forEach(id => {\n        this.websocket.send(this._requests[id].payload);\n      });\n    };\n    this.websocket.onmessage = messageEvent => {\n      const data = messageEvent.data;\n      const result = JSON.parse(data);\n      if (result.id != null) {\n        const id = String(result.id);\n        const request = this._requests[id];\n        delete this._requests[id];\n        if (result.result !== undefined) {\n          request.callback(null, result.result);\n          this.emit(\"debug\", {\n            action: \"response\",\n            request: JSON.parse(request.payload),\n            response: result.result,\n            provider: this\n          });\n        } else {\n          let error = null;\n          if (result.error) {\n            error = new Error(result.error.message || \"unknown error\");\n            defineReadOnly(error, \"code\", result.error.code || null);\n            defineReadOnly(error, \"response\", data);\n          } else {\n            error = new Error(\"unknown error\");\n          }\n          request.callback(error, undefined);\n          this.emit(\"debug\", {\n            action: \"response\",\n            error: error,\n            request: JSON.parse(request.payload),\n            provider: this\n          });\n        }\n      } else if (result.method === \"eth_subscription\") {\n        // Subscription...\n        const sub = this._subs[result.params.subscription];\n        if (sub) {\n          //this.emit.apply(this,                  );\n          sub.processFunc(result.params.result);\n        }\n      } else {\n        console.warn(\"this should not happen\");\n      }\n    };\n    // This Provider does not actually poll, but we want to trigger\n    // poll events for things that depend on them (like stalling for\n    // block and transaction lookups)\n    const fauxPoll = setInterval(() => {\n      this.emit(\"poll\");\n    }, 1000);\n    if (fauxPoll.unref) {\n      fauxPoll.unref();\n    }\n  }\n  // Cannot narrow the type of _websocket, as that is not backwards compatible\n  // so we add a getter and let the WebSocket be a public API.\n  get websocket() {\n    return this._websocket;\n  }\n  detectNetwork() {\n    return this._detectNetwork;\n  }\n  get pollingInterval() {\n    return 0;\n  }\n  resetEventsBlock(blockNumber) {\n    logger.throwError(\"cannot reset events block on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"resetEventBlock\"\n    });\n  }\n  set pollingInterval(value) {\n    logger.throwError(\"cannot set polling interval on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"setPollingInterval\"\n    });\n  }\n  poll() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return null;\n    });\n  }\n  set polling(value) {\n    if (!value) {\n      return;\n    }\n    logger.throwError(\"cannot set polling on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"setPolling\"\n    });\n  }\n  send(method, params) {\n    const rid = NextId++;\n    return new Promise((resolve, reject) => {\n      function callback(error, result) {\n        if (error) {\n          return reject(error);\n        }\n        return resolve(result);\n      }\n      const payload = JSON.stringify({\n        method: method,\n        params: params,\n        id: rid,\n        jsonrpc: \"2.0\"\n      });\n      this.emit(\"debug\", {\n        action: \"request\",\n        request: JSON.parse(payload),\n        provider: this\n      });\n      this._requests[String(rid)] = {\n        callback,\n        payload\n      };\n      if (this._wsReady) {\n        this.websocket.send(payload);\n      }\n    });\n  }\n  static defaultUrl() {\n    return \"ws:/\\/localhost:8546\";\n  }\n  _subscribe(tag, param, processFunc) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let subIdPromise = this._subIds[tag];\n      if (subIdPromise == null) {\n        subIdPromise = Promise.all(param).then(param => {\n          return this.send(\"eth_subscribe\", param);\n        });\n        this._subIds[tag] = subIdPromise;\n      }\n      const subId = yield subIdPromise;\n      this._subs[subId] = {\n        tag,\n        processFunc\n      };\n    });\n  }\n  _startEvent(event) {\n    switch (event.type) {\n      case \"block\":\n        this._subscribe(\"block\", [\"newHeads\"], result => {\n          const blockNumber = BigNumber.from(result.number).toNumber();\n          this._emitted.block = blockNumber;\n          this.emit(\"block\", blockNumber);\n        });\n        break;\n      case \"pending\":\n        this._subscribe(\"pending\", [\"newPendingTransactions\"], result => {\n          this.emit(\"pending\", result);\n        });\n        break;\n      case \"filter\":\n        this._subscribe(event.tag, [\"logs\", this._getFilter(event.filter)], result => {\n          if (result.removed == null) {\n            result.removed = false;\n          }\n          this.emit(event.filter, this.formatter.filterLog(result));\n        });\n        break;\n      case \"tx\":\n        {\n          const emitReceipt = event => {\n            const hash = event.hash;\n            this.getTransactionReceipt(hash).then(receipt => {\n              if (!receipt) {\n                return;\n              }\n              this.emit(hash, receipt);\n            });\n          };\n          // In case it is already mined\n          emitReceipt(event);\n          // To keep things simple, we start up a single newHeads subscription\n          // to keep an eye out for transactions we are watching for.\n          // Starting a subscription for an event (i.e. \"tx\") that is already\n          // running is (basically) a nop.\n          this._subscribe(\"tx\", [\"newHeads\"], result => {\n            this._events.filter(e => e.type === \"tx\").forEach(emitReceipt);\n          });\n          break;\n        }\n      // Nothing is needed\n      case \"debug\":\n      case \"poll\":\n      case \"willPoll\":\n      case \"didPoll\":\n      case \"error\":\n        break;\n      default:\n        console.log(\"unhandled:\", event);\n        break;\n    }\n  }\n  _stopEvent(event) {\n    let tag = event.tag;\n    if (event.type === \"tx\") {\n      // There are remaining transaction event listeners\n      if (this._events.filter(e => e.type === \"tx\").length) {\n        return;\n      }\n      tag = \"tx\";\n    } else if (this.listenerCount(event.event)) {\n      // There are remaining event listeners\n      return;\n    }\n    const subId = this._subIds[tag];\n    if (!subId) {\n      return;\n    }\n    delete this._subIds[tag];\n    subId.then(subId => {\n      if (!this._subs[subId]) {\n        return;\n      }\n      delete this._subs[subId];\n      this.send(\"eth_unsubscribe\", [subId]);\n    });\n  }\n  destroy() {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Wait until we have connected before trying to disconnect\n      if (this.websocket.readyState === WebSocket.CONNECTING) {\n        yield new Promise(resolve => {\n          this.websocket.onopen = function () {\n            resolve(true);\n          };\n          this.websocket.onerror = function () {\n            resolve(false);\n          };\n        });\n      }\n      // Hangup\n      // See: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n      this.websocket.close(1000);\n    });\n  }\n}","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","BigNumber","defineReadOnly","JsonRpcProvider","WebSocket","Logger","version","logger","NextId","WebSocketProvider","constructor","url","network","throwError","errors","UNSUPPORTED_OPERATION","operation","_pollingInterval","_wsReady","connection","detectNetwork","websocket","onopen","Object","keys","_requests","forEach","id","send","payload","onmessage","messageEvent","data","JSON","parse","String","request","undefined","callback","emit","action","response","provider","error","Error","message","code","method","sub","_subs","params","subscription","processFunc","console","warn","fauxPoll","setInterval","unref","_websocket","_detectNetwork","pollingInterval","resetEventsBlock","blockNumber","poll","polling","rid","stringify","jsonrpc","defaultUrl","_subscribe","tag","param","subIdPromise","_subIds","all","subId","_startEvent","event","type","from","number","toNumber","_emitted","block","_getFilter","filter","removed","formatter","filterLog","emitReceipt","hash","getTransactionReceipt","receipt","_events","log","_stopEvent","length","listenerCount","destroy","readyState","CONNECTING","onerror","close"],"sources":["F:/DDesktop/MEAN_BC/mean-stack-authentication-authorization-master/angular-15-client/node_modules/@ethersproject/providers/lib.esm/websocket-provider.js"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\nimport { WebSocket } from \"./ws\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n/**\n *  Notes:\n *\n *  This provider differs a bit from the polling providers. One main\n *  difference is how it handles consistency. The polling providers\n *  will stall responses to ensure a consistent state, while this\n *  WebSocket provider assumes the connected backend will manage this.\n *\n *  For example, if a polling provider emits an event which indicates\n *  the event occurred in blockhash XXX, a call to fetch that block by\n *  its hash XXX, if not present will retry until it is present. This\n *  can occur when querying a pool of nodes that are mildly out of sync\n *  with each other.\n */\nlet NextId = 1;\n// For more info about the Real-time Event API see:\n//   https://geth.ethereum.org/docs/rpc/pubsub\nexport class WebSocketProvider extends JsonRpcProvider {\n    constructor(url, network) {\n        // This will be added in the future; please open an issue to expedite\n        if (network === \"any\") {\n            logger.throwError(\"WebSocketProvider does not support 'any' network yet\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"network:any\"\n            });\n        }\n        if (typeof (url) === \"string\") {\n            super(url, network);\n        }\n        else {\n            super(\"_websocket\", network);\n        }\n        this._pollingInterval = -1;\n        this._wsReady = false;\n        if (typeof (url) === \"string\") {\n            defineReadOnly(this, \"_websocket\", new WebSocket(this.connection.url));\n        }\n        else {\n            defineReadOnly(this, \"_websocket\", url);\n        }\n        defineReadOnly(this, \"_requests\", {});\n        defineReadOnly(this, \"_subs\", {});\n        defineReadOnly(this, \"_subIds\", {});\n        defineReadOnly(this, \"_detectNetwork\", super.detectNetwork());\n        // Stall sending requests until the socket is open...\n        this.websocket.onopen = () => {\n            this._wsReady = true;\n            Object.keys(this._requests).forEach((id) => {\n                this.websocket.send(this._requests[id].payload);\n            });\n        };\n        this.websocket.onmessage = (messageEvent) => {\n            const data = messageEvent.data;\n            const result = JSON.parse(data);\n            if (result.id != null) {\n                const id = String(result.id);\n                const request = this._requests[id];\n                delete this._requests[id];\n                if (result.result !== undefined) {\n                    request.callback(null, result.result);\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        request: JSON.parse(request.payload),\n                        response: result.result,\n                        provider: this\n                    });\n                }\n                else {\n                    let error = null;\n                    if (result.error) {\n                        error = new Error(result.error.message || \"unknown error\");\n                        defineReadOnly(error, \"code\", result.error.code || null);\n                        defineReadOnly(error, \"response\", data);\n                    }\n                    else {\n                        error = new Error(\"unknown error\");\n                    }\n                    request.callback(error, undefined);\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        error: error,\n                        request: JSON.parse(request.payload),\n                        provider: this\n                    });\n                }\n            }\n            else if (result.method === \"eth_subscription\") {\n                // Subscription...\n                const sub = this._subs[result.params.subscription];\n                if (sub) {\n                    //this.emit.apply(this,                  );\n                    sub.processFunc(result.params.result);\n                }\n            }\n            else {\n                console.warn(\"this should not happen\");\n            }\n        };\n        // This Provider does not actually poll, but we want to trigger\n        // poll events for things that depend on them (like stalling for\n        // block and transaction lookups)\n        const fauxPoll = setInterval(() => {\n            this.emit(\"poll\");\n        }, 1000);\n        if (fauxPoll.unref) {\n            fauxPoll.unref();\n        }\n    }\n    // Cannot narrow the type of _websocket, as that is not backwards compatible\n    // so we add a getter and let the WebSocket be a public API.\n    get websocket() { return this._websocket; }\n    detectNetwork() {\n        return this._detectNetwork;\n    }\n    get pollingInterval() {\n        return 0;\n    }\n    resetEventsBlock(blockNumber) {\n        logger.throwError(\"cannot reset events block on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"resetEventBlock\"\n        });\n    }\n    set pollingInterval(value) {\n        logger.throwError(\"cannot set polling interval on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setPollingInterval\"\n        });\n    }\n    poll() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return null;\n        });\n    }\n    set polling(value) {\n        if (!value) {\n            return;\n        }\n        logger.throwError(\"cannot set polling on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setPolling\"\n        });\n    }\n    send(method, params) {\n        const rid = NextId++;\n        return new Promise((resolve, reject) => {\n            function callback(error, result) {\n                if (error) {\n                    return reject(error);\n                }\n                return resolve(result);\n            }\n            const payload = JSON.stringify({\n                method: method,\n                params: params,\n                id: rid,\n                jsonrpc: \"2.0\"\n            });\n            this.emit(\"debug\", {\n                action: \"request\",\n                request: JSON.parse(payload),\n                provider: this\n            });\n            this._requests[String(rid)] = { callback, payload };\n            if (this._wsReady) {\n                this.websocket.send(payload);\n            }\n        });\n    }\n    static defaultUrl() {\n        return \"ws:/\\/localhost:8546\";\n    }\n    _subscribe(tag, param, processFunc) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let subIdPromise = this._subIds[tag];\n            if (subIdPromise == null) {\n                subIdPromise = Promise.all(param).then((param) => {\n                    return this.send(\"eth_subscribe\", param);\n                });\n                this._subIds[tag] = subIdPromise;\n            }\n            const subId = yield subIdPromise;\n            this._subs[subId] = { tag, processFunc };\n        });\n    }\n    _startEvent(event) {\n        switch (event.type) {\n            case \"block\":\n                this._subscribe(\"block\", [\"newHeads\"], (result) => {\n                    const blockNumber = BigNumber.from(result.number).toNumber();\n                    this._emitted.block = blockNumber;\n                    this.emit(\"block\", blockNumber);\n                });\n                break;\n            case \"pending\":\n                this._subscribe(\"pending\", [\"newPendingTransactions\"], (result) => {\n                    this.emit(\"pending\", result);\n                });\n                break;\n            case \"filter\":\n                this._subscribe(event.tag, [\"logs\", this._getFilter(event.filter)], (result) => {\n                    if (result.removed == null) {\n                        result.removed = false;\n                    }\n                    this.emit(event.filter, this.formatter.filterLog(result));\n                });\n                break;\n            case \"tx\": {\n                const emitReceipt = (event) => {\n                    const hash = event.hash;\n                    this.getTransactionReceipt(hash).then((receipt) => {\n                        if (!receipt) {\n                            return;\n                        }\n                        this.emit(hash, receipt);\n                    });\n                };\n                // In case it is already mined\n                emitReceipt(event);\n                // To keep things simple, we start up a single newHeads subscription\n                // to keep an eye out for transactions we are watching for.\n                // Starting a subscription for an event (i.e. \"tx\") that is already\n                // running is (basically) a nop.\n                this._subscribe(\"tx\", [\"newHeads\"], (result) => {\n                    this._events.filter((e) => (e.type === \"tx\")).forEach(emitReceipt);\n                });\n                break;\n            }\n            // Nothing is needed\n            case \"debug\":\n            case \"poll\":\n            case \"willPoll\":\n            case \"didPoll\":\n            case \"error\":\n                break;\n            default:\n                console.log(\"unhandled:\", event);\n                break;\n        }\n    }\n    _stopEvent(event) {\n        let tag = event.tag;\n        if (event.type === \"tx\") {\n            // There are remaining transaction event listeners\n            if (this._events.filter((e) => (e.type === \"tx\")).length) {\n                return;\n            }\n            tag = \"tx\";\n        }\n        else if (this.listenerCount(event.event)) {\n            // There are remaining event listeners\n            return;\n        }\n        const subId = this._subIds[tag];\n        if (!subId) {\n            return;\n        }\n        delete this._subIds[tag];\n        subId.then((subId) => {\n            if (!this._subs[subId]) {\n                return;\n            }\n            delete this._subs[subId];\n            this.send(\"eth_unsubscribe\", [subId]);\n        });\n    }\n    destroy() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Wait until we have connected before trying to disconnect\n            if (this.websocket.readyState === WebSocket.CONNECTING) {\n                yield (new Promise((resolve) => {\n                    this.websocket.onopen = function () {\n                        resolve(true);\n                    };\n                    this.websocket.onerror = function () {\n                        resolve(false);\n                    };\n                }));\n            }\n            // Hangup\n            // See: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n            this.websocket.close(1000);\n        });\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}