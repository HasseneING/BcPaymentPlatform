{"ast":null,"code":"import _asyncToGenerator from \"F:/DDesktop/MEAN_BC/mean-stack-authentication-authorization-master/angular-15-client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport Web3 from 'web3';\n// deteethproviderfix dont care how do it  \nlet BoardUserComponent = class BoardUserComponent {\n  constructor(userService) {\n    var _this = this;\n    this.userService = userService;\n    this.depositForm = {\n      ethValue: null\n    };\n    this.walletConnected = false;\n    this.walletId = '';\n    this.connectToWallet = () => {\n      this.userService.connectWallet();\n    };\n    this.checkWalletConnected = /*#__PURE__*/_asyncToGenerator(function* () {\n      const accounts = yield _this.userService.checkWalletConnected();\n      if (accounts.length > 0) {\n        _this.walletConnected = true;\n        _this.walletId = accounts[0];\n        console.log(_this.walletId);\n      }\n    });\n    const alchemy_url = \"https://eth-sepolia.g.alchemy.com/v2/YGNAUM7D8wTvwFUIV8iyRv0i8N6BTT86\";\n    this.web3 = new Web3(alchemy_url);\n  }\n  ngOnInit() {\n    this.userService.getUserBoard().subscribe({\n      next: data => {\n        this.content = data;\n      },\n      error: err => {\n        if (err.error) {\n          try {\n            const res = JSON.parse(err.error);\n            this.content = res.message;\n          } catch {\n            this.content = `Error with status: ${err.status} - ${err.statusText}`;\n          }\n        } else {\n          this.content = `Error with status: ${err.status}`;\n        }\n      }\n    });\n  }\n  getContractBalance() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      let contractInst = new _this2.web3.eth.Contract(_this2.userService.abiContract, _this2.userService.contractAddress);\n      let contractBalance = contractInst.methods.getContractBalance().call();\n      return contractBalance;\n    })();\n  }\n  getWalletId() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      let balance2 = yield _this3.web3.eth.getBalance(_this3.walletId).then(res => {\n        return res;\n      });\n      return balance2;\n    })();\n  }\n  onSubmit() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      _this4.connectToWallet();\n      _this4.checkWalletConnected();\n      let balance;\n      balance = _this4.getContractBalance().then(res => {\n        console.log(_this4.web3.utils.fromWei(res, \"ether\"), \"eth\");\n      });\n      console.log(_this4.depositForm);\n      //console.log(Web3.version);\n      console.log(_this4.walletId);\n      var accounts = yield _this4.web3.eth.getAccounts().then(console.log);\n      let balance2 = yield _this4.web3.eth.getBalance(_this4.walletId).then(console.log);\n      //console.log(this.web3.utils.fromWei(await balance2, \"ether\"));\n      //const transaction006=this.web3.utils.toWei(\"0.1\",\"ether\");\n      //let txResult=await contractInst.methods.deposit().send({from: accounts[0],value:transaction006});\n      /*let txResult2=await contractInst.methods.\r\n      withdrawToOther(transaction006, \"0xe1e481Ba1AD79E5d644440847eeabb139eA3Bf06\").\r\n      send({from: accounts[0]});\r\n      */\n      //console.log(txResult2);\n    })();\n  }\n};\n\nBoardUserComponent = __decorate([Component({\n  selector: 'app-board-user',\n  templateUrl: './board-user.component.html',\n  styleUrls: ['./board-user.component.css']\n})], BoardUserComponent);\nexport { BoardUserComponent };","map":{"version":3,"mappings":"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","names":["Component","Web3","BoardUserComponent","constructor","userService","ethValue","connectWallet","accounts","checkWalletConnected","length","walletConnected","walletId","console","log","alchemy_url","web3","ngOnInit","getUserBoard","subscribe","next","data","content","error","err","res","JSON","parse","message","status","statusText","getContractBalance","contractInst","eth","Contract","abiContract","contractAddress","contractBalance","methods","call","getWalletId","balance2","getBalance","then","onSubmit","connectToWallet","balance","utils","fromWei","depositForm","getAccounts","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["F:\\DDesktop\\MEAN_BC\\mean-stack-authentication-authorization-master\\angular-15-client\\src\\app\\board-user\\board-user.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { UserService } from '../_services/user.service';\n\nimport Web3 from 'web3';\nimport { AbiItem } from 'web3-utils'\n\n// deteethproviderfix dont care how do it  \n@Component({\n  selector: 'app-board-user',\n  templateUrl: './board-user.component.html',\n  styleUrls: ['./board-user.component.css']\n})\nexport class BoardUserComponent implements OnInit {\n  content?: string;\n  depositForm: any = {\n    ethValue: null,\n  };\n  private web3: Web3;\n  public walletConnected: boolean = false;\n  public walletId: string = '';\n\n  constructor(private userService: UserService,\n  ) { \n    const alchemy_url = \"https://eth-sepolia.g.alchemy.com/v2/YGNAUM7D8wTvwFUIV8iyRv0i8N6BTT86\"\n    this.web3 = new Web3(alchemy_url);\n\n  }\n\n  ngOnInit(): void {\n    this.userService.getUserBoard().subscribe({\n      next: data => {\n        this.content = data;\n      },\n      error: err => {\n        if (err.error) {\n          try {\n            const res = JSON.parse(err.error);\n            this.content = res.message;\n          } catch {\n            this.content = `Error with status: ${err.status} - ${err.statusText}`;\n          }\n        } else {\n          this.content = `Error with status: ${err.status}`;\n        }\n      }\n    });\n  }\n\n  connectToWallet  = () => {\n    this.userService.connectWallet();\n  }\n  checkWalletConnected = async () => {\n    const accounts = await this.userService.checkWalletConnected();\n    if(accounts.length > 0){\n      this.walletConnected = true;\n      this.walletId = accounts[0];\n      console.log(this.walletId);\n    }\n  }\n async getContractBalance(){\n  \n    let contractInst = new this.web3.eth.Contract(this.userService.abiContract as AbiItem[],this.userService.contractAddress);\n    let contractBalance = contractInst.methods.getContractBalance()\n    .call();\n    return contractBalance;\n  }\n async getWalletId(){\n    let balance2 = await this.web3.eth.getBalance(this.walletId).then(res=>{return res});\n    return balance2;\n  }\n\n  async onSubmit(): Promise<void> {\n    this.connectToWallet();\n    this.checkWalletConnected();\n    let balance;\n    balance = this.getContractBalance().then(res=>{console.log(this.web3.utils.fromWei(res, \"ether\"),\"eth\")});\n    console.log(this.depositForm);\n    //console.log(Web3.version);\n    console.log(this.walletId);\n    var accounts = await this.web3.eth.getAccounts().then(console.log);\n    let balance2 = await this.web3.eth.getBalance(this.walletId).then(console.log);\n    //console.log(this.web3.utils.fromWei(await balance2, \"ether\"));\n    //const transaction006=this.web3.utils.toWei(\"0.1\",\"ether\");\n    //let txResult=await contractInst.methods.deposit().send({from: accounts[0],value:transaction006});\n    /*let txResult2=await contractInst.methods.\n    withdrawToOther(transaction006, \"0xe1e481Ba1AD79E5d644440847eeabb139eA3Bf06\").\n    send({from: accounts[0]});\n    */\n    //console.log(txResult2);\n    \n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}