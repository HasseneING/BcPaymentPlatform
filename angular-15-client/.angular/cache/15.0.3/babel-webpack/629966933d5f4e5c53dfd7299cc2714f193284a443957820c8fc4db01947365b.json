{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { hexlify, hexValue, isHexString } from \"@ethersproject/bytes\";\nimport { deepCopy, defineReadOnly } from \"@ethersproject/properties\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { fetchJson } from \"@ethersproject/web\";\nimport { showThrottleMessage } from \"./formatter\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { BaseProvider } from \"./base-provider\";\n// The transaction has already been sanitized by the calls in Provider\nfunction getTransactionPostData(transaction) {\n  const result = {};\n  for (let key in transaction) {\n    if (transaction[key] == null) {\n      continue;\n    }\n    let value = transaction[key];\n    if (key === \"type\" && value === 0) {\n      continue;\n    }\n    // Quantity-types require no leading zero, unless 0\n    if ({\n      type: true,\n      gasLimit: true,\n      gasPrice: true,\n      maxFeePerGs: true,\n      maxPriorityFeePerGas: true,\n      nonce: true,\n      value: true\n    }[key]) {\n      value = hexValue(hexlify(value));\n    } else if (key === \"accessList\") {\n      value = \"[\" + accessListify(value).map(set => {\n        return `{address:\"${set.address}\",storageKeys:[\"${set.storageKeys.join('\",\"')}\"]}`;\n      }).join(\",\") + \"]\";\n    } else {\n      value = hexlify(value);\n    }\n    result[key] = value;\n  }\n  return result;\n}\nfunction getResult(result) {\n  // getLogs, getHistory have weird success responses\n  if (result.status == 0 && (result.message === \"No records found\" || result.message === \"No transactions found\")) {\n    return result.result;\n  }\n  if (result.status != 1 || typeof result.message !== \"string\" || !result.message.match(/^OK/)) {\n    const error = new Error(\"invalid response\");\n    error.result = JSON.stringify(result);\n    if ((result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n      error.throttleRetry = true;\n    }\n    throw error;\n  }\n  return result.result;\n}\nfunction getJsonResult(result) {\n  // This response indicates we are being throttled\n  if (result && result.status == 0 && result.message == \"NOTOK\" && (result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n    const error = new Error(\"throttled response\");\n    error.result = JSON.stringify(result);\n    error.throttleRetry = true;\n    throw error;\n  }\n  if (result.jsonrpc != \"2.0\") {\n    // @TODO: not any\n    const error = new Error(\"invalid response\");\n    error.result = JSON.stringify(result);\n    throw error;\n  }\n  if (result.error) {\n    // @TODO: not any\n    const error = new Error(result.error.message || \"unknown error\");\n    if (result.error.code) {\n      error.code = result.error.code;\n    }\n    if (result.error.data) {\n      error.data = result.error.data;\n    }\n    throw error;\n  }\n  return result.result;\n}\n// The blockTag was normalized as a string by the Provider pre-perform operations\nfunction checkLogTag(blockTag) {\n  if (blockTag === \"pending\") {\n    throw new Error(\"pending not supported\");\n  }\n  if (blockTag === \"latest\") {\n    return blockTag;\n  }\n  return parseInt(blockTag.substring(2), 16);\n}\nfunction checkError(method, error, transaction) {\n  // Undo the \"convenience\" some nodes are attempting to prevent backwards\n  // incompatibility; maybe for v6 consider forwarding reverts as errors\n  if (method === \"call\" && error.code === Logger.errors.SERVER_ERROR) {\n    const e = error.error;\n    // Etherscan keeps changing their string\n    if (e && (e.message.match(/reverted/i) || e.message.match(/VM execution error/i))) {\n      // Etherscan prefixes the data like \"Reverted 0x1234\"\n      let data = e.data;\n      if (data) {\n        data = \"0x\" + data.replace(/^.*0x/i, \"\");\n      }\n      if (isHexString(data)) {\n        return data;\n      }\n      logger.throwError(\"missing revert data in call exception\", Logger.errors.CALL_EXCEPTION, {\n        error,\n        data: \"0x\"\n      });\n    }\n  }\n  // Get the message from any nested error structure\n  let message = error.message;\n  if (error.code === Logger.errors.SERVER_ERROR) {\n    if (error.error && typeof error.error.message === \"string\") {\n      message = error.error.message;\n    } else if (typeof error.body === \"string\") {\n      message = error.body;\n    } else if (typeof error.responseText === \"string\") {\n      message = error.responseText;\n    }\n  }\n  message = (message || \"\").toLowerCase();\n  // \"Insufficient funds. The account you tried to send transaction from does not have enough funds. Required 21464000000000 and got: 0\"\n  if (message.match(/insufficient funds/)) {\n    logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n      error,\n      method,\n      transaction\n    });\n  }\n  // \"Transaction with the same hash was already imported.\"\n  if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {\n    logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n      error,\n      method,\n      transaction\n    });\n  }\n  // \"Transaction gas price is too low. There is another transaction with same nonce in the queue. Try increasing the gas price or incrementing the nonce.\"\n  if (message.match(/another transaction with same nonce/)) {\n    logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n      error,\n      method,\n      transaction\n    });\n  }\n  if (message.match(/execution failed due to an exception|execution reverted/)) {\n    logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n      error,\n      method,\n      transaction\n    });\n  }\n  throw error;\n}\nexport class EtherscanProvider extends BaseProvider {\n  constructor(network, apiKey) {\n    super(network);\n    defineReadOnly(this, \"baseUrl\", this.getBaseUrl());\n    defineReadOnly(this, \"apiKey\", apiKey || null);\n  }\n  getBaseUrl() {\n    switch (this.network ? this.network.name : \"invalid\") {\n      case \"homestead\":\n        return \"https:/\\/api.etherscan.io\";\n      case \"goerli\":\n        return \"https:/\\/api-goerli.etherscan.io\";\n      case \"sepolia\":\n        return \"https:/\\/api-sepolia.etherscan.io\";\n      case \"matic\":\n        return \"https:/\\/api.polygonscan.com\";\n      case \"maticmum\":\n        return \"https:/\\/api-testnet.polygonscan.com\";\n      case \"arbitrum\":\n        return \"https:/\\/api.arbiscan.io\";\n      case \"arbitrum-goerli\":\n        return \"https:/\\/api-goerli.arbiscan.io\";\n      case \"optimism\":\n        return \"https:/\\/api-optimistic.etherscan.io\";\n      case \"optimism-goerli\":\n        return \"https:/\\/api-goerli-optimistic.etherscan.io\";\n      default:\n    }\n    return logger.throwArgumentError(\"unsupported network\", \"network\", this.network.name);\n  }\n  getUrl(module, params) {\n    const query = Object.keys(params).reduce((accum, key) => {\n      const value = params[key];\n      if (value != null) {\n        accum += `&${key}=${value}`;\n      }\n      return accum;\n    }, \"\");\n    const apiKey = this.apiKey ? `&apikey=${this.apiKey}` : \"\";\n    return `${this.baseUrl}/api?module=${module}${query}${apiKey}`;\n  }\n  getPostUrl() {\n    return `${this.baseUrl}/api`;\n  }\n  getPostData(module, params) {\n    params.module = module;\n    params.apikey = this.apiKey;\n    return params;\n  }\n  fetch(module, params, post) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const url = post ? this.getPostUrl() : this.getUrl(module, params);\n      const payload = post ? this.getPostData(module, params) : null;\n      const procFunc = module === \"proxy\" ? getJsonResult : getResult;\n      this.emit(\"debug\", {\n        action: \"request\",\n        request: url,\n        provider: this\n      });\n      const connection = {\n        url: url,\n        throttleSlotInterval: 1000,\n        throttleCallback: (attempt, url) => {\n          if (this.isCommunityResource()) {\n            showThrottleMessage();\n          }\n          return Promise.resolve(true);\n        }\n      };\n      let payloadStr = null;\n      if (payload) {\n        connection.headers = {\n          \"content-type\": \"application/x-www-form-urlencoded; charset=UTF-8\"\n        };\n        payloadStr = Object.keys(payload).map(key => {\n          return `${key}=${payload[key]}`;\n        }).join(\"&\");\n      }\n      const result = yield fetchJson(connection, payloadStr, procFunc || getJsonResult);\n      this.emit(\"debug\", {\n        action: \"response\",\n        request: url,\n        response: deepCopy(result),\n        provider: this\n      });\n      return result;\n    });\n  }\n  detectNetwork() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.network;\n    });\n  }\n  perform(method, params) {\n    const _super = Object.create(null, {\n      perform: {\n        get: () => super.perform\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      switch (method) {\n        case \"getBlockNumber\":\n          return this.fetch(\"proxy\", {\n            action: \"eth_blockNumber\"\n          });\n        case \"getGasPrice\":\n          return this.fetch(\"proxy\", {\n            action: \"eth_gasPrice\"\n          });\n        case \"getBalance\":\n          // Returns base-10 result\n          return this.fetch(\"account\", {\n            action: \"balance\",\n            address: params.address,\n            tag: params.blockTag\n          });\n        case \"getTransactionCount\":\n          return this.fetch(\"proxy\", {\n            action: \"eth_getTransactionCount\",\n            address: params.address,\n            tag: params.blockTag\n          });\n        case \"getCode\":\n          return this.fetch(\"proxy\", {\n            action: \"eth_getCode\",\n            address: params.address,\n            tag: params.blockTag\n          });\n        case \"getStorageAt\":\n          return this.fetch(\"proxy\", {\n            action: \"eth_getStorageAt\",\n            address: params.address,\n            position: params.position,\n            tag: params.blockTag\n          });\n        case \"sendTransaction\":\n          return this.fetch(\"proxy\", {\n            action: \"eth_sendRawTransaction\",\n            hex: params.signedTransaction\n          }, true).catch(error => {\n            return checkError(\"sendTransaction\", error, params.signedTransaction);\n          });\n        case \"getBlock\":\n          if (params.blockTag) {\n            return this.fetch(\"proxy\", {\n              action: \"eth_getBlockByNumber\",\n              tag: params.blockTag,\n              boolean: params.includeTransactions ? \"true\" : \"false\"\n            });\n          }\n          throw new Error(\"getBlock by blockHash not implemented\");\n        case \"getTransaction\":\n          return this.fetch(\"proxy\", {\n            action: \"eth_getTransactionByHash\",\n            txhash: params.transactionHash\n          });\n        case \"getTransactionReceipt\":\n          return this.fetch(\"proxy\", {\n            action: \"eth_getTransactionReceipt\",\n            txhash: params.transactionHash\n          });\n        case \"call\":\n          {\n            if (params.blockTag !== \"latest\") {\n              throw new Error(\"EtherscanProvider does not support blockTag for call\");\n            }\n            const postData = getTransactionPostData(params.transaction);\n            postData.module = \"proxy\";\n            postData.action = \"eth_call\";\n            try {\n              return yield this.fetch(\"proxy\", postData, true);\n            } catch (error) {\n              return checkError(\"call\", error, params.transaction);\n            }\n          }\n        case \"estimateGas\":\n          {\n            const postData = getTransactionPostData(params.transaction);\n            postData.module = \"proxy\";\n            postData.action = \"eth_estimateGas\";\n            try {\n              return yield this.fetch(\"proxy\", postData, true);\n            } catch (error) {\n              return checkError(\"estimateGas\", error, params.transaction);\n            }\n          }\n        case \"getLogs\":\n          {\n            const args = {\n              action: \"getLogs\"\n            };\n            if (params.filter.fromBlock) {\n              args.fromBlock = checkLogTag(params.filter.fromBlock);\n            }\n            if (params.filter.toBlock) {\n              args.toBlock = checkLogTag(params.filter.toBlock);\n            }\n            if (params.filter.address) {\n              args.address = params.filter.address;\n            }\n            // @TODO: We can handle slightly more complicated logs using the logs API\n            if (params.filter.topics && params.filter.topics.length > 0) {\n              if (params.filter.topics.length > 1) {\n                logger.throwError(\"unsupported topic count\", Logger.errors.UNSUPPORTED_OPERATION, {\n                  topics: params.filter.topics\n                });\n              }\n              if (params.filter.topics.length === 1) {\n                const topic0 = params.filter.topics[0];\n                if (typeof topic0 !== \"string\" || topic0.length !== 66) {\n                  logger.throwError(\"unsupported topic format\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    topic0: topic0\n                  });\n                }\n                args.topic0 = topic0;\n              }\n            }\n            const logs = yield this.fetch(\"logs\", args);\n            // Cache txHash => blockHash\n            let blocks = {};\n            // Add any missing blockHash to the logs\n            for (let i = 0; i < logs.length; i++) {\n              const log = logs[i];\n              if (log.blockHash != null) {\n                continue;\n              }\n              if (blocks[log.blockNumber] == null) {\n                const block = yield this.getBlock(log.blockNumber);\n                if (block) {\n                  blocks[log.blockNumber] = block.hash;\n                }\n              }\n              log.blockHash = blocks[log.blockNumber];\n            }\n            return logs;\n          }\n        case \"getEtherPrice\":\n          if (this.network.name !== \"homestead\") {\n            return 0.0;\n          }\n          return parseFloat((yield this.fetch(\"stats\", {\n            action: \"ethprice\"\n          })).ethusd);\n        default:\n          break;\n      }\n      return _super.perform.call(this, method, params);\n    });\n  }\n  // Note: The `page` page parameter only allows pagination within the\n  //       10,000 window available without a page and offset parameter\n  //       Error: Result window is too large, PageNo x Offset size must\n  //              be less than or equal to 10000\n  getHistory(addressOrName, startBlock, endBlock) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const params = {\n        action: \"txlist\",\n        address: yield this.resolveName(addressOrName),\n        startblock: startBlock == null ? 0 : startBlock,\n        endblock: endBlock == null ? 99999999 : endBlock,\n        sort: \"asc\"\n      };\n      const result = yield this.fetch(\"account\", params);\n      return result.map(tx => {\n        [\"contractAddress\", \"to\"].forEach(function (key) {\n          if (tx[key] == \"\") {\n            delete tx[key];\n          }\n        });\n        if (tx.creates == null && tx.contractAddress != null) {\n          tx.creates = tx.contractAddress;\n        }\n        const item = this.formatter.transactionResponse(tx);\n        if (tx.timeStamp) {\n          item.timestamp = parseInt(tx.timeStamp);\n        }\n        return item;\n      });\n    });\n  }\n  isCommunityResource() {\n    return this.apiKey == null;\n  }\n}","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","hexlify","hexValue","isHexString","deepCopy","defineReadOnly","accessListify","fetchJson","showThrottleMessage","Logger","version","logger","BaseProvider","getTransactionPostData","transaction","key","type","gasLimit","gasPrice","maxFeePerGs","maxPriorityFeePerGas","nonce","map","set","address","storageKeys","join","getResult","status","message","match","error","Error","JSON","stringify","toLowerCase","indexOf","throttleRetry","getJsonResult","jsonrpc","code","data","checkLogTag","blockTag","parseInt","substring","checkError","method","errors","SERVER_ERROR","replace","throwError","CALL_EXCEPTION","body","responseText","INSUFFICIENT_FUNDS","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","UNPREDICTABLE_GAS_LIMIT","EtherscanProvider","constructor","network","apiKey","getBaseUrl","name","throwArgumentError","getUrl","module","params","query","Object","keys","reduce","accum","baseUrl","getPostUrl","getPostData","apikey","fetch","post","url","payload","procFunc","emit","action","request","provider","connection","throttleSlotInterval","throttleCallback","attempt","isCommunityResource","payloadStr","headers","response","detectNetwork","perform","_super","create","get","tag","position","hex","signedTransaction","catch","boolean","includeTransactions","txhash","transactionHash","postData","args","filter","fromBlock","toBlock","topics","length","UNSUPPORTED_OPERATION","topic0","logs","blocks","i","log","blockHash","blockNumber","block","getBlock","hash","parseFloat","ethusd","call","getHistory","addressOrName","startBlock","endBlock","resolveName","startblock","endblock","sort","tx","forEach","creates","contractAddress","item","formatter","transactionResponse","timeStamp","timestamp"],"sources":["F:/DDesktop/MEAN_BC/mean-stack-authentication-authorization-master/angular-15-client/node_modules/@ethersproject/providers/lib.esm/etherscan-provider.js"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { hexlify, hexValue, isHexString } from \"@ethersproject/bytes\";\nimport { deepCopy, defineReadOnly } from \"@ethersproject/properties\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { fetchJson } from \"@ethersproject/web\";\nimport { showThrottleMessage } from \"./formatter\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { BaseProvider } from \"./base-provider\";\n// The transaction has already been sanitized by the calls in Provider\nfunction getTransactionPostData(transaction) {\n    const result = {};\n    for (let key in transaction) {\n        if (transaction[key] == null) {\n            continue;\n        }\n        let value = transaction[key];\n        if (key === \"type\" && value === 0) {\n            continue;\n        }\n        // Quantity-types require no leading zero, unless 0\n        if ({ type: true, gasLimit: true, gasPrice: true, maxFeePerGs: true, maxPriorityFeePerGas: true, nonce: true, value: true }[key]) {\n            value = hexValue(hexlify(value));\n        }\n        else if (key === \"accessList\") {\n            value = \"[\" + accessListify(value).map((set) => {\n                return `{address:\"${set.address}\",storageKeys:[\"${set.storageKeys.join('\",\"')}\"]}`;\n            }).join(\",\") + \"]\";\n        }\n        else {\n            value = hexlify(value);\n        }\n        result[key] = value;\n    }\n    return result;\n}\nfunction getResult(result) {\n    // getLogs, getHistory have weird success responses\n    if (result.status == 0 && (result.message === \"No records found\" || result.message === \"No transactions found\")) {\n        return result.result;\n    }\n    if (result.status != 1 || typeof (result.message) !== \"string\" || !result.message.match(/^OK/)) {\n        const error = new Error(\"invalid response\");\n        error.result = JSON.stringify(result);\n        if ((result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n            error.throttleRetry = true;\n        }\n        throw error;\n    }\n    return result.result;\n}\nfunction getJsonResult(result) {\n    // This response indicates we are being throttled\n    if (result && result.status == 0 && result.message == \"NOTOK\" && (result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n        const error = new Error(\"throttled response\");\n        error.result = JSON.stringify(result);\n        error.throttleRetry = true;\n        throw error;\n    }\n    if (result.jsonrpc != \"2.0\") {\n        // @TODO: not any\n        const error = new Error(\"invalid response\");\n        error.result = JSON.stringify(result);\n        throw error;\n    }\n    if (result.error) {\n        // @TODO: not any\n        const error = new Error(result.error.message || \"unknown error\");\n        if (result.error.code) {\n            error.code = result.error.code;\n        }\n        if (result.error.data) {\n            error.data = result.error.data;\n        }\n        throw error;\n    }\n    return result.result;\n}\n// The blockTag was normalized as a string by the Provider pre-perform operations\nfunction checkLogTag(blockTag) {\n    if (blockTag === \"pending\") {\n        throw new Error(\"pending not supported\");\n    }\n    if (blockTag === \"latest\") {\n        return blockTag;\n    }\n    return parseInt(blockTag.substring(2), 16);\n}\nfunction checkError(method, error, transaction) {\n    // Undo the \"convenience\" some nodes are attempting to prevent backwards\n    // incompatibility; maybe for v6 consider forwarding reverts as errors\n    if (method === \"call\" && error.code === Logger.errors.SERVER_ERROR) {\n        const e = error.error;\n        // Etherscan keeps changing their string\n        if (e && (e.message.match(/reverted/i) || e.message.match(/VM execution error/i))) {\n            // Etherscan prefixes the data like \"Reverted 0x1234\"\n            let data = e.data;\n            if (data) {\n                data = \"0x\" + data.replace(/^.*0x/i, \"\");\n            }\n            if (isHexString(data)) {\n                return data;\n            }\n            logger.throwError(\"missing revert data in call exception\", Logger.errors.CALL_EXCEPTION, {\n                error, data: \"0x\"\n            });\n        }\n    }\n    // Get the message from any nested error structure\n    let message = error.message;\n    if (error.code === Logger.errors.SERVER_ERROR) {\n        if (error.error && typeof (error.error.message) === \"string\") {\n            message = error.error.message;\n        }\n        else if (typeof (error.body) === \"string\") {\n            message = error.body;\n        }\n        else if (typeof (error.responseText) === \"string\") {\n            message = error.responseText;\n        }\n    }\n    message = (message || \"\").toLowerCase();\n    // \"Insufficient funds. The account you tried to send transaction from does not have enough funds. Required 21464000000000 and got: 0\"\n    if (message.match(/insufficient funds/)) {\n        logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n            error, method, transaction\n        });\n    }\n    // \"Transaction with the same hash was already imported.\"\n    if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {\n        logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n            error, method, transaction\n        });\n    }\n    // \"Transaction gas price is too low. There is another transaction with same nonce in the queue. Try increasing the gas price or incrementing the nonce.\"\n    if (message.match(/another transaction with same nonce/)) {\n        logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n            error, method, transaction\n        });\n    }\n    if (message.match(/execution failed due to an exception|execution reverted/)) {\n        logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error, method, transaction\n        });\n    }\n    throw error;\n}\nexport class EtherscanProvider extends BaseProvider {\n    constructor(network, apiKey) {\n        super(network);\n        defineReadOnly(this, \"baseUrl\", this.getBaseUrl());\n        defineReadOnly(this, \"apiKey\", apiKey || null);\n    }\n    getBaseUrl() {\n        switch (this.network ? this.network.name : \"invalid\") {\n            case \"homestead\":\n                return \"https:/\\/api.etherscan.io\";\n            case \"goerli\":\n                return \"https:/\\/api-goerli.etherscan.io\";\n            case \"sepolia\":\n                return \"https:/\\/api-sepolia.etherscan.io\";\n            case \"matic\":\n                return \"https:/\\/api.polygonscan.com\";\n            case \"maticmum\":\n                return \"https:/\\/api-testnet.polygonscan.com\";\n            case \"arbitrum\":\n                return \"https:/\\/api.arbiscan.io\";\n            case \"arbitrum-goerli\":\n                return \"https:/\\/api-goerli.arbiscan.io\";\n            case \"optimism\":\n                return \"https:/\\/api-optimistic.etherscan.io\";\n            case \"optimism-goerli\":\n                return \"https:/\\/api-goerli-optimistic.etherscan.io\";\n            default:\n        }\n        return logger.throwArgumentError(\"unsupported network\", \"network\", this.network.name);\n    }\n    getUrl(module, params) {\n        const query = Object.keys(params).reduce((accum, key) => {\n            const value = params[key];\n            if (value != null) {\n                accum += `&${key}=${value}`;\n            }\n            return accum;\n        }, \"\");\n        const apiKey = ((this.apiKey) ? `&apikey=${this.apiKey}` : \"\");\n        return `${this.baseUrl}/api?module=${module}${query}${apiKey}`;\n    }\n    getPostUrl() {\n        return `${this.baseUrl}/api`;\n    }\n    getPostData(module, params) {\n        params.module = module;\n        params.apikey = this.apiKey;\n        return params;\n    }\n    fetch(module, params, post) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const url = (post ? this.getPostUrl() : this.getUrl(module, params));\n            const payload = (post ? this.getPostData(module, params) : null);\n            const procFunc = (module === \"proxy\") ? getJsonResult : getResult;\n            this.emit(\"debug\", {\n                action: \"request\",\n                request: url,\n                provider: this\n            });\n            const connection = {\n                url: url,\n                throttleSlotInterval: 1000,\n                throttleCallback: (attempt, url) => {\n                    if (this.isCommunityResource()) {\n                        showThrottleMessage();\n                    }\n                    return Promise.resolve(true);\n                }\n            };\n            let payloadStr = null;\n            if (payload) {\n                connection.headers = { \"content-type\": \"application/x-www-form-urlencoded; charset=UTF-8\" };\n                payloadStr = Object.keys(payload).map((key) => {\n                    return `${key}=${payload[key]}`;\n                }).join(\"&\");\n            }\n            const result = yield fetchJson(connection, payloadStr, procFunc || getJsonResult);\n            this.emit(\"debug\", {\n                action: \"response\",\n                request: url,\n                response: deepCopy(result),\n                provider: this\n            });\n            return result;\n        });\n    }\n    detectNetwork() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.network;\n        });\n    }\n    perform(method, params) {\n        const _super = Object.create(null, {\n            perform: { get: () => super.perform }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            switch (method) {\n                case \"getBlockNumber\":\n                    return this.fetch(\"proxy\", { action: \"eth_blockNumber\" });\n                case \"getGasPrice\":\n                    return this.fetch(\"proxy\", { action: \"eth_gasPrice\" });\n                case \"getBalance\":\n                    // Returns base-10 result\n                    return this.fetch(\"account\", {\n                        action: \"balance\",\n                        address: params.address,\n                        tag: params.blockTag\n                    });\n                case \"getTransactionCount\":\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_getTransactionCount\",\n                        address: params.address,\n                        tag: params.blockTag\n                    });\n                case \"getCode\":\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_getCode\",\n                        address: params.address,\n                        tag: params.blockTag\n                    });\n                case \"getStorageAt\":\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_getStorageAt\",\n                        address: params.address,\n                        position: params.position,\n                        tag: params.blockTag\n                    });\n                case \"sendTransaction\":\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_sendRawTransaction\",\n                        hex: params.signedTransaction\n                    }, true).catch((error) => {\n                        return checkError(\"sendTransaction\", error, params.signedTransaction);\n                    });\n                case \"getBlock\":\n                    if (params.blockTag) {\n                        return this.fetch(\"proxy\", {\n                            action: \"eth_getBlockByNumber\",\n                            tag: params.blockTag,\n                            boolean: (params.includeTransactions ? \"true\" : \"false\")\n                        });\n                    }\n                    throw new Error(\"getBlock by blockHash not implemented\");\n                case \"getTransaction\":\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_getTransactionByHash\",\n                        txhash: params.transactionHash\n                    });\n                case \"getTransactionReceipt\":\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_getTransactionReceipt\",\n                        txhash: params.transactionHash\n                    });\n                case \"call\": {\n                    if (params.blockTag !== \"latest\") {\n                        throw new Error(\"EtherscanProvider does not support blockTag for call\");\n                    }\n                    const postData = getTransactionPostData(params.transaction);\n                    postData.module = \"proxy\";\n                    postData.action = \"eth_call\";\n                    try {\n                        return yield this.fetch(\"proxy\", postData, true);\n                    }\n                    catch (error) {\n                        return checkError(\"call\", error, params.transaction);\n                    }\n                }\n                case \"estimateGas\": {\n                    const postData = getTransactionPostData(params.transaction);\n                    postData.module = \"proxy\";\n                    postData.action = \"eth_estimateGas\";\n                    try {\n                        return yield this.fetch(\"proxy\", postData, true);\n                    }\n                    catch (error) {\n                        return checkError(\"estimateGas\", error, params.transaction);\n                    }\n                }\n                case \"getLogs\": {\n                    const args = { action: \"getLogs\" };\n                    if (params.filter.fromBlock) {\n                        args.fromBlock = checkLogTag(params.filter.fromBlock);\n                    }\n                    if (params.filter.toBlock) {\n                        args.toBlock = checkLogTag(params.filter.toBlock);\n                    }\n                    if (params.filter.address) {\n                        args.address = params.filter.address;\n                    }\n                    // @TODO: We can handle slightly more complicated logs using the logs API\n                    if (params.filter.topics && params.filter.topics.length > 0) {\n                        if (params.filter.topics.length > 1) {\n                            logger.throwError(\"unsupported topic count\", Logger.errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });\n                        }\n                        if (params.filter.topics.length === 1) {\n                            const topic0 = params.filter.topics[0];\n                            if (typeof (topic0) !== \"string\" || topic0.length !== 66) {\n                                logger.throwError(\"unsupported topic format\", Logger.errors.UNSUPPORTED_OPERATION, { topic0: topic0 });\n                            }\n                            args.topic0 = topic0;\n                        }\n                    }\n                    const logs = yield this.fetch(\"logs\", args);\n                    // Cache txHash => blockHash\n                    let blocks = {};\n                    // Add any missing blockHash to the logs\n                    for (let i = 0; i < logs.length; i++) {\n                        const log = logs[i];\n                        if (log.blockHash != null) {\n                            continue;\n                        }\n                        if (blocks[log.blockNumber] == null) {\n                            const block = yield this.getBlock(log.blockNumber);\n                            if (block) {\n                                blocks[log.blockNumber] = block.hash;\n                            }\n                        }\n                        log.blockHash = blocks[log.blockNumber];\n                    }\n                    return logs;\n                }\n                case \"getEtherPrice\":\n                    if (this.network.name !== \"homestead\") {\n                        return 0.0;\n                    }\n                    return parseFloat((yield this.fetch(\"stats\", { action: \"ethprice\" })).ethusd);\n                default:\n                    break;\n            }\n            return _super.perform.call(this, method, params);\n        });\n    }\n    // Note: The `page` page parameter only allows pagination within the\n    //       10,000 window available without a page and offset parameter\n    //       Error: Result window is too large, PageNo x Offset size must\n    //              be less than or equal to 10000\n    getHistory(addressOrName, startBlock, endBlock) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                action: \"txlist\",\n                address: (yield this.resolveName(addressOrName)),\n                startblock: ((startBlock == null) ? 0 : startBlock),\n                endblock: ((endBlock == null) ? 99999999 : endBlock),\n                sort: \"asc\"\n            };\n            const result = yield this.fetch(\"account\", params);\n            return result.map((tx) => {\n                [\"contractAddress\", \"to\"].forEach(function (key) {\n                    if (tx[key] == \"\") {\n                        delete tx[key];\n                    }\n                });\n                if (tx.creates == null && tx.contractAddress != null) {\n                    tx.creates = tx.contractAddress;\n                }\n                const item = this.formatter.transactionResponse(tx);\n                if (tx.timeStamp) {\n                    item.timestamp = parseInt(tx.timeStamp);\n                }\n                return item;\n            });\n        });\n    }\n    isCommunityResource() {\n        return (this.apiKey == null);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}