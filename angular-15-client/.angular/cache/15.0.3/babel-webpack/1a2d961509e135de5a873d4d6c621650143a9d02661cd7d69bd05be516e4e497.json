{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport aes from \"aes-js\";\nimport scrypt from \"scrypt-js\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { arrayify, concat, hexlify } from \"@ethersproject/bytes\";\nimport { defaultPath, entropyToMnemonic, HDNode, mnemonicToEntropy } from \"@ethersproject/hdnode\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { pbkdf2 as _pbkdf2 } from \"@ethersproject/pbkdf2\";\nimport { randomBytes } from \"@ethersproject/random\";\nimport { Description } from \"@ethersproject/properties\";\nimport { computeAddress } from \"@ethersproject/transactions\";\nimport { getPassword, looseArrayify, searchPath, uuidV4, zpad } from \"./utils\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n// Exported Types\nfunction hasMnemonic(value) {\n  return value != null && value.mnemonic && value.mnemonic.phrase;\n}\nexport class KeystoreAccount extends Description {\n  isKeystoreAccount(value) {\n    return !!(value && value._isKeystoreAccount);\n  }\n}\nfunction _decrypt(data, key, ciphertext) {\n  const cipher = searchPath(data, \"crypto/cipher\");\n  if (cipher === \"aes-128-ctr\") {\n    const iv = looseArrayify(searchPath(data, \"crypto/cipherparams/iv\"));\n    const counter = new aes.Counter(iv);\n    const aesCtr = new aes.ModeOfOperation.ctr(key, counter);\n    return arrayify(aesCtr.decrypt(ciphertext));\n  }\n  return null;\n}\nfunction _getAccount(data, key) {\n  const ciphertext = looseArrayify(searchPath(data, \"crypto/ciphertext\"));\n  const computedMAC = hexlify(keccak256(concat([key.slice(16, 32), ciphertext]))).substring(2);\n  if (computedMAC !== searchPath(data, \"crypto/mac\").toLowerCase()) {\n    throw new Error(\"invalid password\");\n  }\n  const privateKey = _decrypt(data, key.slice(0, 16), ciphertext);\n  if (!privateKey) {\n    logger.throwError(\"unsupported cipher\", Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"decrypt\"\n    });\n  }\n  const mnemonicKey = key.slice(32, 64);\n  const address = computeAddress(privateKey);\n  if (data.address) {\n    let check = data.address.toLowerCase();\n    if (check.substring(0, 2) !== \"0x\") {\n      check = \"0x\" + check;\n    }\n    if (getAddress(check) !== address) {\n      throw new Error(\"address mismatch\");\n    }\n  }\n  const account = {\n    _isKeystoreAccount: true,\n    address: address,\n    privateKey: hexlify(privateKey)\n  };\n  // Version 0.1 x-ethers metadata must contain an encrypted mnemonic phrase\n  if (searchPath(data, \"x-ethers/version\") === \"0.1\") {\n    const mnemonicCiphertext = looseArrayify(searchPath(data, \"x-ethers/mnemonicCiphertext\"));\n    const mnemonicIv = looseArrayify(searchPath(data, \"x-ethers/mnemonicCounter\"));\n    const mnemonicCounter = new aes.Counter(mnemonicIv);\n    const mnemonicAesCtr = new aes.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);\n    const path = searchPath(data, \"x-ethers/path\") || defaultPath;\n    const locale = searchPath(data, \"x-ethers/locale\") || \"en\";\n    const entropy = arrayify(mnemonicAesCtr.decrypt(mnemonicCiphertext));\n    try {\n      const mnemonic = entropyToMnemonic(entropy, locale);\n      const node = HDNode.fromMnemonic(mnemonic, null, locale).derivePath(path);\n      if (node.privateKey != account.privateKey) {\n        throw new Error(\"mnemonic mismatch\");\n      }\n      account.mnemonic = node.mnemonic;\n    } catch (error) {\n      // If we don't have the locale wordlist installed to\n      // read this mnemonic, just bail and don't set the\n      // mnemonic\n      if (error.code !== Logger.errors.INVALID_ARGUMENT || error.argument !== \"wordlist\") {\n        throw error;\n      }\n    }\n  }\n  return new KeystoreAccount(account);\n}\nfunction pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc) {\n  return arrayify(_pbkdf2(passwordBytes, salt, count, dkLen, prfFunc));\n}\nfunction pbkdf2(passwordBytes, salt, count, dkLen, prfFunc) {\n  return Promise.resolve(pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc));\n}\nfunction _computeKdfKey(data, password, pbkdf2Func, scryptFunc, progressCallback) {\n  const passwordBytes = getPassword(password);\n  const kdf = searchPath(data, \"crypto/kdf\");\n  if (kdf && typeof kdf === \"string\") {\n    const throwError = function (name, value) {\n      return logger.throwArgumentError(\"invalid key-derivation function parameters\", name, value);\n    };\n    if (kdf.toLowerCase() === \"scrypt\") {\n      const salt = looseArrayify(searchPath(data, \"crypto/kdfparams/salt\"));\n      const N = parseInt(searchPath(data, \"crypto/kdfparams/n\"));\n      const r = parseInt(searchPath(data, \"crypto/kdfparams/r\"));\n      const p = parseInt(searchPath(data, \"crypto/kdfparams/p\"));\n      // Check for all required parameters\n      if (!N || !r || !p) {\n        throwError(\"kdf\", kdf);\n      }\n      // Make sure N is a power of 2\n      if ((N & N - 1) !== 0) {\n        throwError(\"N\", N);\n      }\n      const dkLen = parseInt(searchPath(data, \"crypto/kdfparams/dklen\"));\n      if (dkLen !== 32) {\n        throwError(\"dklen\", dkLen);\n      }\n      return scryptFunc(passwordBytes, salt, N, r, p, 64, progressCallback);\n    } else if (kdf.toLowerCase() === \"pbkdf2\") {\n      const salt = looseArrayify(searchPath(data, \"crypto/kdfparams/salt\"));\n      let prfFunc = null;\n      const prf = searchPath(data, \"crypto/kdfparams/prf\");\n      if (prf === \"hmac-sha256\") {\n        prfFunc = \"sha256\";\n      } else if (prf === \"hmac-sha512\") {\n        prfFunc = \"sha512\";\n      } else {\n        throwError(\"prf\", prf);\n      }\n      const count = parseInt(searchPath(data, \"crypto/kdfparams/c\"));\n      const dkLen = parseInt(searchPath(data, \"crypto/kdfparams/dklen\"));\n      if (dkLen !== 32) {\n        throwError(\"dklen\", dkLen);\n      }\n      return pbkdf2Func(passwordBytes, salt, count, dkLen, prfFunc);\n    }\n  }\n  return logger.throwArgumentError(\"unsupported key-derivation function\", \"kdf\", kdf);\n}\nexport function decryptSync(json, password) {\n  const data = JSON.parse(json);\n  const key = _computeKdfKey(data, password, pbkdf2Sync, scrypt.syncScrypt);\n  return _getAccount(data, key);\n}\nexport function decrypt(json, password, progressCallback) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const data = JSON.parse(json);\n    const key = yield _computeKdfKey(data, password, pbkdf2, scrypt.scrypt, progressCallback);\n    return _getAccount(data, key);\n  });\n}\nexport function encrypt(account, password, options, progressCallback) {\n  try {\n    // Check the address matches the private key\n    if (getAddress(account.address) !== computeAddress(account.privateKey)) {\n      throw new Error(\"address/privateKey mismatch\");\n    }\n    // Check the mnemonic (if any) matches the private key\n    if (hasMnemonic(account)) {\n      const mnemonic = account.mnemonic;\n      const node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path || defaultPath);\n      if (node.privateKey != account.privateKey) {\n        throw new Error(\"mnemonic mismatch\");\n      }\n    }\n  } catch (e) {\n    return Promise.reject(e);\n  }\n  // The options are optional, so adjust the call as needed\n  if (typeof options === \"function\" && !progressCallback) {\n    progressCallback = options;\n    options = {};\n  }\n  if (!options) {\n    options = {};\n  }\n  const privateKey = arrayify(account.privateKey);\n  const passwordBytes = getPassword(password);\n  let entropy = null;\n  let path = null;\n  let locale = null;\n  if (hasMnemonic(account)) {\n    const srcMnemonic = account.mnemonic;\n    entropy = arrayify(mnemonicToEntropy(srcMnemonic.phrase, srcMnemonic.locale || \"en\"));\n    path = srcMnemonic.path || defaultPath;\n    locale = srcMnemonic.locale || \"en\";\n  }\n  let client = options.client;\n  if (!client) {\n    client = \"ethers.js\";\n  }\n  // Check/generate the salt\n  let salt = null;\n  if (options.salt) {\n    salt = arrayify(options.salt);\n  } else {\n    salt = randomBytes(32);\n    ;\n  }\n  // Override initialization vector\n  let iv = null;\n  if (options.iv) {\n    iv = arrayify(options.iv);\n    if (iv.length !== 16) {\n      throw new Error(\"invalid iv\");\n    }\n  } else {\n    iv = randomBytes(16);\n  }\n  // Override the uuid\n  let uuidRandom = null;\n  if (options.uuid) {\n    uuidRandom = arrayify(options.uuid);\n    if (uuidRandom.length !== 16) {\n      throw new Error(\"invalid uuid\");\n    }\n  } else {\n    uuidRandom = randomBytes(16);\n  }\n  // Override the scrypt password-based key derivation function parameters\n  let N = 1 << 17,\n    r = 8,\n    p = 1;\n  if (options.scrypt) {\n    if (options.scrypt.N) {\n      N = options.scrypt.N;\n    }\n    if (options.scrypt.r) {\n      r = options.scrypt.r;\n    }\n    if (options.scrypt.p) {\n      p = options.scrypt.p;\n    }\n  }\n  // We take 64 bytes:\n  //   - 32 bytes   As normal for the Web3 secret storage (derivedKey, macPrefix)\n  //   - 32 bytes   AES key to encrypt mnemonic with (required here to be Ethers Wallet)\n  return scrypt.scrypt(passwordBytes, salt, N, r, p, 64, progressCallback).then(key => {\n    key = arrayify(key);\n    // This will be used to encrypt the wallet (as per Web3 secret storage)\n    const derivedKey = key.slice(0, 16);\n    const macPrefix = key.slice(16, 32);\n    // This will be used to encrypt the mnemonic phrase (if any)\n    const mnemonicKey = key.slice(32, 64);\n    // Encrypt the private key\n    const counter = new aes.Counter(iv);\n    const aesCtr = new aes.ModeOfOperation.ctr(derivedKey, counter);\n    const ciphertext = arrayify(aesCtr.encrypt(privateKey));\n    // Compute the message authentication code, used to check the password\n    const mac = keccak256(concat([macPrefix, ciphertext]));\n    // See: https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition\n    const data = {\n      address: account.address.substring(2).toLowerCase(),\n      id: uuidV4(uuidRandom),\n      version: 3,\n      crypto: {\n        cipher: \"aes-128-ctr\",\n        cipherparams: {\n          iv: hexlify(iv).substring(2)\n        },\n        ciphertext: hexlify(ciphertext).substring(2),\n        kdf: \"scrypt\",\n        kdfparams: {\n          salt: hexlify(salt).substring(2),\n          n: N,\n          dklen: 32,\n          p: p,\n          r: r\n        },\n        mac: mac.substring(2)\n      }\n    };\n    // If we have a mnemonic, encrypt it into the JSON wallet\n    if (entropy) {\n      const mnemonicIv = randomBytes(16);\n      const mnemonicCounter = new aes.Counter(mnemonicIv);\n      const mnemonicAesCtr = new aes.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);\n      const mnemonicCiphertext = arrayify(mnemonicAesCtr.encrypt(entropy));\n      const now = new Date();\n      const timestamp = now.getUTCFullYear() + \"-\" + zpad(now.getUTCMonth() + 1, 2) + \"-\" + zpad(now.getUTCDate(), 2) + \"T\" + zpad(now.getUTCHours(), 2) + \"-\" + zpad(now.getUTCMinutes(), 2) + \"-\" + zpad(now.getUTCSeconds(), 2) + \".0Z\";\n      data[\"x-ethers\"] = {\n        client: client,\n        gethFilename: \"UTC--\" + timestamp + \"--\" + data.address,\n        mnemonicCounter: hexlify(mnemonicIv).substring(2),\n        mnemonicCiphertext: hexlify(mnemonicCiphertext).substring(2),\n        path: path,\n        locale: locale,\n        version: \"0.1\"\n      };\n    }\n    return JSON.stringify(data);\n  });\n}","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","aes","scrypt","getAddress","arrayify","concat","hexlify","defaultPath","entropyToMnemonic","HDNode","mnemonicToEntropy","keccak256","pbkdf2","_pbkdf2","randomBytes","Description","computeAddress","getPassword","looseArrayify","searchPath","uuidV4","zpad","Logger","version","logger","hasMnemonic","mnemonic","phrase","KeystoreAccount","isKeystoreAccount","_isKeystoreAccount","_decrypt","data","key","ciphertext","cipher","iv","counter","Counter","aesCtr","ModeOfOperation","ctr","decrypt","_getAccount","computedMAC","slice","substring","toLowerCase","Error","privateKey","throwError","errors","UNSUPPORTED_OPERATION","operation","mnemonicKey","address","check","account","mnemonicCiphertext","mnemonicIv","mnemonicCounter","mnemonicAesCtr","path","locale","entropy","node","fromMnemonic","derivePath","error","code","INVALID_ARGUMENT","argument","pbkdf2Sync","passwordBytes","salt","count","dkLen","prfFunc","_computeKdfKey","password","pbkdf2Func","scryptFunc","progressCallback","kdf","name","throwArgumentError","N","parseInt","r","p","prf","decryptSync","json","JSON","parse","syncScrypt","encrypt","options","srcMnemonic","client","length","uuidRandom","uuid","derivedKey","macPrefix","mac","id","crypto","cipherparams","kdfparams","n","dklen","now","Date","timestamp","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","gethFilename","stringify"],"sources":["F:/DDesktop/MEAN_BC/mean-stack-authentication-authorization-master/angular-15-client/node_modules/@ethersproject/json-wallets/lib.esm/keystore.js"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport aes from \"aes-js\";\nimport scrypt from \"scrypt-js\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { arrayify, concat, hexlify } from \"@ethersproject/bytes\";\nimport { defaultPath, entropyToMnemonic, HDNode, mnemonicToEntropy } from \"@ethersproject/hdnode\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { pbkdf2 as _pbkdf2 } from \"@ethersproject/pbkdf2\";\nimport { randomBytes } from \"@ethersproject/random\";\nimport { Description } from \"@ethersproject/properties\";\nimport { computeAddress } from \"@ethersproject/transactions\";\nimport { getPassword, looseArrayify, searchPath, uuidV4, zpad } from \"./utils\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n// Exported Types\nfunction hasMnemonic(value) {\n    return (value != null && value.mnemonic && value.mnemonic.phrase);\n}\nexport class KeystoreAccount extends Description {\n    isKeystoreAccount(value) {\n        return !!(value && value._isKeystoreAccount);\n    }\n}\nfunction _decrypt(data, key, ciphertext) {\n    const cipher = searchPath(data, \"crypto/cipher\");\n    if (cipher === \"aes-128-ctr\") {\n        const iv = looseArrayify(searchPath(data, \"crypto/cipherparams/iv\"));\n        const counter = new aes.Counter(iv);\n        const aesCtr = new aes.ModeOfOperation.ctr(key, counter);\n        return arrayify(aesCtr.decrypt(ciphertext));\n    }\n    return null;\n}\nfunction _getAccount(data, key) {\n    const ciphertext = looseArrayify(searchPath(data, \"crypto/ciphertext\"));\n    const computedMAC = hexlify(keccak256(concat([key.slice(16, 32), ciphertext]))).substring(2);\n    if (computedMAC !== searchPath(data, \"crypto/mac\").toLowerCase()) {\n        throw new Error(\"invalid password\");\n    }\n    const privateKey = _decrypt(data, key.slice(0, 16), ciphertext);\n    if (!privateKey) {\n        logger.throwError(\"unsupported cipher\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"decrypt\"\n        });\n    }\n    const mnemonicKey = key.slice(32, 64);\n    const address = computeAddress(privateKey);\n    if (data.address) {\n        let check = data.address.toLowerCase();\n        if (check.substring(0, 2) !== \"0x\") {\n            check = \"0x\" + check;\n        }\n        if (getAddress(check) !== address) {\n            throw new Error(\"address mismatch\");\n        }\n    }\n    const account = {\n        _isKeystoreAccount: true,\n        address: address,\n        privateKey: hexlify(privateKey)\n    };\n    // Version 0.1 x-ethers metadata must contain an encrypted mnemonic phrase\n    if (searchPath(data, \"x-ethers/version\") === \"0.1\") {\n        const mnemonicCiphertext = looseArrayify(searchPath(data, \"x-ethers/mnemonicCiphertext\"));\n        const mnemonicIv = looseArrayify(searchPath(data, \"x-ethers/mnemonicCounter\"));\n        const mnemonicCounter = new aes.Counter(mnemonicIv);\n        const mnemonicAesCtr = new aes.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);\n        const path = searchPath(data, \"x-ethers/path\") || defaultPath;\n        const locale = searchPath(data, \"x-ethers/locale\") || \"en\";\n        const entropy = arrayify(mnemonicAesCtr.decrypt(mnemonicCiphertext));\n        try {\n            const mnemonic = entropyToMnemonic(entropy, locale);\n            const node = HDNode.fromMnemonic(mnemonic, null, locale).derivePath(path);\n            if (node.privateKey != account.privateKey) {\n                throw new Error(\"mnemonic mismatch\");\n            }\n            account.mnemonic = node.mnemonic;\n        }\n        catch (error) {\n            // If we don't have the locale wordlist installed to\n            // read this mnemonic, just bail and don't set the\n            // mnemonic\n            if (error.code !== Logger.errors.INVALID_ARGUMENT || error.argument !== \"wordlist\") {\n                throw error;\n            }\n        }\n    }\n    return new KeystoreAccount(account);\n}\nfunction pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc) {\n    return arrayify(_pbkdf2(passwordBytes, salt, count, dkLen, prfFunc));\n}\nfunction pbkdf2(passwordBytes, salt, count, dkLen, prfFunc) {\n    return Promise.resolve(pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc));\n}\nfunction _computeKdfKey(data, password, pbkdf2Func, scryptFunc, progressCallback) {\n    const passwordBytes = getPassword(password);\n    const kdf = searchPath(data, \"crypto/kdf\");\n    if (kdf && typeof (kdf) === \"string\") {\n        const throwError = function (name, value) {\n            return logger.throwArgumentError(\"invalid key-derivation function parameters\", name, value);\n        };\n        if (kdf.toLowerCase() === \"scrypt\") {\n            const salt = looseArrayify(searchPath(data, \"crypto/kdfparams/salt\"));\n            const N = parseInt(searchPath(data, \"crypto/kdfparams/n\"));\n            const r = parseInt(searchPath(data, \"crypto/kdfparams/r\"));\n            const p = parseInt(searchPath(data, \"crypto/kdfparams/p\"));\n            // Check for all required parameters\n            if (!N || !r || !p) {\n                throwError(\"kdf\", kdf);\n            }\n            // Make sure N is a power of 2\n            if ((N & (N - 1)) !== 0) {\n                throwError(\"N\", N);\n            }\n            const dkLen = parseInt(searchPath(data, \"crypto/kdfparams/dklen\"));\n            if (dkLen !== 32) {\n                throwError(\"dklen\", dkLen);\n            }\n            return scryptFunc(passwordBytes, salt, N, r, p, 64, progressCallback);\n        }\n        else if (kdf.toLowerCase() === \"pbkdf2\") {\n            const salt = looseArrayify(searchPath(data, \"crypto/kdfparams/salt\"));\n            let prfFunc = null;\n            const prf = searchPath(data, \"crypto/kdfparams/prf\");\n            if (prf === \"hmac-sha256\") {\n                prfFunc = \"sha256\";\n            }\n            else if (prf === \"hmac-sha512\") {\n                prfFunc = \"sha512\";\n            }\n            else {\n                throwError(\"prf\", prf);\n            }\n            const count = parseInt(searchPath(data, \"crypto/kdfparams/c\"));\n            const dkLen = parseInt(searchPath(data, \"crypto/kdfparams/dklen\"));\n            if (dkLen !== 32) {\n                throwError(\"dklen\", dkLen);\n            }\n            return pbkdf2Func(passwordBytes, salt, count, dkLen, prfFunc);\n        }\n    }\n    return logger.throwArgumentError(\"unsupported key-derivation function\", \"kdf\", kdf);\n}\nexport function decryptSync(json, password) {\n    const data = JSON.parse(json);\n    const key = _computeKdfKey(data, password, pbkdf2Sync, scrypt.syncScrypt);\n    return _getAccount(data, key);\n}\nexport function decrypt(json, password, progressCallback) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const data = JSON.parse(json);\n        const key = yield _computeKdfKey(data, password, pbkdf2, scrypt.scrypt, progressCallback);\n        return _getAccount(data, key);\n    });\n}\nexport function encrypt(account, password, options, progressCallback) {\n    try {\n        // Check the address matches the private key\n        if (getAddress(account.address) !== computeAddress(account.privateKey)) {\n            throw new Error(\"address/privateKey mismatch\");\n        }\n        // Check the mnemonic (if any) matches the private key\n        if (hasMnemonic(account)) {\n            const mnemonic = account.mnemonic;\n            const node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path || defaultPath);\n            if (node.privateKey != account.privateKey) {\n                throw new Error(\"mnemonic mismatch\");\n            }\n        }\n    }\n    catch (e) {\n        return Promise.reject(e);\n    }\n    // The options are optional, so adjust the call as needed\n    if (typeof (options) === \"function\" && !progressCallback) {\n        progressCallback = options;\n        options = {};\n    }\n    if (!options) {\n        options = {};\n    }\n    const privateKey = arrayify(account.privateKey);\n    const passwordBytes = getPassword(password);\n    let entropy = null;\n    let path = null;\n    let locale = null;\n    if (hasMnemonic(account)) {\n        const srcMnemonic = account.mnemonic;\n        entropy = arrayify(mnemonicToEntropy(srcMnemonic.phrase, srcMnemonic.locale || \"en\"));\n        path = srcMnemonic.path || defaultPath;\n        locale = srcMnemonic.locale || \"en\";\n    }\n    let client = options.client;\n    if (!client) {\n        client = \"ethers.js\";\n    }\n    // Check/generate the salt\n    let salt = null;\n    if (options.salt) {\n        salt = arrayify(options.salt);\n    }\n    else {\n        salt = randomBytes(32);\n        ;\n    }\n    // Override initialization vector\n    let iv = null;\n    if (options.iv) {\n        iv = arrayify(options.iv);\n        if (iv.length !== 16) {\n            throw new Error(\"invalid iv\");\n        }\n    }\n    else {\n        iv = randomBytes(16);\n    }\n    // Override the uuid\n    let uuidRandom = null;\n    if (options.uuid) {\n        uuidRandom = arrayify(options.uuid);\n        if (uuidRandom.length !== 16) {\n            throw new Error(\"invalid uuid\");\n        }\n    }\n    else {\n        uuidRandom = randomBytes(16);\n    }\n    // Override the scrypt password-based key derivation function parameters\n    let N = (1 << 17), r = 8, p = 1;\n    if (options.scrypt) {\n        if (options.scrypt.N) {\n            N = options.scrypt.N;\n        }\n        if (options.scrypt.r) {\n            r = options.scrypt.r;\n        }\n        if (options.scrypt.p) {\n            p = options.scrypt.p;\n        }\n    }\n    // We take 64 bytes:\n    //   - 32 bytes   As normal for the Web3 secret storage (derivedKey, macPrefix)\n    //   - 32 bytes   AES key to encrypt mnemonic with (required here to be Ethers Wallet)\n    return scrypt.scrypt(passwordBytes, salt, N, r, p, 64, progressCallback).then((key) => {\n        key = arrayify(key);\n        // This will be used to encrypt the wallet (as per Web3 secret storage)\n        const derivedKey = key.slice(0, 16);\n        const macPrefix = key.slice(16, 32);\n        // This will be used to encrypt the mnemonic phrase (if any)\n        const mnemonicKey = key.slice(32, 64);\n        // Encrypt the private key\n        const counter = new aes.Counter(iv);\n        const aesCtr = new aes.ModeOfOperation.ctr(derivedKey, counter);\n        const ciphertext = arrayify(aesCtr.encrypt(privateKey));\n        // Compute the message authentication code, used to check the password\n        const mac = keccak256(concat([macPrefix, ciphertext]));\n        // See: https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition\n        const data = {\n            address: account.address.substring(2).toLowerCase(),\n            id: uuidV4(uuidRandom),\n            version: 3,\n            crypto: {\n                cipher: \"aes-128-ctr\",\n                cipherparams: {\n                    iv: hexlify(iv).substring(2),\n                },\n                ciphertext: hexlify(ciphertext).substring(2),\n                kdf: \"scrypt\",\n                kdfparams: {\n                    salt: hexlify(salt).substring(2),\n                    n: N,\n                    dklen: 32,\n                    p: p,\n                    r: r\n                },\n                mac: mac.substring(2)\n            }\n        };\n        // If we have a mnemonic, encrypt it into the JSON wallet\n        if (entropy) {\n            const mnemonicIv = randomBytes(16);\n            const mnemonicCounter = new aes.Counter(mnemonicIv);\n            const mnemonicAesCtr = new aes.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);\n            const mnemonicCiphertext = arrayify(mnemonicAesCtr.encrypt(entropy));\n            const now = new Date();\n            const timestamp = (now.getUTCFullYear() + \"-\" +\n                zpad(now.getUTCMonth() + 1, 2) + \"-\" +\n                zpad(now.getUTCDate(), 2) + \"T\" +\n                zpad(now.getUTCHours(), 2) + \"-\" +\n                zpad(now.getUTCMinutes(), 2) + \"-\" +\n                zpad(now.getUTCSeconds(), 2) + \".0Z\");\n            data[\"x-ethers\"] = {\n                client: client,\n                gethFilename: (\"UTC--\" + timestamp + \"--\" + data.address),\n                mnemonicCounter: hexlify(mnemonicIv).substring(2),\n                mnemonicCiphertext: hexlify(mnemonicCiphertext).substring(2),\n                path: path,\n                locale: locale,\n                version: \"0.1\"\n            };\n        }\n        return JSON.stringify(data);\n    });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}