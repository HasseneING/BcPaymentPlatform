{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { isHexString } from \"@ethersproject/bytes\";\nimport { Description, defineReadOnly, resolveProperties } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n;\n;\n//export type CallTransactionable = {\n//    call(transaction: TransactionRequest): Promise<TransactionResponse>;\n//};\nexport class ForkEvent extends Description {\n  static isForkEvent(value) {\n    return !!(value && value._isForkEvent);\n  }\n}\nexport class BlockForkEvent extends ForkEvent {\n  constructor(blockHash, expiry) {\n    if (!isHexString(blockHash, 32)) {\n      logger.throwArgumentError(\"invalid blockHash\", \"blockHash\", blockHash);\n    }\n    super({\n      _isForkEvent: true,\n      _isBlockForkEvent: true,\n      expiry: expiry || 0,\n      blockHash: blockHash\n    });\n  }\n}\nexport class TransactionForkEvent extends ForkEvent {\n  constructor(hash, expiry) {\n    if (!isHexString(hash, 32)) {\n      logger.throwArgumentError(\"invalid transaction hash\", \"hash\", hash);\n    }\n    super({\n      _isForkEvent: true,\n      _isTransactionForkEvent: true,\n      expiry: expiry || 0,\n      hash: hash\n    });\n  }\n}\nexport class TransactionOrderForkEvent extends ForkEvent {\n  constructor(beforeHash, afterHash, expiry) {\n    if (!isHexString(beforeHash, 32)) {\n      logger.throwArgumentError(\"invalid transaction hash\", \"beforeHash\", beforeHash);\n    }\n    if (!isHexString(afterHash, 32)) {\n      logger.throwArgumentError(\"invalid transaction hash\", \"afterHash\", afterHash);\n    }\n    super({\n      _isForkEvent: true,\n      _isTransactionOrderForkEvent: true,\n      expiry: expiry || 0,\n      beforeHash: beforeHash,\n      afterHash: afterHash\n    });\n  }\n}\n///////////////////////////////\n// Exported Abstracts\nexport class Provider {\n  constructor() {\n    logger.checkAbstract(new.target, Provider);\n    defineReadOnly(this, \"_isProvider\", true);\n  }\n  getFeeData() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        block,\n        gasPrice\n      } = yield resolveProperties({\n        block: this.getBlock(\"latest\"),\n        gasPrice: this.getGasPrice().catch(error => {\n          // @TODO: Why is this now failing on Calaveras?\n          //console.log(error);\n          return null;\n        })\n      });\n      let lastBaseFeePerGas = null,\n        maxFeePerGas = null,\n        maxPriorityFeePerGas = null;\n      if (block && block.baseFeePerGas) {\n        // We may want to compute this more accurately in the future,\n        // using the formula \"check if the base fee is correct\".\n        // See: https://eips.ethereum.org/EIPS/eip-1559\n        lastBaseFeePerGas = block.baseFeePerGas;\n        maxPriorityFeePerGas = BigNumber.from(\"1500000000\");\n        maxFeePerGas = block.baseFeePerGas.mul(2).add(maxPriorityFeePerGas);\n      }\n      return {\n        lastBaseFeePerGas,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        gasPrice\n      };\n    });\n  }\n  // Alias for \"on\"\n  addListener(eventName, listener) {\n    return this.on(eventName, listener);\n  }\n  // Alias for \"off\"\n  removeListener(eventName, listener) {\n    return this.off(eventName, listener);\n  }\n  static isProvider(value) {\n    return !!(value && value._isProvider);\n  }\n}","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","BigNumber","isHexString","Description","defineReadOnly","resolveProperties","Logger","version","logger","ForkEvent","isForkEvent","_isForkEvent","BlockForkEvent","constructor","blockHash","expiry","throwArgumentError","_isBlockForkEvent","TransactionForkEvent","hash","_isTransactionForkEvent","TransactionOrderForkEvent","beforeHash","afterHash","_isTransactionOrderForkEvent","Provider","checkAbstract","new","target","getFeeData","block","gasPrice","getBlock","getGasPrice","catch","error","lastBaseFeePerGas","maxFeePerGas","maxPriorityFeePerGas","baseFeePerGas","from","mul","add","addListener","eventName","listener","on","removeListener","off","isProvider","_isProvider"],"sources":["F:/DDesktop/MEAN_BC/mean-stack-authentication-authorization-master/angular-15-client/node_modules/@ethersproject/abstract-provider/lib.esm/index.js"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { isHexString } from \"@ethersproject/bytes\";\nimport { Description, defineReadOnly, resolveProperties } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n;\n;\n//export type CallTransactionable = {\n//    call(transaction: TransactionRequest): Promise<TransactionResponse>;\n//};\nexport class ForkEvent extends Description {\n    static isForkEvent(value) {\n        return !!(value && value._isForkEvent);\n    }\n}\nexport class BlockForkEvent extends ForkEvent {\n    constructor(blockHash, expiry) {\n        if (!isHexString(blockHash, 32)) {\n            logger.throwArgumentError(\"invalid blockHash\", \"blockHash\", blockHash);\n        }\n        super({\n            _isForkEvent: true,\n            _isBlockForkEvent: true,\n            expiry: (expiry || 0),\n            blockHash: blockHash\n        });\n    }\n}\nexport class TransactionForkEvent extends ForkEvent {\n    constructor(hash, expiry) {\n        if (!isHexString(hash, 32)) {\n            logger.throwArgumentError(\"invalid transaction hash\", \"hash\", hash);\n        }\n        super({\n            _isForkEvent: true,\n            _isTransactionForkEvent: true,\n            expiry: (expiry || 0),\n            hash: hash\n        });\n    }\n}\nexport class TransactionOrderForkEvent extends ForkEvent {\n    constructor(beforeHash, afterHash, expiry) {\n        if (!isHexString(beforeHash, 32)) {\n            logger.throwArgumentError(\"invalid transaction hash\", \"beforeHash\", beforeHash);\n        }\n        if (!isHexString(afterHash, 32)) {\n            logger.throwArgumentError(\"invalid transaction hash\", \"afterHash\", afterHash);\n        }\n        super({\n            _isForkEvent: true,\n            _isTransactionOrderForkEvent: true,\n            expiry: (expiry || 0),\n            beforeHash: beforeHash,\n            afterHash: afterHash\n        });\n    }\n}\n///////////////////////////////\n// Exported Abstracts\nexport class Provider {\n    constructor() {\n        logger.checkAbstract(new.target, Provider);\n        defineReadOnly(this, \"_isProvider\", true);\n    }\n    getFeeData() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { block, gasPrice } = yield resolveProperties({\n                block: this.getBlock(\"latest\"),\n                gasPrice: this.getGasPrice().catch((error) => {\n                    // @TODO: Why is this now failing on Calaveras?\n                    //console.log(error);\n                    return null;\n                })\n            });\n            let lastBaseFeePerGas = null, maxFeePerGas = null, maxPriorityFeePerGas = null;\n            if (block && block.baseFeePerGas) {\n                // We may want to compute this more accurately in the future,\n                // using the formula \"check if the base fee is correct\".\n                // See: https://eips.ethereum.org/EIPS/eip-1559\n                lastBaseFeePerGas = block.baseFeePerGas;\n                maxPriorityFeePerGas = BigNumber.from(\"1500000000\");\n                maxFeePerGas = block.baseFeePerGas.mul(2).add(maxPriorityFeePerGas);\n            }\n            return { lastBaseFeePerGas, maxFeePerGas, maxPriorityFeePerGas, gasPrice };\n        });\n    }\n    // Alias for \"on\"\n    addListener(eventName, listener) {\n        return this.on(eventName, listener);\n    }\n    // Alias for \"off\"\n    removeListener(eventName, listener) {\n        return this.off(eventName, listener);\n    }\n    static isProvider(value) {\n        return !!(value && value._isProvider);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}