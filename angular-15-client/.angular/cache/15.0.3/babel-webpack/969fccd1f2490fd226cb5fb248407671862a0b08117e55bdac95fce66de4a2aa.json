{"ast":null,"code":"\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nconst defaultApplicationId = \"62e1ad51b37b8e00394bda3b\";\nexport class PocketProvider extends UrlJsonRpcProvider {\n  static getApiKey(apiKey) {\n    const apiKeyObj = {\n      applicationId: null,\n      loadBalancer: true,\n      applicationSecretKey: null\n    };\n    // Parse applicationId and applicationSecretKey\n    if (apiKey == null) {\n      apiKeyObj.applicationId = defaultApplicationId;\n    } else if (typeof apiKey === \"string\") {\n      apiKeyObj.applicationId = apiKey;\n    } else if (apiKey.applicationSecretKey != null) {\n      apiKeyObj.applicationId = apiKey.applicationId;\n      apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;\n    } else if (apiKey.applicationId) {\n      apiKeyObj.applicationId = apiKey.applicationId;\n    } else {\n      logger.throwArgumentError(\"unsupported PocketProvider apiKey\", \"apiKey\", apiKey);\n    }\n    return apiKeyObj;\n  }\n  static getUrl(network, apiKey) {\n    let host = null;\n    switch (network ? network.name : \"unknown\") {\n      case \"goerli\":\n        host = \"eth-goerli.gateway.pokt.network\";\n        break;\n      case \"homestead\":\n        host = \"eth-mainnet.gateway.pokt.network\";\n        break;\n      case \"kovan\":\n        host = \"poa-kovan.gateway.pokt.network\";\n        break;\n      case \"matic\":\n        host = \"poly-mainnet.gateway.pokt.network\";\n        break;\n      case \"maticmum\":\n        host = \"polygon-mumbai-rpc.gateway.pokt.network\";\n        break;\n      case \"rinkeby\":\n        host = \"eth-rinkeby.gateway.pokt.network\";\n        break;\n      case \"ropsten\":\n        host = \"eth-ropsten.gateway.pokt.network\";\n        break;\n      default:\n        logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"network\",\n          value: network\n        });\n    }\n    const url = `https:/\\/${host}/v1/lb/${apiKey.applicationId}`;\n    const connection = {\n      headers: {},\n      url\n    };\n    if (apiKey.applicationSecretKey != null) {\n      connection.user = \"\";\n      connection.password = apiKey.applicationSecretKey;\n    }\n    return connection;\n  }\n  isCommunityResource() {\n    return this.applicationId === defaultApplicationId;\n  }\n}","map":{"version":3,"names":["Logger","version","logger","UrlJsonRpcProvider","defaultApplicationId","PocketProvider","getApiKey","apiKey","apiKeyObj","applicationId","loadBalancer","applicationSecretKey","throwArgumentError","getUrl","network","host","name","throwError","errors","INVALID_ARGUMENT","argument","value","url","connection","headers","user","password","isCommunityResource"],"sources":["F:/DDesktop/MEAN_BC/mean-stack-authentication-authorization-master/angular-15-client/node_modules/@ethersproject/providers/lib.esm/pocket-provider.js"],"sourcesContent":["\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nconst defaultApplicationId = \"62e1ad51b37b8e00394bda3b\";\nexport class PocketProvider extends UrlJsonRpcProvider {\n    static getApiKey(apiKey) {\n        const apiKeyObj = {\n            applicationId: null,\n            loadBalancer: true,\n            applicationSecretKey: null\n        };\n        // Parse applicationId and applicationSecretKey\n        if (apiKey == null) {\n            apiKeyObj.applicationId = defaultApplicationId;\n        }\n        else if (typeof (apiKey) === \"string\") {\n            apiKeyObj.applicationId = apiKey;\n        }\n        else if (apiKey.applicationSecretKey != null) {\n            apiKeyObj.applicationId = apiKey.applicationId;\n            apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;\n        }\n        else if (apiKey.applicationId) {\n            apiKeyObj.applicationId = apiKey.applicationId;\n        }\n        else {\n            logger.throwArgumentError(\"unsupported PocketProvider apiKey\", \"apiKey\", apiKey);\n        }\n        return apiKeyObj;\n    }\n    static getUrl(network, apiKey) {\n        let host = null;\n        switch (network ? network.name : \"unknown\") {\n            case \"goerli\":\n                host = \"eth-goerli.gateway.pokt.network\";\n                break;\n            case \"homestead\":\n                host = \"eth-mainnet.gateway.pokt.network\";\n                break;\n            case \"kovan\":\n                host = \"poa-kovan.gateway.pokt.network\";\n                break;\n            case \"matic\":\n                host = \"poly-mainnet.gateway.pokt.network\";\n                break;\n            case \"maticmum\":\n                host = \"polygon-mumbai-rpc.gateway.pokt.network\";\n                break;\n            case \"rinkeby\":\n                host = \"eth-rinkeby.gateway.pokt.network\";\n                break;\n            case \"ropsten\":\n                host = \"eth-ropsten.gateway.pokt.network\";\n                break;\n            default:\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n        }\n        const url = `https:/\\/${host}/v1/lb/${apiKey.applicationId}`;\n        const connection = { headers: {}, url };\n        if (apiKey.applicationSecretKey != null) {\n            connection.user = \"\";\n            connection.password = apiKey.applicationSecretKey;\n        }\n        return connection;\n    }\n    isCommunityResource() {\n        return (this.applicationId === defaultApplicationId);\n    }\n}\n"],"mappings":"AAAA,YAAY;;AACZ,SAASA,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,OAAO,QAAQ,YAAY;AACpC,MAAMC,MAAM,GAAG,IAAIF,MAAM,CAACC,OAAO,CAAC;AAClC,SAASE,kBAAkB,QAAQ,yBAAyB;AAC5D,MAAMC,oBAAoB,GAAG,0BAA0B;AACvD,OAAO,MAAMC,cAAc,SAASF,kBAAkB,CAAC;EACnD,OAAOG,SAAS,CAACC,MAAM,EAAE;IACrB,MAAMC,SAAS,GAAG;MACdC,aAAa,EAAE,IAAI;MACnBC,YAAY,EAAE,IAAI;MAClBC,oBAAoB,EAAE;IAC1B,CAAC;IACD;IACA,IAAIJ,MAAM,IAAI,IAAI,EAAE;MAChBC,SAAS,CAACC,aAAa,GAAGL,oBAAoB;IAClD,CAAC,MACI,IAAI,OAAQG,MAAO,KAAK,QAAQ,EAAE;MACnCC,SAAS,CAACC,aAAa,GAAGF,MAAM;IACpC,CAAC,MACI,IAAIA,MAAM,CAACI,oBAAoB,IAAI,IAAI,EAAE;MAC1CH,SAAS,CAACC,aAAa,GAAGF,MAAM,CAACE,aAAa;MAC9CD,SAAS,CAACG,oBAAoB,GAAGJ,MAAM,CAACI,oBAAoB;IAChE,CAAC,MACI,IAAIJ,MAAM,CAACE,aAAa,EAAE;MAC3BD,SAAS,CAACC,aAAa,GAAGF,MAAM,CAACE,aAAa;IAClD,CAAC,MACI;MACDP,MAAM,CAACU,kBAAkB,CAAC,mCAAmC,EAAE,QAAQ,EAAEL,MAAM,CAAC;IACpF;IACA,OAAOC,SAAS;EACpB;EACA,OAAOK,MAAM,CAACC,OAAO,EAAEP,MAAM,EAAE;IAC3B,IAAIQ,IAAI,GAAG,IAAI;IACf,QAAQD,OAAO,GAAGA,OAAO,CAACE,IAAI,GAAG,SAAS;MACtC,KAAK,QAAQ;QACTD,IAAI,GAAG,iCAAiC;QACxC;MACJ,KAAK,WAAW;QACZA,IAAI,GAAG,kCAAkC;QACzC;MACJ,KAAK,OAAO;QACRA,IAAI,GAAG,gCAAgC;QACvC;MACJ,KAAK,OAAO;QACRA,IAAI,GAAG,mCAAmC;QAC1C;MACJ,KAAK,UAAU;QACXA,IAAI,GAAG,yCAAyC;QAChD;MACJ,KAAK,SAAS;QACVA,IAAI,GAAG,kCAAkC;QACzC;MACJ,KAAK,SAAS;QACVA,IAAI,GAAG,kCAAkC;QACzC;MACJ;QACIb,MAAM,CAACe,UAAU,CAAC,qBAAqB,EAAEjB,MAAM,CAACkB,MAAM,CAACC,gBAAgB,EAAE;UACrEC,QAAQ,EAAE,SAAS;UACnBC,KAAK,EAAEP;QACX,CAAC,CAAC;IAAC;IAEX,MAAMQ,GAAG,GAAI,YAAWP,IAAK,UAASR,MAAM,CAACE,aAAc,EAAC;IAC5D,MAAMc,UAAU,GAAG;MAAEC,OAAO,EAAE,CAAC,CAAC;MAAEF;IAAI,CAAC;IACvC,IAAIf,MAAM,CAACI,oBAAoB,IAAI,IAAI,EAAE;MACrCY,UAAU,CAACE,IAAI,GAAG,EAAE;MACpBF,UAAU,CAACG,QAAQ,GAAGnB,MAAM,CAACI,oBAAoB;IACrD;IACA,OAAOY,UAAU;EACrB;EACAI,mBAAmB,GAAG;IAClB,OAAQ,IAAI,CAAClB,aAAa,KAAKL,oBAAoB;EACvD;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}