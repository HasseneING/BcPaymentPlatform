{"ast":null,"code":"\"use strict\";\n\nimport { arrayify, concat, hexConcat, hexlify } from \"@ethersproject/bytes\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"../_version\";\nconst logger = new Logger(version);\nexport function checkResultErrors(result) {\n  // Find the first error (if any)\n  const errors = [];\n  const checkErrors = function (path, object) {\n    if (!Array.isArray(object)) {\n      return;\n    }\n    for (let key in object) {\n      const childPath = path.slice();\n      childPath.push(key);\n      try {\n        checkErrors(childPath, object[key]);\n      } catch (error) {\n        errors.push({\n          path: childPath,\n          error: error\n        });\n      }\n    }\n  };\n  checkErrors([], result);\n  return errors;\n}\nexport class Coder {\n  constructor(name, type, localName, dynamic) {\n    // @TODO: defineReadOnly these\n    this.name = name;\n    this.type = type;\n    this.localName = localName;\n    this.dynamic = dynamic;\n  }\n  _throwError(message, value) {\n    logger.throwArgumentError(message, this.localName, value);\n  }\n}\nexport class Writer {\n  constructor(wordSize) {\n    defineReadOnly(this, \"wordSize\", wordSize || 32);\n    this._data = [];\n    this._dataLength = 0;\n    this._padding = new Uint8Array(wordSize);\n  }\n  get data() {\n    return hexConcat(this._data);\n  }\n  get length() {\n    return this._dataLength;\n  }\n  _writeData(data) {\n    this._data.push(data);\n    this._dataLength += data.length;\n    return data.length;\n  }\n  appendWriter(writer) {\n    return this._writeData(concat(writer._data));\n  }\n  // Arrayish items; padded on the right to wordSize\n  writeBytes(value) {\n    let bytes = arrayify(value);\n    const paddingOffset = bytes.length % this.wordSize;\n    if (paddingOffset) {\n      bytes = concat([bytes, this._padding.slice(paddingOffset)]);\n    }\n    return this._writeData(bytes);\n  }\n  _getValue(value) {\n    let bytes = arrayify(BigNumber.from(value));\n    if (bytes.length > this.wordSize) {\n      logger.throwError(\"value out-of-bounds\", Logger.errors.BUFFER_OVERRUN, {\n        length: this.wordSize,\n        offset: bytes.length\n      });\n    }\n    if (bytes.length % this.wordSize) {\n      bytes = concat([this._padding.slice(bytes.length % this.wordSize), bytes]);\n    }\n    return bytes;\n  }\n  // BigNumberish items; padded on the left to wordSize\n  writeValue(value) {\n    return this._writeData(this._getValue(value));\n  }\n  writeUpdatableValue() {\n    const offset = this._data.length;\n    this._data.push(this._padding);\n    this._dataLength += this.wordSize;\n    return value => {\n      this._data[offset] = this._getValue(value);\n    };\n  }\n}\nexport class Reader {\n  constructor(data, wordSize, coerceFunc, allowLoose) {\n    defineReadOnly(this, \"_data\", arrayify(data));\n    defineReadOnly(this, \"wordSize\", wordSize || 32);\n    defineReadOnly(this, \"_coerceFunc\", coerceFunc);\n    defineReadOnly(this, \"allowLoose\", allowLoose);\n    this._offset = 0;\n  }\n  get data() {\n    return hexlify(this._data);\n  }\n  get consumed() {\n    return this._offset;\n  }\n  // The default Coerce function\n  static coerce(name, value) {\n    let match = name.match(\"^u?int([0-9]+)$\");\n    if (match && parseInt(match[1]) <= 48) {\n      value = value.toNumber();\n    }\n    return value;\n  }\n  coerce(name, value) {\n    if (this._coerceFunc) {\n      return this._coerceFunc(name, value);\n    }\n    return Reader.coerce(name, value);\n  }\n  _peekBytes(offset, length, loose) {\n    let alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;\n    if (this._offset + alignedLength > this._data.length) {\n      if (this.allowLoose && loose && this._offset + length <= this._data.length) {\n        alignedLength = length;\n      } else {\n        logger.throwError(\"data out-of-bounds\", Logger.errors.BUFFER_OVERRUN, {\n          length: this._data.length,\n          offset: this._offset + alignedLength\n        });\n      }\n    }\n    return this._data.slice(this._offset, this._offset + alignedLength);\n  }\n  subReader(offset) {\n    return new Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);\n  }\n  readBytes(length, loose) {\n    let bytes = this._peekBytes(0, length, !!loose);\n    this._offset += bytes.length;\n    // @TODO: Make sure the length..end bytes are all 0?\n    return bytes.slice(0, length);\n  }\n  readValue() {\n    return BigNumber.from(this.readBytes(this.wordSize));\n  }\n}","map":{"version":3,"names":["arrayify","concat","hexConcat","hexlify","BigNumber","defineReadOnly","Logger","version","logger","checkResultErrors","result","errors","checkErrors","path","object","Array","isArray","key","childPath","slice","push","error","Coder","constructor","name","type","localName","dynamic","_throwError","message","value","throwArgumentError","Writer","wordSize","_data","_dataLength","_padding","Uint8Array","data","length","_writeData","appendWriter","writer","writeBytes","bytes","paddingOffset","_getValue","from","throwError","BUFFER_OVERRUN","offset","writeValue","writeUpdatableValue","Reader","coerceFunc","allowLoose","_offset","consumed","coerce","match","parseInt","toNumber","_coerceFunc","_peekBytes","loose","alignedLength","Math","ceil","subReader","readBytes","readValue"],"sources":["F:/DDesktop/MEAN_BC/mean-stack-authentication-authorization-master/angular-15-client/node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js"],"sourcesContent":["\"use strict\";\nimport { arrayify, concat, hexConcat, hexlify } from \"@ethersproject/bytes\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"../_version\";\nconst logger = new Logger(version);\nexport function checkResultErrors(result) {\n    // Find the first error (if any)\n    const errors = [];\n    const checkErrors = function (path, object) {\n        if (!Array.isArray(object)) {\n            return;\n        }\n        for (let key in object) {\n            const childPath = path.slice();\n            childPath.push(key);\n            try {\n                checkErrors(childPath, object[key]);\n            }\n            catch (error) {\n                errors.push({ path: childPath, error: error });\n            }\n        }\n    };\n    checkErrors([], result);\n    return errors;\n}\nexport class Coder {\n    constructor(name, type, localName, dynamic) {\n        // @TODO: defineReadOnly these\n        this.name = name;\n        this.type = type;\n        this.localName = localName;\n        this.dynamic = dynamic;\n    }\n    _throwError(message, value) {\n        logger.throwArgumentError(message, this.localName, value);\n    }\n}\nexport class Writer {\n    constructor(wordSize) {\n        defineReadOnly(this, \"wordSize\", wordSize || 32);\n        this._data = [];\n        this._dataLength = 0;\n        this._padding = new Uint8Array(wordSize);\n    }\n    get data() {\n        return hexConcat(this._data);\n    }\n    get length() { return this._dataLength; }\n    _writeData(data) {\n        this._data.push(data);\n        this._dataLength += data.length;\n        return data.length;\n    }\n    appendWriter(writer) {\n        return this._writeData(concat(writer._data));\n    }\n    // Arrayish items; padded on the right to wordSize\n    writeBytes(value) {\n        let bytes = arrayify(value);\n        const paddingOffset = bytes.length % this.wordSize;\n        if (paddingOffset) {\n            bytes = concat([bytes, this._padding.slice(paddingOffset)]);\n        }\n        return this._writeData(bytes);\n    }\n    _getValue(value) {\n        let bytes = arrayify(BigNumber.from(value));\n        if (bytes.length > this.wordSize) {\n            logger.throwError(\"value out-of-bounds\", Logger.errors.BUFFER_OVERRUN, {\n                length: this.wordSize,\n                offset: bytes.length\n            });\n        }\n        if (bytes.length % this.wordSize) {\n            bytes = concat([this._padding.slice(bytes.length % this.wordSize), bytes]);\n        }\n        return bytes;\n    }\n    // BigNumberish items; padded on the left to wordSize\n    writeValue(value) {\n        return this._writeData(this._getValue(value));\n    }\n    writeUpdatableValue() {\n        const offset = this._data.length;\n        this._data.push(this._padding);\n        this._dataLength += this.wordSize;\n        return (value) => {\n            this._data[offset] = this._getValue(value);\n        };\n    }\n}\nexport class Reader {\n    constructor(data, wordSize, coerceFunc, allowLoose) {\n        defineReadOnly(this, \"_data\", arrayify(data));\n        defineReadOnly(this, \"wordSize\", wordSize || 32);\n        defineReadOnly(this, \"_coerceFunc\", coerceFunc);\n        defineReadOnly(this, \"allowLoose\", allowLoose);\n        this._offset = 0;\n    }\n    get data() { return hexlify(this._data); }\n    get consumed() { return this._offset; }\n    // The default Coerce function\n    static coerce(name, value) {\n        let match = name.match(\"^u?int([0-9]+)$\");\n        if (match && parseInt(match[1]) <= 48) {\n            value = value.toNumber();\n        }\n        return value;\n    }\n    coerce(name, value) {\n        if (this._coerceFunc) {\n            return this._coerceFunc(name, value);\n        }\n        return Reader.coerce(name, value);\n    }\n    _peekBytes(offset, length, loose) {\n        let alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;\n        if (this._offset + alignedLength > this._data.length) {\n            if (this.allowLoose && loose && this._offset + length <= this._data.length) {\n                alignedLength = length;\n            }\n            else {\n                logger.throwError(\"data out-of-bounds\", Logger.errors.BUFFER_OVERRUN, {\n                    length: this._data.length,\n                    offset: this._offset + alignedLength\n                });\n            }\n        }\n        return this._data.slice(this._offset, this._offset + alignedLength);\n    }\n    subReader(offset) {\n        return new Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);\n    }\n    readBytes(length, loose) {\n        let bytes = this._peekBytes(0, length, !!loose);\n        this._offset += bytes.length;\n        // @TODO: Make sure the length..end bytes are all 0?\n        return bytes.slice(0, length);\n    }\n    readValue() {\n        return BigNumber.from(this.readBytes(this.wordSize));\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}