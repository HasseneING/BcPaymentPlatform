{"ast":null,"code":"\"use strict\";\n\nimport { Base58 } from \"@ethersproject/basex\";\nimport { arrayify, concat, hexDataSlice, hexZeroPad, hexlify } from \"@ethersproject/bytes\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { toUtf8Bytes, UnicodeNormalizationForm } from \"@ethersproject/strings\";\nimport { pbkdf2 } from \"@ethersproject/pbkdf2\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { SigningKey } from \"@ethersproject/signing-key\";\nimport { computeHmac, ripemd160, sha256, SupportedAlgorithm } from \"@ethersproject/sha2\";\nimport { computeAddress } from \"@ethersproject/transactions\";\nimport { wordlists } from \"@ethersproject/wordlists\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nconst N = BigNumber.from(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\");\n// \"Bitcoin seed\"\nconst MasterSecret = toUtf8Bytes(\"Bitcoin seed\");\nconst HardenedBit = 0x80000000;\n// Returns a byte with the MSB bits set\nfunction getUpperMask(bits) {\n  return (1 << bits) - 1 << 8 - bits;\n}\n// Returns a byte with the LSB bits set\nfunction getLowerMask(bits) {\n  return (1 << bits) - 1;\n}\nfunction bytes32(value) {\n  return hexZeroPad(hexlify(value), 32);\n}\nfunction base58check(data) {\n  return Base58.encode(concat([data, hexDataSlice(sha256(sha256(data)), 0, 4)]));\n}\nfunction getWordlist(wordlist) {\n  if (wordlist == null) {\n    return wordlists[\"en\"];\n  }\n  if (typeof wordlist === \"string\") {\n    const words = wordlists[wordlist];\n    if (words == null) {\n      logger.throwArgumentError(\"unknown locale\", \"wordlist\", wordlist);\n    }\n    return words;\n  }\n  return wordlist;\n}\nconst _constructorGuard = {};\nexport const defaultPath = \"m/44'/60'/0'/0/0\";\n;\nexport class HDNode {\n  /**\n   *  This constructor should not be called directly.\n   *\n   *  Please use:\n   *   - fromMnemonic\n   *   - fromSeed\n   */\n  constructor(constructorGuard, privateKey, publicKey, parentFingerprint, chainCode, index, depth, mnemonicOrPath) {\n    /* istanbul ignore if */\n    if (constructorGuard !== _constructorGuard) {\n      throw new Error(\"HDNode constructor cannot be called directly\");\n    }\n    if (privateKey) {\n      const signingKey = new SigningKey(privateKey);\n      defineReadOnly(this, \"privateKey\", signingKey.privateKey);\n      defineReadOnly(this, \"publicKey\", signingKey.compressedPublicKey);\n    } else {\n      defineReadOnly(this, \"privateKey\", null);\n      defineReadOnly(this, \"publicKey\", hexlify(publicKey));\n    }\n    defineReadOnly(this, \"parentFingerprint\", parentFingerprint);\n    defineReadOnly(this, \"fingerprint\", hexDataSlice(ripemd160(sha256(this.publicKey)), 0, 4));\n    defineReadOnly(this, \"address\", computeAddress(this.publicKey));\n    defineReadOnly(this, \"chainCode\", chainCode);\n    defineReadOnly(this, \"index\", index);\n    defineReadOnly(this, \"depth\", depth);\n    if (mnemonicOrPath == null) {\n      // From a source that does not preserve the path (e.g. extended keys)\n      defineReadOnly(this, \"mnemonic\", null);\n      defineReadOnly(this, \"path\", null);\n    } else if (typeof mnemonicOrPath === \"string\") {\n      // From a source that does not preserve the mnemonic (e.g. neutered)\n      defineReadOnly(this, \"mnemonic\", null);\n      defineReadOnly(this, \"path\", mnemonicOrPath);\n    } else {\n      // From a fully qualified source\n      defineReadOnly(this, \"mnemonic\", mnemonicOrPath);\n      defineReadOnly(this, \"path\", mnemonicOrPath.path);\n    }\n  }\n  get extendedKey() {\n    // We only support the mainnet values for now, but if anyone needs\n    // testnet values, let me know. I believe current sentiment is that\n    // we should always use mainnet, and use BIP-44 to derive the network\n    //   - Mainnet: public=0x0488B21E, private=0x0488ADE4\n    //   - Testnet: public=0x043587CF, private=0x04358394\n    if (this.depth >= 256) {\n      throw new Error(\"Depth too large!\");\n    }\n    return base58check(concat([this.privateKey != null ? \"0x0488ADE4\" : \"0x0488B21E\", hexlify(this.depth), this.parentFingerprint, hexZeroPad(hexlify(this.index), 4), this.chainCode, this.privateKey != null ? concat([\"0x00\", this.privateKey]) : this.publicKey]));\n  }\n  neuter() {\n    return new HDNode(_constructorGuard, null, this.publicKey, this.parentFingerprint, this.chainCode, this.index, this.depth, this.path);\n  }\n  _derive(index) {\n    if (index > 0xffffffff) {\n      throw new Error(\"invalid index - \" + String(index));\n    }\n    // Base path\n    let path = this.path;\n    if (path) {\n      path += \"/\" + (index & ~HardenedBit);\n    }\n    const data = new Uint8Array(37);\n    if (index & HardenedBit) {\n      if (!this.privateKey) {\n        throw new Error(\"cannot derive child of neutered node\");\n      }\n      // Data = 0x00 || ser_256(k_par)\n      data.set(arrayify(this.privateKey), 1);\n      // Hardened path\n      if (path) {\n        path += \"'\";\n      }\n    } else {\n      // Data = ser_p(point(k_par))\n      data.set(arrayify(this.publicKey));\n    }\n    // Data += ser_32(i)\n    for (let i = 24; i >= 0; i -= 8) {\n      data[33 + (i >> 3)] = index >> 24 - i & 0xff;\n    }\n    const I = arrayify(computeHmac(SupportedAlgorithm.sha512, this.chainCode, data));\n    const IL = I.slice(0, 32);\n    const IR = I.slice(32);\n    // The private key\n    let ki = null;\n    // The public key\n    let Ki = null;\n    if (this.privateKey) {\n      ki = bytes32(BigNumber.from(IL).add(this.privateKey).mod(N));\n    } else {\n      const ek = new SigningKey(hexlify(IL));\n      Ki = ek._addPoint(this.publicKey);\n    }\n    let mnemonicOrPath = path;\n    const srcMnemonic = this.mnemonic;\n    if (srcMnemonic) {\n      mnemonicOrPath = Object.freeze({\n        phrase: srcMnemonic.phrase,\n        path: path,\n        locale: srcMnemonic.locale || \"en\"\n      });\n    }\n    return new HDNode(_constructorGuard, ki, Ki, this.fingerprint, bytes32(IR), index, this.depth + 1, mnemonicOrPath);\n  }\n  derivePath(path) {\n    const components = path.split(\"/\");\n    if (components.length === 0 || components[0] === \"m\" && this.depth !== 0) {\n      throw new Error(\"invalid path - \" + path);\n    }\n    if (components[0] === \"m\") {\n      components.shift();\n    }\n    let result = this;\n    for (let i = 0; i < components.length; i++) {\n      const component = components[i];\n      if (component.match(/^[0-9]+'$/)) {\n        const index = parseInt(component.substring(0, component.length - 1));\n        if (index >= HardenedBit) {\n          throw new Error(\"invalid path index - \" + component);\n        }\n        result = result._derive(HardenedBit + index);\n      } else if (component.match(/^[0-9]+$/)) {\n        const index = parseInt(component);\n        if (index >= HardenedBit) {\n          throw new Error(\"invalid path index - \" + component);\n        }\n        result = result._derive(index);\n      } else {\n        throw new Error(\"invalid path component - \" + component);\n      }\n    }\n    return result;\n  }\n  static _fromSeed(seed, mnemonic) {\n    const seedArray = arrayify(seed);\n    if (seedArray.length < 16 || seedArray.length > 64) {\n      throw new Error(\"invalid seed\");\n    }\n    const I = arrayify(computeHmac(SupportedAlgorithm.sha512, MasterSecret, seedArray));\n    return new HDNode(_constructorGuard, bytes32(I.slice(0, 32)), null, \"0x00000000\", bytes32(I.slice(32)), 0, 0, mnemonic);\n  }\n  static fromMnemonic(mnemonic, password, wordlist) {\n    // If a locale name was passed in, find the associated wordlist\n    wordlist = getWordlist(wordlist);\n    // Normalize the case and spacing in the mnemonic (throws if the mnemonic is invalid)\n    mnemonic = entropyToMnemonic(mnemonicToEntropy(mnemonic, wordlist), wordlist);\n    return HDNode._fromSeed(mnemonicToSeed(mnemonic, password), {\n      phrase: mnemonic,\n      path: \"m\",\n      locale: wordlist.locale\n    });\n  }\n  static fromSeed(seed) {\n    return HDNode._fromSeed(seed, null);\n  }\n  static fromExtendedKey(extendedKey) {\n    const bytes = Base58.decode(extendedKey);\n    if (bytes.length !== 82 || base58check(bytes.slice(0, 78)) !== extendedKey) {\n      logger.throwArgumentError(\"invalid extended key\", \"extendedKey\", \"[REDACTED]\");\n    }\n    const depth = bytes[4];\n    const parentFingerprint = hexlify(bytes.slice(5, 9));\n    const index = parseInt(hexlify(bytes.slice(9, 13)).substring(2), 16);\n    const chainCode = hexlify(bytes.slice(13, 45));\n    const key = bytes.slice(45, 78);\n    switch (hexlify(bytes.slice(0, 4))) {\n      // Public Key\n      case \"0x0488b21e\":\n      case \"0x043587cf\":\n        return new HDNode(_constructorGuard, null, hexlify(key), parentFingerprint, chainCode, index, depth, null);\n      // Private Key\n      case \"0x0488ade4\":\n      case \"0x04358394 \":\n        if (key[0] !== 0) {\n          break;\n        }\n        return new HDNode(_constructorGuard, hexlify(key.slice(1)), null, parentFingerprint, chainCode, index, depth, null);\n    }\n    return logger.throwArgumentError(\"invalid extended key\", \"extendedKey\", \"[REDACTED]\");\n  }\n}\nexport function mnemonicToSeed(mnemonic, password) {\n  if (!password) {\n    password = \"\";\n  }\n  const salt = toUtf8Bytes(\"mnemonic\" + password, UnicodeNormalizationForm.NFKD);\n  return pbkdf2(toUtf8Bytes(mnemonic, UnicodeNormalizationForm.NFKD), salt, 2048, 64, \"sha512\");\n}\nexport function mnemonicToEntropy(mnemonic, wordlist) {\n  wordlist = getWordlist(wordlist);\n  logger.checkNormalize();\n  const words = wordlist.split(mnemonic);\n  if (words.length % 3 !== 0) {\n    throw new Error(\"invalid mnemonic\");\n  }\n  const entropy = arrayify(new Uint8Array(Math.ceil(11 * words.length / 8)));\n  let offset = 0;\n  for (let i = 0; i < words.length; i++) {\n    let index = wordlist.getWordIndex(words[i].normalize(\"NFKD\"));\n    if (index === -1) {\n      throw new Error(\"invalid mnemonic\");\n    }\n    for (let bit = 0; bit < 11; bit++) {\n      if (index & 1 << 10 - bit) {\n        entropy[offset >> 3] |= 1 << 7 - offset % 8;\n      }\n      offset++;\n    }\n  }\n  const entropyBits = 32 * words.length / 3;\n  const checksumBits = words.length / 3;\n  const checksumMask = getUpperMask(checksumBits);\n  const checksum = arrayify(sha256(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;\n  if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {\n    throw new Error(\"invalid checksum\");\n  }\n  return hexlify(entropy.slice(0, entropyBits / 8));\n}\nexport function entropyToMnemonic(entropy, wordlist) {\n  wordlist = getWordlist(wordlist);\n  entropy = arrayify(entropy);\n  if (entropy.length % 4 !== 0 || entropy.length < 16 || entropy.length > 32) {\n    throw new Error(\"invalid entropy\");\n  }\n  const indices = [0];\n  let remainingBits = 11;\n  for (let i = 0; i < entropy.length; i++) {\n    // Consume the whole byte (with still more to go)\n    if (remainingBits > 8) {\n      indices[indices.length - 1] <<= 8;\n      indices[indices.length - 1] |= entropy[i];\n      remainingBits -= 8;\n      // This byte will complete an 11-bit index\n    } else {\n      indices[indices.length - 1] <<= remainingBits;\n      indices[indices.length - 1] |= entropy[i] >> 8 - remainingBits;\n      // Start the next word\n      indices.push(entropy[i] & getLowerMask(8 - remainingBits));\n      remainingBits += 3;\n    }\n  }\n  // Compute the checksum bits\n  const checksumBits = entropy.length / 4;\n  const checksum = arrayify(sha256(entropy))[0] & getUpperMask(checksumBits);\n  // Shift the checksum into the word indices\n  indices[indices.length - 1] <<= checksumBits;\n  indices[indices.length - 1] |= checksum >> 8 - checksumBits;\n  return wordlist.join(indices.map(index => wordlist.getWord(index)));\n}\nexport function isValidMnemonic(mnemonic, wordlist) {\n  try {\n    mnemonicToEntropy(mnemonic, wordlist);\n    return true;\n  } catch (error) {}\n  return false;\n}\nexport function getAccountPath(index) {\n  if (typeof index !== \"number\" || index < 0 || index >= HardenedBit || index % 1) {\n    logger.throwArgumentError(\"invalid account index\", \"index\", index);\n  }\n  return `m/44'/60'/${index}'/0/0`;\n}","map":{"version":3,"names":["Base58","arrayify","concat","hexDataSlice","hexZeroPad","hexlify","BigNumber","toUtf8Bytes","UnicodeNormalizationForm","pbkdf2","defineReadOnly","SigningKey","computeHmac","ripemd160","sha256","SupportedAlgorithm","computeAddress","wordlists","Logger","version","logger","N","from","MasterSecret","HardenedBit","getUpperMask","bits","getLowerMask","bytes32","value","base58check","data","encode","getWordlist","wordlist","words","throwArgumentError","_constructorGuard","defaultPath","HDNode","constructor","constructorGuard","privateKey","publicKey","parentFingerprint","chainCode","index","depth","mnemonicOrPath","Error","signingKey","compressedPublicKey","path","extendedKey","neuter","_derive","String","Uint8Array","set","i","I","sha512","IL","slice","IR","ki","Ki","add","mod","ek","_addPoint","srcMnemonic","mnemonic","Object","freeze","phrase","locale","fingerprint","derivePath","components","split","length","shift","result","component","match","parseInt","substring","_fromSeed","seed","seedArray","fromMnemonic","password","entropyToMnemonic","mnemonicToEntropy","mnemonicToSeed","fromSeed","fromExtendedKey","bytes","decode","key","salt","NFKD","checkNormalize","entropy","Math","ceil","offset","getWordIndex","normalize","bit","entropyBits","checksumBits","checksumMask","checksum","indices","remainingBits","push","join","map","getWord","isValidMnemonic","error","getAccountPath"],"sources":["F:/DDesktop/MEAN_BC/mean-stack-authentication-authorization-master/angular-15-client/node_modules/@ethersproject/hdnode/lib.esm/index.js"],"sourcesContent":["\"use strict\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { arrayify, concat, hexDataSlice, hexZeroPad, hexlify } from \"@ethersproject/bytes\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { toUtf8Bytes, UnicodeNormalizationForm } from \"@ethersproject/strings\";\nimport { pbkdf2 } from \"@ethersproject/pbkdf2\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { SigningKey } from \"@ethersproject/signing-key\";\nimport { computeHmac, ripemd160, sha256, SupportedAlgorithm } from \"@ethersproject/sha2\";\nimport { computeAddress } from \"@ethersproject/transactions\";\nimport { wordlists } from \"@ethersproject/wordlists\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nconst N = BigNumber.from(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\");\n// \"Bitcoin seed\"\nconst MasterSecret = toUtf8Bytes(\"Bitcoin seed\");\nconst HardenedBit = 0x80000000;\n// Returns a byte with the MSB bits set\nfunction getUpperMask(bits) {\n    return ((1 << bits) - 1) << (8 - bits);\n}\n// Returns a byte with the LSB bits set\nfunction getLowerMask(bits) {\n    return (1 << bits) - 1;\n}\nfunction bytes32(value) {\n    return hexZeroPad(hexlify(value), 32);\n}\nfunction base58check(data) {\n    return Base58.encode(concat([data, hexDataSlice(sha256(sha256(data)), 0, 4)]));\n}\nfunction getWordlist(wordlist) {\n    if (wordlist == null) {\n        return wordlists[\"en\"];\n    }\n    if (typeof (wordlist) === \"string\") {\n        const words = wordlists[wordlist];\n        if (words == null) {\n            logger.throwArgumentError(\"unknown locale\", \"wordlist\", wordlist);\n        }\n        return words;\n    }\n    return wordlist;\n}\nconst _constructorGuard = {};\nexport const defaultPath = \"m/44'/60'/0'/0/0\";\n;\nexport class HDNode {\n    /**\n     *  This constructor should not be called directly.\n     *\n     *  Please use:\n     *   - fromMnemonic\n     *   - fromSeed\n     */\n    constructor(constructorGuard, privateKey, publicKey, parentFingerprint, chainCode, index, depth, mnemonicOrPath) {\n        /* istanbul ignore if */\n        if (constructorGuard !== _constructorGuard) {\n            throw new Error(\"HDNode constructor cannot be called directly\");\n        }\n        if (privateKey) {\n            const signingKey = new SigningKey(privateKey);\n            defineReadOnly(this, \"privateKey\", signingKey.privateKey);\n            defineReadOnly(this, \"publicKey\", signingKey.compressedPublicKey);\n        }\n        else {\n            defineReadOnly(this, \"privateKey\", null);\n            defineReadOnly(this, \"publicKey\", hexlify(publicKey));\n        }\n        defineReadOnly(this, \"parentFingerprint\", parentFingerprint);\n        defineReadOnly(this, \"fingerprint\", hexDataSlice(ripemd160(sha256(this.publicKey)), 0, 4));\n        defineReadOnly(this, \"address\", computeAddress(this.publicKey));\n        defineReadOnly(this, \"chainCode\", chainCode);\n        defineReadOnly(this, \"index\", index);\n        defineReadOnly(this, \"depth\", depth);\n        if (mnemonicOrPath == null) {\n            // From a source that does not preserve the path (e.g. extended keys)\n            defineReadOnly(this, \"mnemonic\", null);\n            defineReadOnly(this, \"path\", null);\n        }\n        else if (typeof (mnemonicOrPath) === \"string\") {\n            // From a source that does not preserve the mnemonic (e.g. neutered)\n            defineReadOnly(this, \"mnemonic\", null);\n            defineReadOnly(this, \"path\", mnemonicOrPath);\n        }\n        else {\n            // From a fully qualified source\n            defineReadOnly(this, \"mnemonic\", mnemonicOrPath);\n            defineReadOnly(this, \"path\", mnemonicOrPath.path);\n        }\n    }\n    get extendedKey() {\n        // We only support the mainnet values for now, but if anyone needs\n        // testnet values, let me know. I believe current sentiment is that\n        // we should always use mainnet, and use BIP-44 to derive the network\n        //   - Mainnet: public=0x0488B21E, private=0x0488ADE4\n        //   - Testnet: public=0x043587CF, private=0x04358394\n        if (this.depth >= 256) {\n            throw new Error(\"Depth too large!\");\n        }\n        return base58check(concat([\n            ((this.privateKey != null) ? \"0x0488ADE4\" : \"0x0488B21E\"),\n            hexlify(this.depth),\n            this.parentFingerprint,\n            hexZeroPad(hexlify(this.index), 4),\n            this.chainCode,\n            ((this.privateKey != null) ? concat([\"0x00\", this.privateKey]) : this.publicKey),\n        ]));\n    }\n    neuter() {\n        return new HDNode(_constructorGuard, null, this.publicKey, this.parentFingerprint, this.chainCode, this.index, this.depth, this.path);\n    }\n    _derive(index) {\n        if (index > 0xffffffff) {\n            throw new Error(\"invalid index - \" + String(index));\n        }\n        // Base path\n        let path = this.path;\n        if (path) {\n            path += \"/\" + (index & ~HardenedBit);\n        }\n        const data = new Uint8Array(37);\n        if (index & HardenedBit) {\n            if (!this.privateKey) {\n                throw new Error(\"cannot derive child of neutered node\");\n            }\n            // Data = 0x00 || ser_256(k_par)\n            data.set(arrayify(this.privateKey), 1);\n            // Hardened path\n            if (path) {\n                path += \"'\";\n            }\n        }\n        else {\n            // Data = ser_p(point(k_par))\n            data.set(arrayify(this.publicKey));\n        }\n        // Data += ser_32(i)\n        for (let i = 24; i >= 0; i -= 8) {\n            data[33 + (i >> 3)] = ((index >> (24 - i)) & 0xff);\n        }\n        const I = arrayify(computeHmac(SupportedAlgorithm.sha512, this.chainCode, data));\n        const IL = I.slice(0, 32);\n        const IR = I.slice(32);\n        // The private key\n        let ki = null;\n        // The public key\n        let Ki = null;\n        if (this.privateKey) {\n            ki = bytes32(BigNumber.from(IL).add(this.privateKey).mod(N));\n        }\n        else {\n            const ek = new SigningKey(hexlify(IL));\n            Ki = ek._addPoint(this.publicKey);\n        }\n        let mnemonicOrPath = path;\n        const srcMnemonic = this.mnemonic;\n        if (srcMnemonic) {\n            mnemonicOrPath = Object.freeze({\n                phrase: srcMnemonic.phrase,\n                path: path,\n                locale: (srcMnemonic.locale || \"en\")\n            });\n        }\n        return new HDNode(_constructorGuard, ki, Ki, this.fingerprint, bytes32(IR), index, this.depth + 1, mnemonicOrPath);\n    }\n    derivePath(path) {\n        const components = path.split(\"/\");\n        if (components.length === 0 || (components[0] === \"m\" && this.depth !== 0)) {\n            throw new Error(\"invalid path - \" + path);\n        }\n        if (components[0] === \"m\") {\n            components.shift();\n        }\n        let result = this;\n        for (let i = 0; i < components.length; i++) {\n            const component = components[i];\n            if (component.match(/^[0-9]+'$/)) {\n                const index = parseInt(component.substring(0, component.length - 1));\n                if (index >= HardenedBit) {\n                    throw new Error(\"invalid path index - \" + component);\n                }\n                result = result._derive(HardenedBit + index);\n            }\n            else if (component.match(/^[0-9]+$/)) {\n                const index = parseInt(component);\n                if (index >= HardenedBit) {\n                    throw new Error(\"invalid path index - \" + component);\n                }\n                result = result._derive(index);\n            }\n            else {\n                throw new Error(\"invalid path component - \" + component);\n            }\n        }\n        return result;\n    }\n    static _fromSeed(seed, mnemonic) {\n        const seedArray = arrayify(seed);\n        if (seedArray.length < 16 || seedArray.length > 64) {\n            throw new Error(\"invalid seed\");\n        }\n        const I = arrayify(computeHmac(SupportedAlgorithm.sha512, MasterSecret, seedArray));\n        return new HDNode(_constructorGuard, bytes32(I.slice(0, 32)), null, \"0x00000000\", bytes32(I.slice(32)), 0, 0, mnemonic);\n    }\n    static fromMnemonic(mnemonic, password, wordlist) {\n        // If a locale name was passed in, find the associated wordlist\n        wordlist = getWordlist(wordlist);\n        // Normalize the case and spacing in the mnemonic (throws if the mnemonic is invalid)\n        mnemonic = entropyToMnemonic(mnemonicToEntropy(mnemonic, wordlist), wordlist);\n        return HDNode._fromSeed(mnemonicToSeed(mnemonic, password), {\n            phrase: mnemonic,\n            path: \"m\",\n            locale: wordlist.locale\n        });\n    }\n    static fromSeed(seed) {\n        return HDNode._fromSeed(seed, null);\n    }\n    static fromExtendedKey(extendedKey) {\n        const bytes = Base58.decode(extendedKey);\n        if (bytes.length !== 82 || base58check(bytes.slice(0, 78)) !== extendedKey) {\n            logger.throwArgumentError(\"invalid extended key\", \"extendedKey\", \"[REDACTED]\");\n        }\n        const depth = bytes[4];\n        const parentFingerprint = hexlify(bytes.slice(5, 9));\n        const index = parseInt(hexlify(bytes.slice(9, 13)).substring(2), 16);\n        const chainCode = hexlify(bytes.slice(13, 45));\n        const key = bytes.slice(45, 78);\n        switch (hexlify(bytes.slice(0, 4))) {\n            // Public Key\n            case \"0x0488b21e\":\n            case \"0x043587cf\":\n                return new HDNode(_constructorGuard, null, hexlify(key), parentFingerprint, chainCode, index, depth, null);\n            // Private Key\n            case \"0x0488ade4\":\n            case \"0x04358394 \":\n                if (key[0] !== 0) {\n                    break;\n                }\n                return new HDNode(_constructorGuard, hexlify(key.slice(1)), null, parentFingerprint, chainCode, index, depth, null);\n        }\n        return logger.throwArgumentError(\"invalid extended key\", \"extendedKey\", \"[REDACTED]\");\n    }\n}\nexport function mnemonicToSeed(mnemonic, password) {\n    if (!password) {\n        password = \"\";\n    }\n    const salt = toUtf8Bytes(\"mnemonic\" + password, UnicodeNormalizationForm.NFKD);\n    return pbkdf2(toUtf8Bytes(mnemonic, UnicodeNormalizationForm.NFKD), salt, 2048, 64, \"sha512\");\n}\nexport function mnemonicToEntropy(mnemonic, wordlist) {\n    wordlist = getWordlist(wordlist);\n    logger.checkNormalize();\n    const words = wordlist.split(mnemonic);\n    if ((words.length % 3) !== 0) {\n        throw new Error(\"invalid mnemonic\");\n    }\n    const entropy = arrayify(new Uint8Array(Math.ceil(11 * words.length / 8)));\n    let offset = 0;\n    for (let i = 0; i < words.length; i++) {\n        let index = wordlist.getWordIndex(words[i].normalize(\"NFKD\"));\n        if (index === -1) {\n            throw new Error(\"invalid mnemonic\");\n        }\n        for (let bit = 0; bit < 11; bit++) {\n            if (index & (1 << (10 - bit))) {\n                entropy[offset >> 3] |= (1 << (7 - (offset % 8)));\n            }\n            offset++;\n        }\n    }\n    const entropyBits = 32 * words.length / 3;\n    const checksumBits = words.length / 3;\n    const checksumMask = getUpperMask(checksumBits);\n    const checksum = arrayify(sha256(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;\n    if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {\n        throw new Error(\"invalid checksum\");\n    }\n    return hexlify(entropy.slice(0, entropyBits / 8));\n}\nexport function entropyToMnemonic(entropy, wordlist) {\n    wordlist = getWordlist(wordlist);\n    entropy = arrayify(entropy);\n    if ((entropy.length % 4) !== 0 || entropy.length < 16 || entropy.length > 32) {\n        throw new Error(\"invalid entropy\");\n    }\n    const indices = [0];\n    let remainingBits = 11;\n    for (let i = 0; i < entropy.length; i++) {\n        // Consume the whole byte (with still more to go)\n        if (remainingBits > 8) {\n            indices[indices.length - 1] <<= 8;\n            indices[indices.length - 1] |= entropy[i];\n            remainingBits -= 8;\n            // This byte will complete an 11-bit index\n        }\n        else {\n            indices[indices.length - 1] <<= remainingBits;\n            indices[indices.length - 1] |= entropy[i] >> (8 - remainingBits);\n            // Start the next word\n            indices.push(entropy[i] & getLowerMask(8 - remainingBits));\n            remainingBits += 3;\n        }\n    }\n    // Compute the checksum bits\n    const checksumBits = entropy.length / 4;\n    const checksum = arrayify(sha256(entropy))[0] & getUpperMask(checksumBits);\n    // Shift the checksum into the word indices\n    indices[indices.length - 1] <<= checksumBits;\n    indices[indices.length - 1] |= (checksum >> (8 - checksumBits));\n    return wordlist.join(indices.map((index) => wordlist.getWord(index)));\n}\nexport function isValidMnemonic(mnemonic, wordlist) {\n    try {\n        mnemonicToEntropy(mnemonic, wordlist);\n        return true;\n    }\n    catch (error) { }\n    return false;\n}\nexport function getAccountPath(index) {\n    if (typeof (index) !== \"number\" || index < 0 || index >= HardenedBit || index % 1) {\n        logger.throwArgumentError(\"invalid account index\", \"index\", index);\n    }\n    return `m/44'/60'/${index}'/0/0`;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}