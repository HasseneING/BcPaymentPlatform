{"ast":null,"code":"\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"../_version\";\nconst logger = new Logger(version);\nimport { Coder, Writer } from \"./abstract-coder\";\nimport { AnonymousCoder } from \"./anonymous\";\nexport function pack(writer, coders, values) {\n  let arrayValues = null;\n  if (Array.isArray(values)) {\n    arrayValues = values;\n  } else if (values && typeof values === \"object\") {\n    let unique = {};\n    arrayValues = coders.map(coder => {\n      const name = coder.localName;\n      if (!name) {\n        logger.throwError(\"cannot encode object for signature with missing names\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"values\",\n          coder: coder,\n          value: values\n        });\n      }\n      if (unique[name]) {\n        logger.throwError(\"cannot encode object for signature with duplicate names\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"values\",\n          coder: coder,\n          value: values\n        });\n      }\n      unique[name] = true;\n      return values[name];\n    });\n  } else {\n    logger.throwArgumentError(\"invalid tuple value\", \"tuple\", values);\n  }\n  if (coders.length !== arrayValues.length) {\n    logger.throwArgumentError(\"types/value length mismatch\", \"tuple\", values);\n  }\n  let staticWriter = new Writer(writer.wordSize);\n  let dynamicWriter = new Writer(writer.wordSize);\n  let updateFuncs = [];\n  coders.forEach((coder, index) => {\n    let value = arrayValues[index];\n    if (coder.dynamic) {\n      // Get current dynamic offset (for the future pointer)\n      let dynamicOffset = dynamicWriter.length;\n      // Encode the dynamic value into the dynamicWriter\n      coder.encode(dynamicWriter, value);\n      // Prepare to populate the correct offset once we are done\n      let updateFunc = staticWriter.writeUpdatableValue();\n      updateFuncs.push(baseOffset => {\n        updateFunc(baseOffset + dynamicOffset);\n      });\n    } else {\n      coder.encode(staticWriter, value);\n    }\n  });\n  // Backfill all the dynamic offsets, now that we know the static length\n  updateFuncs.forEach(func => {\n    func(staticWriter.length);\n  });\n  let length = writer.appendWriter(staticWriter);\n  length += writer.appendWriter(dynamicWriter);\n  return length;\n}\nexport function unpack(reader, coders) {\n  let values = [];\n  // A reader anchored to this base\n  let baseReader = reader.subReader(0);\n  coders.forEach(coder => {\n    let value = null;\n    if (coder.dynamic) {\n      let offset = reader.readValue();\n      let offsetReader = baseReader.subReader(offset.toNumber());\n      try {\n        value = coder.decode(offsetReader);\n      } catch (error) {\n        // Cannot recover from this\n        if (error.code === Logger.errors.BUFFER_OVERRUN) {\n          throw error;\n        }\n        value = error;\n        value.baseType = coder.name;\n        value.name = coder.localName;\n        value.type = coder.type;\n      }\n    } else {\n      try {\n        value = coder.decode(reader);\n      } catch (error) {\n        // Cannot recover from this\n        if (error.code === Logger.errors.BUFFER_OVERRUN) {\n          throw error;\n        }\n        value = error;\n        value.baseType = coder.name;\n        value.name = coder.localName;\n        value.type = coder.type;\n      }\n    }\n    if (value != undefined) {\n      values.push(value);\n    }\n  });\n  // We only output named properties for uniquely named coders\n  const uniqueNames = coders.reduce((accum, coder) => {\n    const name = coder.localName;\n    if (name) {\n      if (!accum[name]) {\n        accum[name] = 0;\n      }\n      accum[name]++;\n    }\n    return accum;\n  }, {});\n  // Add any named parameters (i.e. tuples)\n  coders.forEach((coder, index) => {\n    let name = coder.localName;\n    if (!name || uniqueNames[name] !== 1) {\n      return;\n    }\n    if (name === \"length\") {\n      name = \"_length\";\n    }\n    if (values[name] != null) {\n      return;\n    }\n    const value = values[index];\n    if (value instanceof Error) {\n      Object.defineProperty(values, name, {\n        enumerable: true,\n        get: () => {\n          throw value;\n        }\n      });\n    } else {\n      values[name] = value;\n    }\n  });\n  for (let i = 0; i < values.length; i++) {\n    const value = values[i];\n    if (value instanceof Error) {\n      Object.defineProperty(values, i, {\n        enumerable: true,\n        get: () => {\n          throw value;\n        }\n      });\n    }\n  }\n  return Object.freeze(values);\n}\nexport class ArrayCoder extends Coder {\n  constructor(coder, length, localName) {\n    const type = coder.type + \"[\" + (length >= 0 ? length : \"\") + \"]\";\n    const dynamic = length === -1 || coder.dynamic;\n    super(\"array\", type, localName, dynamic);\n    this.coder = coder;\n    this.length = length;\n  }\n  defaultValue() {\n    // Verifies the child coder is valid (even if the array is dynamic or 0-length)\n    const defaultChild = this.coder.defaultValue();\n    const result = [];\n    for (let i = 0; i < this.length; i++) {\n      result.push(defaultChild);\n    }\n    return result;\n  }\n  encode(writer, value) {\n    if (!Array.isArray(value)) {\n      this._throwError(\"expected array value\", value);\n    }\n    let count = this.length;\n    if (count === -1) {\n      count = value.length;\n      writer.writeValue(value.length);\n    }\n    logger.checkArgumentCount(value.length, count, \"coder array\" + (this.localName ? \" \" + this.localName : \"\"));\n    let coders = [];\n    for (let i = 0; i < value.length; i++) {\n      coders.push(this.coder);\n    }\n    return pack(writer, coders, value);\n  }\n  decode(reader) {\n    let count = this.length;\n    if (count === -1) {\n      count = reader.readValue().toNumber();\n      // Check that there is *roughly* enough data to ensure\n      // stray random data is not being read as a length. Each\n      // slot requires at least 32 bytes for their value (or 32\n      // bytes as a link to the data). This could use a much\n      // tighter bound, but we are erroring on the side of safety.\n      if (count * 32 > reader._data.length) {\n        logger.throwError(\"insufficient data length\", Logger.errors.BUFFER_OVERRUN, {\n          length: reader._data.length,\n          count: count\n        });\n      }\n    }\n    let coders = [];\n    for (let i = 0; i < count; i++) {\n      coders.push(new AnonymousCoder(this.coder));\n    }\n    return reader.coerce(this.name, unpack(reader, coders));\n  }\n}","map":{"version":3,"names":["Logger","version","logger","Coder","Writer","AnonymousCoder","pack","writer","coders","values","arrayValues","Array","isArray","unique","map","coder","name","localName","throwError","errors","INVALID_ARGUMENT","argument","value","throwArgumentError","length","staticWriter","wordSize","dynamicWriter","updateFuncs","forEach","index","dynamic","dynamicOffset","encode","updateFunc","writeUpdatableValue","push","baseOffset","func","appendWriter","unpack","reader","baseReader","subReader","offset","readValue","offsetReader","toNumber","decode","error","code","BUFFER_OVERRUN","baseType","type","undefined","uniqueNames","reduce","accum","Error","Object","defineProperty","enumerable","get","i","freeze","ArrayCoder","constructor","defaultValue","defaultChild","result","_throwError","count","writeValue","checkArgumentCount","_data","coerce"],"sources":["F:/DDesktop/MEAN_BC/mean-stack-authentication-authorization-master/angular-15-client/node_modules/@ethersproject/abi/lib.esm/coders/array.js"],"sourcesContent":["\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"../_version\";\nconst logger = new Logger(version);\nimport { Coder, Writer } from \"./abstract-coder\";\nimport { AnonymousCoder } from \"./anonymous\";\nexport function pack(writer, coders, values) {\n    let arrayValues = null;\n    if (Array.isArray(values)) {\n        arrayValues = values;\n    }\n    else if (values && typeof (values) === \"object\") {\n        let unique = {};\n        arrayValues = coders.map((coder) => {\n            const name = coder.localName;\n            if (!name) {\n                logger.throwError(\"cannot encode object for signature with missing names\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"values\",\n                    coder: coder,\n                    value: values\n                });\n            }\n            if (unique[name]) {\n                logger.throwError(\"cannot encode object for signature with duplicate names\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"values\",\n                    coder: coder,\n                    value: values\n                });\n            }\n            unique[name] = true;\n            return values[name];\n        });\n    }\n    else {\n        logger.throwArgumentError(\"invalid tuple value\", \"tuple\", values);\n    }\n    if (coders.length !== arrayValues.length) {\n        logger.throwArgumentError(\"types/value length mismatch\", \"tuple\", values);\n    }\n    let staticWriter = new Writer(writer.wordSize);\n    let dynamicWriter = new Writer(writer.wordSize);\n    let updateFuncs = [];\n    coders.forEach((coder, index) => {\n        let value = arrayValues[index];\n        if (coder.dynamic) {\n            // Get current dynamic offset (for the future pointer)\n            let dynamicOffset = dynamicWriter.length;\n            // Encode the dynamic value into the dynamicWriter\n            coder.encode(dynamicWriter, value);\n            // Prepare to populate the correct offset once we are done\n            let updateFunc = staticWriter.writeUpdatableValue();\n            updateFuncs.push((baseOffset) => {\n                updateFunc(baseOffset + dynamicOffset);\n            });\n        }\n        else {\n            coder.encode(staticWriter, value);\n        }\n    });\n    // Backfill all the dynamic offsets, now that we know the static length\n    updateFuncs.forEach((func) => { func(staticWriter.length); });\n    let length = writer.appendWriter(staticWriter);\n    length += writer.appendWriter(dynamicWriter);\n    return length;\n}\nexport function unpack(reader, coders) {\n    let values = [];\n    // A reader anchored to this base\n    let baseReader = reader.subReader(0);\n    coders.forEach((coder) => {\n        let value = null;\n        if (coder.dynamic) {\n            let offset = reader.readValue();\n            let offsetReader = baseReader.subReader(offset.toNumber());\n            try {\n                value = coder.decode(offsetReader);\n            }\n            catch (error) {\n                // Cannot recover from this\n                if (error.code === Logger.errors.BUFFER_OVERRUN) {\n                    throw error;\n                }\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n        }\n        else {\n            try {\n                value = coder.decode(reader);\n            }\n            catch (error) {\n                // Cannot recover from this\n                if (error.code === Logger.errors.BUFFER_OVERRUN) {\n                    throw error;\n                }\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n        }\n        if (value != undefined) {\n            values.push(value);\n        }\n    });\n    // We only output named properties for uniquely named coders\n    const uniqueNames = coders.reduce((accum, coder) => {\n        const name = coder.localName;\n        if (name) {\n            if (!accum[name]) {\n                accum[name] = 0;\n            }\n            accum[name]++;\n        }\n        return accum;\n    }, {});\n    // Add any named parameters (i.e. tuples)\n    coders.forEach((coder, index) => {\n        let name = coder.localName;\n        if (!name || uniqueNames[name] !== 1) {\n            return;\n        }\n        if (name === \"length\") {\n            name = \"_length\";\n        }\n        if (values[name] != null) {\n            return;\n        }\n        const value = values[index];\n        if (value instanceof Error) {\n            Object.defineProperty(values, name, {\n                enumerable: true,\n                get: () => { throw value; }\n            });\n        }\n        else {\n            values[name] = value;\n        }\n    });\n    for (let i = 0; i < values.length; i++) {\n        const value = values[i];\n        if (value instanceof Error) {\n            Object.defineProperty(values, i, {\n                enumerable: true,\n                get: () => { throw value; }\n            });\n        }\n    }\n    return Object.freeze(values);\n}\nexport class ArrayCoder extends Coder {\n    constructor(coder, length, localName) {\n        const type = (coder.type + \"[\" + (length >= 0 ? length : \"\") + \"]\");\n        const dynamic = (length === -1 || coder.dynamic);\n        super(\"array\", type, localName, dynamic);\n        this.coder = coder;\n        this.length = length;\n    }\n    defaultValue() {\n        // Verifies the child coder is valid (even if the array is dynamic or 0-length)\n        const defaultChild = this.coder.defaultValue();\n        const result = [];\n        for (let i = 0; i < this.length; i++) {\n            result.push(defaultChild);\n        }\n        return result;\n    }\n    encode(writer, value) {\n        if (!Array.isArray(value)) {\n            this._throwError(\"expected array value\", value);\n        }\n        let count = this.length;\n        if (count === -1) {\n            count = value.length;\n            writer.writeValue(value.length);\n        }\n        logger.checkArgumentCount(value.length, count, \"coder array\" + (this.localName ? (\" \" + this.localName) : \"\"));\n        let coders = [];\n        for (let i = 0; i < value.length; i++) {\n            coders.push(this.coder);\n        }\n        return pack(writer, coders, value);\n    }\n    decode(reader) {\n        let count = this.length;\n        if (count === -1) {\n            count = reader.readValue().toNumber();\n            // Check that there is *roughly* enough data to ensure\n            // stray random data is not being read as a length. Each\n            // slot requires at least 32 bytes for their value (or 32\n            // bytes as a link to the data). This could use a much\n            // tighter bound, but we are erroring on the side of safety.\n            if (count * 32 > reader._data.length) {\n                logger.throwError(\"insufficient data length\", Logger.errors.BUFFER_OVERRUN, {\n                    length: reader._data.length,\n                    count: count\n                });\n            }\n        }\n        let coders = [];\n        for (let i = 0; i < count; i++) {\n            coders.push(new AnonymousCoder(this.coder));\n        }\n        return reader.coerce(this.name, unpack(reader, coders));\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}