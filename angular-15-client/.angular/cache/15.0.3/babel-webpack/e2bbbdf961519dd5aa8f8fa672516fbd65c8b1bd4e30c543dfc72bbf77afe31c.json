{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, hexConcat, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { deepCopy, defineReadOnly, shallowCopy } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { id } from \"./id\";\nconst padding = new Uint8Array(32);\npadding.fill(0);\nconst NegativeOne = BigNumber.from(-1);\nconst Zero = BigNumber.from(0);\nconst One = BigNumber.from(1);\nconst MaxUint256 = BigNumber.from(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\nfunction hexPadRight(value) {\n  const bytes = arrayify(value);\n  const padOffset = bytes.length % 32;\n  if (padOffset) {\n    return hexConcat([bytes, padding.slice(padOffset)]);\n  }\n  return hexlify(bytes);\n}\nconst hexTrue = hexZeroPad(One.toHexString(), 32);\nconst hexFalse = hexZeroPad(Zero.toHexString(), 32);\nconst domainFieldTypes = {\n  name: \"string\",\n  version: \"string\",\n  chainId: \"uint256\",\n  verifyingContract: \"address\",\n  salt: \"bytes32\"\n};\nconst domainFieldNames = [\"name\", \"version\", \"chainId\", \"verifyingContract\", \"salt\"];\nfunction checkString(key) {\n  return function (value) {\n    if (typeof value !== \"string\") {\n      logger.throwArgumentError(`invalid domain value for ${JSON.stringify(key)}`, `domain.${key}`, value);\n    }\n    return value;\n  };\n}\nconst domainChecks = {\n  name: checkString(\"name\"),\n  version: checkString(\"version\"),\n  chainId: function (value) {\n    try {\n      return BigNumber.from(value).toString();\n    } catch (error) {}\n    return logger.throwArgumentError(`invalid domain value for \"chainId\"`, \"domain.chainId\", value);\n  },\n  verifyingContract: function (value) {\n    try {\n      return getAddress(value).toLowerCase();\n    } catch (error) {}\n    return logger.throwArgumentError(`invalid domain value \"verifyingContract\"`, \"domain.verifyingContract\", value);\n  },\n  salt: function (value) {\n    try {\n      const bytes = arrayify(value);\n      if (bytes.length !== 32) {\n        throw new Error(\"bad length\");\n      }\n      return hexlify(bytes);\n    } catch (error) {}\n    return logger.throwArgumentError(`invalid domain value \"salt\"`, \"domain.salt\", value);\n  }\n};\nfunction getBaseEncoder(type) {\n  // intXX and uintXX\n  {\n    const match = type.match(/^(u?)int(\\d*)$/);\n    if (match) {\n      const signed = match[1] === \"\";\n      const width = parseInt(match[2] || \"256\");\n      if (width % 8 !== 0 || width > 256 || match[2] && match[2] !== String(width)) {\n        logger.throwArgumentError(\"invalid numeric width\", \"type\", type);\n      }\n      const boundsUpper = MaxUint256.mask(signed ? width - 1 : width);\n      const boundsLower = signed ? boundsUpper.add(One).mul(NegativeOne) : Zero;\n      return function (value) {\n        const v = BigNumber.from(value);\n        if (v.lt(boundsLower) || v.gt(boundsUpper)) {\n          logger.throwArgumentError(`value out-of-bounds for ${type}`, \"value\", value);\n        }\n        return hexZeroPad(v.toTwos(256).toHexString(), 32);\n      };\n    }\n  }\n  // bytesXX\n  {\n    const match = type.match(/^bytes(\\d+)$/);\n    if (match) {\n      const width = parseInt(match[1]);\n      if (width === 0 || width > 32 || match[1] !== String(width)) {\n        logger.throwArgumentError(\"invalid bytes width\", \"type\", type);\n      }\n      return function (value) {\n        const bytes = arrayify(value);\n        if (bytes.length !== width) {\n          logger.throwArgumentError(`invalid length for ${type}`, \"value\", value);\n        }\n        return hexPadRight(value);\n      };\n    }\n  }\n  switch (type) {\n    case \"address\":\n      return function (value) {\n        return hexZeroPad(getAddress(value), 32);\n      };\n    case \"bool\":\n      return function (value) {\n        return !value ? hexFalse : hexTrue;\n      };\n    case \"bytes\":\n      return function (value) {\n        return keccak256(value);\n      };\n    case \"string\":\n      return function (value) {\n        return id(value);\n      };\n  }\n  return null;\n}\nfunction encodeType(name, fields) {\n  return `${name}(${fields.map(({\n    name,\n    type\n  }) => type + \" \" + name).join(\",\")})`;\n}\nexport class TypedDataEncoder {\n  constructor(types) {\n    defineReadOnly(this, \"types\", Object.freeze(deepCopy(types)));\n    defineReadOnly(this, \"_encoderCache\", {});\n    defineReadOnly(this, \"_types\", {});\n    // Link struct types to their direct child structs\n    const links = {};\n    // Link structs to structs which contain them as a child\n    const parents = {};\n    // Link all subtypes within a given struct\n    const subtypes = {};\n    Object.keys(types).forEach(type => {\n      links[type] = {};\n      parents[type] = [];\n      subtypes[type] = {};\n    });\n    for (const name in types) {\n      const uniqueNames = {};\n      types[name].forEach(field => {\n        // Check each field has a unique name\n        if (uniqueNames[field.name]) {\n          logger.throwArgumentError(`duplicate variable name ${JSON.stringify(field.name)} in ${JSON.stringify(name)}`, \"types\", types);\n        }\n        uniqueNames[field.name] = true;\n        // Get the base type (drop any array specifiers)\n        const baseType = field.type.match(/^([^\\x5b]*)(\\x5b|$)/)[1];\n        if (baseType === name) {\n          logger.throwArgumentError(`circular type reference to ${JSON.stringify(baseType)}`, \"types\", types);\n        }\n        // Is this a base encoding type?\n        const encoder = getBaseEncoder(baseType);\n        if (encoder) {\n          return;\n        }\n        if (!parents[baseType]) {\n          logger.throwArgumentError(`unknown type ${JSON.stringify(baseType)}`, \"types\", types);\n        }\n        // Add linkage\n        parents[baseType].push(name);\n        links[name][baseType] = true;\n      });\n    }\n    // Deduce the primary type\n    const primaryTypes = Object.keys(parents).filter(n => parents[n].length === 0);\n    if (primaryTypes.length === 0) {\n      logger.throwArgumentError(\"missing primary type\", \"types\", types);\n    } else if (primaryTypes.length > 1) {\n      logger.throwArgumentError(`ambiguous primary types or unused types: ${primaryTypes.map(t => JSON.stringify(t)).join(\", \")}`, \"types\", types);\n    }\n    defineReadOnly(this, \"primaryType\", primaryTypes[0]);\n    // Check for circular type references\n    function checkCircular(type, found) {\n      if (found[type]) {\n        logger.throwArgumentError(`circular type reference to ${JSON.stringify(type)}`, \"types\", types);\n      }\n      found[type] = true;\n      Object.keys(links[type]).forEach(child => {\n        if (!parents[child]) {\n          return;\n        }\n        // Recursively check children\n        checkCircular(child, found);\n        // Mark all ancestors as having this decendant\n        Object.keys(found).forEach(subtype => {\n          subtypes[subtype][child] = true;\n        });\n      });\n      delete found[type];\n    }\n    checkCircular(this.primaryType, {});\n    // Compute each fully describe type\n    for (const name in subtypes) {\n      const st = Object.keys(subtypes[name]);\n      st.sort();\n      this._types[name] = encodeType(name, types[name]) + st.map(t => encodeType(t, types[t])).join(\"\");\n    }\n  }\n  getEncoder(type) {\n    let encoder = this._encoderCache[type];\n    if (!encoder) {\n      encoder = this._encoderCache[type] = this._getEncoder(type);\n    }\n    return encoder;\n  }\n  _getEncoder(type) {\n    // Basic encoder type (address, bool, uint256, etc)\n    {\n      const encoder = getBaseEncoder(type);\n      if (encoder) {\n        return encoder;\n      }\n    }\n    // Array\n    const match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n    if (match) {\n      const subtype = match[1];\n      const subEncoder = this.getEncoder(subtype);\n      const length = parseInt(match[3]);\n      return value => {\n        if (length >= 0 && value.length !== length) {\n          logger.throwArgumentError(\"array length mismatch; expected length ${ arrayLength }\", \"value\", value);\n        }\n        let result = value.map(subEncoder);\n        if (this._types[subtype]) {\n          result = result.map(keccak256);\n        }\n        return keccak256(hexConcat(result));\n      };\n    }\n    // Struct\n    const fields = this.types[type];\n    if (fields) {\n      const encodedType = id(this._types[type]);\n      return value => {\n        const values = fields.map(({\n          name,\n          type\n        }) => {\n          const result = this.getEncoder(type)(value[name]);\n          if (this._types[type]) {\n            return keccak256(result);\n          }\n          return result;\n        });\n        values.unshift(encodedType);\n        return hexConcat(values);\n      };\n    }\n    return logger.throwArgumentError(`unknown type: ${type}`, \"type\", type);\n  }\n  encodeType(name) {\n    const result = this._types[name];\n    if (!result) {\n      logger.throwArgumentError(`unknown type: ${JSON.stringify(name)}`, \"name\", name);\n    }\n    return result;\n  }\n  encodeData(type, value) {\n    return this.getEncoder(type)(value);\n  }\n  hashStruct(name, value) {\n    return keccak256(this.encodeData(name, value));\n  }\n  encode(value) {\n    return this.encodeData(this.primaryType, value);\n  }\n  hash(value) {\n    return this.hashStruct(this.primaryType, value);\n  }\n  _visit(type, value, callback) {\n    // Basic encoder type (address, bool, uint256, etc)\n    {\n      const encoder = getBaseEncoder(type);\n      if (encoder) {\n        return callback(type, value);\n      }\n    }\n    // Array\n    const match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n    if (match) {\n      const subtype = match[1];\n      const length = parseInt(match[3]);\n      if (length >= 0 && value.length !== length) {\n        logger.throwArgumentError(\"array length mismatch; expected length ${ arrayLength }\", \"value\", value);\n      }\n      return value.map(v => this._visit(subtype, v, callback));\n    }\n    // Struct\n    const fields = this.types[type];\n    if (fields) {\n      return fields.reduce((accum, {\n        name,\n        type\n      }) => {\n        accum[name] = this._visit(type, value[name], callback);\n        return accum;\n      }, {});\n    }\n    return logger.throwArgumentError(`unknown type: ${type}`, \"type\", type);\n  }\n  visit(value, callback) {\n    return this._visit(this.primaryType, value, callback);\n  }\n  static from(types) {\n    return new TypedDataEncoder(types);\n  }\n  static getPrimaryType(types) {\n    return TypedDataEncoder.from(types).primaryType;\n  }\n  static hashStruct(name, types, value) {\n    return TypedDataEncoder.from(types).hashStruct(name, value);\n  }\n  static hashDomain(domain) {\n    const domainFields = [];\n    for (const name in domain) {\n      const type = domainFieldTypes[name];\n      if (!type) {\n        logger.throwArgumentError(`invalid typed-data domain key: ${JSON.stringify(name)}`, \"domain\", domain);\n      }\n      domainFields.push({\n        name,\n        type\n      });\n    }\n    domainFields.sort((a, b) => {\n      return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);\n    });\n    return TypedDataEncoder.hashStruct(\"EIP712Domain\", {\n      EIP712Domain: domainFields\n    }, domain);\n  }\n  static encode(domain, types, value) {\n    return hexConcat([\"0x1901\", TypedDataEncoder.hashDomain(domain), TypedDataEncoder.from(types).hash(value)]);\n  }\n  static hash(domain, types, value) {\n    return keccak256(TypedDataEncoder.encode(domain, types, value));\n  }\n  // Replaces all address types with ENS names with their looked up address\n  static resolveNames(domain, types, value, resolveName) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Make a copy to isolate it from the object passed in\n      domain = shallowCopy(domain);\n      // Look up all ENS names\n      const ensCache = {};\n      // Do we need to look up the domain's verifyingContract?\n      if (domain.verifyingContract && !isHexString(domain.verifyingContract, 20)) {\n        ensCache[domain.verifyingContract] = \"0x\";\n      }\n      // We are going to use the encoder to visit all the base values\n      const encoder = TypedDataEncoder.from(types);\n      // Get a list of all the addresses\n      encoder.visit(value, (type, value) => {\n        if (type === \"address\" && !isHexString(value, 20)) {\n          ensCache[value] = \"0x\";\n        }\n        return value;\n      });\n      // Lookup each name\n      for (const name in ensCache) {\n        ensCache[name] = yield resolveName(name);\n      }\n      // Replace the domain verifyingContract if needed\n      if (domain.verifyingContract && ensCache[domain.verifyingContract]) {\n        domain.verifyingContract = ensCache[domain.verifyingContract];\n      }\n      // Replace all ENS names with their address\n      value = encoder.visit(value, (type, value) => {\n        if (type === \"address\" && ensCache[value]) {\n          return ensCache[value];\n        }\n        return value;\n      });\n      return {\n        domain,\n        value\n      };\n    });\n  }\n  static getPayload(domain, types, value) {\n    // Validate the domain fields\n    TypedDataEncoder.hashDomain(domain);\n    // Derive the EIP712Domain Struct reference type\n    const domainValues = {};\n    const domainTypes = [];\n    domainFieldNames.forEach(name => {\n      const value = domain[name];\n      if (value == null) {\n        return;\n      }\n      domainValues[name] = domainChecks[name](value);\n      domainTypes.push({\n        name,\n        type: domainFieldTypes[name]\n      });\n    });\n    const encoder = TypedDataEncoder.from(types);\n    const typesWithDomain = shallowCopy(types);\n    if (typesWithDomain.EIP712Domain) {\n      logger.throwArgumentError(\"types must not contain EIP712Domain type\", \"types.EIP712Domain\", types);\n    } else {\n      typesWithDomain.EIP712Domain = domainTypes;\n    }\n    // Validate the data structures and types\n    encoder.encode(value);\n    return {\n      types: typesWithDomain,\n      domain: domainValues,\n      primaryType: encoder.primaryType,\n      message: encoder.visit(value, (type, value) => {\n        // bytes\n        if (type.match(/^bytes(\\d*)/)) {\n          return hexlify(arrayify(value));\n        }\n        // uint or int\n        if (type.match(/^u?int/)) {\n          return BigNumber.from(value).toString();\n        }\n        switch (type) {\n          case \"address\":\n            return value.toLowerCase();\n          case \"bool\":\n            return !!value;\n          case \"string\":\n            if (typeof value !== \"string\") {\n              logger.throwArgumentError(`invalid string`, \"value\", value);\n            }\n            return value;\n        }\n        return logger.throwArgumentError(\"unsupported type\", \"type\", type);\n      })\n    };\n  }\n}","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","getAddress","BigNumber","arrayify","hexConcat","hexlify","hexZeroPad","isHexString","keccak256","deepCopy","defineReadOnly","shallowCopy","Logger","version","logger","id","padding","Uint8Array","fill","NegativeOne","from","Zero","One","MaxUint256","hexPadRight","bytes","padOffset","length","slice","hexTrue","toHexString","hexFalse","domainFieldTypes","name","chainId","verifyingContract","salt","domainFieldNames","checkString","key","throwArgumentError","JSON","stringify","domainChecks","toString","error","toLowerCase","Error","getBaseEncoder","type","match","signed","width","parseInt","String","boundsUpper","mask","boundsLower","add","mul","v","lt","gt","toTwos","encodeType","fields","map","join","TypedDataEncoder","constructor","types","Object","freeze","links","parents","subtypes","keys","forEach","uniqueNames","field","baseType","encoder","push","primaryTypes","filter","n","t","checkCircular","found","child","subtype","primaryType","st","sort","_types","getEncoder","_encoderCache","_getEncoder","subEncoder","encodedType","values","unshift","encodeData","hashStruct","encode","hash","_visit","callback","reduce","accum","visit","getPrimaryType","hashDomain","domain","domainFields","a","b","indexOf","EIP712Domain","resolveNames","resolveName","ensCache","getPayload","domainValues","domainTypes","typesWithDomain","message"],"sources":["F:/DDesktop/MEAN_BC/mean-stack-authentication-authorization-master/angular-15-client/node_modules/@ethersproject/hash/lib.esm/typed-data.js"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, hexConcat, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { deepCopy, defineReadOnly, shallowCopy } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { id } from \"./id\";\nconst padding = new Uint8Array(32);\npadding.fill(0);\nconst NegativeOne = BigNumber.from(-1);\nconst Zero = BigNumber.from(0);\nconst One = BigNumber.from(1);\nconst MaxUint256 = BigNumber.from(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\nfunction hexPadRight(value) {\n    const bytes = arrayify(value);\n    const padOffset = bytes.length % 32;\n    if (padOffset) {\n        return hexConcat([bytes, padding.slice(padOffset)]);\n    }\n    return hexlify(bytes);\n}\nconst hexTrue = hexZeroPad(One.toHexString(), 32);\nconst hexFalse = hexZeroPad(Zero.toHexString(), 32);\nconst domainFieldTypes = {\n    name: \"string\",\n    version: \"string\",\n    chainId: \"uint256\",\n    verifyingContract: \"address\",\n    salt: \"bytes32\"\n};\nconst domainFieldNames = [\n    \"name\", \"version\", \"chainId\", \"verifyingContract\", \"salt\"\n];\nfunction checkString(key) {\n    return function (value) {\n        if (typeof (value) !== \"string\") {\n            logger.throwArgumentError(`invalid domain value for ${JSON.stringify(key)}`, `domain.${key}`, value);\n        }\n        return value;\n    };\n}\nconst domainChecks = {\n    name: checkString(\"name\"),\n    version: checkString(\"version\"),\n    chainId: function (value) {\n        try {\n            return BigNumber.from(value).toString();\n        }\n        catch (error) { }\n        return logger.throwArgumentError(`invalid domain value for \"chainId\"`, \"domain.chainId\", value);\n    },\n    verifyingContract: function (value) {\n        try {\n            return getAddress(value).toLowerCase();\n        }\n        catch (error) { }\n        return logger.throwArgumentError(`invalid domain value \"verifyingContract\"`, \"domain.verifyingContract\", value);\n    },\n    salt: function (value) {\n        try {\n            const bytes = arrayify(value);\n            if (bytes.length !== 32) {\n                throw new Error(\"bad length\");\n            }\n            return hexlify(bytes);\n        }\n        catch (error) { }\n        return logger.throwArgumentError(`invalid domain value \"salt\"`, \"domain.salt\", value);\n    }\n};\nfunction getBaseEncoder(type) {\n    // intXX and uintXX\n    {\n        const match = type.match(/^(u?)int(\\d*)$/);\n        if (match) {\n            const signed = (match[1] === \"\");\n            const width = parseInt(match[2] || \"256\");\n            if (width % 8 !== 0 || width > 256 || (match[2] && match[2] !== String(width))) {\n                logger.throwArgumentError(\"invalid numeric width\", \"type\", type);\n            }\n            const boundsUpper = MaxUint256.mask(signed ? (width - 1) : width);\n            const boundsLower = signed ? boundsUpper.add(One).mul(NegativeOne) : Zero;\n            return function (value) {\n                const v = BigNumber.from(value);\n                if (v.lt(boundsLower) || v.gt(boundsUpper)) {\n                    logger.throwArgumentError(`value out-of-bounds for ${type}`, \"value\", value);\n                }\n                return hexZeroPad(v.toTwos(256).toHexString(), 32);\n            };\n        }\n    }\n    // bytesXX\n    {\n        const match = type.match(/^bytes(\\d+)$/);\n        if (match) {\n            const width = parseInt(match[1]);\n            if (width === 0 || width > 32 || match[1] !== String(width)) {\n                logger.throwArgumentError(\"invalid bytes width\", \"type\", type);\n            }\n            return function (value) {\n                const bytes = arrayify(value);\n                if (bytes.length !== width) {\n                    logger.throwArgumentError(`invalid length for ${type}`, \"value\", value);\n                }\n                return hexPadRight(value);\n            };\n        }\n    }\n    switch (type) {\n        case \"address\": return function (value) {\n            return hexZeroPad(getAddress(value), 32);\n        };\n        case \"bool\": return function (value) {\n            return ((!value) ? hexFalse : hexTrue);\n        };\n        case \"bytes\": return function (value) {\n            return keccak256(value);\n        };\n        case \"string\": return function (value) {\n            return id(value);\n        };\n    }\n    return null;\n}\nfunction encodeType(name, fields) {\n    return `${name}(${fields.map(({ name, type }) => (type + \" \" + name)).join(\",\")})`;\n}\nexport class TypedDataEncoder {\n    constructor(types) {\n        defineReadOnly(this, \"types\", Object.freeze(deepCopy(types)));\n        defineReadOnly(this, \"_encoderCache\", {});\n        defineReadOnly(this, \"_types\", {});\n        // Link struct types to their direct child structs\n        const links = {};\n        // Link structs to structs which contain them as a child\n        const parents = {};\n        // Link all subtypes within a given struct\n        const subtypes = {};\n        Object.keys(types).forEach((type) => {\n            links[type] = {};\n            parents[type] = [];\n            subtypes[type] = {};\n        });\n        for (const name in types) {\n            const uniqueNames = {};\n            types[name].forEach((field) => {\n                // Check each field has a unique name\n                if (uniqueNames[field.name]) {\n                    logger.throwArgumentError(`duplicate variable name ${JSON.stringify(field.name)} in ${JSON.stringify(name)}`, \"types\", types);\n                }\n                uniqueNames[field.name] = true;\n                // Get the base type (drop any array specifiers)\n                const baseType = field.type.match(/^([^\\x5b]*)(\\x5b|$)/)[1];\n                if (baseType === name) {\n                    logger.throwArgumentError(`circular type reference to ${JSON.stringify(baseType)}`, \"types\", types);\n                }\n                // Is this a base encoding type?\n                const encoder = getBaseEncoder(baseType);\n                if (encoder) {\n                    return;\n                }\n                if (!parents[baseType]) {\n                    logger.throwArgumentError(`unknown type ${JSON.stringify(baseType)}`, \"types\", types);\n                }\n                // Add linkage\n                parents[baseType].push(name);\n                links[name][baseType] = true;\n            });\n        }\n        // Deduce the primary type\n        const primaryTypes = Object.keys(parents).filter((n) => (parents[n].length === 0));\n        if (primaryTypes.length === 0) {\n            logger.throwArgumentError(\"missing primary type\", \"types\", types);\n        }\n        else if (primaryTypes.length > 1) {\n            logger.throwArgumentError(`ambiguous primary types or unused types: ${primaryTypes.map((t) => (JSON.stringify(t))).join(\", \")}`, \"types\", types);\n        }\n        defineReadOnly(this, \"primaryType\", primaryTypes[0]);\n        // Check for circular type references\n        function checkCircular(type, found) {\n            if (found[type]) {\n                logger.throwArgumentError(`circular type reference to ${JSON.stringify(type)}`, \"types\", types);\n            }\n            found[type] = true;\n            Object.keys(links[type]).forEach((child) => {\n                if (!parents[child]) {\n                    return;\n                }\n                // Recursively check children\n                checkCircular(child, found);\n                // Mark all ancestors as having this decendant\n                Object.keys(found).forEach((subtype) => {\n                    subtypes[subtype][child] = true;\n                });\n            });\n            delete found[type];\n        }\n        checkCircular(this.primaryType, {});\n        // Compute each fully describe type\n        for (const name in subtypes) {\n            const st = Object.keys(subtypes[name]);\n            st.sort();\n            this._types[name] = encodeType(name, types[name]) + st.map((t) => encodeType(t, types[t])).join(\"\");\n        }\n    }\n    getEncoder(type) {\n        let encoder = this._encoderCache[type];\n        if (!encoder) {\n            encoder = this._encoderCache[type] = this._getEncoder(type);\n        }\n        return encoder;\n    }\n    _getEncoder(type) {\n        // Basic encoder type (address, bool, uint256, etc)\n        {\n            const encoder = getBaseEncoder(type);\n            if (encoder) {\n                return encoder;\n            }\n        }\n        // Array\n        const match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n        if (match) {\n            const subtype = match[1];\n            const subEncoder = this.getEncoder(subtype);\n            const length = parseInt(match[3]);\n            return (value) => {\n                if (length >= 0 && value.length !== length) {\n                    logger.throwArgumentError(\"array length mismatch; expected length ${ arrayLength }\", \"value\", value);\n                }\n                let result = value.map(subEncoder);\n                if (this._types[subtype]) {\n                    result = result.map(keccak256);\n                }\n                return keccak256(hexConcat(result));\n            };\n        }\n        // Struct\n        const fields = this.types[type];\n        if (fields) {\n            const encodedType = id(this._types[type]);\n            return (value) => {\n                const values = fields.map(({ name, type }) => {\n                    const result = this.getEncoder(type)(value[name]);\n                    if (this._types[type]) {\n                        return keccak256(result);\n                    }\n                    return result;\n                });\n                values.unshift(encodedType);\n                return hexConcat(values);\n            };\n        }\n        return logger.throwArgumentError(`unknown type: ${type}`, \"type\", type);\n    }\n    encodeType(name) {\n        const result = this._types[name];\n        if (!result) {\n            logger.throwArgumentError(`unknown type: ${JSON.stringify(name)}`, \"name\", name);\n        }\n        return result;\n    }\n    encodeData(type, value) {\n        return this.getEncoder(type)(value);\n    }\n    hashStruct(name, value) {\n        return keccak256(this.encodeData(name, value));\n    }\n    encode(value) {\n        return this.encodeData(this.primaryType, value);\n    }\n    hash(value) {\n        return this.hashStruct(this.primaryType, value);\n    }\n    _visit(type, value, callback) {\n        // Basic encoder type (address, bool, uint256, etc)\n        {\n            const encoder = getBaseEncoder(type);\n            if (encoder) {\n                return callback(type, value);\n            }\n        }\n        // Array\n        const match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n        if (match) {\n            const subtype = match[1];\n            const length = parseInt(match[3]);\n            if (length >= 0 && value.length !== length) {\n                logger.throwArgumentError(\"array length mismatch; expected length ${ arrayLength }\", \"value\", value);\n            }\n            return value.map((v) => this._visit(subtype, v, callback));\n        }\n        // Struct\n        const fields = this.types[type];\n        if (fields) {\n            return fields.reduce((accum, { name, type }) => {\n                accum[name] = this._visit(type, value[name], callback);\n                return accum;\n            }, {});\n        }\n        return logger.throwArgumentError(`unknown type: ${type}`, \"type\", type);\n    }\n    visit(value, callback) {\n        return this._visit(this.primaryType, value, callback);\n    }\n    static from(types) {\n        return new TypedDataEncoder(types);\n    }\n    static getPrimaryType(types) {\n        return TypedDataEncoder.from(types).primaryType;\n    }\n    static hashStruct(name, types, value) {\n        return TypedDataEncoder.from(types).hashStruct(name, value);\n    }\n    static hashDomain(domain) {\n        const domainFields = [];\n        for (const name in domain) {\n            const type = domainFieldTypes[name];\n            if (!type) {\n                logger.throwArgumentError(`invalid typed-data domain key: ${JSON.stringify(name)}`, \"domain\", domain);\n            }\n            domainFields.push({ name, type });\n        }\n        domainFields.sort((a, b) => {\n            return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);\n        });\n        return TypedDataEncoder.hashStruct(\"EIP712Domain\", { EIP712Domain: domainFields }, domain);\n    }\n    static encode(domain, types, value) {\n        return hexConcat([\n            \"0x1901\",\n            TypedDataEncoder.hashDomain(domain),\n            TypedDataEncoder.from(types).hash(value)\n        ]);\n    }\n    static hash(domain, types, value) {\n        return keccak256(TypedDataEncoder.encode(domain, types, value));\n    }\n    // Replaces all address types with ENS names with their looked up address\n    static resolveNames(domain, types, value, resolveName) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Make a copy to isolate it from the object passed in\n            domain = shallowCopy(domain);\n            // Look up all ENS names\n            const ensCache = {};\n            // Do we need to look up the domain's verifyingContract?\n            if (domain.verifyingContract && !isHexString(domain.verifyingContract, 20)) {\n                ensCache[domain.verifyingContract] = \"0x\";\n            }\n            // We are going to use the encoder to visit all the base values\n            const encoder = TypedDataEncoder.from(types);\n            // Get a list of all the addresses\n            encoder.visit(value, (type, value) => {\n                if (type === \"address\" && !isHexString(value, 20)) {\n                    ensCache[value] = \"0x\";\n                }\n                return value;\n            });\n            // Lookup each name\n            for (const name in ensCache) {\n                ensCache[name] = yield resolveName(name);\n            }\n            // Replace the domain verifyingContract if needed\n            if (domain.verifyingContract && ensCache[domain.verifyingContract]) {\n                domain.verifyingContract = ensCache[domain.verifyingContract];\n            }\n            // Replace all ENS names with their address\n            value = encoder.visit(value, (type, value) => {\n                if (type === \"address\" && ensCache[value]) {\n                    return ensCache[value];\n                }\n                return value;\n            });\n            return { domain, value };\n        });\n    }\n    static getPayload(domain, types, value) {\n        // Validate the domain fields\n        TypedDataEncoder.hashDomain(domain);\n        // Derive the EIP712Domain Struct reference type\n        const domainValues = {};\n        const domainTypes = [];\n        domainFieldNames.forEach((name) => {\n            const value = domain[name];\n            if (value == null) {\n                return;\n            }\n            domainValues[name] = domainChecks[name](value);\n            domainTypes.push({ name, type: domainFieldTypes[name] });\n        });\n        const encoder = TypedDataEncoder.from(types);\n        const typesWithDomain = shallowCopy(types);\n        if (typesWithDomain.EIP712Domain) {\n            logger.throwArgumentError(\"types must not contain EIP712Domain type\", \"types.EIP712Domain\", types);\n        }\n        else {\n            typesWithDomain.EIP712Domain = domainTypes;\n        }\n        // Validate the data structures and types\n        encoder.encode(value);\n        return {\n            types: typesWithDomain,\n            domain: domainValues,\n            primaryType: encoder.primaryType,\n            message: encoder.visit(value, (type, value) => {\n                // bytes\n                if (type.match(/^bytes(\\d*)/)) {\n                    return hexlify(arrayify(value));\n                }\n                // uint or int\n                if (type.match(/^u?int/)) {\n                    return BigNumber.from(value).toString();\n                }\n                switch (type) {\n                    case \"address\":\n                        return value.toLowerCase();\n                    case \"bool\":\n                        return !!value;\n                    case \"string\":\n                        if (typeof (value) !== \"string\") {\n                            logger.throwArgumentError(`invalid string`, \"value\", value);\n                        }\n                        return value;\n                }\n                return logger.throwArgumentError(\"unsupported type\", \"type\", type);\n            })\n        };\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}