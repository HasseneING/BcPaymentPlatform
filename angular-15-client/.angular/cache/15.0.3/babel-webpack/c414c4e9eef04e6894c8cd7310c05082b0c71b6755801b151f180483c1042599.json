{"ast":null,"code":"/**\n * MIT License\n *\n * Copyright (c) 2021 Andrew Raffensperger\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * This is a near carbon-copy of the original source (link below) with the\n * TypeScript typings added and a few tweaks to make it ES3-compatible.\n *\n * See: https://github.com/adraffy/ens-normalize.js\n */\nimport { toUtf8CodePoints } from \"@ethersproject/strings\";\nimport { getData } from './include.js';\nconst r = getData();\nimport { read_member_array, read_mapped_map, read_emoji_trie } from './decoder.js';\n// @TODO: This should be lazily loaded\nconst VALID = new Set(read_member_array(r));\nconst IGNORED = new Set(read_member_array(r));\nconst MAPPED = read_mapped_map(r);\nconst EMOJI_ROOT = read_emoji_trie(r);\n//const NFC_CHECK = new Set(read_member_array(r, Array.from(VALID.values()).sort((a, b) => a - b)));\n//const STOP = 0x2E;\nconst HYPHEN = 0x2D;\nconst UNDERSCORE = 0x5F;\nfunction explode_cp(name) {\n  return toUtf8CodePoints(name);\n}\nfunction filter_fe0f(cps) {\n  return cps.filter(cp => cp != 0xFE0F);\n}\nexport function ens_normalize_post_check(name) {\n  for (let label of name.split('.')) {\n    let cps = explode_cp(label);\n    try {\n      for (let i = cps.lastIndexOf(UNDERSCORE) - 1; i >= 0; i--) {\n        if (cps[i] !== UNDERSCORE) {\n          throw new Error(`underscore only allowed at start`);\n        }\n      }\n      if (cps.length >= 4 && cps.every(cp => cp < 0x80) && cps[2] === HYPHEN && cps[3] === HYPHEN) {\n        throw new Error(`invalid label extension`);\n      }\n    } catch (err) {\n      throw new Error(`Invalid label \"${label}\": ${err.message}`);\n    }\n  }\n  return name;\n}\nexport function ens_normalize(name) {\n  return ens_normalize_post_check(normalize(name, filter_fe0f));\n}\nfunction normalize(name, emoji_filter) {\n  let input = explode_cp(name).reverse(); // flip for pop\n  let output = [];\n  while (input.length) {\n    let emoji = consume_emoji_reversed(input);\n    if (emoji) {\n      output.push(...emoji_filter(emoji));\n      continue;\n    }\n    let cp = input.pop();\n    if (VALID.has(cp)) {\n      output.push(cp);\n      continue;\n    }\n    if (IGNORED.has(cp)) {\n      continue;\n    }\n    let cps = MAPPED[cp];\n    if (cps) {\n      output.push(...cps);\n      continue;\n    }\n    throw new Error(`Disallowed codepoint: 0x${cp.toString(16).toUpperCase()}`);\n  }\n  return ens_normalize_post_check(nfc(String.fromCodePoint(...output)));\n}\nfunction nfc(s) {\n  return s.normalize('NFC');\n}\nfunction consume_emoji_reversed(cps, eaten) {\n  var _a;\n  let node = EMOJI_ROOT;\n  let emoji;\n  let saved;\n  let stack = [];\n  let pos = cps.length;\n  if (eaten) eaten.length = 0; // clear input buffer (if needed)\n  while (pos) {\n    let cp = cps[--pos];\n    node = (_a = node.branches.find(x => x.set.has(cp))) === null || _a === void 0 ? void 0 : _a.node;\n    if (!node) break;\n    if (node.save) {\n      // remember\n      saved = cp;\n    } else if (node.check) {\n      // check exclusion\n      if (cp === saved) break;\n    }\n    stack.push(cp);\n    if (node.fe0f) {\n      stack.push(0xFE0F);\n      if (pos > 0 && cps[pos - 1] == 0xFE0F) pos--; // consume optional FE0F\n    }\n\n    if (node.valid) {\n      // this is a valid emoji (so far)\n      emoji = stack.slice(); // copy stack\n      if (node.valid == 2) emoji.splice(1, 1); // delete FE0F at position 1 (RGI ZWJ don't follow spec!)\n      if (eaten) eaten.push(...cps.slice(pos).reverse()); // copy input (if needed)\n      cps.length = pos; // truncate\n    }\n  }\n\n  return emoji;\n}","map":{"version":3,"names":["toUtf8CodePoints","getData","r","read_member_array","read_mapped_map","read_emoji_trie","VALID","Set","IGNORED","MAPPED","EMOJI_ROOT","HYPHEN","UNDERSCORE","explode_cp","name","filter_fe0f","cps","filter","cp","ens_normalize_post_check","label","split","i","lastIndexOf","Error","length","every","err","message","ens_normalize","normalize","emoji_filter","input","reverse","output","emoji","consume_emoji_reversed","push","pop","has","toString","toUpperCase","nfc","String","fromCodePoint","s","eaten","_a","node","saved","stack","pos","branches","find","x","set","save","check","fe0f","valid","slice","splice"],"sources":["F:/DDesktop/MEAN_BC/mean-stack-authentication-authorization-master/angular-15-client/node_modules/@ethersproject/hash/lib.esm/ens-normalize/lib.js"],"sourcesContent":["/**\n * MIT License\n *\n * Copyright (c) 2021 Andrew Raffensperger\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * This is a near carbon-copy of the original source (link below) with the\n * TypeScript typings added and a few tweaks to make it ES3-compatible.\n *\n * See: https://github.com/adraffy/ens-normalize.js\n */\nimport { toUtf8CodePoints } from \"@ethersproject/strings\";\nimport { getData } from './include.js';\nconst r = getData();\nimport { read_member_array, read_mapped_map, read_emoji_trie } from './decoder.js';\n// @TODO: This should be lazily loaded\nconst VALID = new Set(read_member_array(r));\nconst IGNORED = new Set(read_member_array(r));\nconst MAPPED = read_mapped_map(r);\nconst EMOJI_ROOT = read_emoji_trie(r);\n//const NFC_CHECK = new Set(read_member_array(r, Array.from(VALID.values()).sort((a, b) => a - b)));\n//const STOP = 0x2E;\nconst HYPHEN = 0x2D;\nconst UNDERSCORE = 0x5F;\nfunction explode_cp(name) {\n    return toUtf8CodePoints(name);\n}\nfunction filter_fe0f(cps) {\n    return cps.filter(cp => cp != 0xFE0F);\n}\nexport function ens_normalize_post_check(name) {\n    for (let label of name.split('.')) {\n        let cps = explode_cp(label);\n        try {\n            for (let i = cps.lastIndexOf(UNDERSCORE) - 1; i >= 0; i--) {\n                if (cps[i] !== UNDERSCORE) {\n                    throw new Error(`underscore only allowed at start`);\n                }\n            }\n            if (cps.length >= 4 && cps.every(cp => cp < 0x80) && cps[2] === HYPHEN && cps[3] === HYPHEN) {\n                throw new Error(`invalid label extension`);\n            }\n        }\n        catch (err) {\n            throw new Error(`Invalid label \"${label}\": ${err.message}`);\n        }\n    }\n    return name;\n}\nexport function ens_normalize(name) {\n    return ens_normalize_post_check(normalize(name, filter_fe0f));\n}\nfunction normalize(name, emoji_filter) {\n    let input = explode_cp(name).reverse(); // flip for pop\n    let output = [];\n    while (input.length) {\n        let emoji = consume_emoji_reversed(input);\n        if (emoji) {\n            output.push(...emoji_filter(emoji));\n            continue;\n        }\n        let cp = input.pop();\n        if (VALID.has(cp)) {\n            output.push(cp);\n            continue;\n        }\n        if (IGNORED.has(cp)) {\n            continue;\n        }\n        let cps = MAPPED[cp];\n        if (cps) {\n            output.push(...cps);\n            continue;\n        }\n        throw new Error(`Disallowed codepoint: 0x${cp.toString(16).toUpperCase()}`);\n    }\n    return ens_normalize_post_check(nfc(String.fromCodePoint(...output)));\n}\nfunction nfc(s) {\n    return s.normalize('NFC');\n}\nfunction consume_emoji_reversed(cps, eaten) {\n    var _a;\n    let node = EMOJI_ROOT;\n    let emoji;\n    let saved;\n    let stack = [];\n    let pos = cps.length;\n    if (eaten)\n        eaten.length = 0; // clear input buffer (if needed)\n    while (pos) {\n        let cp = cps[--pos];\n        node = (_a = node.branches.find(x => x.set.has(cp))) === null || _a === void 0 ? void 0 : _a.node;\n        if (!node)\n            break;\n        if (node.save) { // remember\n            saved = cp;\n        }\n        else if (node.check) { // check exclusion\n            if (cp === saved)\n                break;\n        }\n        stack.push(cp);\n        if (node.fe0f) {\n            stack.push(0xFE0F);\n            if (pos > 0 && cps[pos - 1] == 0xFE0F)\n                pos--; // consume optional FE0F\n        }\n        if (node.valid) { // this is a valid emoji (so far)\n            emoji = stack.slice(); // copy stack\n            if (node.valid == 2)\n                emoji.splice(1, 1); // delete FE0F at position 1 (RGI ZWJ don't follow spec!)\n            if (eaten)\n                eaten.push(...cps.slice(pos).reverse()); // copy input (if needed)\n            cps.length = pos; // truncate\n        }\n    }\n    return emoji;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}