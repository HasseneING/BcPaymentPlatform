{"ast":null,"code":"import _asyncToGenerator from \"F:/DDesktop/MEAN_BC/mean-stack-authentication-authorization-master/angular-15-client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst API_URL = 'http://localhost:8080/api/test/';\nexport class UserService {\n  constructor(http) {\n    var _this = this;\n    this.http = http;\n    this.connectWallet = /*#__PURE__*/_asyncToGenerator(function* () {\n      try {\n        if (!_this.ethereum) return alert(\"Please install meta mask\");\n        const accounts = yield _this.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n      } catch (e) {\n        throw new Error(\"No thereum object found\");\n      }\n    });\n    this.checkWalletConnected = /*#__PURE__*/_asyncToGenerator(function* () {\n      try {\n        if (!_this.ethereum) return alert(\"Please install meta mask \");\n        const accounts = yield _this.ethereum.request({\n          method: 'eth_accounts'\n        });\n        return accounts;\n      } catch (e) {\n        throw new Error(\"No ethereum object found\");\n      }\n    });\n    const {\n      ethereum\n    } = window;\n    this.ethereum = ethereum;\n  }\n  getPublicContent() {\n    return this.http.get(API_URL + 'all', {\n      responseType: 'text'\n    });\n  }\n  getUserBoard() {\n    return this.http.get(API_URL + 'user', {\n      responseType: 'text'\n    });\n  }\n  getModeratorBoard() {\n    return this.http.get(API_URL + 'mod', {\n      responseType: 'text'\n    });\n  }\n  getAdminBoard() {\n    return this.http.get(API_URL + 'admin', {\n      responseType: 'text'\n    });\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAIA,MAAMA,OAAO,GAAG,iCAAiC;AAKjD,OAAM,MAAOC,WAAW;EAMtBC,YAAoBC,IAAgB;IAAA;IAAhB,SAAI,GAAJA,IAAI;IAKjB,kBAAa,kCAAG,aAAW;MAChC,IAAG;QACD,IAAG,CAAC,KAAI,CAACC,QAAQ,EAAE,OAAOC,KAAK,CAAC,0BAA0B,CAAC;QAC3D,MAAMC,QAAQ,SAAS,KAAI,CAACF,QAAQ,CAACG,OAAO,CAAC;UAACC,MAAM,EAAE;QAAqB,CAAC,CAAC;OAC9E,CACD,OAAMC,CAAC,EAAC;QACL,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;;IAE/C,CAAC;IAEM,yBAAoB,kCAAG,aAAW;MACvC,IAAG;QACD,IAAG,CAAC,KAAI,CAACN,QAAQ,EAAE,OAAOC,KAAK,CAAC,2BAA2B,CAAC;QAC5D,MAAMC,QAAQ,SAAS,KAAI,CAACF,QAAQ,CAACG,OAAO,CAAC;UAACC,MAAM,EAAE;QAAc,CAAC,CAAC;QACtE,OAAOF,QAAQ;OAChB,CACD,OAAMG,CAAC,EAAC;QACN,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;;IAE/C,CAAC;IAvBC,MAAM;MAACN;IAAQ,CAAC,GAAQO,MAAM;IAC9B,IAAI,CAACP,QAAQ,GAAGA,QAAQ;EAC1B;EAuBAQ,gBAAgB;IACd,OAAO,IAAI,CAACT,IAAI,CAACU,GAAG,CAACb,OAAO,GAAG,KAAK,EAAE;MAAEc,YAAY,EAAE;IAAM,CAAE,CAAC;EACjE;EAEAC,YAAY;IACV,OAAO,IAAI,CAACZ,IAAI,CAACU,GAAG,CAACb,OAAO,GAAG,MAAM,EAAE;MAAEc,YAAY,EAAE;IAAM,CAAE,CAAC;EAClE;EAEAE,iBAAiB;IACf,OAAO,IAAI,CAACb,IAAI,CAACU,GAAG,CAACb,OAAO,GAAG,KAAK,EAAE;MAAEc,YAAY,EAAE;IAAM,CAAE,CAAC;EACjE;EAEAG,aAAa;IACX,OAAO,IAAI,CAACd,IAAI,CAACU,GAAG,CAACb,OAAO,GAAG,OAAO,EAAE;MAAEc,YAAY,EAAE;IAAM,CAAE,CAAC;EACnE;;AA9CWb,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAiB,SAAXjB,WAAW;EAAAkB,YAFV;AAAM","names":["API_URL","UserService","constructor","http","ethereum","alert","accounts","request","method","e","Error","window","getPublicContent","get","responseType","getUserBoard","getModeratorBoard","getAdminBoard","factory","providedIn"],"sourceRoot":"","sources":["F:\\DDesktop\\MEAN_BC\\mean-stack-authentication-authorization-master\\angular-15-client\\src\\app\\_services\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nconst API_URL = 'http://localhost:8080/api/test/';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserService {\n\n\n\n  public ethereum;\n\n  constructor(private http: HttpClient) {\n    const {ethereum} = <any>window\n    this.ethereum = ethereum\n  }\n\n  public connectWallet = async () => {\n    try{\n      if(!this.ethereum) return alert(\"Please install meta mask\");\n      const accounts = await this.ethereum.request({method: 'eth_requestAccounts'});\n    }\n    catch(e){\n       throw new Error(\"No thereum object found\")\n    }\n  }\n\n  public checkWalletConnected = async () => {\n    try{\n      if(!this.ethereum) return alert(\"Please install meta mask \")\n      const accounts = await this.ethereum.request({method: 'eth_accounts'});\n      return accounts;\n    }\n    catch(e){\n      throw new Error(\"No ethereum object found\");\n    }\n  }\n\n  getPublicContent(): Observable<any> {\n    return this.http.get(API_URL + 'all', { responseType: 'text' });\n  }\n\n  getUserBoard(): Observable<any> {\n    return this.http.get(API_URL + 'user', { responseType: 'text' });\n  }\n  \n  getModeratorBoard(): Observable<any> {\n    return this.http.get(API_URL + 'mod', { responseType: 'text' });\n  }\n\n  getAdminBoard(): Observable<any> {\n    return this.http.get(API_URL + 'admin', { responseType: 'text' });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}