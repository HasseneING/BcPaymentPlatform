{"ast":null,"code":"\"use strict\";\n\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = {\n  debug: 1,\n  \"default\": 2,\n  info: 2,\n  warning: 3,\n  error: 4,\n  off: 5\n};\nlet _logLevel = LogLevels[\"default\"];\nimport { version } from \"./_version\";\nlet _globalLogger = null;\nfunction _checkNormalize() {\n  try {\n    const missing = [];\n    // Make sure all forms of normalization are supported\n    [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach(form => {\n      try {\n        if (\"test\".normalize(form) !== \"test\") {\n          throw new Error(\"bad normalize\");\n        }\n        ;\n      } catch (error) {\n        missing.push(form);\n      }\n    });\n    if (missing.length) {\n      throw new Error(\"missing \" + missing.join(\", \"));\n    }\n    if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n      throw new Error(\"broken implementation\");\n    }\n  } catch (error) {\n    return error.message;\n  }\n  return null;\n}\nconst _normalizeError = _checkNormalize();\nexport var LogLevel;\n(function (LogLevel) {\n  LogLevel[\"DEBUG\"] = \"DEBUG\";\n  LogLevel[\"INFO\"] = \"INFO\";\n  LogLevel[\"WARNING\"] = \"WARNING\";\n  LogLevel[\"ERROR\"] = \"ERROR\";\n  LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nexport var ErrorCode;\n(function (ErrorCode) {\n  ///////////////////\n  // Generic Errors\n  // Unknown Error\n  ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n  // Not Implemented\n  ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n  // Unsupported Operation\n  //   - operation\n  ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n  // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n  //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n  ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n  // Some sort of bad response from the server\n  ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n  // Timeout\n  ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n  ///////////////////\n  // Operational  Errors\n  // Buffer Overrun\n  ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n  // Numeric Fault\n  //   - operation: the operation being executed\n  //   - fault: the reason this faulted\n  ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n  ///////////////////\n  // Argument Errors\n  // Missing new operator to an object\n  //  - name: The name of the class\n  ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n  // Invalid argument (e.g. value is incompatible with type) to a function:\n  //   - argument: The argument name that was invalid\n  //   - value: The value of the argument\n  ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n  // Missing argument to a function:\n  //   - count: The number of arguments received\n  //   - expectedCount: The number of arguments expected\n  ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n  // Too many arguments\n  //   - count: The number of arguments received\n  //   - expectedCount: The number of arguments expected\n  ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n  ///////////////////\n  // Blockchain Errors\n  // Call exception\n  //  - transaction: the transaction\n  //  - address?: the contract address\n  //  - args?: The arguments passed into the function\n  //  - method?: The Solidity method signature\n  //  - errorSignature?: The EIP848 error signature\n  //  - errorArgs?: The EIP848 error parameters\n  //  - reason: The reason (only for EIP848 \"Error(string)\")\n  ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n  // Insufficient funds (< value + gasLimit * gasPrice)\n  //   - transaction: the transaction attempted\n  ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n  // Nonce has already been used\n  //   - transaction: the transaction attempted\n  ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n  // The replacement fee for the transaction is too low\n  //   - transaction: the transaction attempted\n  ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n  // The gas limit could not be estimated\n  //   - transaction: the transaction passed to estimateGas\n  ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n  // The transaction was replaced by one with a higher gas price\n  //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n  //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n  //   - hash: original transaction hash\n  //   - replacement: the full TransactionsResponse for the replacement\n  //   - receipt: the receipt of the replacement\n  ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n  ///////////////////\n  // Interaction Errors\n  // The user rejected the action, such as signing a message or sending\n  // a transaction\n  ErrorCode[\"ACTION_REJECTED\"] = \"ACTION_REJECTED\";\n})(ErrorCode || (ErrorCode = {}));\n;\nconst HEX = \"0123456789abcdef\";\nexport class Logger {\n  constructor(version) {\n    Object.defineProperty(this, \"version\", {\n      enumerable: true,\n      value: version,\n      writable: false\n    });\n  }\n  _log(logLevel, args) {\n    const level = logLevel.toLowerCase();\n    if (LogLevels[level] == null) {\n      this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n    }\n    if (_logLevel > LogLevels[level]) {\n      return;\n    }\n    console.log.apply(console, args);\n  }\n  debug(...args) {\n    this._log(Logger.levels.DEBUG, args);\n  }\n  info(...args) {\n    this._log(Logger.levels.INFO, args);\n  }\n  warn(...args) {\n    this._log(Logger.levels.WARNING, args);\n  }\n  makeError(message, code, params) {\n    // Errors are being censored\n    if (_censorErrors) {\n      return this.makeError(\"censored error\", code, {});\n    }\n    if (!code) {\n      code = Logger.errors.UNKNOWN_ERROR;\n    }\n    if (!params) {\n      params = {};\n    }\n    const messageDetails = [];\n    Object.keys(params).forEach(key => {\n      const value = params[key];\n      try {\n        if (value instanceof Uint8Array) {\n          let hex = \"\";\n          for (let i = 0; i < value.length; i++) {\n            hex += HEX[value[i] >> 4];\n            hex += HEX[value[i] & 0x0f];\n          }\n          messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n        } else {\n          messageDetails.push(key + \"=\" + JSON.stringify(value));\n        }\n      } catch (error) {\n        messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n      }\n    });\n    messageDetails.push(`code=${code}`);\n    messageDetails.push(`version=${this.version}`);\n    const reason = message;\n    let url = \"\";\n    switch (code) {\n      case ErrorCode.NUMERIC_FAULT:\n        {\n          url = \"NUMERIC_FAULT\";\n          const fault = message;\n          switch (fault) {\n            case \"overflow\":\n            case \"underflow\":\n            case \"division-by-zero\":\n              url += \"-\" + fault;\n              break;\n            case \"negative-power\":\n            case \"negative-width\":\n              url += \"-unsupported\";\n              break;\n            case \"unbound-bitwise-result\":\n              url += \"-unbound-result\";\n              break;\n          }\n          break;\n        }\n      case ErrorCode.CALL_EXCEPTION:\n      case ErrorCode.INSUFFICIENT_FUNDS:\n      case ErrorCode.MISSING_NEW:\n      case ErrorCode.NONCE_EXPIRED:\n      case ErrorCode.REPLACEMENT_UNDERPRICED:\n      case ErrorCode.TRANSACTION_REPLACED:\n      case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n        url = code;\n        break;\n    }\n    if (url) {\n      message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n    }\n    if (messageDetails.length) {\n      message += \" (\" + messageDetails.join(\", \") + \")\";\n    }\n    // @TODO: Any??\n    const error = new Error(message);\n    error.reason = reason;\n    error.code = code;\n    Object.keys(params).forEach(function (key) {\n      error[key] = params[key];\n    });\n    return error;\n  }\n  throwError(message, code, params) {\n    throw this.makeError(message, code, params);\n  }\n  throwArgumentError(message, name, value) {\n    return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n      argument: name,\n      value: value\n    });\n  }\n  assert(condition, message, code, params) {\n    if (!!condition) {\n      return;\n    }\n    this.throwError(message, code, params);\n  }\n  assertArgument(condition, message, name, value) {\n    if (!!condition) {\n      return;\n    }\n    this.throwArgumentError(message, name, value);\n  }\n  checkNormalize(message) {\n    if (message == null) {\n      message = \"platform missing String.prototype.normalize\";\n    }\n    if (_normalizeError) {\n      this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"String.prototype.normalize\",\n        form: _normalizeError\n      });\n    }\n  }\n  checkSafeUint53(value, message) {\n    if (typeof value !== \"number\") {\n      return;\n    }\n    if (message == null) {\n      message = \"value not safe\";\n    }\n    if (value < 0 || value >= 0x1fffffffffffff) {\n      this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n        operation: \"checkSafeInteger\",\n        fault: \"out-of-safe-range\",\n        value: value\n      });\n    }\n    if (value % 1) {\n      this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n        operation: \"checkSafeInteger\",\n        fault: \"non-integer\",\n        value: value\n      });\n    }\n  }\n  checkArgumentCount(count, expectedCount, message) {\n    if (message) {\n      message = \": \" + message;\n    } else {\n      message = \"\";\n    }\n    if (count < expectedCount) {\n      this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n        count: count,\n        expectedCount: expectedCount\n      });\n    }\n    if (count > expectedCount) {\n      this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n        count: count,\n        expectedCount: expectedCount\n      });\n    }\n  }\n  checkNew(target, kind) {\n    if (target === Object || target == null) {\n      this.throwError(\"missing new\", Logger.errors.MISSING_NEW, {\n        name: kind.name\n      });\n    }\n  }\n  checkAbstract(target, kind) {\n    if (target === kind) {\n      this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, {\n        name: target.name,\n        operation: \"new\"\n      });\n    } else if (target === Object || target == null) {\n      this.throwError(\"missing new\", Logger.errors.MISSING_NEW, {\n        name: kind.name\n      });\n    }\n  }\n  static globalLogger() {\n    if (!_globalLogger) {\n      _globalLogger = new Logger(version);\n    }\n    return _globalLogger;\n  }\n  static setCensorship(censorship, permanent) {\n    if (!censorship && permanent) {\n      this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"setCensorship\"\n      });\n    }\n    if (_permanentCensorErrors) {\n      if (!censorship) {\n        return;\n      }\n      this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"setCensorship\"\n      });\n    }\n    _censorErrors = !!censorship;\n    _permanentCensorErrors = !!permanent;\n  }\n  static setLogLevel(logLevel) {\n    const level = LogLevels[logLevel.toLowerCase()];\n    if (level == null) {\n      Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n      return;\n    }\n    _logLevel = level;\n  }\n  static from(version) {\n    return new Logger(version);\n  }\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;","map":{"version":3,"names":["_permanentCensorErrors","_censorErrors","LogLevels","debug","info","warning","error","off","_logLevel","version","_globalLogger","_checkNormalize","missing","forEach","form","normalize","Error","push","length","join","String","fromCharCode","message","_normalizeError","LogLevel","ErrorCode","HEX","Logger","constructor","Object","defineProperty","enumerable","value","writable","_log","logLevel","args","level","toLowerCase","throwArgumentError","console","log","apply","levels","DEBUG","INFO","warn","WARNING","makeError","code","params","errors","UNKNOWN_ERROR","messageDetails","keys","key","Uint8Array","hex","i","JSON","stringify","toString","reason","url","NUMERIC_FAULT","fault","CALL_EXCEPTION","INSUFFICIENT_FUNDS","MISSING_NEW","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","TRANSACTION_REPLACED","UNPREDICTABLE_GAS_LIMIT","throwError","name","INVALID_ARGUMENT","argument","assert","condition","assertArgument","checkNormalize","UNSUPPORTED_OPERATION","operation","checkSafeUint53","checkArgumentCount","count","expectedCount","MISSING_ARGUMENT","UNEXPECTED_ARGUMENT","checkNew","target","kind","checkAbstract","globalLogger","setCensorship","censorship","permanent","setLogLevel","from"],"sources":["F:/DDesktop/MEAN_BC/mean-stack-authentication-authorization-master/angular-15-client/node_modules/@ethersproject/logger/lib.esm/index.js"],"sourcesContent":["\"use strict\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\nimport { version } from \"./_version\";\nlet _globalLogger = null;\nfunction _checkNormalize() {\n    try {\n        const missing = [];\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                }\n                ;\n            }\n            catch (error) {\n                missing.push(form);\n            }\n        });\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\");\n        }\n    }\n    catch (error) {\n        return error.message;\n    }\n    return null;\n}\nconst _normalizeError = _checkNormalize();\nexport var LogLevel;\n(function (LogLevel) {\n    LogLevel[\"DEBUG\"] = \"DEBUG\";\n    LogLevel[\"INFO\"] = \"INFO\";\n    LogLevel[\"WARNING\"] = \"WARNING\";\n    LogLevel[\"ERROR\"] = \"ERROR\";\n    LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nexport var ErrorCode;\n(function (ErrorCode) {\n    ///////////////////\n    // Generic Errors\n    // Unknown Error\n    ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n    // Not Implemented\n    ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n    // Unsupported Operation\n    //   - operation\n    ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n    // Some sort of bad response from the server\n    ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n    // Timeout\n    ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n    ///////////////////\n    // Operational  Errors\n    // Buffer Overrun\n    ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n    ///////////////////\n    // Argument Errors\n    // Missing new operator to an object\n    //  - name: The name of the class\n    ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n    ///////////////////\n    // Blockchain Errors\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n    // Insufficient funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n    ///////////////////\n    // Interaction Errors\n    // The user rejected the action, such as signing a message or sending\n    // a transaction\n    ErrorCode[\"ACTION_REJECTED\"] = \"ACTION_REJECTED\";\n})(ErrorCode || (ErrorCode = {}));\n;\nconst HEX = \"0123456789abcdef\";\nexport class Logger {\n    constructor(version) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n    _log(logLevel, args) {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) {\n            return;\n        }\n        console.log.apply(console, args);\n    }\n    debug(...args) {\n        this._log(Logger.levels.DEBUG, args);\n    }\n    info(...args) {\n        this._log(Logger.levels.INFO, args);\n    }\n    warn(...args) {\n        this._log(Logger.levels.WARNING, args);\n    }\n    makeError(message, code, params) {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, {});\n        }\n        if (!code) {\n            code = Logger.errors.UNKNOWN_ERROR;\n        }\n        if (!params) {\n            params = {};\n        }\n        const messageDetails = [];\n        Object.keys(params).forEach((key) => {\n            const value = params[key];\n            try {\n                if (value instanceof Uint8Array) {\n                    let hex = \"\";\n                    for (let i = 0; i < value.length; i++) {\n                        hex += HEX[value[i] >> 4];\n                        hex += HEX[value[i] & 0x0f];\n                    }\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n                }\n                else {\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n                }\n            }\n            catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${code}`);\n        messageDetails.push(`version=${this.version}`);\n        const reason = message;\n        let url = \"\";\n        switch (code) {\n            case ErrorCode.NUMERIC_FAULT: {\n                url = \"NUMERIC_FAULT\";\n                const fault = message;\n                switch (fault) {\n                    case \"overflow\":\n                    case \"underflow\":\n                    case \"division-by-zero\":\n                        url += \"-\" + fault;\n                        break;\n                    case \"negative-power\":\n                    case \"negative-width\":\n                        url += \"-unsupported\";\n                        break;\n                    case \"unbound-bitwise-result\":\n                        url += \"-unbound-result\";\n                        break;\n                }\n                break;\n            }\n            case ErrorCode.CALL_EXCEPTION:\n            case ErrorCode.INSUFFICIENT_FUNDS:\n            case ErrorCode.MISSING_NEW:\n            case ErrorCode.NONCE_EXPIRED:\n            case ErrorCode.REPLACEMENT_UNDERPRICED:\n            case ErrorCode.TRANSACTION_REPLACED:\n            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n                url = code;\n                break;\n        }\n        if (url) {\n            message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n        }\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n        // @TODO: Any??\n        const error = new Error(message);\n        error.reason = reason;\n        error.code = code;\n        Object.keys(params).forEach(function (key) {\n            error[key] = params[key];\n        });\n        return error;\n    }\n    throwError(message, code, params) {\n        throw this.makeError(message, code, params);\n    }\n    throwArgumentError(message, name, value) {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n    assert(condition, message, code, params) {\n        if (!!condition) {\n            return;\n        }\n        this.throwError(message, code, params);\n    }\n    assertArgument(condition, message, name, value) {\n        if (!!condition) {\n            return;\n        }\n        this.throwArgumentError(message, name, value);\n    }\n    checkNormalize(message) {\n        if (message == null) {\n            message = \"platform missing String.prototype.normalize\";\n        }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n    checkSafeUint53(value, message) {\n        if (typeof (value) !== \"number\") {\n            return;\n        }\n        if (message == null) {\n            message = \"value not safe\";\n        }\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n    checkArgumentCount(count, expectedCount, message) {\n        if (message) {\n            message = \": \" + message;\n        }\n        else {\n            message = \"\";\n        }\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n    checkNew(target, kind) {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    checkAbstract(target, kind) {\n        if (target === kind) {\n            this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: \"new\" });\n        }\n        else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    static globalLogger() {\n        if (!_globalLogger) {\n            _globalLogger = new Logger(version);\n        }\n        return _globalLogger;\n    }\n    static setCensorship(censorship, permanent) {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        if (_permanentCensorErrors) {\n            if (!censorship) {\n                return;\n            }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n    static setLogLevel(logLevel) {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n    static from(version) {\n        return new Logger(version);\n    }\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}