{"ast":null,"code":"\"use strict\";\n\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { showThrottleMessage } from \"./formatter\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n// This key was provided to ethers.js by Alchemy to be used by the\n// default provider, but it is recommended that for your own\n// production environments, that you acquire your own API key at:\n//   https://dashboard.alchemyapi.io\nconst defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\";\nexport class AlchemyWebSocketProvider extends WebSocketProvider {\n  constructor(network, apiKey) {\n    const provider = new AlchemyProvider(network, apiKey);\n    const url = provider.connection.url.replace(/^http/i, \"ws\").replace(\".alchemyapi.\", \".ws.alchemyapi.\");\n    super(url, provider.network);\n    defineReadOnly(this, \"apiKey\", provider.apiKey);\n  }\n  isCommunityResource() {\n    return this.apiKey === defaultApiKey;\n  }\n}\nexport class AlchemyProvider extends UrlJsonRpcProvider {\n  static getWebSocketProvider(network, apiKey) {\n    return new AlchemyWebSocketProvider(network, apiKey);\n  }\n  static getApiKey(apiKey) {\n    if (apiKey == null) {\n      return defaultApiKey;\n    }\n    if (apiKey && typeof apiKey !== \"string\") {\n      logger.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n    }\n    return apiKey;\n  }\n  static getUrl(network, apiKey) {\n    let host = null;\n    switch (network.name) {\n      case \"homestead\":\n        host = \"eth-mainnet.alchemyapi.io/v2/\";\n        break;\n      case \"goerli\":\n        host = \"eth-goerli.g.alchemy.com/v2/\";\n        break;\n      case \"matic\":\n        host = \"polygon-mainnet.g.alchemy.com/v2/\";\n        break;\n      case \"maticmum\":\n        host = \"polygon-mumbai.g.alchemy.com/v2/\";\n        break;\n      case \"arbitrum\":\n        host = \"arb-mainnet.g.alchemy.com/v2/\";\n        break;\n      case \"arbitrum-goerli\":\n        host = \"arb-goerli.g.alchemy.com/v2/\";\n        break;\n      case \"optimism\":\n        host = \"opt-mainnet.g.alchemy.com/v2/\";\n        break;\n      case \"optimism-goerli\":\n        host = \"opt-goerli.g.alchemy.com/v2/\";\n        break;\n      default:\n        logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n    }\n    return {\n      allowGzip: true,\n      url: \"https:/\" + \"/\" + host + apiKey,\n      throttleCallback: (attempt, url) => {\n        if (apiKey === defaultApiKey) {\n          showThrottleMessage();\n        }\n        return Promise.resolve(true);\n      }\n    };\n  }\n  isCommunityResource() {\n    return this.apiKey === defaultApiKey;\n  }\n}","map":{"version":3,"names":["defineReadOnly","showThrottleMessage","WebSocketProvider","Logger","version","logger","UrlJsonRpcProvider","defaultApiKey","AlchemyWebSocketProvider","constructor","network","apiKey","provider","AlchemyProvider","url","connection","replace","isCommunityResource","getWebSocketProvider","getApiKey","throwArgumentError","getUrl","host","name","arguments","allowGzip","throttleCallback","attempt","Promise","resolve"],"sources":["F:/DDesktop/MEAN_BC/mean-stack-authentication-authorization-master/angular-15-client/node_modules/@ethersproject/providers/lib.esm/alchemy-provider.js"],"sourcesContent":["\"use strict\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { showThrottleMessage } from \"./formatter\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n// This key was provided to ethers.js by Alchemy to be used by the\n// default provider, but it is recommended that for your own\n// production environments, that you acquire your own API key at:\n//   https://dashboard.alchemyapi.io\nconst defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\";\nexport class AlchemyWebSocketProvider extends WebSocketProvider {\n    constructor(network, apiKey) {\n        const provider = new AlchemyProvider(network, apiKey);\n        const url = provider.connection.url.replace(/^http/i, \"ws\")\n            .replace(\".alchemyapi.\", \".ws.alchemyapi.\");\n        super(url, provider.network);\n        defineReadOnly(this, \"apiKey\", provider.apiKey);\n    }\n    isCommunityResource() {\n        return (this.apiKey === defaultApiKey);\n    }\n}\nexport class AlchemyProvider extends UrlJsonRpcProvider {\n    static getWebSocketProvider(network, apiKey) {\n        return new AlchemyWebSocketProvider(network, apiKey);\n    }\n    static getApiKey(apiKey) {\n        if (apiKey == null) {\n            return defaultApiKey;\n        }\n        if (apiKey && typeof (apiKey) !== \"string\") {\n            logger.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n        }\n        return apiKey;\n    }\n    static getUrl(network, apiKey) {\n        let host = null;\n        switch (network.name) {\n            case \"homestead\":\n                host = \"eth-mainnet.alchemyapi.io/v2/\";\n                break;\n            case \"goerli\":\n                host = \"eth-goerli.g.alchemy.com/v2/\";\n                break;\n            case \"matic\":\n                host = \"polygon-mainnet.g.alchemy.com/v2/\";\n                break;\n            case \"maticmum\":\n                host = \"polygon-mumbai.g.alchemy.com/v2/\";\n                break;\n            case \"arbitrum\":\n                host = \"arb-mainnet.g.alchemy.com/v2/\";\n                break;\n            case \"arbitrum-goerli\":\n                host = \"arb-goerli.g.alchemy.com/v2/\";\n                break;\n            case \"optimism\":\n                host = \"opt-mainnet.g.alchemy.com/v2/\";\n                break;\n            case \"optimism-goerli\":\n                host = \"opt-goerli.g.alchemy.com/v2/\";\n                break;\n            default:\n                logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n        return {\n            allowGzip: true,\n            url: (\"https:/\" + \"/\" + host + apiKey),\n            throttleCallback: (attempt, url) => {\n                if (apiKey === defaultApiKey) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n    }\n    isCommunityResource() {\n        return (this.apiKey === defaultApiKey);\n    }\n}\n"],"mappings":"AAAA,YAAY;;AACZ,SAASA,cAAc,QAAQ,2BAA2B;AAC1D,SAASC,mBAAmB,QAAQ,aAAa;AACjD,SAASC,iBAAiB,QAAQ,sBAAsB;AACxD,SAASC,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,OAAO,QAAQ,YAAY;AACpC,MAAMC,MAAM,GAAG,IAAIF,MAAM,CAACC,OAAO,CAAC;AAClC,SAASE,kBAAkB,QAAQ,yBAAyB;AAC5D;AACA;AACA;AACA;AACA,MAAMC,aAAa,GAAG,kCAAkC;AACxD,OAAO,MAAMC,wBAAwB,SAASN,iBAAiB,CAAC;EAC5DO,WAAW,CAACC,OAAO,EAAEC,MAAM,EAAE;IACzB,MAAMC,QAAQ,GAAG,IAAIC,eAAe,CAACH,OAAO,EAAEC,MAAM,CAAC;IACrD,MAAMG,GAAG,GAAGF,QAAQ,CAACG,UAAU,CAACD,GAAG,CAACE,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,CACtDA,OAAO,CAAC,cAAc,EAAE,iBAAiB,CAAC;IAC/C,KAAK,CAACF,GAAG,EAAEF,QAAQ,CAACF,OAAO,CAAC;IAC5BV,cAAc,CAAC,IAAI,EAAE,QAAQ,EAAEY,QAAQ,CAACD,MAAM,CAAC;EACnD;EACAM,mBAAmB,GAAG;IAClB,OAAQ,IAAI,CAACN,MAAM,KAAKJ,aAAa;EACzC;AACJ;AACA,OAAO,MAAMM,eAAe,SAASP,kBAAkB,CAAC;EACpD,OAAOY,oBAAoB,CAACR,OAAO,EAAEC,MAAM,EAAE;IACzC,OAAO,IAAIH,wBAAwB,CAACE,OAAO,EAAEC,MAAM,CAAC;EACxD;EACA,OAAOQ,SAAS,CAACR,MAAM,EAAE;IACrB,IAAIA,MAAM,IAAI,IAAI,EAAE;MAChB,OAAOJ,aAAa;IACxB;IACA,IAAII,MAAM,IAAI,OAAQA,MAAO,KAAK,QAAQ,EAAE;MACxCN,MAAM,CAACe,kBAAkB,CAAC,gBAAgB,EAAE,QAAQ,EAAET,MAAM,CAAC;IACjE;IACA,OAAOA,MAAM;EACjB;EACA,OAAOU,MAAM,CAACX,OAAO,EAAEC,MAAM,EAAE;IAC3B,IAAIW,IAAI,GAAG,IAAI;IACf,QAAQZ,OAAO,CAACa,IAAI;MAChB,KAAK,WAAW;QACZD,IAAI,GAAG,+BAA+B;QACtC;MACJ,KAAK,QAAQ;QACTA,IAAI,GAAG,8BAA8B;QACrC;MACJ,KAAK,OAAO;QACRA,IAAI,GAAG,mCAAmC;QAC1C;MACJ,KAAK,UAAU;QACXA,IAAI,GAAG,kCAAkC;QACzC;MACJ,KAAK,UAAU;QACXA,IAAI,GAAG,+BAA+B;QACtC;MACJ,KAAK,iBAAiB;QAClBA,IAAI,GAAG,8BAA8B;QACrC;MACJ,KAAK,UAAU;QACXA,IAAI,GAAG,+BAA+B;QACtC;MACJ,KAAK,iBAAiB;QAClBA,IAAI,GAAG,8BAA8B;QACrC;MACJ;QACIjB,MAAM,CAACe,kBAAkB,CAAC,qBAAqB,EAAE,SAAS,EAAEI,SAAS,CAAC,CAAC,CAAC,CAAC;IAAC;IAElF,OAAO;MACHC,SAAS,EAAE,IAAI;MACfX,GAAG,EAAG,SAAS,GAAG,GAAG,GAAGQ,IAAI,GAAGX,MAAO;MACtCe,gBAAgB,EAAE,CAACC,OAAO,EAAEb,GAAG,KAAK;QAChC,IAAIH,MAAM,KAAKJ,aAAa,EAAE;UAC1BN,mBAAmB,EAAE;QACzB;QACA,OAAO2B,OAAO,CAACC,OAAO,CAAC,IAAI,CAAC;MAChC;IACJ,CAAC;EACL;EACAZ,mBAAmB,GAAG;IAClB,OAAQ,IAAI,CAACN,MAAM,KAAKJ,aAAa;EACzC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}