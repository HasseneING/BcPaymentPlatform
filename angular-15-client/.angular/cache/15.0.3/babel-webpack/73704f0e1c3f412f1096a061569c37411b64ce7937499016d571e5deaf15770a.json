{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { decode as base64Decode, encode as base64Encode } from \"@ethersproject/base64\";\nimport { hexlify, isBytesLike } from \"@ethersproject/bytes\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { getUrl } from \"./geturl\";\nfunction staller(duration) {\n  return new Promise(resolve => {\n    setTimeout(resolve, duration);\n  });\n}\nfunction bodyify(value, type) {\n  if (value == null) {\n    return null;\n  }\n  if (typeof value === \"string\") {\n    return value;\n  }\n  if (isBytesLike(value)) {\n    if (type && (type.split(\"/\")[0] === \"text\" || type.split(\";\")[0].trim() === \"application/json\")) {\n      try {\n        return toUtf8String(value);\n      } catch (error) {}\n      ;\n    }\n    return hexlify(value);\n  }\n  return value;\n}\nfunction unpercent(value) {\n  return toUtf8Bytes(value.replace(/%([0-9a-f][0-9a-f])/gi, (all, code) => {\n    return String.fromCharCode(parseInt(code, 16));\n  }));\n}\n// This API is still a work in progress; the future changes will likely be:\n// - ConnectionInfo => FetchDataRequest<T = any>\n// - FetchDataRequest.body? = string | Uint8Array | { contentType: string, data: string | Uint8Array }\n//   - If string => text/plain, Uint8Array => application/octet-stream (if content-type unspecified)\n// - FetchDataRequest.processFunc = (body: Uint8Array, response: FetchDataResponse) => T\n// For this reason, it should be considered internal until the API is finalized\nexport function _fetchData(connection, body, processFunc) {\n  // How many times to retry in the event of a throttle\n  const attemptLimit = typeof connection === \"object\" && connection.throttleLimit != null ? connection.throttleLimit : 12;\n  logger.assertArgument(attemptLimit > 0 && attemptLimit % 1 === 0, \"invalid connection throttle limit\", \"connection.throttleLimit\", attemptLimit);\n  const throttleCallback = typeof connection === \"object\" ? connection.throttleCallback : null;\n  const throttleSlotInterval = typeof connection === \"object\" && typeof connection.throttleSlotInterval === \"number\" ? connection.throttleSlotInterval : 100;\n  logger.assertArgument(throttleSlotInterval > 0 && throttleSlotInterval % 1 === 0, \"invalid connection throttle slot interval\", \"connection.throttleSlotInterval\", throttleSlotInterval);\n  const errorPassThrough = typeof connection === \"object\" ? !!connection.errorPassThrough : false;\n  const headers = {};\n  let url = null;\n  // @TODO: Allow ConnectionInfo to override some of these values\n  const options = {\n    method: \"GET\"\n  };\n  let allow304 = false;\n  let timeout = 2 * 60 * 1000;\n  if (typeof connection === \"string\") {\n    url = connection;\n  } else if (typeof connection === \"object\") {\n    if (connection == null || connection.url == null) {\n      logger.throwArgumentError(\"missing URL\", \"connection.url\", connection);\n    }\n    url = connection.url;\n    if (typeof connection.timeout === \"number\" && connection.timeout > 0) {\n      timeout = connection.timeout;\n    }\n    if (connection.headers) {\n      for (const key in connection.headers) {\n        headers[key.toLowerCase()] = {\n          key: key,\n          value: String(connection.headers[key])\n        };\n        if ([\"if-none-match\", \"if-modified-since\"].indexOf(key.toLowerCase()) >= 0) {\n          allow304 = true;\n        }\n      }\n    }\n    options.allowGzip = !!connection.allowGzip;\n    if (connection.user != null && connection.password != null) {\n      if (url.substring(0, 6) !== \"https:\" && connection.allowInsecureAuthentication !== true) {\n        logger.throwError(\"basic authentication requires a secure https url\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"url\",\n          url: url,\n          user: connection.user,\n          password: \"[REDACTED]\"\n        });\n      }\n      const authorization = connection.user + \":\" + connection.password;\n      headers[\"authorization\"] = {\n        key: \"Authorization\",\n        value: \"Basic \" + base64Encode(toUtf8Bytes(authorization))\n      };\n    }\n    if (connection.skipFetchSetup != null) {\n      options.skipFetchSetup = !!connection.skipFetchSetup;\n    }\n    if (connection.fetchOptions != null) {\n      options.fetchOptions = shallowCopy(connection.fetchOptions);\n    }\n  }\n  const reData = new RegExp(\"^data:([^;:]*)?(;base64)?,(.*)$\", \"i\");\n  const dataMatch = url ? url.match(reData) : null;\n  if (dataMatch) {\n    try {\n      const response = {\n        statusCode: 200,\n        statusMessage: \"OK\",\n        headers: {\n          \"content-type\": dataMatch[1] || \"text/plain\"\n        },\n        body: dataMatch[2] ? base64Decode(dataMatch[3]) : unpercent(dataMatch[3])\n      };\n      let result = response.body;\n      if (processFunc) {\n        result = processFunc(response.body, response);\n      }\n      return Promise.resolve(result);\n    } catch (error) {\n      logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n        body: bodyify(dataMatch[1], dataMatch[2]),\n        error: error,\n        requestBody: null,\n        requestMethod: \"GET\",\n        url: url\n      });\n    }\n  }\n  if (body) {\n    options.method = \"POST\";\n    options.body = body;\n    if (headers[\"content-type\"] == null) {\n      headers[\"content-type\"] = {\n        key: \"Content-Type\",\n        value: \"application/octet-stream\"\n      };\n    }\n    if (headers[\"content-length\"] == null) {\n      headers[\"content-length\"] = {\n        key: \"Content-Length\",\n        value: String(body.length)\n      };\n    }\n  }\n  const flatHeaders = {};\n  Object.keys(headers).forEach(key => {\n    const header = headers[key];\n    flatHeaders[header.key] = header.value;\n  });\n  options.headers = flatHeaders;\n  const runningTimeout = function () {\n    let timer = null;\n    const promise = new Promise(function (resolve, reject) {\n      if (timeout) {\n        timer = setTimeout(() => {\n          if (timer == null) {\n            return;\n          }\n          timer = null;\n          reject(logger.makeError(\"timeout\", Logger.errors.TIMEOUT, {\n            requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n            requestMethod: options.method,\n            timeout: timeout,\n            url: url\n          }));\n        }, timeout);\n      }\n    });\n    const cancel = function () {\n      if (timer == null) {\n        return;\n      }\n      clearTimeout(timer);\n      timer = null;\n    };\n    return {\n      promise,\n      cancel\n    };\n  }();\n  const runningFetch = function () {\n    return __awaiter(this, void 0, void 0, function* () {\n      for (let attempt = 0; attempt < attemptLimit; attempt++) {\n        let response = null;\n        try {\n          response = yield getUrl(url, options);\n          if (attempt < attemptLimit) {\n            if (response.statusCode === 301 || response.statusCode === 302) {\n              // Redirection; for now we only support absolute locataions\n              const location = response.headers.location || \"\";\n              if (options.method === \"GET\" && location.match(/^https:/)) {\n                url = response.headers.location;\n                continue;\n              }\n            } else if (response.statusCode === 429) {\n              // Exponential back-off throttling\n              let tryAgain = true;\n              if (throttleCallback) {\n                tryAgain = yield throttleCallback(attempt, url);\n              }\n              if (tryAgain) {\n                let stall = 0;\n                const retryAfter = response.headers[\"retry-after\"];\n                if (typeof retryAfter === \"string\" && retryAfter.match(/^[1-9][0-9]*$/)) {\n                  stall = parseInt(retryAfter) * 1000;\n                } else {\n                  stall = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                }\n                //console.log(\"Stalling 429\");\n                yield staller(stall);\n                continue;\n              }\n            }\n          }\n        } catch (error) {\n          response = error.response;\n          if (response == null) {\n            runningTimeout.cancel();\n            logger.throwError(\"missing response\", Logger.errors.SERVER_ERROR, {\n              requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n              requestMethod: options.method,\n              serverError: error,\n              url: url\n            });\n          }\n        }\n        let body = response.body;\n        if (allow304 && response.statusCode === 304) {\n          body = null;\n        } else if (!errorPassThrough && (response.statusCode < 200 || response.statusCode >= 300)) {\n          runningTimeout.cancel();\n          logger.throwError(\"bad response\", Logger.errors.SERVER_ERROR, {\n            status: response.statusCode,\n            headers: response.headers,\n            body: bodyify(body, response.headers ? response.headers[\"content-type\"] : null),\n            requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n            requestMethod: options.method,\n            url: url\n          });\n        }\n        if (processFunc) {\n          try {\n            const result = yield processFunc(body, response);\n            runningTimeout.cancel();\n            return result;\n          } catch (error) {\n            // Allow the processFunc to trigger a throttle\n            if (error.throttleRetry && attempt < attemptLimit) {\n              let tryAgain = true;\n              if (throttleCallback) {\n                tryAgain = yield throttleCallback(attempt, url);\n              }\n              if (tryAgain) {\n                const timeout = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                //console.log(\"Stalling callback\");\n                yield staller(timeout);\n                continue;\n              }\n            }\n            runningTimeout.cancel();\n            logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n              body: bodyify(body, response.headers ? response.headers[\"content-type\"] : null),\n              error: error,\n              requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n              requestMethod: options.method,\n              url: url\n            });\n          }\n        }\n        runningTimeout.cancel();\n        // If we had a processFunc, it either returned a T or threw above.\n        // The \"body\" is now a Uint8Array.\n        return body;\n      }\n      return logger.throwError(\"failed response\", Logger.errors.SERVER_ERROR, {\n        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n        requestMethod: options.method,\n        url: url\n      });\n    });\n  }();\n  return Promise.race([runningTimeout.promise, runningFetch]);\n}\nexport function fetchJson(connection, json, processFunc) {\n  let processJsonFunc = (value, response) => {\n    let result = null;\n    if (value != null) {\n      try {\n        result = JSON.parse(toUtf8String(value));\n      } catch (error) {\n        logger.throwError(\"invalid JSON\", Logger.errors.SERVER_ERROR, {\n          body: value,\n          error: error\n        });\n      }\n    }\n    if (processFunc) {\n      result = processFunc(result, response);\n    }\n    return result;\n  };\n  // If we have json to send, we must\n  // - add content-type of application/json (unless already overridden)\n  // - convert the json to bytes\n  let body = null;\n  if (json != null) {\n    body = toUtf8Bytes(json);\n    // Create a connection with the content-type set for JSON\n    const updated = typeof connection === \"string\" ? {\n      url: connection\n    } : shallowCopy(connection);\n    if (updated.headers) {\n      const hasContentType = Object.keys(updated.headers).filter(k => k.toLowerCase() === \"content-type\").length !== 0;\n      if (!hasContentType) {\n        updated.headers = shallowCopy(updated.headers);\n        updated.headers[\"content-type\"] = \"application/json\";\n      }\n    } else {\n      updated.headers = {\n        \"content-type\": \"application/json\"\n      };\n    }\n    connection = updated;\n  }\n  return _fetchData(connection, body, processJsonFunc);\n}\nexport function poll(func, options) {\n  if (!options) {\n    options = {};\n  }\n  options = shallowCopy(options);\n  if (options.floor == null) {\n    options.floor = 0;\n  }\n  if (options.ceiling == null) {\n    options.ceiling = 10000;\n  }\n  if (options.interval == null) {\n    options.interval = 250;\n  }\n  return new Promise(function (resolve, reject) {\n    let timer = null;\n    let done = false;\n    // Returns true if cancel was successful. Unsuccessful cancel means we're already done.\n    const cancel = () => {\n      if (done) {\n        return false;\n      }\n      done = true;\n      if (timer) {\n        clearTimeout(timer);\n      }\n      return true;\n    };\n    if (options.timeout) {\n      timer = setTimeout(() => {\n        if (cancel()) {\n          reject(new Error(\"timeout\"));\n        }\n      }, options.timeout);\n    }\n    const retryLimit = options.retryLimit;\n    let attempt = 0;\n    function check() {\n      return func().then(function (result) {\n        // If we have a result, or are allowed null then we're done\n        if (result !== undefined) {\n          if (cancel()) {\n            resolve(result);\n          }\n        } else if (options.oncePoll) {\n          options.oncePoll.once(\"poll\", check);\n        } else if (options.onceBlock) {\n          options.onceBlock.once(\"block\", check);\n          // Otherwise, exponential back-off (up to 10s) our next request\n        } else if (!done) {\n          attempt++;\n          if (attempt > retryLimit) {\n            if (cancel()) {\n              reject(new Error(\"retry limit reached\"));\n            }\n            return;\n          }\n          let timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n          if (timeout < options.floor) {\n            timeout = options.floor;\n          }\n          if (timeout > options.ceiling) {\n            timeout = options.ceiling;\n          }\n          setTimeout(check, timeout);\n        }\n        return null;\n      }, function (error) {\n        if (cancel()) {\n          reject(error);\n        }\n      });\n    }\n    check();\n  });\n}","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","decode","base64Decode","encode","base64Encode","hexlify","isBytesLike","shallowCopy","toUtf8Bytes","toUtf8String","Logger","version","logger","getUrl","staller","duration","setTimeout","bodyify","type","split","trim","error","unpercent","replace","all","code","String","fromCharCode","parseInt","_fetchData","connection","body","processFunc","attemptLimit","throttleLimit","assertArgument","throttleCallback","throttleSlotInterval","errorPassThrough","headers","url","options","method","allow304","timeout","throwArgumentError","key","toLowerCase","indexOf","allowGzip","user","password","substring","allowInsecureAuthentication","throwError","errors","INVALID_ARGUMENT","argument","authorization","skipFetchSetup","fetchOptions","reData","RegExp","dataMatch","match","response","statusCode","statusMessage","SERVER_ERROR","requestBody","requestMethod","length","flatHeaders","Object","keys","forEach","header","runningTimeout","timer","promise","makeError","TIMEOUT","cancel","clearTimeout","runningFetch","attempt","location","tryAgain","stall","retryAfter","Math","random","pow","serverError","status","throttleRetry","race","fetchJson","json","processJsonFunc","JSON","parse","updated","hasContentType","filter","k","poll","func","floor","ceiling","interval","Error","retryLimit","check","undefined","oncePoll","once","onceBlock"],"sources":["F:/DDesktop/MEAN_BC/mean-stack-authentication-authorization-master/angular-15-client/node_modules/@ethersproject/web/lib.esm/index.js"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { decode as base64Decode, encode as base64Encode } from \"@ethersproject/base64\";\nimport { hexlify, isBytesLike } from \"@ethersproject/bytes\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { getUrl } from \"./geturl\";\nfunction staller(duration) {\n    return new Promise((resolve) => {\n        setTimeout(resolve, duration);\n    });\n}\nfunction bodyify(value, type) {\n    if (value == null) {\n        return null;\n    }\n    if (typeof (value) === \"string\") {\n        return value;\n    }\n    if (isBytesLike(value)) {\n        if (type && (type.split(\"/\")[0] === \"text\" || type.split(\";\")[0].trim() === \"application/json\")) {\n            try {\n                return toUtf8String(value);\n            }\n            catch (error) { }\n            ;\n        }\n        return hexlify(value);\n    }\n    return value;\n}\nfunction unpercent(value) {\n    return toUtf8Bytes(value.replace(/%([0-9a-f][0-9a-f])/gi, (all, code) => {\n        return String.fromCharCode(parseInt(code, 16));\n    }));\n}\n// This API is still a work in progress; the future changes will likely be:\n// - ConnectionInfo => FetchDataRequest<T = any>\n// - FetchDataRequest.body? = string | Uint8Array | { contentType: string, data: string | Uint8Array }\n//   - If string => text/plain, Uint8Array => application/octet-stream (if content-type unspecified)\n// - FetchDataRequest.processFunc = (body: Uint8Array, response: FetchDataResponse) => T\n// For this reason, it should be considered internal until the API is finalized\nexport function _fetchData(connection, body, processFunc) {\n    // How many times to retry in the event of a throttle\n    const attemptLimit = (typeof (connection) === \"object\" && connection.throttleLimit != null) ? connection.throttleLimit : 12;\n    logger.assertArgument((attemptLimit > 0 && (attemptLimit % 1) === 0), \"invalid connection throttle limit\", \"connection.throttleLimit\", attemptLimit);\n    const throttleCallback = ((typeof (connection) === \"object\") ? connection.throttleCallback : null);\n    const throttleSlotInterval = ((typeof (connection) === \"object\" && typeof (connection.throttleSlotInterval) === \"number\") ? connection.throttleSlotInterval : 100);\n    logger.assertArgument((throttleSlotInterval > 0 && (throttleSlotInterval % 1) === 0), \"invalid connection throttle slot interval\", \"connection.throttleSlotInterval\", throttleSlotInterval);\n    const errorPassThrough = ((typeof (connection) === \"object\") ? !!(connection.errorPassThrough) : false);\n    const headers = {};\n    let url = null;\n    // @TODO: Allow ConnectionInfo to override some of these values\n    const options = {\n        method: \"GET\",\n    };\n    let allow304 = false;\n    let timeout = 2 * 60 * 1000;\n    if (typeof (connection) === \"string\") {\n        url = connection;\n    }\n    else if (typeof (connection) === \"object\") {\n        if (connection == null || connection.url == null) {\n            logger.throwArgumentError(\"missing URL\", \"connection.url\", connection);\n        }\n        url = connection.url;\n        if (typeof (connection.timeout) === \"number\" && connection.timeout > 0) {\n            timeout = connection.timeout;\n        }\n        if (connection.headers) {\n            for (const key in connection.headers) {\n                headers[key.toLowerCase()] = { key: key, value: String(connection.headers[key]) };\n                if ([\"if-none-match\", \"if-modified-since\"].indexOf(key.toLowerCase()) >= 0) {\n                    allow304 = true;\n                }\n            }\n        }\n        options.allowGzip = !!connection.allowGzip;\n        if (connection.user != null && connection.password != null) {\n            if (url.substring(0, 6) !== \"https:\" && connection.allowInsecureAuthentication !== true) {\n                logger.throwError(\"basic authentication requires a secure https url\", Logger.errors.INVALID_ARGUMENT, { argument: \"url\", url: url, user: connection.user, password: \"[REDACTED]\" });\n            }\n            const authorization = connection.user + \":\" + connection.password;\n            headers[\"authorization\"] = {\n                key: \"Authorization\",\n                value: \"Basic \" + base64Encode(toUtf8Bytes(authorization))\n            };\n        }\n        if (connection.skipFetchSetup != null) {\n            options.skipFetchSetup = !!connection.skipFetchSetup;\n        }\n        if (connection.fetchOptions != null) {\n            options.fetchOptions = shallowCopy(connection.fetchOptions);\n        }\n    }\n    const reData = new RegExp(\"^data:([^;:]*)?(;base64)?,(.*)$\", \"i\");\n    const dataMatch = ((url) ? url.match(reData) : null);\n    if (dataMatch) {\n        try {\n            const response = {\n                statusCode: 200,\n                statusMessage: \"OK\",\n                headers: { \"content-type\": (dataMatch[1] || \"text/plain\") },\n                body: (dataMatch[2] ? base64Decode(dataMatch[3]) : unpercent(dataMatch[3]))\n            };\n            let result = response.body;\n            if (processFunc) {\n                result = processFunc(response.body, response);\n            }\n            return Promise.resolve(result);\n        }\n        catch (error) {\n            logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n                body: bodyify(dataMatch[1], dataMatch[2]),\n                error: error,\n                requestBody: null,\n                requestMethod: \"GET\",\n                url: url\n            });\n        }\n    }\n    if (body) {\n        options.method = \"POST\";\n        options.body = body;\n        if (headers[\"content-type\"] == null) {\n            headers[\"content-type\"] = { key: \"Content-Type\", value: \"application/octet-stream\" };\n        }\n        if (headers[\"content-length\"] == null) {\n            headers[\"content-length\"] = { key: \"Content-Length\", value: String(body.length) };\n        }\n    }\n    const flatHeaders = {};\n    Object.keys(headers).forEach((key) => {\n        const header = headers[key];\n        flatHeaders[header.key] = header.value;\n    });\n    options.headers = flatHeaders;\n    const runningTimeout = (function () {\n        let timer = null;\n        const promise = new Promise(function (resolve, reject) {\n            if (timeout) {\n                timer = setTimeout(() => {\n                    if (timer == null) {\n                        return;\n                    }\n                    timer = null;\n                    reject(logger.makeError(\"timeout\", Logger.errors.TIMEOUT, {\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                        requestMethod: options.method,\n                        timeout: timeout,\n                        url: url\n                    }));\n                }, timeout);\n            }\n        });\n        const cancel = function () {\n            if (timer == null) {\n                return;\n            }\n            clearTimeout(timer);\n            timer = null;\n        };\n        return { promise, cancel };\n    })();\n    const runningFetch = (function () {\n        return __awaiter(this, void 0, void 0, function* () {\n            for (let attempt = 0; attempt < attemptLimit; attempt++) {\n                let response = null;\n                try {\n                    response = yield getUrl(url, options);\n                    if (attempt < attemptLimit) {\n                        if (response.statusCode === 301 || response.statusCode === 302) {\n                            // Redirection; for now we only support absolute locataions\n                            const location = response.headers.location || \"\";\n                            if (options.method === \"GET\" && location.match(/^https:/)) {\n                                url = response.headers.location;\n                                continue;\n                            }\n                        }\n                        else if (response.statusCode === 429) {\n                            // Exponential back-off throttling\n                            let tryAgain = true;\n                            if (throttleCallback) {\n                                tryAgain = yield throttleCallback(attempt, url);\n                            }\n                            if (tryAgain) {\n                                let stall = 0;\n                                const retryAfter = response.headers[\"retry-after\"];\n                                if (typeof (retryAfter) === \"string\" && retryAfter.match(/^[1-9][0-9]*$/)) {\n                                    stall = parseInt(retryAfter) * 1000;\n                                }\n                                else {\n                                    stall = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                                }\n                                //console.log(\"Stalling 429\");\n                                yield staller(stall);\n                                continue;\n                            }\n                        }\n                    }\n                }\n                catch (error) {\n                    response = error.response;\n                    if (response == null) {\n                        runningTimeout.cancel();\n                        logger.throwError(\"missing response\", Logger.errors.SERVER_ERROR, {\n                            requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                            requestMethod: options.method,\n                            serverError: error,\n                            url: url\n                        });\n                    }\n                }\n                let body = response.body;\n                if (allow304 && response.statusCode === 304) {\n                    body = null;\n                }\n                else if (!errorPassThrough && (response.statusCode < 200 || response.statusCode >= 300)) {\n                    runningTimeout.cancel();\n                    logger.throwError(\"bad response\", Logger.errors.SERVER_ERROR, {\n                        status: response.statusCode,\n                        headers: response.headers,\n                        body: bodyify(body, ((response.headers) ? response.headers[\"content-type\"] : null)),\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                        requestMethod: options.method,\n                        url: url\n                    });\n                }\n                if (processFunc) {\n                    try {\n                        const result = yield processFunc(body, response);\n                        runningTimeout.cancel();\n                        return result;\n                    }\n                    catch (error) {\n                        // Allow the processFunc to trigger a throttle\n                        if (error.throttleRetry && attempt < attemptLimit) {\n                            let tryAgain = true;\n                            if (throttleCallback) {\n                                tryAgain = yield throttleCallback(attempt, url);\n                            }\n                            if (tryAgain) {\n                                const timeout = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                                //console.log(\"Stalling callback\");\n                                yield staller(timeout);\n                                continue;\n                            }\n                        }\n                        runningTimeout.cancel();\n                        logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n                            body: bodyify(body, ((response.headers) ? response.headers[\"content-type\"] : null)),\n                            error: error,\n                            requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                            requestMethod: options.method,\n                            url: url\n                        });\n                    }\n                }\n                runningTimeout.cancel();\n                // If we had a processFunc, it either returned a T or threw above.\n                // The \"body\" is now a Uint8Array.\n                return body;\n            }\n            return logger.throwError(\"failed response\", Logger.errors.SERVER_ERROR, {\n                requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                requestMethod: options.method,\n                url: url\n            });\n        });\n    })();\n    return Promise.race([runningTimeout.promise, runningFetch]);\n}\nexport function fetchJson(connection, json, processFunc) {\n    let processJsonFunc = (value, response) => {\n        let result = null;\n        if (value != null) {\n            try {\n                result = JSON.parse(toUtf8String(value));\n            }\n            catch (error) {\n                logger.throwError(\"invalid JSON\", Logger.errors.SERVER_ERROR, {\n                    body: value,\n                    error: error\n                });\n            }\n        }\n        if (processFunc) {\n            result = processFunc(result, response);\n        }\n        return result;\n    };\n    // If we have json to send, we must\n    // - add content-type of application/json (unless already overridden)\n    // - convert the json to bytes\n    let body = null;\n    if (json != null) {\n        body = toUtf8Bytes(json);\n        // Create a connection with the content-type set for JSON\n        const updated = (typeof (connection) === \"string\") ? ({ url: connection }) : shallowCopy(connection);\n        if (updated.headers) {\n            const hasContentType = (Object.keys(updated.headers).filter((k) => (k.toLowerCase() === \"content-type\")).length) !== 0;\n            if (!hasContentType) {\n                updated.headers = shallowCopy(updated.headers);\n                updated.headers[\"content-type\"] = \"application/json\";\n            }\n        }\n        else {\n            updated.headers = { \"content-type\": \"application/json\" };\n        }\n        connection = updated;\n    }\n    return _fetchData(connection, body, processJsonFunc);\n}\nexport function poll(func, options) {\n    if (!options) {\n        options = {};\n    }\n    options = shallowCopy(options);\n    if (options.floor == null) {\n        options.floor = 0;\n    }\n    if (options.ceiling == null) {\n        options.ceiling = 10000;\n    }\n    if (options.interval == null) {\n        options.interval = 250;\n    }\n    return new Promise(function (resolve, reject) {\n        let timer = null;\n        let done = false;\n        // Returns true if cancel was successful. Unsuccessful cancel means we're already done.\n        const cancel = () => {\n            if (done) {\n                return false;\n            }\n            done = true;\n            if (timer) {\n                clearTimeout(timer);\n            }\n            return true;\n        };\n        if (options.timeout) {\n            timer = setTimeout(() => {\n                if (cancel()) {\n                    reject(new Error(\"timeout\"));\n                }\n            }, options.timeout);\n        }\n        const retryLimit = options.retryLimit;\n        let attempt = 0;\n        function check() {\n            return func().then(function (result) {\n                // If we have a result, or are allowed null then we're done\n                if (result !== undefined) {\n                    if (cancel()) {\n                        resolve(result);\n                    }\n                }\n                else if (options.oncePoll) {\n                    options.oncePoll.once(\"poll\", check);\n                }\n                else if (options.onceBlock) {\n                    options.onceBlock.once(\"block\", check);\n                    // Otherwise, exponential back-off (up to 10s) our next request\n                }\n                else if (!done) {\n                    attempt++;\n                    if (attempt > retryLimit) {\n                        if (cancel()) {\n                            reject(new Error(\"retry limit reached\"));\n                        }\n                        return;\n                    }\n                    let timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                    if (timeout < options.floor) {\n                        timeout = options.floor;\n                    }\n                    if (timeout > options.ceiling) {\n                        timeout = options.ceiling;\n                    }\n                    setTimeout(check, timeout);\n                }\n                return null;\n            }, function (error) {\n                if (cancel()) {\n                    reject(error);\n                }\n            });\n        }\n        check();\n    });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}