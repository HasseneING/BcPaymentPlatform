{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { defineReadOnly, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nconst allowedTransactionKeys = [\"accessList\", \"ccipReadEnabled\", \"chainId\", \"customData\", \"data\", \"from\", \"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"to\", \"type\", \"value\"];\nconst forwardErrors = [Logger.errors.INSUFFICIENT_FUNDS, Logger.errors.NONCE_EXPIRED, Logger.errors.REPLACEMENT_UNDERPRICED];\n;\n;\nexport class Signer {\n  ///////////////////\n  // Sub-classes MUST call super\n  constructor() {\n    logger.checkAbstract(new.target, Signer);\n    defineReadOnly(this, \"_isSigner\", true);\n  }\n  ///////////////////\n  // Sub-classes MAY override these\n  getBalance(blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._checkProvider(\"getBalance\");\n      return yield this.provider.getBalance(this.getAddress(), blockTag);\n    });\n  }\n  getTransactionCount(blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._checkProvider(\"getTransactionCount\");\n      return yield this.provider.getTransactionCount(this.getAddress(), blockTag);\n    });\n  }\n  // Populates \"from\" if unspecified, and estimates the gas for the transaction\n  estimateGas(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._checkProvider(\"estimateGas\");\n      const tx = yield resolveProperties(this.checkTransaction(transaction));\n      return yield this.provider.estimateGas(tx);\n    });\n  }\n  // Populates \"from\" if unspecified, and calls with the transaction\n  call(transaction, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._checkProvider(\"call\");\n      const tx = yield resolveProperties(this.checkTransaction(transaction));\n      return yield this.provider.call(tx, blockTag);\n    });\n  }\n  // Populates all fields in a transaction, signs it and sends it to the network\n  sendTransaction(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._checkProvider(\"sendTransaction\");\n      const tx = yield this.populateTransaction(transaction);\n      const signedTx = yield this.signTransaction(tx);\n      return yield this.provider.sendTransaction(signedTx);\n    });\n  }\n  getChainId() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._checkProvider(\"getChainId\");\n      const network = yield this.provider.getNetwork();\n      return network.chainId;\n    });\n  }\n  getGasPrice() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._checkProvider(\"getGasPrice\");\n      return yield this.provider.getGasPrice();\n    });\n  }\n  getFeeData() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._checkProvider(\"getFeeData\");\n      return yield this.provider.getFeeData();\n    });\n  }\n  resolveName(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._checkProvider(\"resolveName\");\n      return yield this.provider.resolveName(name);\n    });\n  }\n  // Checks a transaction does not contain invalid keys and if\n  // no \"from\" is provided, populates it.\n  // - does NOT require a provider\n  // - adds \"from\" is not present\n  // - returns a COPY (safe to mutate the result)\n  // By default called from: (overriding these prevents it)\n  //   - call\n  //   - estimateGas\n  //   - populateTransaction (and therefor sendTransaction)\n  checkTransaction(transaction) {\n    for (const key in transaction) {\n      if (allowedTransactionKeys.indexOf(key) === -1) {\n        logger.throwArgumentError(\"invalid transaction key: \" + key, \"transaction\", transaction);\n      }\n    }\n    const tx = shallowCopy(transaction);\n    if (tx.from == null) {\n      tx.from = this.getAddress();\n    } else {\n      // Make sure any provided address matches this signer\n      tx.from = Promise.all([Promise.resolve(tx.from), this.getAddress()]).then(result => {\n        if (result[0].toLowerCase() !== result[1].toLowerCase()) {\n          logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n        }\n        return result[0];\n      });\n    }\n    return tx;\n  }\n  // Populates ALL keys for a transaction and checks that \"from\" matches\n  // this Signer. Should be used by sendTransaction but NOT by signTransaction.\n  // By default called from: (overriding these prevents it)\n  //   - sendTransaction\n  //\n  // Notes:\n  //  - We allow gasPrice for EIP-1559 as long as it matches maxFeePerGas\n  populateTransaction(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const tx = yield resolveProperties(this.checkTransaction(transaction));\n      if (tx.to != null) {\n        tx.to = Promise.resolve(tx.to).then(to => __awaiter(this, void 0, void 0, function* () {\n          if (to == null) {\n            return null;\n          }\n          const address = yield this.resolveName(to);\n          if (address == null) {\n            logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n          }\n          return address;\n        }));\n        // Prevent this error from causing an UnhandledPromiseException\n        tx.to.catch(error => {});\n      }\n      // Do not allow mixing pre-eip-1559 and eip-1559 properties\n      const hasEip1559 = tx.maxFeePerGas != null || tx.maxPriorityFeePerGas != null;\n      if (tx.gasPrice != null && (tx.type === 2 || hasEip1559)) {\n        logger.throwArgumentError(\"eip-1559 transaction do not support gasPrice\", \"transaction\", transaction);\n      } else if ((tx.type === 0 || tx.type === 1) && hasEip1559) {\n        logger.throwArgumentError(\"pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas\", \"transaction\", transaction);\n      }\n      if ((tx.type === 2 || tx.type == null) && tx.maxFeePerGas != null && tx.maxPriorityFeePerGas != null) {\n        // Fully-formed EIP-1559 transaction (skip getFeeData)\n        tx.type = 2;\n      } else if (tx.type === 0 || tx.type === 1) {\n        // Explicit Legacy or EIP-2930 transaction\n        // Populate missing gasPrice\n        if (tx.gasPrice == null) {\n          tx.gasPrice = this.getGasPrice();\n        }\n      } else {\n        // We need to get fee data to determine things\n        const feeData = yield this.getFeeData();\n        if (tx.type == null) {\n          // We need to auto-detect the intended type of this transaction...\n          if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {\n            // The network supports EIP-1559!\n            // Upgrade transaction from null to eip-1559\n            tx.type = 2;\n            if (tx.gasPrice != null) {\n              // Using legacy gasPrice property on an eip-1559 network,\n              // so use gasPrice as both fee properties\n              const gasPrice = tx.gasPrice;\n              delete tx.gasPrice;\n              tx.maxFeePerGas = gasPrice;\n              tx.maxPriorityFeePerGas = gasPrice;\n            } else {\n              // Populate missing fee data\n              if (tx.maxFeePerGas == null) {\n                tx.maxFeePerGas = feeData.maxFeePerGas;\n              }\n              if (tx.maxPriorityFeePerGas == null) {\n                tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n              }\n            }\n          } else if (feeData.gasPrice != null) {\n            // Network doesn't support EIP-1559...\n            // ...but they are trying to use EIP-1559 properties\n            if (hasEip1559) {\n              logger.throwError(\"network does not support EIP-1559\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"populateTransaction\"\n              });\n            }\n            // Populate missing fee data\n            if (tx.gasPrice == null) {\n              tx.gasPrice = feeData.gasPrice;\n            }\n            // Explicitly set untyped transaction to legacy\n            tx.type = 0;\n          } else {\n            // getFeeData has failed us.\n            logger.throwError(\"failed to get consistent fee data\", Logger.errors.UNSUPPORTED_OPERATION, {\n              operation: \"signer.getFeeData\"\n            });\n          }\n        } else if (tx.type === 2) {\n          // Explicitly using EIP-1559\n          // Populate missing fee data\n          if (tx.maxFeePerGas == null) {\n            tx.maxFeePerGas = feeData.maxFeePerGas;\n          }\n          if (tx.maxPriorityFeePerGas == null) {\n            tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n          }\n        }\n      }\n      if (tx.nonce == null) {\n        tx.nonce = this.getTransactionCount(\"pending\");\n      }\n      if (tx.gasLimit == null) {\n        tx.gasLimit = this.estimateGas(tx).catch(error => {\n          if (forwardErrors.indexOf(error.code) >= 0) {\n            throw error;\n          }\n          return logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error: error,\n            tx: tx\n          });\n        });\n      }\n      if (tx.chainId == null) {\n        tx.chainId = this.getChainId();\n      } else {\n        tx.chainId = Promise.all([Promise.resolve(tx.chainId), this.getChainId()]).then(results => {\n          if (results[1] !== 0 && results[0] !== results[1]) {\n            logger.throwArgumentError(\"chainId address mismatch\", \"transaction\", transaction);\n          }\n          return results[0];\n        });\n      }\n      return yield resolveProperties(tx);\n    });\n  }\n  ///////////////////\n  // Sub-classes SHOULD leave these alone\n  _checkProvider(operation) {\n    if (!this.provider) {\n      logger.throwError(\"missing provider\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: operation || \"_checkProvider\"\n      });\n    }\n  }\n  static isSigner(value) {\n    return !!(value && value._isSigner);\n  }\n}\nexport class VoidSigner extends Signer {\n  constructor(address, provider) {\n    super();\n    defineReadOnly(this, \"address\", address);\n    defineReadOnly(this, \"provider\", provider || null);\n  }\n  getAddress() {\n    return Promise.resolve(this.address);\n  }\n  _fail(message, operation) {\n    return Promise.resolve().then(() => {\n      logger.throwError(message, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: operation\n      });\n    });\n  }\n  signMessage(message) {\n    return this._fail(\"VoidSigner cannot sign messages\", \"signMessage\");\n  }\n  signTransaction(transaction) {\n    return this._fail(\"VoidSigner cannot sign transactions\", \"signTransaction\");\n  }\n  _signTypedData(domain, types, value) {\n    return this._fail(\"VoidSigner cannot sign typed data\", \"signTypedData\");\n  }\n  connect(provider) {\n    return new VoidSigner(this.address, provider);\n  }\n}","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","defineReadOnly","resolveProperties","shallowCopy","Logger","version","logger","allowedTransactionKeys","forwardErrors","errors","INSUFFICIENT_FUNDS","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","Signer","constructor","checkAbstract","new","target","getBalance","blockTag","_checkProvider","provider","getAddress","getTransactionCount","estimateGas","transaction","tx","checkTransaction","call","sendTransaction","populateTransaction","signedTx","signTransaction","getChainId","network","getNetwork","chainId","getGasPrice","getFeeData","resolveName","name","key","indexOf","throwArgumentError","from","all","toLowerCase","to","address","catch","error","hasEip1559","maxFeePerGas","maxPriorityFeePerGas","gasPrice","type","feeData","throwError","UNSUPPORTED_OPERATION","operation","nonce","gasLimit","code","UNPREDICTABLE_GAS_LIMIT","results","isSigner","_isSigner","VoidSigner","_fail","message","signMessage","_signTypedData","domain","types","connect"],"sources":["F:/DDesktop/MEAN_BC/mean-stack-authentication-authorization-master/angular-15-client/node_modules/@ethersproject/abstract-signer/lib.esm/index.js"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { defineReadOnly, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nconst allowedTransactionKeys = [\n    \"accessList\", \"ccipReadEnabled\", \"chainId\", \"customData\", \"data\", \"from\", \"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"to\", \"type\", \"value\"\n];\nconst forwardErrors = [\n    Logger.errors.INSUFFICIENT_FUNDS,\n    Logger.errors.NONCE_EXPIRED,\n    Logger.errors.REPLACEMENT_UNDERPRICED,\n];\n;\n;\nexport class Signer {\n    ///////////////////\n    // Sub-classes MUST call super\n    constructor() {\n        logger.checkAbstract(new.target, Signer);\n        defineReadOnly(this, \"_isSigner\", true);\n    }\n    ///////////////////\n    // Sub-classes MAY override these\n    getBalance(blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._checkProvider(\"getBalance\");\n            return yield this.provider.getBalance(this.getAddress(), blockTag);\n        });\n    }\n    getTransactionCount(blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._checkProvider(\"getTransactionCount\");\n            return yield this.provider.getTransactionCount(this.getAddress(), blockTag);\n        });\n    }\n    // Populates \"from\" if unspecified, and estimates the gas for the transaction\n    estimateGas(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._checkProvider(\"estimateGas\");\n            const tx = yield resolveProperties(this.checkTransaction(transaction));\n            return yield this.provider.estimateGas(tx);\n        });\n    }\n    // Populates \"from\" if unspecified, and calls with the transaction\n    call(transaction, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._checkProvider(\"call\");\n            const tx = yield resolveProperties(this.checkTransaction(transaction));\n            return yield this.provider.call(tx, blockTag);\n        });\n    }\n    // Populates all fields in a transaction, signs it and sends it to the network\n    sendTransaction(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._checkProvider(\"sendTransaction\");\n            const tx = yield this.populateTransaction(transaction);\n            const signedTx = yield this.signTransaction(tx);\n            return yield this.provider.sendTransaction(signedTx);\n        });\n    }\n    getChainId() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._checkProvider(\"getChainId\");\n            const network = yield this.provider.getNetwork();\n            return network.chainId;\n        });\n    }\n    getGasPrice() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._checkProvider(\"getGasPrice\");\n            return yield this.provider.getGasPrice();\n        });\n    }\n    getFeeData() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._checkProvider(\"getFeeData\");\n            return yield this.provider.getFeeData();\n        });\n    }\n    resolveName(name) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._checkProvider(\"resolveName\");\n            return yield this.provider.resolveName(name);\n        });\n    }\n    // Checks a transaction does not contain invalid keys and if\n    // no \"from\" is provided, populates it.\n    // - does NOT require a provider\n    // - adds \"from\" is not present\n    // - returns a COPY (safe to mutate the result)\n    // By default called from: (overriding these prevents it)\n    //   - call\n    //   - estimateGas\n    //   - populateTransaction (and therefor sendTransaction)\n    checkTransaction(transaction) {\n        for (const key in transaction) {\n            if (allowedTransactionKeys.indexOf(key) === -1) {\n                logger.throwArgumentError(\"invalid transaction key: \" + key, \"transaction\", transaction);\n            }\n        }\n        const tx = shallowCopy(transaction);\n        if (tx.from == null) {\n            tx.from = this.getAddress();\n        }\n        else {\n            // Make sure any provided address matches this signer\n            tx.from = Promise.all([\n                Promise.resolve(tx.from),\n                this.getAddress()\n            ]).then((result) => {\n                if (result[0].toLowerCase() !== result[1].toLowerCase()) {\n                    logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n                }\n                return result[0];\n            });\n        }\n        return tx;\n    }\n    // Populates ALL keys for a transaction and checks that \"from\" matches\n    // this Signer. Should be used by sendTransaction but NOT by signTransaction.\n    // By default called from: (overriding these prevents it)\n    //   - sendTransaction\n    //\n    // Notes:\n    //  - We allow gasPrice for EIP-1559 as long as it matches maxFeePerGas\n    populateTransaction(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const tx = yield resolveProperties(this.checkTransaction(transaction));\n            if (tx.to != null) {\n                tx.to = Promise.resolve(tx.to).then((to) => __awaiter(this, void 0, void 0, function* () {\n                    if (to == null) {\n                        return null;\n                    }\n                    const address = yield this.resolveName(to);\n                    if (address == null) {\n                        logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n                    }\n                    return address;\n                }));\n                // Prevent this error from causing an UnhandledPromiseException\n                tx.to.catch((error) => { });\n            }\n            // Do not allow mixing pre-eip-1559 and eip-1559 properties\n            const hasEip1559 = (tx.maxFeePerGas != null || tx.maxPriorityFeePerGas != null);\n            if (tx.gasPrice != null && (tx.type === 2 || hasEip1559)) {\n                logger.throwArgumentError(\"eip-1559 transaction do not support gasPrice\", \"transaction\", transaction);\n            }\n            else if ((tx.type === 0 || tx.type === 1) && hasEip1559) {\n                logger.throwArgumentError(\"pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas\", \"transaction\", transaction);\n            }\n            if ((tx.type === 2 || tx.type == null) && (tx.maxFeePerGas != null && tx.maxPriorityFeePerGas != null)) {\n                // Fully-formed EIP-1559 transaction (skip getFeeData)\n                tx.type = 2;\n            }\n            else if (tx.type === 0 || tx.type === 1) {\n                // Explicit Legacy or EIP-2930 transaction\n                // Populate missing gasPrice\n                if (tx.gasPrice == null) {\n                    tx.gasPrice = this.getGasPrice();\n                }\n            }\n            else {\n                // We need to get fee data to determine things\n                const feeData = yield this.getFeeData();\n                if (tx.type == null) {\n                    // We need to auto-detect the intended type of this transaction...\n                    if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {\n                        // The network supports EIP-1559!\n                        // Upgrade transaction from null to eip-1559\n                        tx.type = 2;\n                        if (tx.gasPrice != null) {\n                            // Using legacy gasPrice property on an eip-1559 network,\n                            // so use gasPrice as both fee properties\n                            const gasPrice = tx.gasPrice;\n                            delete tx.gasPrice;\n                            tx.maxFeePerGas = gasPrice;\n                            tx.maxPriorityFeePerGas = gasPrice;\n                        }\n                        else {\n                            // Populate missing fee data\n                            if (tx.maxFeePerGas == null) {\n                                tx.maxFeePerGas = feeData.maxFeePerGas;\n                            }\n                            if (tx.maxPriorityFeePerGas == null) {\n                                tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n                            }\n                        }\n                    }\n                    else if (feeData.gasPrice != null) {\n                        // Network doesn't support EIP-1559...\n                        // ...but they are trying to use EIP-1559 properties\n                        if (hasEip1559) {\n                            logger.throwError(\"network does not support EIP-1559\", Logger.errors.UNSUPPORTED_OPERATION, {\n                                operation: \"populateTransaction\"\n                            });\n                        }\n                        // Populate missing fee data\n                        if (tx.gasPrice == null) {\n                            tx.gasPrice = feeData.gasPrice;\n                        }\n                        // Explicitly set untyped transaction to legacy\n                        tx.type = 0;\n                    }\n                    else {\n                        // getFeeData has failed us.\n                        logger.throwError(\"failed to get consistent fee data\", Logger.errors.UNSUPPORTED_OPERATION, {\n                            operation: \"signer.getFeeData\"\n                        });\n                    }\n                }\n                else if (tx.type === 2) {\n                    // Explicitly using EIP-1559\n                    // Populate missing fee data\n                    if (tx.maxFeePerGas == null) {\n                        tx.maxFeePerGas = feeData.maxFeePerGas;\n                    }\n                    if (tx.maxPriorityFeePerGas == null) {\n                        tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n                    }\n                }\n            }\n            if (tx.nonce == null) {\n                tx.nonce = this.getTransactionCount(\"pending\");\n            }\n            if (tx.gasLimit == null) {\n                tx.gasLimit = this.estimateGas(tx).catch((error) => {\n                    if (forwardErrors.indexOf(error.code) >= 0) {\n                        throw error;\n                    }\n                    return logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n                        error: error,\n                        tx: tx\n                    });\n                });\n            }\n            if (tx.chainId == null) {\n                tx.chainId = this.getChainId();\n            }\n            else {\n                tx.chainId = Promise.all([\n                    Promise.resolve(tx.chainId),\n                    this.getChainId()\n                ]).then((results) => {\n                    if (results[1] !== 0 && results[0] !== results[1]) {\n                        logger.throwArgumentError(\"chainId address mismatch\", \"transaction\", transaction);\n                    }\n                    return results[0];\n                });\n            }\n            return yield resolveProperties(tx);\n        });\n    }\n    ///////////////////\n    // Sub-classes SHOULD leave these alone\n    _checkProvider(operation) {\n        if (!this.provider) {\n            logger.throwError(\"missing provider\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: (operation || \"_checkProvider\")\n            });\n        }\n    }\n    static isSigner(value) {\n        return !!(value && value._isSigner);\n    }\n}\nexport class VoidSigner extends Signer {\n    constructor(address, provider) {\n        super();\n        defineReadOnly(this, \"address\", address);\n        defineReadOnly(this, \"provider\", provider || null);\n    }\n    getAddress() {\n        return Promise.resolve(this.address);\n    }\n    _fail(message, operation) {\n        return Promise.resolve().then(() => {\n            logger.throwError(message, Logger.errors.UNSUPPORTED_OPERATION, { operation: operation });\n        });\n    }\n    signMessage(message) {\n        return this._fail(\"VoidSigner cannot sign messages\", \"signMessage\");\n    }\n    signTransaction(transaction) {\n        return this._fail(\"VoidSigner cannot sign transactions\", \"signTransaction\");\n    }\n    _signTypedData(domain, types, value) {\n        return this._fail(\"VoidSigner cannot sign typed data\", \"signTypedData\");\n    }\n    connect(provider) {\n        return new VoidSigner(this.address, provider);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}