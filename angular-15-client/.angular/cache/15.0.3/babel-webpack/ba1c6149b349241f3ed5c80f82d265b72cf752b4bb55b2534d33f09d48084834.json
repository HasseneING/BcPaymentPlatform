{"ast":null,"code":"\"use strict\";\n\nimport hash from \"hash.js\";\n//const _ripemd160 = _hash.ripemd160;\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { SupportedAlgorithm } from \"./types\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport function ripemd160(data) {\n  return \"0x\" + hash.ripemd160().update(arrayify(data)).digest(\"hex\");\n}\nexport function sha256(data) {\n  return \"0x\" + hash.sha256().update(arrayify(data)).digest(\"hex\");\n}\nexport function sha512(data) {\n  return \"0x\" + hash.sha512().update(arrayify(data)).digest(\"hex\");\n}\nexport function computeHmac(algorithm, key, data) {\n  if (!SupportedAlgorithm[algorithm]) {\n    logger.throwError(\"unsupported algorithm \" + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"hmac\",\n      algorithm: algorithm\n    });\n  }\n  return \"0x\" + hash.hmac(hash[algorithm], arrayify(key)).update(arrayify(data)).digest(\"hex\");\n}","map":{"version":3,"names":["hash","arrayify","SupportedAlgorithm","Logger","version","logger","ripemd160","data","update","digest","sha256","sha512","computeHmac","algorithm","key","throwError","errors","UNSUPPORTED_OPERATION","operation","hmac"],"sources":["F:/DDesktop/MEAN_BC/mean-stack-authentication-authorization-master/angular-15-client/node_modules/@ethersproject/sha2/lib.esm/sha2.js"],"sourcesContent":["\"use strict\";\nimport hash from \"hash.js\";\n//const _ripemd160 = _hash.ripemd160;\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { SupportedAlgorithm } from \"./types\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport function ripemd160(data) {\n    return \"0x\" + (hash.ripemd160().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha256(data) {\n    return \"0x\" + (hash.sha256().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha512(data) {\n    return \"0x\" + (hash.sha512().update(arrayify(data)).digest(\"hex\"));\n}\nexport function computeHmac(algorithm, key, data) {\n    if (!SupportedAlgorithm[algorithm]) {\n        logger.throwError(\"unsupported algorithm \" + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"hmac\",\n            algorithm: algorithm\n        });\n    }\n    return \"0x\" + hash.hmac(hash[algorithm], arrayify(key)).update(arrayify(data)).digest(\"hex\");\n}\n"],"mappings":"AAAA,YAAY;;AACZ,OAAOA,IAAI,MAAM,SAAS;AAC1B;AACA,SAASC,QAAQ,QAAQ,sBAAsB;AAC/C,SAASC,kBAAkB,QAAQ,SAAS;AAC5C,SAASC,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,OAAO,QAAQ,YAAY;AACpC,MAAMC,MAAM,GAAG,IAAIF,MAAM,CAACC,OAAO,CAAC;AAClC,OAAO,SAASE,SAAS,CAACC,IAAI,EAAE;EAC5B,OAAO,IAAI,GAAIP,IAAI,CAACM,SAAS,EAAE,CAACE,MAAM,CAACP,QAAQ,CAACM,IAAI,CAAC,CAAC,CAACE,MAAM,CAAC,KAAK,CAAE;AACzE;AACA,OAAO,SAASC,MAAM,CAACH,IAAI,EAAE;EACzB,OAAO,IAAI,GAAIP,IAAI,CAACU,MAAM,EAAE,CAACF,MAAM,CAACP,QAAQ,CAACM,IAAI,CAAC,CAAC,CAACE,MAAM,CAAC,KAAK,CAAE;AACtE;AACA,OAAO,SAASE,MAAM,CAACJ,IAAI,EAAE;EACzB,OAAO,IAAI,GAAIP,IAAI,CAACW,MAAM,EAAE,CAACH,MAAM,CAACP,QAAQ,CAACM,IAAI,CAAC,CAAC,CAACE,MAAM,CAAC,KAAK,CAAE;AACtE;AACA,OAAO,SAASG,WAAW,CAACC,SAAS,EAAEC,GAAG,EAAEP,IAAI,EAAE;EAC9C,IAAI,CAACL,kBAAkB,CAACW,SAAS,CAAC,EAAE;IAChCR,MAAM,CAACU,UAAU,CAAC,wBAAwB,GAAGF,SAAS,EAAEV,MAAM,CAACa,MAAM,CAACC,qBAAqB,EAAE;MACzFC,SAAS,EAAE,MAAM;MACjBL,SAAS,EAAEA;IACf,CAAC,CAAC;EACN;EACA,OAAO,IAAI,GAAGb,IAAI,CAACmB,IAAI,CAACnB,IAAI,CAACa,SAAS,CAAC,EAAEZ,QAAQ,CAACa,GAAG,CAAC,CAAC,CAACN,MAAM,CAACP,QAAQ,CAACM,IAAI,CAAC,CAAC,CAACE,MAAM,CAAC,KAAK,CAAC;AAChG"},"metadata":{},"sourceType":"module","externalDependencies":[]}