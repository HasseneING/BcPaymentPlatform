{"ast":null,"code":"\"use strict\";\n\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { showThrottleMessage } from \"./formatter\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nconst defaultProjectId = \"84842078b09946638c03157f83405213\";\nexport class InfuraWebSocketProvider extends WebSocketProvider {\n  constructor(network, apiKey) {\n    const provider = new InfuraProvider(network, apiKey);\n    const connection = provider.connection;\n    if (connection.password) {\n      logger.throwError(\"INFURA WebSocket project secrets unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"InfuraProvider.getWebSocketProvider()\"\n      });\n    }\n    const url = connection.url.replace(/^http/i, \"ws\").replace(\"/v3/\", \"/ws/v3/\");\n    super(url, network);\n    defineReadOnly(this, \"apiKey\", provider.projectId);\n    defineReadOnly(this, \"projectId\", provider.projectId);\n    defineReadOnly(this, \"projectSecret\", provider.projectSecret);\n  }\n  isCommunityResource() {\n    return this.projectId === defaultProjectId;\n  }\n}\nexport class InfuraProvider extends UrlJsonRpcProvider {\n  static getWebSocketProvider(network, apiKey) {\n    return new InfuraWebSocketProvider(network, apiKey);\n  }\n  static getApiKey(apiKey) {\n    const apiKeyObj = {\n      apiKey: defaultProjectId,\n      projectId: defaultProjectId,\n      projectSecret: null\n    };\n    if (apiKey == null) {\n      return apiKeyObj;\n    }\n    if (typeof apiKey === \"string\") {\n      apiKeyObj.projectId = apiKey;\n    } else if (apiKey.projectSecret != null) {\n      logger.assertArgument(typeof apiKey.projectId === \"string\", \"projectSecret requires a projectId\", \"projectId\", apiKey.projectId);\n      logger.assertArgument(typeof apiKey.projectSecret === \"string\", \"invalid projectSecret\", \"projectSecret\", \"[REDACTED]\");\n      apiKeyObj.projectId = apiKey.projectId;\n      apiKeyObj.projectSecret = apiKey.projectSecret;\n    } else if (apiKey.projectId) {\n      apiKeyObj.projectId = apiKey.projectId;\n    }\n    apiKeyObj.apiKey = apiKeyObj.projectId;\n    return apiKeyObj;\n  }\n  static getUrl(network, apiKey) {\n    let host = null;\n    switch (network ? network.name : \"unknown\") {\n      case \"homestead\":\n        host = \"mainnet.infura.io\";\n        break;\n      case \"goerli\":\n        host = \"goerli.infura.io\";\n        break;\n      case \"sepolia\":\n        host = \"sepolia.infura.io\";\n        break;\n      case \"matic\":\n        host = \"polygon-mainnet.infura.io\";\n        break;\n      case \"maticmum\":\n        host = \"polygon-mumbai.infura.io\";\n        break;\n      case \"optimism\":\n        host = \"optimism-mainnet.infura.io\";\n        break;\n      case \"optimism-goerli\":\n        host = \"optimism-goerli.infura.io\";\n        break;\n      case \"arbitrum\":\n        host = \"arbitrum-mainnet.infura.io\";\n        break;\n      case \"arbitrum-goerli\":\n        host = \"arbitrum-goerli.infura.io\";\n        break;\n      default:\n        logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"network\",\n          value: network\n        });\n    }\n    const connection = {\n      allowGzip: true,\n      url: \"https:/\" + \"/\" + host + \"/v3/\" + apiKey.projectId,\n      throttleCallback: (attempt, url) => {\n        if (apiKey.projectId === defaultProjectId) {\n          showThrottleMessage();\n        }\n        return Promise.resolve(true);\n      }\n    };\n    if (apiKey.projectSecret != null) {\n      connection.user = \"\";\n      connection.password = apiKey.projectSecret;\n    }\n    return connection;\n  }\n  isCommunityResource() {\n    return this.projectId === defaultProjectId;\n  }\n}","map":{"version":3,"names":["defineReadOnly","WebSocketProvider","showThrottleMessage","Logger","version","logger","UrlJsonRpcProvider","defaultProjectId","InfuraWebSocketProvider","constructor","network","apiKey","provider","InfuraProvider","connection","password","throwError","errors","UNSUPPORTED_OPERATION","operation","url","replace","projectId","projectSecret","isCommunityResource","getWebSocketProvider","getApiKey","apiKeyObj","assertArgument","getUrl","host","name","INVALID_ARGUMENT","argument","value","allowGzip","throttleCallback","attempt","Promise","resolve","user"],"sources":["F:/DDesktop/MEAN_BC/mean-stack-authentication-authorization-master/angular-15-client/node_modules/@ethersproject/providers/lib.esm/infura-provider.js"],"sourcesContent":["\"use strict\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { showThrottleMessage } from \"./formatter\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nconst defaultProjectId = \"84842078b09946638c03157f83405213\";\nexport class InfuraWebSocketProvider extends WebSocketProvider {\n    constructor(network, apiKey) {\n        const provider = new InfuraProvider(network, apiKey);\n        const connection = provider.connection;\n        if (connection.password) {\n            logger.throwError(\"INFURA WebSocket project secrets unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"InfuraProvider.getWebSocketProvider()\"\n            });\n        }\n        const url = connection.url.replace(/^http/i, \"ws\").replace(\"/v3/\", \"/ws/v3/\");\n        super(url, network);\n        defineReadOnly(this, \"apiKey\", provider.projectId);\n        defineReadOnly(this, \"projectId\", provider.projectId);\n        defineReadOnly(this, \"projectSecret\", provider.projectSecret);\n    }\n    isCommunityResource() {\n        return (this.projectId === defaultProjectId);\n    }\n}\nexport class InfuraProvider extends UrlJsonRpcProvider {\n    static getWebSocketProvider(network, apiKey) {\n        return new InfuraWebSocketProvider(network, apiKey);\n    }\n    static getApiKey(apiKey) {\n        const apiKeyObj = {\n            apiKey: defaultProjectId,\n            projectId: defaultProjectId,\n            projectSecret: null\n        };\n        if (apiKey == null) {\n            return apiKeyObj;\n        }\n        if (typeof (apiKey) === \"string\") {\n            apiKeyObj.projectId = apiKey;\n        }\n        else if (apiKey.projectSecret != null) {\n            logger.assertArgument((typeof (apiKey.projectId) === \"string\"), \"projectSecret requires a projectId\", \"projectId\", apiKey.projectId);\n            logger.assertArgument((typeof (apiKey.projectSecret) === \"string\"), \"invalid projectSecret\", \"projectSecret\", \"[REDACTED]\");\n            apiKeyObj.projectId = apiKey.projectId;\n            apiKeyObj.projectSecret = apiKey.projectSecret;\n        }\n        else if (apiKey.projectId) {\n            apiKeyObj.projectId = apiKey.projectId;\n        }\n        apiKeyObj.apiKey = apiKeyObj.projectId;\n        return apiKeyObj;\n    }\n    static getUrl(network, apiKey) {\n        let host = null;\n        switch (network ? network.name : \"unknown\") {\n            case \"homestead\":\n                host = \"mainnet.infura.io\";\n                break;\n            case \"goerli\":\n                host = \"goerli.infura.io\";\n                break;\n            case \"sepolia\":\n                host = \"sepolia.infura.io\";\n                break;\n            case \"matic\":\n                host = \"polygon-mainnet.infura.io\";\n                break;\n            case \"maticmum\":\n                host = \"polygon-mumbai.infura.io\";\n                break;\n            case \"optimism\":\n                host = \"optimism-mainnet.infura.io\";\n                break;\n            case \"optimism-goerli\":\n                host = \"optimism-goerli.infura.io\";\n                break;\n            case \"arbitrum\":\n                host = \"arbitrum-mainnet.infura.io\";\n                break;\n            case \"arbitrum-goerli\":\n                host = \"arbitrum-goerli.infura.io\";\n                break;\n            default:\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n        }\n        const connection = {\n            allowGzip: true,\n            url: (\"https:/\" + \"/\" + host + \"/v3/\" + apiKey.projectId),\n            throttleCallback: (attempt, url) => {\n                if (apiKey.projectId === defaultProjectId) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n        if (apiKey.projectSecret != null) {\n            connection.user = \"\";\n            connection.password = apiKey.projectSecret;\n        }\n        return connection;\n    }\n    isCommunityResource() {\n        return (this.projectId === defaultProjectId);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}