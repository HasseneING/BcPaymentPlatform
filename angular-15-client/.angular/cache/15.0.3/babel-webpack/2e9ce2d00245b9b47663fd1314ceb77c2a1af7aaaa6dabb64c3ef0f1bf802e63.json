{"ast":null,"code":"\"use strict\";\n\nimport { getAddress } from \"@ethersproject/address\";\nexport function isCrowdsaleWallet(json) {\n  let data = null;\n  try {\n    data = JSON.parse(json);\n  } catch (error) {\n    return false;\n  }\n  return data.encseed && data.ethaddr;\n}\nexport function isKeystoreWallet(json) {\n  let data = null;\n  try {\n    data = JSON.parse(json);\n  } catch (error) {\n    return false;\n  }\n  if (!data.version || parseInt(data.version) !== data.version || parseInt(data.version) !== 3) {\n    return false;\n  }\n  // @TODO: Put more checks to make sure it has kdf, iv and all that good stuff\n  return true;\n}\n//export function isJsonWallet(json: string): boolean {\n//    return (isSecretStorageWallet(json) || isCrowdsaleWallet(json));\n//}\nexport function getJsonWalletAddress(json) {\n  if (isCrowdsaleWallet(json)) {\n    try {\n      return getAddress(JSON.parse(json).ethaddr);\n    } catch (error) {\n      return null;\n    }\n  }\n  if (isKeystoreWallet(json)) {\n    try {\n      return getAddress(JSON.parse(json).address);\n    } catch (error) {\n      return null;\n    }\n  }\n  return null;\n}","map":{"version":3,"names":["getAddress","isCrowdsaleWallet","json","data","JSON","parse","error","encseed","ethaddr","isKeystoreWallet","version","parseInt","getJsonWalletAddress","address"],"sources":["F:/DDesktop/MEAN_BC/mean-stack-authentication-authorization-master/angular-15-client/node_modules/@ethersproject/json-wallets/lib.esm/inspect.js"],"sourcesContent":["\"use strict\";\nimport { getAddress } from \"@ethersproject/address\";\nexport function isCrowdsaleWallet(json) {\n    let data = null;\n    try {\n        data = JSON.parse(json);\n    }\n    catch (error) {\n        return false;\n    }\n    return (data.encseed && data.ethaddr);\n}\nexport function isKeystoreWallet(json) {\n    let data = null;\n    try {\n        data = JSON.parse(json);\n    }\n    catch (error) {\n        return false;\n    }\n    if (!data.version || parseInt(data.version) !== data.version || parseInt(data.version) !== 3) {\n        return false;\n    }\n    // @TODO: Put more checks to make sure it has kdf, iv and all that good stuff\n    return true;\n}\n//export function isJsonWallet(json: string): boolean {\n//    return (isSecretStorageWallet(json) || isCrowdsaleWallet(json));\n//}\nexport function getJsonWalletAddress(json) {\n    if (isCrowdsaleWallet(json)) {\n        try {\n            return getAddress(JSON.parse(json).ethaddr);\n        }\n        catch (error) {\n            return null;\n        }\n    }\n    if (isKeystoreWallet(json)) {\n        try {\n            return getAddress(JSON.parse(json).address);\n        }\n        catch (error) {\n            return null;\n        }\n    }\n    return null;\n}\n"],"mappings":"AAAA,YAAY;;AACZ,SAASA,UAAU,QAAQ,wBAAwB;AACnD,OAAO,SAASC,iBAAiB,CAACC,IAAI,EAAE;EACpC,IAAIC,IAAI,GAAG,IAAI;EACf,IAAI;IACAA,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,IAAI,CAAC;EAC3B,CAAC,CACD,OAAOI,KAAK,EAAE;IACV,OAAO,KAAK;EAChB;EACA,OAAQH,IAAI,CAACI,OAAO,IAAIJ,IAAI,CAACK,OAAO;AACxC;AACA,OAAO,SAASC,gBAAgB,CAACP,IAAI,EAAE;EACnC,IAAIC,IAAI,GAAG,IAAI;EACf,IAAI;IACAA,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,IAAI,CAAC;EAC3B,CAAC,CACD,OAAOI,KAAK,EAAE;IACV,OAAO,KAAK;EAChB;EACA,IAAI,CAACH,IAAI,CAACO,OAAO,IAAIC,QAAQ,CAACR,IAAI,CAACO,OAAO,CAAC,KAAKP,IAAI,CAACO,OAAO,IAAIC,QAAQ,CAACR,IAAI,CAACO,OAAO,CAAC,KAAK,CAAC,EAAE;IAC1F,OAAO,KAAK;EAChB;EACA;EACA,OAAO,IAAI;AACf;AACA;AACA;AACA;AACA,OAAO,SAASE,oBAAoB,CAACV,IAAI,EAAE;EACvC,IAAID,iBAAiB,CAACC,IAAI,CAAC,EAAE;IACzB,IAAI;MACA,OAAOF,UAAU,CAACI,IAAI,CAACC,KAAK,CAACH,IAAI,CAAC,CAACM,OAAO,CAAC;IAC/C,CAAC,CACD,OAAOF,KAAK,EAAE;MACV,OAAO,IAAI;IACf;EACJ;EACA,IAAIG,gBAAgB,CAACP,IAAI,CAAC,EAAE;IACxB,IAAI;MACA,OAAOF,UAAU,CAACI,IAAI,CAACC,KAAK,CAACH,IAAI,CAAC,CAACW,OAAO,CAAC;IAC/C,CAAC,CACD,OAAOP,KAAK,EAAE;MACV,OAAO,IAAI;IACf;EACJ;EACA,OAAO,IAAI;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}