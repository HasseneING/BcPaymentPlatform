{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { checkResultErrors, Indexed, Interface } from \"@ethersproject/abi\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { Signer, VoidSigner } from \"@ethersproject/abstract-signer\";\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexlify, isBytes, isHexString } from \"@ethersproject/bytes\";\nimport { defineReadOnly, deepCopy, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n;\n;\n///////////////////////////////\nconst allowedTransactionKeys = {\n  chainId: true,\n  data: true,\n  from: true,\n  gasLimit: true,\n  gasPrice: true,\n  nonce: true,\n  to: true,\n  value: true,\n  type: true,\n  accessList: true,\n  maxFeePerGas: true,\n  maxPriorityFeePerGas: true,\n  customData: true,\n  ccipReadEnabled: true\n};\nfunction resolveName(resolver, nameOrPromise) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const name = yield nameOrPromise;\n    if (typeof name !== \"string\") {\n      logger.throwArgumentError(\"invalid address or ENS name\", \"name\", name);\n    }\n    // If it is already an address, just use it (after adding checksum)\n    try {\n      return getAddress(name);\n    } catch (error) {}\n    if (!resolver) {\n      logger.throwError(\"a provider or signer is needed to resolve ENS names\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"resolveName\"\n      });\n    }\n    const address = yield resolver.resolveName(name);\n    if (address == null) {\n      logger.throwArgumentError(\"resolver or addr is not configured for ENS name\", \"name\", name);\n    }\n    return address;\n  });\n}\n// Recursively replaces ENS names with promises to resolve the name and resolves all properties\nfunction resolveAddresses(resolver, value, paramType) {\n  return __awaiter(this, void 0, void 0, function* () {\n    if (Array.isArray(paramType)) {\n      return yield Promise.all(paramType.map((paramType, index) => {\n        return resolveAddresses(resolver, Array.isArray(value) ? value[index] : value[paramType.name], paramType);\n      }));\n    }\n    if (paramType.type === \"address\") {\n      return yield resolveName(resolver, value);\n    }\n    if (paramType.type === \"tuple\") {\n      return yield resolveAddresses(resolver, value, paramType.components);\n    }\n    if (paramType.baseType === \"array\") {\n      if (!Array.isArray(value)) {\n        return Promise.reject(logger.makeError(\"invalid value for array\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"value\",\n          value\n        }));\n      }\n      return yield Promise.all(value.map(v => resolveAddresses(resolver, v, paramType.arrayChildren)));\n    }\n    return value;\n  });\n}\nfunction populateTransaction(contract, fragment, args) {\n  return __awaiter(this, void 0, void 0, function* () {\n    // If an extra argument is given, it is overrides\n    let overrides = {};\n    if (args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === \"object\") {\n      overrides = shallowCopy(args.pop());\n    }\n    // Make sure the parameter count matches\n    logger.checkArgumentCount(args.length, fragment.inputs.length, \"passed to contract\");\n    // Populate \"from\" override (allow promises)\n    if (contract.signer) {\n      if (overrides.from) {\n        // Contracts with a Signer are from the Signer's frame-of-reference;\n        // but we allow overriding \"from\" if it matches the signer\n        overrides.from = resolveProperties({\n          override: resolveName(contract.signer, overrides.from),\n          signer: contract.signer.getAddress()\n        }).then(check => __awaiter(this, void 0, void 0, function* () {\n          if (getAddress(check.signer) !== check.override) {\n            logger.throwError(\"Contract with a Signer cannot override from\", Logger.errors.UNSUPPORTED_OPERATION, {\n              operation: \"overrides.from\"\n            });\n          }\n          return check.override;\n        }));\n      } else {\n        overrides.from = contract.signer.getAddress();\n      }\n    } else if (overrides.from) {\n      overrides.from = resolveName(contract.provider, overrides.from);\n      //} else {\n      // Contracts without a signer can override \"from\", and if\n      // unspecified the zero address is used\n      //overrides.from = AddressZero;\n    }\n    // Wait for all dependencies to be resolved (prefer the signer over the provider)\n    const resolved = yield resolveProperties({\n      args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),\n      address: contract.resolvedAddress,\n      overrides: resolveProperties(overrides) || {}\n    });\n    // The ABI coded transaction\n    const data = contract.interface.encodeFunctionData(fragment, resolved.args);\n    const tx = {\n      data: data,\n      to: resolved.address\n    };\n    // Resolved Overrides\n    const ro = resolved.overrides;\n    // Populate simple overrides\n    if (ro.nonce != null) {\n      tx.nonce = BigNumber.from(ro.nonce).toNumber();\n    }\n    if (ro.gasLimit != null) {\n      tx.gasLimit = BigNumber.from(ro.gasLimit);\n    }\n    if (ro.gasPrice != null) {\n      tx.gasPrice = BigNumber.from(ro.gasPrice);\n    }\n    if (ro.maxFeePerGas != null) {\n      tx.maxFeePerGas = BigNumber.from(ro.maxFeePerGas);\n    }\n    if (ro.maxPriorityFeePerGas != null) {\n      tx.maxPriorityFeePerGas = BigNumber.from(ro.maxPriorityFeePerGas);\n    }\n    if (ro.from != null) {\n      tx.from = ro.from;\n    }\n    if (ro.type != null) {\n      tx.type = ro.type;\n    }\n    if (ro.accessList != null) {\n      tx.accessList = accessListify(ro.accessList);\n    }\n    // If there was no \"gasLimit\" override, but the ABI specifies a default, use it\n    if (tx.gasLimit == null && fragment.gas != null) {\n      // Compute the intrinsic gas cost for this transaction\n      // @TODO: This is based on the yellow paper as of Petersburg; this is something\n      // we may wish to parameterize in v6 as part of the Network object. Since this\n      // is always a non-nil to address, we can ignore G_create, but may wish to add\n      // similar logic to the ContractFactory.\n      let intrinsic = 21000;\n      const bytes = arrayify(data);\n      for (let i = 0; i < bytes.length; i++) {\n        intrinsic += 4;\n        if (bytes[i]) {\n          intrinsic += 64;\n        }\n      }\n      tx.gasLimit = BigNumber.from(fragment.gas).add(intrinsic);\n    }\n    // Populate \"value\" override\n    if (ro.value) {\n      const roValue = BigNumber.from(ro.value);\n      if (!roValue.isZero() && !fragment.payable) {\n        logger.throwError(\"non-payable method cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"overrides.value\",\n          value: overrides.value\n        });\n      }\n      tx.value = roValue;\n    }\n    if (ro.customData) {\n      tx.customData = shallowCopy(ro.customData);\n    }\n    if (ro.ccipReadEnabled) {\n      tx.ccipReadEnabled = !!ro.ccipReadEnabled;\n    }\n    // Remove the overrides\n    delete overrides.nonce;\n    delete overrides.gasLimit;\n    delete overrides.gasPrice;\n    delete overrides.from;\n    delete overrides.value;\n    delete overrides.type;\n    delete overrides.accessList;\n    delete overrides.maxFeePerGas;\n    delete overrides.maxPriorityFeePerGas;\n    delete overrides.customData;\n    delete overrides.ccipReadEnabled;\n    // Make sure there are no stray overrides, which may indicate a\n    // typo or using an unsupported key.\n    const leftovers = Object.keys(overrides).filter(key => overrides[key] != null);\n    if (leftovers.length) {\n      logger.throwError(`cannot override ${leftovers.map(l => JSON.stringify(l)).join(\",\")}`, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"overrides\",\n        overrides: leftovers\n      });\n    }\n    return tx;\n  });\n}\nfunction buildPopulate(contract, fragment) {\n  return function (...args) {\n    return populateTransaction(contract, fragment, args);\n  };\n}\nfunction buildEstimate(contract, fragment) {\n  const signerOrProvider = contract.signer || contract.provider;\n  return function (...args) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!signerOrProvider) {\n        logger.throwError(\"estimate require a provider or signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"estimateGas\"\n        });\n      }\n      const tx = yield populateTransaction(contract, fragment, args);\n      return yield signerOrProvider.estimateGas(tx);\n    });\n  };\n}\nfunction addContractWait(contract, tx) {\n  const wait = tx.wait.bind(tx);\n  tx.wait = confirmations => {\n    return wait(confirmations).then(receipt => {\n      receipt.events = receipt.logs.map(log => {\n        let event = deepCopy(log);\n        let parsed = null;\n        try {\n          parsed = contract.interface.parseLog(log);\n        } catch (e) {}\n        // Successfully parsed the event log; include it\n        if (parsed) {\n          event.args = parsed.args;\n          event.decode = (data, topics) => {\n            return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);\n          };\n          event.event = parsed.name;\n          event.eventSignature = parsed.signature;\n        }\n        // Useful operations\n        event.removeListener = () => {\n          return contract.provider;\n        };\n        event.getBlock = () => {\n          return contract.provider.getBlock(receipt.blockHash);\n        };\n        event.getTransaction = () => {\n          return contract.provider.getTransaction(receipt.transactionHash);\n        };\n        event.getTransactionReceipt = () => {\n          return Promise.resolve(receipt);\n        };\n        return event;\n      });\n      return receipt;\n    });\n  };\n}\nfunction buildCall(contract, fragment, collapseSimple) {\n  const signerOrProvider = contract.signer || contract.provider;\n  return function (...args) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Extract the \"blockTag\" override if present\n      let blockTag = undefined;\n      if (args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === \"object\") {\n        const overrides = shallowCopy(args.pop());\n        if (overrides.blockTag != null) {\n          blockTag = yield overrides.blockTag;\n        }\n        delete overrides.blockTag;\n        args.push(overrides);\n      }\n      // If the contract was just deployed, wait until it is mined\n      if (contract.deployTransaction != null) {\n        yield contract._deployed(blockTag);\n      }\n      // Call a node and get the result\n      const tx = yield populateTransaction(contract, fragment, args);\n      const result = yield signerOrProvider.call(tx, blockTag);\n      try {\n        let value = contract.interface.decodeFunctionResult(fragment, result);\n        if (collapseSimple && fragment.outputs.length === 1) {\n          value = value[0];\n        }\n        return value;\n      } catch (error) {\n        if (error.code === Logger.errors.CALL_EXCEPTION) {\n          error.address = contract.address;\n          error.args = args;\n          error.transaction = tx;\n        }\n        throw error;\n      }\n    });\n  };\n}\nfunction buildSend(contract, fragment) {\n  return function (...args) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!contract.signer) {\n        logger.throwError(\"sending a transaction requires a signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"sendTransaction\"\n        });\n      }\n      // If the contract was just deployed, wait until it is mined\n      if (contract.deployTransaction != null) {\n        yield contract._deployed();\n      }\n      const txRequest = yield populateTransaction(contract, fragment, args);\n      const tx = yield contract.signer.sendTransaction(txRequest);\n      // Tweak the tx.wait so the receipt has extra properties\n      addContractWait(contract, tx);\n      return tx;\n    });\n  };\n}\nfunction buildDefault(contract, fragment, collapseSimple) {\n  if (fragment.constant) {\n    return buildCall(contract, fragment, collapseSimple);\n  }\n  return buildSend(contract, fragment);\n}\nfunction getEventTag(filter) {\n  if (filter.address && (filter.topics == null || filter.topics.length === 0)) {\n    return \"*\";\n  }\n  return (filter.address || \"*\") + \"@\" + (filter.topics ? filter.topics.map(topic => {\n    if (Array.isArray(topic)) {\n      return topic.join(\"|\");\n    }\n    return topic;\n  }).join(\":\") : \"\");\n}\nclass RunningEvent {\n  constructor(tag, filter) {\n    defineReadOnly(this, \"tag\", tag);\n    defineReadOnly(this, \"filter\", filter);\n    this._listeners = [];\n  }\n  addListener(listener, once) {\n    this._listeners.push({\n      listener: listener,\n      once: once\n    });\n  }\n  removeListener(listener) {\n    let done = false;\n    this._listeners = this._listeners.filter(item => {\n      if (done || item.listener !== listener) {\n        return true;\n      }\n      done = true;\n      return false;\n    });\n  }\n  removeAllListeners() {\n    this._listeners = [];\n  }\n  listeners() {\n    return this._listeners.map(i => i.listener);\n  }\n  listenerCount() {\n    return this._listeners.length;\n  }\n  run(args) {\n    const listenerCount = this.listenerCount();\n    this._listeners = this._listeners.filter(item => {\n      const argsCopy = args.slice();\n      // Call the callback in the next event loop\n      setTimeout(() => {\n        item.listener.apply(this, argsCopy);\n      }, 0);\n      // Reschedule it if it not \"once\"\n      return !item.once;\n    });\n    return listenerCount;\n  }\n  prepareEvent(event) {}\n  // Returns the array that will be applied to an emit\n  getEmit(event) {\n    return [event];\n  }\n}\nclass ErrorRunningEvent extends RunningEvent {\n  constructor() {\n    super(\"error\", null);\n  }\n}\n// @TODO Fragment should inherit Wildcard? and just override getEmit?\n//       or have a common abstract super class, with enough constructor\n//       options to configure both.\n// A Fragment Event will populate all the properties that Wildcard\n// will, and additionally dereference the arguments when emitting\nclass FragmentRunningEvent extends RunningEvent {\n  constructor(address, contractInterface, fragment, topics) {\n    const filter = {\n      address: address\n    };\n    let topic = contractInterface.getEventTopic(fragment);\n    if (topics) {\n      if (topic !== topics[0]) {\n        logger.throwArgumentError(\"topic mismatch\", \"topics\", topics);\n      }\n      filter.topics = topics.slice();\n    } else {\n      filter.topics = [topic];\n    }\n    super(getEventTag(filter), filter);\n    defineReadOnly(this, \"address\", address);\n    defineReadOnly(this, \"interface\", contractInterface);\n    defineReadOnly(this, \"fragment\", fragment);\n  }\n  prepareEvent(event) {\n    super.prepareEvent(event);\n    event.event = this.fragment.name;\n    event.eventSignature = this.fragment.format();\n    event.decode = (data, topics) => {\n      return this.interface.decodeEventLog(this.fragment, data, topics);\n    };\n    try {\n      event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);\n    } catch (error) {\n      event.args = null;\n      event.decodeError = error;\n    }\n  }\n  getEmit(event) {\n    const errors = checkResultErrors(event.args);\n    if (errors.length) {\n      throw errors[0].error;\n    }\n    const args = (event.args || []).slice();\n    args.push(event);\n    return args;\n  }\n}\n// A Wildcard Event will attempt to populate:\n//  - event            The name of the event name\n//  - eventSignature   The full signature of the event\n//  - decode           A function to decode data and topics\n//  - args             The decoded data and topics\nclass WildcardRunningEvent extends RunningEvent {\n  constructor(address, contractInterface) {\n    super(\"*\", {\n      address: address\n    });\n    defineReadOnly(this, \"address\", address);\n    defineReadOnly(this, \"interface\", contractInterface);\n  }\n  prepareEvent(event) {\n    super.prepareEvent(event);\n    try {\n      const parsed = this.interface.parseLog(event);\n      event.event = parsed.name;\n      event.eventSignature = parsed.signature;\n      event.decode = (data, topics) => {\n        return this.interface.decodeEventLog(parsed.eventFragment, data, topics);\n      };\n      event.args = parsed.args;\n    } catch (error) {\n      // No matching event\n    }\n  }\n}\nexport class BaseContract {\n  constructor(addressOrName, contractInterface, signerOrProvider) {\n    // @TODO: Maybe still check the addressOrName looks like a valid address or name?\n    //address = getAddress(address);\n    defineReadOnly(this, \"interface\", getStatic(new.target, \"getInterface\")(contractInterface));\n    if (signerOrProvider == null) {\n      defineReadOnly(this, \"provider\", null);\n      defineReadOnly(this, \"signer\", null);\n    } else if (Signer.isSigner(signerOrProvider)) {\n      defineReadOnly(this, \"provider\", signerOrProvider.provider || null);\n      defineReadOnly(this, \"signer\", signerOrProvider);\n    } else if (Provider.isProvider(signerOrProvider)) {\n      defineReadOnly(this, \"provider\", signerOrProvider);\n      defineReadOnly(this, \"signer\", null);\n    } else {\n      logger.throwArgumentError(\"invalid signer or provider\", \"signerOrProvider\", signerOrProvider);\n    }\n    defineReadOnly(this, \"callStatic\", {});\n    defineReadOnly(this, \"estimateGas\", {});\n    defineReadOnly(this, \"functions\", {});\n    defineReadOnly(this, \"populateTransaction\", {});\n    defineReadOnly(this, \"filters\", {});\n    {\n      const uniqueFilters = {};\n      Object.keys(this.interface.events).forEach(eventSignature => {\n        const event = this.interface.events[eventSignature];\n        defineReadOnly(this.filters, eventSignature, (...args) => {\n          return {\n            address: this.address,\n            topics: this.interface.encodeFilterTopics(event, args)\n          };\n        });\n        if (!uniqueFilters[event.name]) {\n          uniqueFilters[event.name] = [];\n        }\n        uniqueFilters[event.name].push(eventSignature);\n      });\n      Object.keys(uniqueFilters).forEach(name => {\n        const filters = uniqueFilters[name];\n        if (filters.length === 1) {\n          defineReadOnly(this.filters, name, this.filters[filters[0]]);\n        } else {\n          logger.warn(`Duplicate definition of ${name} (${filters.join(\", \")})`);\n        }\n      });\n    }\n    defineReadOnly(this, \"_runningEvents\", {});\n    defineReadOnly(this, \"_wrappedEmits\", {});\n    if (addressOrName == null) {\n      logger.throwArgumentError(\"invalid contract address or ENS name\", \"addressOrName\", addressOrName);\n    }\n    defineReadOnly(this, \"address\", addressOrName);\n    if (this.provider) {\n      defineReadOnly(this, \"resolvedAddress\", resolveName(this.provider, addressOrName));\n    } else {\n      try {\n        defineReadOnly(this, \"resolvedAddress\", Promise.resolve(getAddress(addressOrName)));\n      } catch (error) {\n        // Without a provider, we cannot use ENS names\n        logger.throwError(\"provider is required to use ENS name as contract address\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"new Contract\"\n        });\n      }\n    }\n    // Swallow bad ENS names to prevent Unhandled Exceptions\n    this.resolvedAddress.catch(e => {});\n    const uniqueNames = {};\n    const uniqueSignatures = {};\n    Object.keys(this.interface.functions).forEach(signature => {\n      const fragment = this.interface.functions[signature];\n      // Check that the signature is unique; if not the ABI generation has\n      // not been cleaned or may be incorrectly generated\n      if (uniqueSignatures[signature]) {\n        logger.warn(`Duplicate ABI entry for ${JSON.stringify(signature)}`);\n        return;\n      }\n      uniqueSignatures[signature] = true;\n      // Track unique names; we only expose bare named functions if they\n      // are ambiguous\n      {\n        const name = fragment.name;\n        if (!uniqueNames[`%${name}`]) {\n          uniqueNames[`%${name}`] = [];\n        }\n        uniqueNames[`%${name}`].push(signature);\n      }\n      if (this[signature] == null) {\n        defineReadOnly(this, signature, buildDefault(this, fragment, true));\n      }\n      // We do not collapse simple calls on this bucket, which allows\n      // frameworks to safely use this without introspection as well as\n      // allows decoding error recovery.\n      if (this.functions[signature] == null) {\n        defineReadOnly(this.functions, signature, buildDefault(this, fragment, false));\n      }\n      if (this.callStatic[signature] == null) {\n        defineReadOnly(this.callStatic, signature, buildCall(this, fragment, true));\n      }\n      if (this.populateTransaction[signature] == null) {\n        defineReadOnly(this.populateTransaction, signature, buildPopulate(this, fragment));\n      }\n      if (this.estimateGas[signature] == null) {\n        defineReadOnly(this.estimateGas, signature, buildEstimate(this, fragment));\n      }\n    });\n    Object.keys(uniqueNames).forEach(name => {\n      // Ambiguous names to not get attached as bare names\n      const signatures = uniqueNames[name];\n      if (signatures.length > 1) {\n        return;\n      }\n      // Strip off the leading \"%\" used for prototype protection\n      name = name.substring(1);\n      const signature = signatures[0];\n      // If overwriting a member property that is null, swallow the error\n      try {\n        if (this[name] == null) {\n          defineReadOnly(this, name, this[signature]);\n        }\n      } catch (e) {}\n      if (this.functions[name] == null) {\n        defineReadOnly(this.functions, name, this.functions[signature]);\n      }\n      if (this.callStatic[name] == null) {\n        defineReadOnly(this.callStatic, name, this.callStatic[signature]);\n      }\n      if (this.populateTransaction[name] == null) {\n        defineReadOnly(this.populateTransaction, name, this.populateTransaction[signature]);\n      }\n      if (this.estimateGas[name] == null) {\n        defineReadOnly(this.estimateGas, name, this.estimateGas[signature]);\n      }\n    });\n  }\n  static getContractAddress(transaction) {\n    return getContractAddress(transaction);\n  }\n  static getInterface(contractInterface) {\n    if (Interface.isInterface(contractInterface)) {\n      return contractInterface;\n    }\n    return new Interface(contractInterface);\n  }\n  // @TODO: Allow timeout?\n  deployed() {\n    return this._deployed();\n  }\n  _deployed(blockTag) {\n    if (!this._deployedPromise) {\n      // If we were just deployed, we know the transaction we should occur in\n      if (this.deployTransaction) {\n        this._deployedPromise = this.deployTransaction.wait().then(() => {\n          return this;\n        });\n      } else {\n        // @TODO: Once we allow a timeout to be passed in, we will wait\n        // up to that many blocks for getCode\n        // Otherwise, poll for our code to be deployed\n        this._deployedPromise = this.provider.getCode(this.address, blockTag).then(code => {\n          if (code === \"0x\") {\n            logger.throwError(\"contract not deployed\", Logger.errors.UNSUPPORTED_OPERATION, {\n              contractAddress: this.address,\n              operation: \"getDeployed\"\n            });\n          }\n          return this;\n        });\n      }\n    }\n    return this._deployedPromise;\n  }\n  // @TODO:\n  // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>\n  // @TODO:\n  // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>\n  fallback(overrides) {\n    if (!this.signer) {\n      logger.throwError(\"sending a transactions require a signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"sendTransaction(fallback)\"\n      });\n    }\n    const tx = shallowCopy(overrides || {});\n    [\"from\", \"to\"].forEach(function (key) {\n      if (tx[key] == null) {\n        return;\n      }\n      logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: key\n      });\n    });\n    tx.to = this.resolvedAddress;\n    return this.deployed().then(() => {\n      return this.signer.sendTransaction(tx);\n    });\n  }\n  // Reconnect to a different signer or provider\n  connect(signerOrProvider) {\n    if (typeof signerOrProvider === \"string\") {\n      signerOrProvider = new VoidSigner(signerOrProvider, this.provider);\n    }\n    const contract = new this.constructor(this.address, this.interface, signerOrProvider);\n    if (this.deployTransaction) {\n      defineReadOnly(contract, \"deployTransaction\", this.deployTransaction);\n    }\n    return contract;\n  }\n  // Re-attach to a different on-chain instance of this contract\n  attach(addressOrName) {\n    return new this.constructor(addressOrName, this.interface, this.signer || this.provider);\n  }\n  static isIndexed(value) {\n    return Indexed.isIndexed(value);\n  }\n  _normalizeRunningEvent(runningEvent) {\n    // Already have an instance of this event running; we can re-use it\n    if (this._runningEvents[runningEvent.tag]) {\n      return this._runningEvents[runningEvent.tag];\n    }\n    return runningEvent;\n  }\n  _getRunningEvent(eventName) {\n    if (typeof eventName === \"string\") {\n      // Listen for \"error\" events (if your contract has an error event, include\n      // the full signature to bypass this special event keyword)\n      if (eventName === \"error\") {\n        return this._normalizeRunningEvent(new ErrorRunningEvent());\n      }\n      // Listen for any event that is registered\n      if (eventName === \"event\") {\n        return this._normalizeRunningEvent(new RunningEvent(\"event\", null));\n      }\n      // Listen for any event\n      if (eventName === \"*\") {\n        return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n      }\n      // Get the event Fragment (throws if ambiguous/unknown event)\n      const fragment = this.interface.getEvent(eventName);\n      return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));\n    }\n    // We have topics to filter by...\n    if (eventName.topics && eventName.topics.length > 0) {\n      // Is it a known topichash? (throws if no matching topichash)\n      try {\n        const topic = eventName.topics[0];\n        if (typeof topic !== \"string\") {\n          throw new Error(\"invalid topic\"); // @TODO: May happen for anonymous events\n        }\n\n        const fragment = this.interface.getEvent(topic);\n        return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment, eventName.topics));\n      } catch (error) {}\n      // Filter by the unknown topichash\n      const filter = {\n        address: this.address,\n        topics: eventName.topics\n      };\n      return this._normalizeRunningEvent(new RunningEvent(getEventTag(filter), filter));\n    }\n    return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n  }\n  _checkRunningEvents(runningEvent) {\n    if (runningEvent.listenerCount() === 0) {\n      delete this._runningEvents[runningEvent.tag];\n      // If we have a poller for this, remove it\n      const emit = this._wrappedEmits[runningEvent.tag];\n      if (emit && runningEvent.filter) {\n        this.provider.off(runningEvent.filter, emit);\n        delete this._wrappedEmits[runningEvent.tag];\n      }\n    }\n  }\n  // Subclasses can override this to gracefully recover\n  // from parse errors if they wish\n  _wrapEvent(runningEvent, log, listener) {\n    const event = deepCopy(log);\n    event.removeListener = () => {\n      if (!listener) {\n        return;\n      }\n      runningEvent.removeListener(listener);\n      this._checkRunningEvents(runningEvent);\n    };\n    event.getBlock = () => {\n      return this.provider.getBlock(log.blockHash);\n    };\n    event.getTransaction = () => {\n      return this.provider.getTransaction(log.transactionHash);\n    };\n    event.getTransactionReceipt = () => {\n      return this.provider.getTransactionReceipt(log.transactionHash);\n    };\n    // This may throw if the topics and data mismatch the signature\n    runningEvent.prepareEvent(event);\n    return event;\n  }\n  _addEventListener(runningEvent, listener, once) {\n    if (!this.provider) {\n      logger.throwError(\"events require a provider or a signer with a provider\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"once\"\n      });\n    }\n    runningEvent.addListener(listener, once);\n    // Track this running event and its listeners (may already be there; but no hard in updating)\n    this._runningEvents[runningEvent.tag] = runningEvent;\n    // If we are not polling the provider, start polling\n    if (!this._wrappedEmits[runningEvent.tag]) {\n      const wrappedEmit = log => {\n        let event = this._wrapEvent(runningEvent, log, listener);\n        // Try to emit the result for the parameterized event...\n        if (event.decodeError == null) {\n          try {\n            const args = runningEvent.getEmit(event);\n            this.emit(runningEvent.filter, ...args);\n          } catch (error) {\n            event.decodeError = error.error;\n          }\n        }\n        // Always emit \"event\" for fragment-base events\n        if (runningEvent.filter != null) {\n          this.emit(\"event\", event);\n        }\n        // Emit \"error\" if there was an error\n        if (event.decodeError != null) {\n          this.emit(\"error\", event.decodeError, event);\n        }\n      };\n      this._wrappedEmits[runningEvent.tag] = wrappedEmit;\n      // Special events, like \"error\" do not have a filter\n      if (runningEvent.filter != null) {\n        this.provider.on(runningEvent.filter, wrappedEmit);\n      }\n    }\n  }\n  queryFilter(event, fromBlockOrBlockhash, toBlock) {\n    const runningEvent = this._getRunningEvent(event);\n    const filter = shallowCopy(runningEvent.filter);\n    if (typeof fromBlockOrBlockhash === \"string\" && isHexString(fromBlockOrBlockhash, 32)) {\n      if (toBlock != null) {\n        logger.throwArgumentError(\"cannot specify toBlock with blockhash\", \"toBlock\", toBlock);\n      }\n      filter.blockHash = fromBlockOrBlockhash;\n    } else {\n      filter.fromBlock = fromBlockOrBlockhash != null ? fromBlockOrBlockhash : 0;\n      filter.toBlock = toBlock != null ? toBlock : \"latest\";\n    }\n    return this.provider.getLogs(filter).then(logs => {\n      return logs.map(log => this._wrapEvent(runningEvent, log, null));\n    });\n  }\n  on(event, listener) {\n    this._addEventListener(this._getRunningEvent(event), listener, false);\n    return this;\n  }\n  once(event, listener) {\n    this._addEventListener(this._getRunningEvent(event), listener, true);\n    return this;\n  }\n  emit(eventName, ...args) {\n    if (!this.provider) {\n      return false;\n    }\n    const runningEvent = this._getRunningEvent(eventName);\n    const result = runningEvent.run(args) > 0;\n    // May have drained all the \"once\" events; check for living events\n    this._checkRunningEvents(runningEvent);\n    return result;\n  }\n  listenerCount(eventName) {\n    if (!this.provider) {\n      return 0;\n    }\n    if (eventName == null) {\n      return Object.keys(this._runningEvents).reduce((accum, key) => {\n        return accum + this._runningEvents[key].listenerCount();\n      }, 0);\n    }\n    return this._getRunningEvent(eventName).listenerCount();\n  }\n  listeners(eventName) {\n    if (!this.provider) {\n      return [];\n    }\n    if (eventName == null) {\n      const result = [];\n      for (let tag in this._runningEvents) {\n        this._runningEvents[tag].listeners().forEach(listener => {\n          result.push(listener);\n        });\n      }\n      return result;\n    }\n    return this._getRunningEvent(eventName).listeners();\n  }\n  removeAllListeners(eventName) {\n    if (!this.provider) {\n      return this;\n    }\n    if (eventName == null) {\n      for (const tag in this._runningEvents) {\n        const runningEvent = this._runningEvents[tag];\n        runningEvent.removeAllListeners();\n        this._checkRunningEvents(runningEvent);\n      }\n      return this;\n    }\n    // Delete any listeners\n    const runningEvent = this._getRunningEvent(eventName);\n    runningEvent.removeAllListeners();\n    this._checkRunningEvents(runningEvent);\n    return this;\n  }\n  off(eventName, listener) {\n    if (!this.provider) {\n      return this;\n    }\n    const runningEvent = this._getRunningEvent(eventName);\n    runningEvent.removeListener(listener);\n    this._checkRunningEvents(runningEvent);\n    return this;\n  }\n  removeListener(eventName, listener) {\n    return this.off(eventName, listener);\n  }\n}\nexport class Contract extends BaseContract {}\nexport class ContractFactory {\n  constructor(contractInterface, bytecode, signer) {\n    let bytecodeHex = null;\n    if (typeof bytecode === \"string\") {\n      bytecodeHex = bytecode;\n    } else if (isBytes(bytecode)) {\n      bytecodeHex = hexlify(bytecode);\n    } else if (bytecode && typeof bytecode.object === \"string\") {\n      // Allow the bytecode object from the Solidity compiler\n      bytecodeHex = bytecode.object;\n    } else {\n      // Crash in the next verification step\n      bytecodeHex = \"!\";\n    }\n    // Make sure it is 0x prefixed\n    if (bytecodeHex.substring(0, 2) !== \"0x\") {\n      bytecodeHex = \"0x\" + bytecodeHex;\n    }\n    // Make sure the final result is valid bytecode\n    if (!isHexString(bytecodeHex) || bytecodeHex.length % 2) {\n      logger.throwArgumentError(\"invalid bytecode\", \"bytecode\", bytecode);\n    }\n    // If we have a signer, make sure it is valid\n    if (signer && !Signer.isSigner(signer)) {\n      logger.throwArgumentError(\"invalid signer\", \"signer\", signer);\n    }\n    defineReadOnly(this, \"bytecode\", bytecodeHex);\n    defineReadOnly(this, \"interface\", getStatic(new.target, \"getInterface\")(contractInterface));\n    defineReadOnly(this, \"signer\", signer || null);\n  }\n  // @TODO: Future; rename to populateTransaction?\n  getDeployTransaction(...args) {\n    let tx = {};\n    // If we have 1 additional argument, we allow transaction overrides\n    if (args.length === this.interface.deploy.inputs.length + 1 && typeof args[args.length - 1] === \"object\") {\n      tx = shallowCopy(args.pop());\n      for (const key in tx) {\n        if (!allowedTransactionKeys[key]) {\n          throw new Error(\"unknown transaction override \" + key);\n        }\n      }\n    }\n    // Do not allow these to be overridden in a deployment transaction\n    [\"data\", \"from\", \"to\"].forEach(key => {\n      if (tx[key] == null) {\n        return;\n      }\n      logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: key\n      });\n    });\n    if (tx.value) {\n      const value = BigNumber.from(tx.value);\n      if (!value.isZero() && !this.interface.deploy.payable) {\n        logger.throwError(\"non-payable constructor cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"overrides.value\",\n          value: tx.value\n        });\n      }\n    }\n    // Make sure the call matches the constructor signature\n    logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n    // Set the data to the bytecode + the encoded constructor arguments\n    tx.data = hexlify(concat([this.bytecode, this.interface.encodeDeploy(args)]));\n    return tx;\n  }\n  deploy(...args) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let overrides = {};\n      // If 1 extra parameter was passed in, it contains overrides\n      if (args.length === this.interface.deploy.inputs.length + 1) {\n        overrides = args.pop();\n      }\n      // Make sure the call matches the constructor signature\n      logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n      // Resolve ENS names and promises in the arguments\n      const params = yield resolveAddresses(this.signer, args, this.interface.deploy.inputs);\n      params.push(overrides);\n      // Get the deployment transaction (with optional overrides)\n      const unsignedTx = this.getDeployTransaction(...params);\n      // Send the deployment transaction\n      const tx = yield this.signer.sendTransaction(unsignedTx);\n      const address = getStatic(this.constructor, \"getContractAddress\")(tx);\n      const contract = getStatic(this.constructor, \"getContract\")(address, this.interface, this.signer);\n      // Add the modified wait that wraps events\n      addContractWait(contract, tx);\n      defineReadOnly(contract, \"deployTransaction\", tx);\n      return contract;\n    });\n  }\n  attach(address) {\n    return this.constructor.getContract(address, this.interface, this.signer);\n  }\n  connect(signer) {\n    return new this.constructor(this.interface, this.bytecode, signer);\n  }\n  static fromSolidity(compilerOutput, signer) {\n    if (compilerOutput == null) {\n      logger.throwError(\"missing compiler output\", Logger.errors.MISSING_ARGUMENT, {\n        argument: \"compilerOutput\"\n      });\n    }\n    if (typeof compilerOutput === \"string\") {\n      compilerOutput = JSON.parse(compilerOutput);\n    }\n    const abi = compilerOutput.abi;\n    let bytecode = null;\n    if (compilerOutput.bytecode) {\n      bytecode = compilerOutput.bytecode;\n    } else if (compilerOutput.evm && compilerOutput.evm.bytecode) {\n      bytecode = compilerOutput.evm.bytecode;\n    }\n    return new this(abi, bytecode, signer);\n  }\n  static getInterface(contractInterface) {\n    return Contract.getInterface(contractInterface);\n  }\n  static getContractAddress(tx) {\n    return getContractAddress(tx);\n  }\n  static getContract(address, contractInterface, signer) {\n    return new Contract(address, contractInterface, signer);\n  }\n}","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","checkResultErrors","Indexed","Interface","Provider","Signer","VoidSigner","getAddress","getContractAddress","BigNumber","arrayify","concat","hexlify","isBytes","isHexString","defineReadOnly","deepCopy","getStatic","resolveProperties","shallowCopy","accessListify","Logger","version","logger","allowedTransactionKeys","chainId","data","from","gasLimit","gasPrice","nonce","to","type","accessList","maxFeePerGas","maxPriorityFeePerGas","customData","ccipReadEnabled","resolveName","resolver","nameOrPromise","name","throwArgumentError","error","throwError","errors","UNSUPPORTED_OPERATION","operation","address","resolveAddresses","paramType","Array","isArray","all","map","index","components","baseType","makeError","INVALID_ARGUMENT","argument","v","arrayChildren","populateTransaction","contract","fragment","args","overrides","length","inputs","pop","checkArgumentCount","signer","override","check","provider","resolved","resolvedAddress","interface","encodeFunctionData","tx","ro","toNumber","gas","intrinsic","bytes","i","add","roValue","isZero","payable","leftovers","Object","keys","filter","key","l","JSON","stringify","join","buildPopulate","buildEstimate","signerOrProvider","estimateGas","addContractWait","wait","bind","confirmations","receipt","events","logs","log","event","parsed","parseLog","decode","topics","decodeEventLog","eventFragment","eventSignature","signature","removeListener","getBlock","blockHash","getTransaction","transactionHash","getTransactionReceipt","buildCall","collapseSimple","blockTag","undefined","push","deployTransaction","_deployed","call","decodeFunctionResult","outputs","code","CALL_EXCEPTION","transaction","buildSend","txRequest","sendTransaction","buildDefault","constant","getEventTag","topic","RunningEvent","constructor","tag","_listeners","addListener","listener","once","item","removeAllListeners","listeners","listenerCount","run","argsCopy","slice","setTimeout","prepareEvent","getEmit","ErrorRunningEvent","FragmentRunningEvent","contractInterface","getEventTopic","format","decodeError","WildcardRunningEvent","BaseContract","addressOrName","new","target","isSigner","isProvider","uniqueFilters","forEach","filters","encodeFilterTopics","warn","catch","uniqueNames","uniqueSignatures","functions","callStatic","signatures","substring","getInterface","isInterface","deployed","_deployedPromise","getCode","contractAddress","fallback","connect","attach","isIndexed","_normalizeRunningEvent","runningEvent","_runningEvents","_getRunningEvent","eventName","getEvent","Error","_checkRunningEvents","emit","_wrappedEmits","off","_wrapEvent","_addEventListener","wrappedEmit","on","queryFilter","fromBlockOrBlockhash","toBlock","fromBlock","getLogs","reduce","accum","Contract","ContractFactory","bytecode","bytecodeHex","object","getDeployTransaction","deploy","encodeDeploy","params","unsignedTx","getContract","fromSolidity","compilerOutput","MISSING_ARGUMENT","parse","abi","evm"],"sources":["F:/DDesktop/MEAN_BC/mean-stack-authentication-authorization-master/angular-15-client/node_modules/@ethersproject/contracts/lib.esm/index.js"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { checkResultErrors, Indexed, Interface } from \"@ethersproject/abi\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { Signer, VoidSigner } from \"@ethersproject/abstract-signer\";\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexlify, isBytes, isHexString } from \"@ethersproject/bytes\";\nimport { defineReadOnly, deepCopy, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n;\n;\n///////////////////////////////\nconst allowedTransactionKeys = {\n    chainId: true, data: true, from: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true,\n    type: true, accessList: true,\n    maxFeePerGas: true, maxPriorityFeePerGas: true,\n    customData: true,\n    ccipReadEnabled: true\n};\nfunction resolveName(resolver, nameOrPromise) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const name = yield nameOrPromise;\n        if (typeof (name) !== \"string\") {\n            logger.throwArgumentError(\"invalid address or ENS name\", \"name\", name);\n        }\n        // If it is already an address, just use it (after adding checksum)\n        try {\n            return getAddress(name);\n        }\n        catch (error) { }\n        if (!resolver) {\n            logger.throwError(\"a provider or signer is needed to resolve ENS names\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"resolveName\"\n            });\n        }\n        const address = yield resolver.resolveName(name);\n        if (address == null) {\n            logger.throwArgumentError(\"resolver or addr is not configured for ENS name\", \"name\", name);\n        }\n        return address;\n    });\n}\n// Recursively replaces ENS names with promises to resolve the name and resolves all properties\nfunction resolveAddresses(resolver, value, paramType) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (Array.isArray(paramType)) {\n            return yield Promise.all(paramType.map((paramType, index) => {\n                return resolveAddresses(resolver, ((Array.isArray(value)) ? value[index] : value[paramType.name]), paramType);\n            }));\n        }\n        if (paramType.type === \"address\") {\n            return yield resolveName(resolver, value);\n        }\n        if (paramType.type === \"tuple\") {\n            return yield resolveAddresses(resolver, value, paramType.components);\n        }\n        if (paramType.baseType === \"array\") {\n            if (!Array.isArray(value)) {\n                return Promise.reject(logger.makeError(\"invalid value for array\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"value\",\n                    value\n                }));\n            }\n            return yield Promise.all(value.map((v) => resolveAddresses(resolver, v, paramType.arrayChildren)));\n        }\n        return value;\n    });\n}\nfunction populateTransaction(contract, fragment, args) {\n    return __awaiter(this, void 0, void 0, function* () {\n        // If an extra argument is given, it is overrides\n        let overrides = {};\n        if (args.length === fragment.inputs.length + 1 && typeof (args[args.length - 1]) === \"object\") {\n            overrides = shallowCopy(args.pop());\n        }\n        // Make sure the parameter count matches\n        logger.checkArgumentCount(args.length, fragment.inputs.length, \"passed to contract\");\n        // Populate \"from\" override (allow promises)\n        if (contract.signer) {\n            if (overrides.from) {\n                // Contracts with a Signer are from the Signer's frame-of-reference;\n                // but we allow overriding \"from\" if it matches the signer\n                overrides.from = resolveProperties({\n                    override: resolveName(contract.signer, overrides.from),\n                    signer: contract.signer.getAddress()\n                }).then((check) => __awaiter(this, void 0, void 0, function* () {\n                    if (getAddress(check.signer) !== check.override) {\n                        logger.throwError(\"Contract with a Signer cannot override from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                            operation: \"overrides.from\"\n                        });\n                    }\n                    return check.override;\n                }));\n            }\n            else {\n                overrides.from = contract.signer.getAddress();\n            }\n        }\n        else if (overrides.from) {\n            overrides.from = resolveName(contract.provider, overrides.from);\n            //} else {\n            // Contracts without a signer can override \"from\", and if\n            // unspecified the zero address is used\n            //overrides.from = AddressZero;\n        }\n        // Wait for all dependencies to be resolved (prefer the signer over the provider)\n        const resolved = yield resolveProperties({\n            args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),\n            address: contract.resolvedAddress,\n            overrides: (resolveProperties(overrides) || {})\n        });\n        // The ABI coded transaction\n        const data = contract.interface.encodeFunctionData(fragment, resolved.args);\n        const tx = {\n            data: data,\n            to: resolved.address\n        };\n        // Resolved Overrides\n        const ro = resolved.overrides;\n        // Populate simple overrides\n        if (ro.nonce != null) {\n            tx.nonce = BigNumber.from(ro.nonce).toNumber();\n        }\n        if (ro.gasLimit != null) {\n            tx.gasLimit = BigNumber.from(ro.gasLimit);\n        }\n        if (ro.gasPrice != null) {\n            tx.gasPrice = BigNumber.from(ro.gasPrice);\n        }\n        if (ro.maxFeePerGas != null) {\n            tx.maxFeePerGas = BigNumber.from(ro.maxFeePerGas);\n        }\n        if (ro.maxPriorityFeePerGas != null) {\n            tx.maxPriorityFeePerGas = BigNumber.from(ro.maxPriorityFeePerGas);\n        }\n        if (ro.from != null) {\n            tx.from = ro.from;\n        }\n        if (ro.type != null) {\n            tx.type = ro.type;\n        }\n        if (ro.accessList != null) {\n            tx.accessList = accessListify(ro.accessList);\n        }\n        // If there was no \"gasLimit\" override, but the ABI specifies a default, use it\n        if (tx.gasLimit == null && fragment.gas != null) {\n            // Compute the intrinsic gas cost for this transaction\n            // @TODO: This is based on the yellow paper as of Petersburg; this is something\n            // we may wish to parameterize in v6 as part of the Network object. Since this\n            // is always a non-nil to address, we can ignore G_create, but may wish to add\n            // similar logic to the ContractFactory.\n            let intrinsic = 21000;\n            const bytes = arrayify(data);\n            for (let i = 0; i < bytes.length; i++) {\n                intrinsic += 4;\n                if (bytes[i]) {\n                    intrinsic += 64;\n                }\n            }\n            tx.gasLimit = BigNumber.from(fragment.gas).add(intrinsic);\n        }\n        // Populate \"value\" override\n        if (ro.value) {\n            const roValue = BigNumber.from(ro.value);\n            if (!roValue.isZero() && !fragment.payable) {\n                logger.throwError(\"non-payable method cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"overrides.value\",\n                    value: overrides.value\n                });\n            }\n            tx.value = roValue;\n        }\n        if (ro.customData) {\n            tx.customData = shallowCopy(ro.customData);\n        }\n        if (ro.ccipReadEnabled) {\n            tx.ccipReadEnabled = !!ro.ccipReadEnabled;\n        }\n        // Remove the overrides\n        delete overrides.nonce;\n        delete overrides.gasLimit;\n        delete overrides.gasPrice;\n        delete overrides.from;\n        delete overrides.value;\n        delete overrides.type;\n        delete overrides.accessList;\n        delete overrides.maxFeePerGas;\n        delete overrides.maxPriorityFeePerGas;\n        delete overrides.customData;\n        delete overrides.ccipReadEnabled;\n        // Make sure there are no stray overrides, which may indicate a\n        // typo or using an unsupported key.\n        const leftovers = Object.keys(overrides).filter((key) => (overrides[key] != null));\n        if (leftovers.length) {\n            logger.throwError(`cannot override ${leftovers.map((l) => JSON.stringify(l)).join(\",\")}`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"overrides\",\n                overrides: leftovers\n            });\n        }\n        return tx;\n    });\n}\nfunction buildPopulate(contract, fragment) {\n    return function (...args) {\n        return populateTransaction(contract, fragment, args);\n    };\n}\nfunction buildEstimate(contract, fragment) {\n    const signerOrProvider = (contract.signer || contract.provider);\n    return function (...args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!signerOrProvider) {\n                logger.throwError(\"estimate require a provider or signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"estimateGas\"\n                });\n            }\n            const tx = yield populateTransaction(contract, fragment, args);\n            return yield signerOrProvider.estimateGas(tx);\n        });\n    };\n}\nfunction addContractWait(contract, tx) {\n    const wait = tx.wait.bind(tx);\n    tx.wait = (confirmations) => {\n        return wait(confirmations).then((receipt) => {\n            receipt.events = receipt.logs.map((log) => {\n                let event = deepCopy(log);\n                let parsed = null;\n                try {\n                    parsed = contract.interface.parseLog(log);\n                }\n                catch (e) { }\n                // Successfully parsed the event log; include it\n                if (parsed) {\n                    event.args = parsed.args;\n                    event.decode = (data, topics) => {\n                        return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);\n                    };\n                    event.event = parsed.name;\n                    event.eventSignature = parsed.signature;\n                }\n                // Useful operations\n                event.removeListener = () => { return contract.provider; };\n                event.getBlock = () => {\n                    return contract.provider.getBlock(receipt.blockHash);\n                };\n                event.getTransaction = () => {\n                    return contract.provider.getTransaction(receipt.transactionHash);\n                };\n                event.getTransactionReceipt = () => {\n                    return Promise.resolve(receipt);\n                };\n                return event;\n            });\n            return receipt;\n        });\n    };\n}\nfunction buildCall(contract, fragment, collapseSimple) {\n    const signerOrProvider = (contract.signer || contract.provider);\n    return function (...args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Extract the \"blockTag\" override if present\n            let blockTag = undefined;\n            if (args.length === fragment.inputs.length + 1 && typeof (args[args.length - 1]) === \"object\") {\n                const overrides = shallowCopy(args.pop());\n                if (overrides.blockTag != null) {\n                    blockTag = yield overrides.blockTag;\n                }\n                delete overrides.blockTag;\n                args.push(overrides);\n            }\n            // If the contract was just deployed, wait until it is mined\n            if (contract.deployTransaction != null) {\n                yield contract._deployed(blockTag);\n            }\n            // Call a node and get the result\n            const tx = yield populateTransaction(contract, fragment, args);\n            const result = yield signerOrProvider.call(tx, blockTag);\n            try {\n                let value = contract.interface.decodeFunctionResult(fragment, result);\n                if (collapseSimple && fragment.outputs.length === 1) {\n                    value = value[0];\n                }\n                return value;\n            }\n            catch (error) {\n                if (error.code === Logger.errors.CALL_EXCEPTION) {\n                    error.address = contract.address;\n                    error.args = args;\n                    error.transaction = tx;\n                }\n                throw error;\n            }\n        });\n    };\n}\nfunction buildSend(contract, fragment) {\n    return function (...args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!contract.signer) {\n                logger.throwError(\"sending a transaction requires a signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"sendTransaction\"\n                });\n            }\n            // If the contract was just deployed, wait until it is mined\n            if (contract.deployTransaction != null) {\n                yield contract._deployed();\n            }\n            const txRequest = yield populateTransaction(contract, fragment, args);\n            const tx = yield contract.signer.sendTransaction(txRequest);\n            // Tweak the tx.wait so the receipt has extra properties\n            addContractWait(contract, tx);\n            return tx;\n        });\n    };\n}\nfunction buildDefault(contract, fragment, collapseSimple) {\n    if (fragment.constant) {\n        return buildCall(contract, fragment, collapseSimple);\n    }\n    return buildSend(contract, fragment);\n}\nfunction getEventTag(filter) {\n    if (filter.address && (filter.topics == null || filter.topics.length === 0)) {\n        return \"*\";\n    }\n    return (filter.address || \"*\") + \"@\" + (filter.topics ? filter.topics.map((topic) => {\n        if (Array.isArray(topic)) {\n            return topic.join(\"|\");\n        }\n        return topic;\n    }).join(\":\") : \"\");\n}\nclass RunningEvent {\n    constructor(tag, filter) {\n        defineReadOnly(this, \"tag\", tag);\n        defineReadOnly(this, \"filter\", filter);\n        this._listeners = [];\n    }\n    addListener(listener, once) {\n        this._listeners.push({ listener: listener, once: once });\n    }\n    removeListener(listener) {\n        let done = false;\n        this._listeners = this._listeners.filter((item) => {\n            if (done || item.listener !== listener) {\n                return true;\n            }\n            done = true;\n            return false;\n        });\n    }\n    removeAllListeners() {\n        this._listeners = [];\n    }\n    listeners() {\n        return this._listeners.map((i) => i.listener);\n    }\n    listenerCount() {\n        return this._listeners.length;\n    }\n    run(args) {\n        const listenerCount = this.listenerCount();\n        this._listeners = this._listeners.filter((item) => {\n            const argsCopy = args.slice();\n            // Call the callback in the next event loop\n            setTimeout(() => {\n                item.listener.apply(this, argsCopy);\n            }, 0);\n            // Reschedule it if it not \"once\"\n            return !(item.once);\n        });\n        return listenerCount;\n    }\n    prepareEvent(event) {\n    }\n    // Returns the array that will be applied to an emit\n    getEmit(event) {\n        return [event];\n    }\n}\nclass ErrorRunningEvent extends RunningEvent {\n    constructor() {\n        super(\"error\", null);\n    }\n}\n// @TODO Fragment should inherit Wildcard? and just override getEmit?\n//       or have a common abstract super class, with enough constructor\n//       options to configure both.\n// A Fragment Event will populate all the properties that Wildcard\n// will, and additionally dereference the arguments when emitting\nclass FragmentRunningEvent extends RunningEvent {\n    constructor(address, contractInterface, fragment, topics) {\n        const filter = {\n            address: address\n        };\n        let topic = contractInterface.getEventTopic(fragment);\n        if (topics) {\n            if (topic !== topics[0]) {\n                logger.throwArgumentError(\"topic mismatch\", \"topics\", topics);\n            }\n            filter.topics = topics.slice();\n        }\n        else {\n            filter.topics = [topic];\n        }\n        super(getEventTag(filter), filter);\n        defineReadOnly(this, \"address\", address);\n        defineReadOnly(this, \"interface\", contractInterface);\n        defineReadOnly(this, \"fragment\", fragment);\n    }\n    prepareEvent(event) {\n        super.prepareEvent(event);\n        event.event = this.fragment.name;\n        event.eventSignature = this.fragment.format();\n        event.decode = (data, topics) => {\n            return this.interface.decodeEventLog(this.fragment, data, topics);\n        };\n        try {\n            event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);\n        }\n        catch (error) {\n            event.args = null;\n            event.decodeError = error;\n        }\n    }\n    getEmit(event) {\n        const errors = checkResultErrors(event.args);\n        if (errors.length) {\n            throw errors[0].error;\n        }\n        const args = (event.args || []).slice();\n        args.push(event);\n        return args;\n    }\n}\n// A Wildcard Event will attempt to populate:\n//  - event            The name of the event name\n//  - eventSignature   The full signature of the event\n//  - decode           A function to decode data and topics\n//  - args             The decoded data and topics\nclass WildcardRunningEvent extends RunningEvent {\n    constructor(address, contractInterface) {\n        super(\"*\", { address: address });\n        defineReadOnly(this, \"address\", address);\n        defineReadOnly(this, \"interface\", contractInterface);\n    }\n    prepareEvent(event) {\n        super.prepareEvent(event);\n        try {\n            const parsed = this.interface.parseLog(event);\n            event.event = parsed.name;\n            event.eventSignature = parsed.signature;\n            event.decode = (data, topics) => {\n                return this.interface.decodeEventLog(parsed.eventFragment, data, topics);\n            };\n            event.args = parsed.args;\n        }\n        catch (error) {\n            // No matching event\n        }\n    }\n}\nexport class BaseContract {\n    constructor(addressOrName, contractInterface, signerOrProvider) {\n        // @TODO: Maybe still check the addressOrName looks like a valid address or name?\n        //address = getAddress(address);\n        defineReadOnly(this, \"interface\", getStatic(new.target, \"getInterface\")(contractInterface));\n        if (signerOrProvider == null) {\n            defineReadOnly(this, \"provider\", null);\n            defineReadOnly(this, \"signer\", null);\n        }\n        else if (Signer.isSigner(signerOrProvider)) {\n            defineReadOnly(this, \"provider\", signerOrProvider.provider || null);\n            defineReadOnly(this, \"signer\", signerOrProvider);\n        }\n        else if (Provider.isProvider(signerOrProvider)) {\n            defineReadOnly(this, \"provider\", signerOrProvider);\n            defineReadOnly(this, \"signer\", null);\n        }\n        else {\n            logger.throwArgumentError(\"invalid signer or provider\", \"signerOrProvider\", signerOrProvider);\n        }\n        defineReadOnly(this, \"callStatic\", {});\n        defineReadOnly(this, \"estimateGas\", {});\n        defineReadOnly(this, \"functions\", {});\n        defineReadOnly(this, \"populateTransaction\", {});\n        defineReadOnly(this, \"filters\", {});\n        {\n            const uniqueFilters = {};\n            Object.keys(this.interface.events).forEach((eventSignature) => {\n                const event = this.interface.events[eventSignature];\n                defineReadOnly(this.filters, eventSignature, (...args) => {\n                    return {\n                        address: this.address,\n                        topics: this.interface.encodeFilterTopics(event, args)\n                    };\n                });\n                if (!uniqueFilters[event.name]) {\n                    uniqueFilters[event.name] = [];\n                }\n                uniqueFilters[event.name].push(eventSignature);\n            });\n            Object.keys(uniqueFilters).forEach((name) => {\n                const filters = uniqueFilters[name];\n                if (filters.length === 1) {\n                    defineReadOnly(this.filters, name, this.filters[filters[0]]);\n                }\n                else {\n                    logger.warn(`Duplicate definition of ${name} (${filters.join(\", \")})`);\n                }\n            });\n        }\n        defineReadOnly(this, \"_runningEvents\", {});\n        defineReadOnly(this, \"_wrappedEmits\", {});\n        if (addressOrName == null) {\n            logger.throwArgumentError(\"invalid contract address or ENS name\", \"addressOrName\", addressOrName);\n        }\n        defineReadOnly(this, \"address\", addressOrName);\n        if (this.provider) {\n            defineReadOnly(this, \"resolvedAddress\", resolveName(this.provider, addressOrName));\n        }\n        else {\n            try {\n                defineReadOnly(this, \"resolvedAddress\", Promise.resolve(getAddress(addressOrName)));\n            }\n            catch (error) {\n                // Without a provider, we cannot use ENS names\n                logger.throwError(\"provider is required to use ENS name as contract address\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"new Contract\"\n                });\n            }\n        }\n        // Swallow bad ENS names to prevent Unhandled Exceptions\n        this.resolvedAddress.catch((e) => { });\n        const uniqueNames = {};\n        const uniqueSignatures = {};\n        Object.keys(this.interface.functions).forEach((signature) => {\n            const fragment = this.interface.functions[signature];\n            // Check that the signature is unique; if not the ABI generation has\n            // not been cleaned or may be incorrectly generated\n            if (uniqueSignatures[signature]) {\n                logger.warn(`Duplicate ABI entry for ${JSON.stringify(signature)}`);\n                return;\n            }\n            uniqueSignatures[signature] = true;\n            // Track unique names; we only expose bare named functions if they\n            // are ambiguous\n            {\n                const name = fragment.name;\n                if (!uniqueNames[`%${name}`]) {\n                    uniqueNames[`%${name}`] = [];\n                }\n                uniqueNames[`%${name}`].push(signature);\n            }\n            if (this[signature] == null) {\n                defineReadOnly(this, signature, buildDefault(this, fragment, true));\n            }\n            // We do not collapse simple calls on this bucket, which allows\n            // frameworks to safely use this without introspection as well as\n            // allows decoding error recovery.\n            if (this.functions[signature] == null) {\n                defineReadOnly(this.functions, signature, buildDefault(this, fragment, false));\n            }\n            if (this.callStatic[signature] == null) {\n                defineReadOnly(this.callStatic, signature, buildCall(this, fragment, true));\n            }\n            if (this.populateTransaction[signature] == null) {\n                defineReadOnly(this.populateTransaction, signature, buildPopulate(this, fragment));\n            }\n            if (this.estimateGas[signature] == null) {\n                defineReadOnly(this.estimateGas, signature, buildEstimate(this, fragment));\n            }\n        });\n        Object.keys(uniqueNames).forEach((name) => {\n            // Ambiguous names to not get attached as bare names\n            const signatures = uniqueNames[name];\n            if (signatures.length > 1) {\n                return;\n            }\n            // Strip off the leading \"%\" used for prototype protection\n            name = name.substring(1);\n            const signature = signatures[0];\n            // If overwriting a member property that is null, swallow the error\n            try {\n                if (this[name] == null) {\n                    defineReadOnly(this, name, this[signature]);\n                }\n            }\n            catch (e) { }\n            if (this.functions[name] == null) {\n                defineReadOnly(this.functions, name, this.functions[signature]);\n            }\n            if (this.callStatic[name] == null) {\n                defineReadOnly(this.callStatic, name, this.callStatic[signature]);\n            }\n            if (this.populateTransaction[name] == null) {\n                defineReadOnly(this.populateTransaction, name, this.populateTransaction[signature]);\n            }\n            if (this.estimateGas[name] == null) {\n                defineReadOnly(this.estimateGas, name, this.estimateGas[signature]);\n            }\n        });\n    }\n    static getContractAddress(transaction) {\n        return getContractAddress(transaction);\n    }\n    static getInterface(contractInterface) {\n        if (Interface.isInterface(contractInterface)) {\n            return contractInterface;\n        }\n        return new Interface(contractInterface);\n    }\n    // @TODO: Allow timeout?\n    deployed() {\n        return this._deployed();\n    }\n    _deployed(blockTag) {\n        if (!this._deployedPromise) {\n            // If we were just deployed, we know the transaction we should occur in\n            if (this.deployTransaction) {\n                this._deployedPromise = this.deployTransaction.wait().then(() => {\n                    return this;\n                });\n            }\n            else {\n                // @TODO: Once we allow a timeout to be passed in, we will wait\n                // up to that many blocks for getCode\n                // Otherwise, poll for our code to be deployed\n                this._deployedPromise = this.provider.getCode(this.address, blockTag).then((code) => {\n                    if (code === \"0x\") {\n                        logger.throwError(\"contract not deployed\", Logger.errors.UNSUPPORTED_OPERATION, {\n                            contractAddress: this.address,\n                            operation: \"getDeployed\"\n                        });\n                    }\n                    return this;\n                });\n            }\n        }\n        return this._deployedPromise;\n    }\n    // @TODO:\n    // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>\n    // @TODO:\n    // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>\n    fallback(overrides) {\n        if (!this.signer) {\n            logger.throwError(\"sending a transactions require a signer\", Logger.errors.UNSUPPORTED_OPERATION, { operation: \"sendTransaction(fallback)\" });\n        }\n        const tx = shallowCopy(overrides || {});\n        [\"from\", \"to\"].forEach(function (key) {\n            if (tx[key] == null) {\n                return;\n            }\n            logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, { operation: key });\n        });\n        tx.to = this.resolvedAddress;\n        return this.deployed().then(() => {\n            return this.signer.sendTransaction(tx);\n        });\n    }\n    // Reconnect to a different signer or provider\n    connect(signerOrProvider) {\n        if (typeof (signerOrProvider) === \"string\") {\n            signerOrProvider = new VoidSigner(signerOrProvider, this.provider);\n        }\n        const contract = new (this.constructor)(this.address, this.interface, signerOrProvider);\n        if (this.deployTransaction) {\n            defineReadOnly(contract, \"deployTransaction\", this.deployTransaction);\n        }\n        return contract;\n    }\n    // Re-attach to a different on-chain instance of this contract\n    attach(addressOrName) {\n        return new (this.constructor)(addressOrName, this.interface, this.signer || this.provider);\n    }\n    static isIndexed(value) {\n        return Indexed.isIndexed(value);\n    }\n    _normalizeRunningEvent(runningEvent) {\n        // Already have an instance of this event running; we can re-use it\n        if (this._runningEvents[runningEvent.tag]) {\n            return this._runningEvents[runningEvent.tag];\n        }\n        return runningEvent;\n    }\n    _getRunningEvent(eventName) {\n        if (typeof (eventName) === \"string\") {\n            // Listen for \"error\" events (if your contract has an error event, include\n            // the full signature to bypass this special event keyword)\n            if (eventName === \"error\") {\n                return this._normalizeRunningEvent(new ErrorRunningEvent());\n            }\n            // Listen for any event that is registered\n            if (eventName === \"event\") {\n                return this._normalizeRunningEvent(new RunningEvent(\"event\", null));\n            }\n            // Listen for any event\n            if (eventName === \"*\") {\n                return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n            }\n            // Get the event Fragment (throws if ambiguous/unknown event)\n            const fragment = this.interface.getEvent(eventName);\n            return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));\n        }\n        // We have topics to filter by...\n        if (eventName.topics && eventName.topics.length > 0) {\n            // Is it a known topichash? (throws if no matching topichash)\n            try {\n                const topic = eventName.topics[0];\n                if (typeof (topic) !== \"string\") {\n                    throw new Error(\"invalid topic\"); // @TODO: May happen for anonymous events\n                }\n                const fragment = this.interface.getEvent(topic);\n                return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment, eventName.topics));\n            }\n            catch (error) { }\n            // Filter by the unknown topichash\n            const filter = {\n                address: this.address,\n                topics: eventName.topics\n            };\n            return this._normalizeRunningEvent(new RunningEvent(getEventTag(filter), filter));\n        }\n        return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n    }\n    _checkRunningEvents(runningEvent) {\n        if (runningEvent.listenerCount() === 0) {\n            delete this._runningEvents[runningEvent.tag];\n            // If we have a poller for this, remove it\n            const emit = this._wrappedEmits[runningEvent.tag];\n            if (emit && runningEvent.filter) {\n                this.provider.off(runningEvent.filter, emit);\n                delete this._wrappedEmits[runningEvent.tag];\n            }\n        }\n    }\n    // Subclasses can override this to gracefully recover\n    // from parse errors if they wish\n    _wrapEvent(runningEvent, log, listener) {\n        const event = deepCopy(log);\n        event.removeListener = () => {\n            if (!listener) {\n                return;\n            }\n            runningEvent.removeListener(listener);\n            this._checkRunningEvents(runningEvent);\n        };\n        event.getBlock = () => { return this.provider.getBlock(log.blockHash); };\n        event.getTransaction = () => { return this.provider.getTransaction(log.transactionHash); };\n        event.getTransactionReceipt = () => { return this.provider.getTransactionReceipt(log.transactionHash); };\n        // This may throw if the topics and data mismatch the signature\n        runningEvent.prepareEvent(event);\n        return event;\n    }\n    _addEventListener(runningEvent, listener, once) {\n        if (!this.provider) {\n            logger.throwError(\"events require a provider or a signer with a provider\", Logger.errors.UNSUPPORTED_OPERATION, { operation: \"once\" });\n        }\n        runningEvent.addListener(listener, once);\n        // Track this running event and its listeners (may already be there; but no hard in updating)\n        this._runningEvents[runningEvent.tag] = runningEvent;\n        // If we are not polling the provider, start polling\n        if (!this._wrappedEmits[runningEvent.tag]) {\n            const wrappedEmit = (log) => {\n                let event = this._wrapEvent(runningEvent, log, listener);\n                // Try to emit the result for the parameterized event...\n                if (event.decodeError == null) {\n                    try {\n                        const args = runningEvent.getEmit(event);\n                        this.emit(runningEvent.filter, ...args);\n                    }\n                    catch (error) {\n                        event.decodeError = error.error;\n                    }\n                }\n                // Always emit \"event\" for fragment-base events\n                if (runningEvent.filter != null) {\n                    this.emit(\"event\", event);\n                }\n                // Emit \"error\" if there was an error\n                if (event.decodeError != null) {\n                    this.emit(\"error\", event.decodeError, event);\n                }\n            };\n            this._wrappedEmits[runningEvent.tag] = wrappedEmit;\n            // Special events, like \"error\" do not have a filter\n            if (runningEvent.filter != null) {\n                this.provider.on(runningEvent.filter, wrappedEmit);\n            }\n        }\n    }\n    queryFilter(event, fromBlockOrBlockhash, toBlock) {\n        const runningEvent = this._getRunningEvent(event);\n        const filter = shallowCopy(runningEvent.filter);\n        if (typeof (fromBlockOrBlockhash) === \"string\" && isHexString(fromBlockOrBlockhash, 32)) {\n            if (toBlock != null) {\n                logger.throwArgumentError(\"cannot specify toBlock with blockhash\", \"toBlock\", toBlock);\n            }\n            filter.blockHash = fromBlockOrBlockhash;\n        }\n        else {\n            filter.fromBlock = ((fromBlockOrBlockhash != null) ? fromBlockOrBlockhash : 0);\n            filter.toBlock = ((toBlock != null) ? toBlock : \"latest\");\n        }\n        return this.provider.getLogs(filter).then((logs) => {\n            return logs.map((log) => this._wrapEvent(runningEvent, log, null));\n        });\n    }\n    on(event, listener) {\n        this._addEventListener(this._getRunningEvent(event), listener, false);\n        return this;\n    }\n    once(event, listener) {\n        this._addEventListener(this._getRunningEvent(event), listener, true);\n        return this;\n    }\n    emit(eventName, ...args) {\n        if (!this.provider) {\n            return false;\n        }\n        const runningEvent = this._getRunningEvent(eventName);\n        const result = (runningEvent.run(args) > 0);\n        // May have drained all the \"once\" events; check for living events\n        this._checkRunningEvents(runningEvent);\n        return result;\n    }\n    listenerCount(eventName) {\n        if (!this.provider) {\n            return 0;\n        }\n        if (eventName == null) {\n            return Object.keys(this._runningEvents).reduce((accum, key) => {\n                return accum + this._runningEvents[key].listenerCount();\n            }, 0);\n        }\n        return this._getRunningEvent(eventName).listenerCount();\n    }\n    listeners(eventName) {\n        if (!this.provider) {\n            return [];\n        }\n        if (eventName == null) {\n            const result = [];\n            for (let tag in this._runningEvents) {\n                this._runningEvents[tag].listeners().forEach((listener) => {\n                    result.push(listener);\n                });\n            }\n            return result;\n        }\n        return this._getRunningEvent(eventName).listeners();\n    }\n    removeAllListeners(eventName) {\n        if (!this.provider) {\n            return this;\n        }\n        if (eventName == null) {\n            for (const tag in this._runningEvents) {\n                const runningEvent = this._runningEvents[tag];\n                runningEvent.removeAllListeners();\n                this._checkRunningEvents(runningEvent);\n            }\n            return this;\n        }\n        // Delete any listeners\n        const runningEvent = this._getRunningEvent(eventName);\n        runningEvent.removeAllListeners();\n        this._checkRunningEvents(runningEvent);\n        return this;\n    }\n    off(eventName, listener) {\n        if (!this.provider) {\n            return this;\n        }\n        const runningEvent = this._getRunningEvent(eventName);\n        runningEvent.removeListener(listener);\n        this._checkRunningEvents(runningEvent);\n        return this;\n    }\n    removeListener(eventName, listener) {\n        return this.off(eventName, listener);\n    }\n}\nexport class Contract extends BaseContract {\n}\nexport class ContractFactory {\n    constructor(contractInterface, bytecode, signer) {\n        let bytecodeHex = null;\n        if (typeof (bytecode) === \"string\") {\n            bytecodeHex = bytecode;\n        }\n        else if (isBytes(bytecode)) {\n            bytecodeHex = hexlify(bytecode);\n        }\n        else if (bytecode && typeof (bytecode.object) === \"string\") {\n            // Allow the bytecode object from the Solidity compiler\n            bytecodeHex = bytecode.object;\n        }\n        else {\n            // Crash in the next verification step\n            bytecodeHex = \"!\";\n        }\n        // Make sure it is 0x prefixed\n        if (bytecodeHex.substring(0, 2) !== \"0x\") {\n            bytecodeHex = \"0x\" + bytecodeHex;\n        }\n        // Make sure the final result is valid bytecode\n        if (!isHexString(bytecodeHex) || (bytecodeHex.length % 2)) {\n            logger.throwArgumentError(\"invalid bytecode\", \"bytecode\", bytecode);\n        }\n        // If we have a signer, make sure it is valid\n        if (signer && !Signer.isSigner(signer)) {\n            logger.throwArgumentError(\"invalid signer\", \"signer\", signer);\n        }\n        defineReadOnly(this, \"bytecode\", bytecodeHex);\n        defineReadOnly(this, \"interface\", getStatic(new.target, \"getInterface\")(contractInterface));\n        defineReadOnly(this, \"signer\", signer || null);\n    }\n    // @TODO: Future; rename to populateTransaction?\n    getDeployTransaction(...args) {\n        let tx = {};\n        // If we have 1 additional argument, we allow transaction overrides\n        if (args.length === this.interface.deploy.inputs.length + 1 && typeof (args[args.length - 1]) === \"object\") {\n            tx = shallowCopy(args.pop());\n            for (const key in tx) {\n                if (!allowedTransactionKeys[key]) {\n                    throw new Error(\"unknown transaction override \" + key);\n                }\n            }\n        }\n        // Do not allow these to be overridden in a deployment transaction\n        [\"data\", \"from\", \"to\"].forEach((key) => {\n            if (tx[key] == null) {\n                return;\n            }\n            logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, { operation: key });\n        });\n        if (tx.value) {\n            const value = BigNumber.from(tx.value);\n            if (!value.isZero() && !this.interface.deploy.payable) {\n                logger.throwError(\"non-payable constructor cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"overrides.value\",\n                    value: tx.value\n                });\n            }\n        }\n        // Make sure the call matches the constructor signature\n        logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n        // Set the data to the bytecode + the encoded constructor arguments\n        tx.data = hexlify(concat([\n            this.bytecode,\n            this.interface.encodeDeploy(args)\n        ]));\n        return tx;\n    }\n    deploy(...args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let overrides = {};\n            // If 1 extra parameter was passed in, it contains overrides\n            if (args.length === this.interface.deploy.inputs.length + 1) {\n                overrides = args.pop();\n            }\n            // Make sure the call matches the constructor signature\n            logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n            // Resolve ENS names and promises in the arguments\n            const params = yield resolveAddresses(this.signer, args, this.interface.deploy.inputs);\n            params.push(overrides);\n            // Get the deployment transaction (with optional overrides)\n            const unsignedTx = this.getDeployTransaction(...params);\n            // Send the deployment transaction\n            const tx = yield this.signer.sendTransaction(unsignedTx);\n            const address = getStatic(this.constructor, \"getContractAddress\")(tx);\n            const contract = getStatic(this.constructor, \"getContract\")(address, this.interface, this.signer);\n            // Add the modified wait that wraps events\n            addContractWait(contract, tx);\n            defineReadOnly(contract, \"deployTransaction\", tx);\n            return contract;\n        });\n    }\n    attach(address) {\n        return (this.constructor).getContract(address, this.interface, this.signer);\n    }\n    connect(signer) {\n        return new (this.constructor)(this.interface, this.bytecode, signer);\n    }\n    static fromSolidity(compilerOutput, signer) {\n        if (compilerOutput == null) {\n            logger.throwError(\"missing compiler output\", Logger.errors.MISSING_ARGUMENT, { argument: \"compilerOutput\" });\n        }\n        if (typeof (compilerOutput) === \"string\") {\n            compilerOutput = JSON.parse(compilerOutput);\n        }\n        const abi = compilerOutput.abi;\n        let bytecode = null;\n        if (compilerOutput.bytecode) {\n            bytecode = compilerOutput.bytecode;\n        }\n        else if (compilerOutput.evm && compilerOutput.evm.bytecode) {\n            bytecode = compilerOutput.evm.bytecode;\n        }\n        return new this(abi, bytecode, signer);\n    }\n    static getInterface(contractInterface) {\n        return Contract.getInterface(contractInterface);\n    }\n    static getContractAddress(tx) {\n        return getContractAddress(tx);\n    }\n    static getContract(address, contractInterface, signer) {\n        return new Contract(address, contractInterface, signer);\n    }\n}\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,SAAS,GAAI,IAAI,IAAI,IAAI,CAACA,SAAS,IAAK,UAAUC,OAAO,EAAEC,UAAU,EAAEC,CAAC,EAAEC,SAAS,EAAE;EACrF,SAASC,KAAK,CAACC,KAAK,EAAE;IAAE,OAAOA,KAAK,YAAYH,CAAC,GAAGG,KAAK,GAAG,IAAIH,CAAC,CAAC,UAAUI,OAAO,EAAE;MAAEA,OAAO,CAACD,KAAK,CAAC;IAAE,CAAC,CAAC;EAAE;EAC3G,OAAO,KAAKH,CAAC,KAAKA,CAAC,GAAGK,OAAO,CAAC,EAAE,UAAUD,OAAO,EAAEE,MAAM,EAAE;IACvD,SAASC,SAAS,CAACJ,KAAK,EAAE;MAAE,IAAI;QAAEK,IAAI,CAACP,SAAS,CAACQ,IAAI,CAACN,KAAK,CAAC,CAAC;MAAE,CAAC,CAAC,OAAOO,CAAC,EAAE;QAAEJ,MAAM,CAACI,CAAC,CAAC;MAAE;IAAE;IAC1F,SAASC,QAAQ,CAACR,KAAK,EAAE;MAAE,IAAI;QAAEK,IAAI,CAACP,SAAS,CAAC,OAAO,CAAC,CAACE,KAAK,CAAC,CAAC;MAAE,CAAC,CAAC,OAAOO,CAAC,EAAE;QAAEJ,MAAM,CAACI,CAAC,CAAC;MAAE;IAAE;IAC7F,SAASF,IAAI,CAACI,MAAM,EAAE;MAAEA,MAAM,CAACC,IAAI,GAAGT,OAAO,CAACQ,MAAM,CAACT,KAAK,CAAC,GAAGD,KAAK,CAACU,MAAM,CAACT,KAAK,CAAC,CAACW,IAAI,CAACP,SAAS,EAAEI,QAAQ,CAAC;IAAE;IAC7GH,IAAI,CAAC,CAACP,SAAS,GAAGA,SAAS,CAACc,KAAK,CAACjB,OAAO,EAAEC,UAAU,IAAI,EAAE,CAAC,EAAEU,IAAI,EAAE,CAAC;EACzE,CAAC,CAAC;AACN,CAAC;AACD,SAASO,iBAAiB,EAAEC,OAAO,EAAEC,SAAS,QAAQ,oBAAoB;AAC1E,SAASC,QAAQ,QAAQ,kCAAkC;AAC3D,SAASC,MAAM,EAAEC,UAAU,QAAQ,gCAAgC;AACnE,SAASC,UAAU,EAAEC,kBAAkB,QAAQ,wBAAwB;AACvE,SAASC,SAAS,QAAQ,0BAA0B;AACpD,SAASC,QAAQ,EAAEC,MAAM,EAAEC,OAAO,EAAEC,OAAO,EAAEC,WAAW,QAAQ,sBAAsB;AACtF,SAASC,cAAc,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,iBAAiB,EAAEC,WAAW,QAAQ,2BAA2B;AAC/G,SAASC,aAAa,QAAQ,6BAA6B;AAC3D,SAASC,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,OAAO,QAAQ,YAAY;AACpC,MAAMC,MAAM,GAAG,IAAIF,MAAM,CAACC,OAAO,CAAC;AAClC;AACA;AACA;AACA,MAAME,sBAAsB,GAAG;EAC3BC,OAAO,EAAE,IAAI;EAAEC,IAAI,EAAE,IAAI;EAAEC,IAAI,EAAE,IAAI;EAAEC,QAAQ,EAAE,IAAI;EAAEC,QAAQ,EAAE,IAAI;EAAEC,KAAK,EAAE,IAAI;EAAEC,EAAE,EAAE,IAAI;EAAE3C,KAAK,EAAE,IAAI;EACzG4C,IAAI,EAAE,IAAI;EAAEC,UAAU,EAAE,IAAI;EAC5BC,YAAY,EAAE,IAAI;EAAEC,oBAAoB,EAAE,IAAI;EAC9CC,UAAU,EAAE,IAAI;EAChBC,eAAe,EAAE;AACrB,CAAC;AACD,SAASC,WAAW,CAACC,QAAQ,EAAEC,aAAa,EAAE;EAC1C,OAAO1D,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;IAChD,MAAM2D,IAAI,GAAG,MAAMD,aAAa;IAChC,IAAI,OAAQC,IAAK,KAAK,QAAQ,EAAE;MAC5BlB,MAAM,CAACmB,kBAAkB,CAAC,6BAA6B,EAAE,MAAM,EAAED,IAAI,CAAC;IAC1E;IACA;IACA,IAAI;MACA,OAAOlC,UAAU,CAACkC,IAAI,CAAC;IAC3B,CAAC,CACD,OAAOE,KAAK,EAAE,CAAE;IAChB,IAAI,CAACJ,QAAQ,EAAE;MACXhB,MAAM,CAACqB,UAAU,CAAC,qDAAqD,EAAEvB,MAAM,CAACwB,MAAM,CAACC,qBAAqB,EAAE;QAC1GC,SAAS,EAAE;MACf,CAAC,CAAC;IACN;IACA,MAAMC,OAAO,GAAG,MAAMT,QAAQ,CAACD,WAAW,CAACG,IAAI,CAAC;IAChD,IAAIO,OAAO,IAAI,IAAI,EAAE;MACjBzB,MAAM,CAACmB,kBAAkB,CAAC,iDAAiD,EAAE,MAAM,EAAED,IAAI,CAAC;IAC9F;IACA,OAAOO,OAAO;EAClB,CAAC,CAAC;AACN;AACA;AACA,SAASC,gBAAgB,CAACV,QAAQ,EAAEnD,KAAK,EAAE8D,SAAS,EAAE;EAClD,OAAOpE,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;IAChD,IAAIqE,KAAK,CAACC,OAAO,CAACF,SAAS,CAAC,EAAE;MAC1B,OAAO,MAAM5D,OAAO,CAAC+D,GAAG,CAACH,SAAS,CAACI,GAAG,CAAC,CAACJ,SAAS,EAAEK,KAAK,KAAK;QACzD,OAAON,gBAAgB,CAACV,QAAQ,EAAIY,KAAK,CAACC,OAAO,CAAChE,KAAK,CAAC,GAAIA,KAAK,CAACmE,KAAK,CAAC,GAAGnE,KAAK,CAAC8D,SAAS,CAACT,IAAI,CAAC,EAAGS,SAAS,CAAC;MACjH,CAAC,CAAC,CAAC;IACP;IACA,IAAIA,SAAS,CAAClB,IAAI,KAAK,SAAS,EAAE;MAC9B,OAAO,MAAMM,WAAW,CAACC,QAAQ,EAAEnD,KAAK,CAAC;IAC7C;IACA,IAAI8D,SAAS,CAAClB,IAAI,KAAK,OAAO,EAAE;MAC5B,OAAO,MAAMiB,gBAAgB,CAACV,QAAQ,EAAEnD,KAAK,EAAE8D,SAAS,CAACM,UAAU,CAAC;IACxE;IACA,IAAIN,SAAS,CAACO,QAAQ,KAAK,OAAO,EAAE;MAChC,IAAI,CAACN,KAAK,CAACC,OAAO,CAAChE,KAAK,CAAC,EAAE;QACvB,OAAOE,OAAO,CAACC,MAAM,CAACgC,MAAM,CAACmC,SAAS,CAAC,yBAAyB,EAAErC,MAAM,CAACwB,MAAM,CAACc,gBAAgB,EAAE;UAC9FC,QAAQ,EAAE,OAAO;UACjBxE;QACJ,CAAC,CAAC,CAAC;MACP;MACA,OAAO,MAAME,OAAO,CAAC+D,GAAG,CAACjE,KAAK,CAACkE,GAAG,CAAEO,CAAC,IAAKZ,gBAAgB,CAACV,QAAQ,EAAEsB,CAAC,EAAEX,SAAS,CAACY,aAAa,CAAC,CAAC,CAAC;IACtG;IACA,OAAO1E,KAAK;EAChB,CAAC,CAAC;AACN;AACA,SAAS2E,mBAAmB,CAACC,QAAQ,EAAEC,QAAQ,EAAEC,IAAI,EAAE;EACnD,OAAOpF,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;IAChD;IACA,IAAIqF,SAAS,GAAG,CAAC,CAAC;IAClB,IAAID,IAAI,CAACE,MAAM,KAAKH,QAAQ,CAACI,MAAM,CAACD,MAAM,GAAG,CAAC,IAAI,OAAQF,IAAI,CAACA,IAAI,CAACE,MAAM,GAAG,CAAC,CAAE,KAAK,QAAQ,EAAE;MAC3FD,SAAS,GAAGhD,WAAW,CAAC+C,IAAI,CAACI,GAAG,EAAE,CAAC;IACvC;IACA;IACA/C,MAAM,CAACgD,kBAAkB,CAACL,IAAI,CAACE,MAAM,EAAEH,QAAQ,CAACI,MAAM,CAACD,MAAM,EAAE,oBAAoB,CAAC;IACpF;IACA,IAAIJ,QAAQ,CAACQ,MAAM,EAAE;MACjB,IAAIL,SAAS,CAACxC,IAAI,EAAE;QAChB;QACA;QACAwC,SAAS,CAACxC,IAAI,GAAGT,iBAAiB,CAAC;UAC/BuD,QAAQ,EAAEnC,WAAW,CAAC0B,QAAQ,CAACQ,MAAM,EAAEL,SAAS,CAACxC,IAAI,CAAC;UACtD6C,MAAM,EAAER,QAAQ,CAACQ,MAAM,CAACjE,UAAU;QACtC,CAAC,CAAC,CAACR,IAAI,CAAE2E,KAAK,IAAK5F,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;UAC5D,IAAIyB,UAAU,CAACmE,KAAK,CAACF,MAAM,CAAC,KAAKE,KAAK,CAACD,QAAQ,EAAE;YAC7ClD,MAAM,CAACqB,UAAU,CAAC,6CAA6C,EAAEvB,MAAM,CAACwB,MAAM,CAACC,qBAAqB,EAAE;cAClGC,SAAS,EAAE;YACf,CAAC,CAAC;UACN;UACA,OAAO2B,KAAK,CAACD,QAAQ;QACzB,CAAC,CAAC,CAAC;MACP,CAAC,MACI;QACDN,SAAS,CAACxC,IAAI,GAAGqC,QAAQ,CAACQ,MAAM,CAACjE,UAAU,EAAE;MACjD;IACJ,CAAC,MACI,IAAI4D,SAAS,CAACxC,IAAI,EAAE;MACrBwC,SAAS,CAACxC,IAAI,GAAGW,WAAW,CAAC0B,QAAQ,CAACW,QAAQ,EAAER,SAAS,CAACxC,IAAI,CAAC;MAC/D;MACA;MACA;MACA;IACJ;IACA;IACA,MAAMiD,QAAQ,GAAG,MAAM1D,iBAAiB,CAAC;MACrCgD,IAAI,EAAEjB,gBAAgB,CAACe,QAAQ,CAACQ,MAAM,IAAIR,QAAQ,CAACW,QAAQ,EAAET,IAAI,EAAED,QAAQ,CAACI,MAAM,CAAC;MACnFrB,OAAO,EAAEgB,QAAQ,CAACa,eAAe;MACjCV,SAAS,EAAGjD,iBAAiB,CAACiD,SAAS,CAAC,IAAI,CAAC;IACjD,CAAC,CAAC;IACF;IACA,MAAMzC,IAAI,GAAGsC,QAAQ,CAACc,SAAS,CAACC,kBAAkB,CAACd,QAAQ,EAAEW,QAAQ,CAACV,IAAI,CAAC;IAC3E,MAAMc,EAAE,GAAG;MACPtD,IAAI,EAAEA,IAAI;MACVK,EAAE,EAAE6C,QAAQ,CAAC5B;IACjB,CAAC;IACD;IACA,MAAMiC,EAAE,GAAGL,QAAQ,CAACT,SAAS;IAC7B;IACA,IAAIc,EAAE,CAACnD,KAAK,IAAI,IAAI,EAAE;MAClBkD,EAAE,CAAClD,KAAK,GAAGrB,SAAS,CAACkB,IAAI,CAACsD,EAAE,CAACnD,KAAK,CAAC,CAACoD,QAAQ,EAAE;IAClD;IACA,IAAID,EAAE,CAACrD,QAAQ,IAAI,IAAI,EAAE;MACrBoD,EAAE,CAACpD,QAAQ,GAAGnB,SAAS,CAACkB,IAAI,CAACsD,EAAE,CAACrD,QAAQ,CAAC;IAC7C;IACA,IAAIqD,EAAE,CAACpD,QAAQ,IAAI,IAAI,EAAE;MACrBmD,EAAE,CAACnD,QAAQ,GAAGpB,SAAS,CAACkB,IAAI,CAACsD,EAAE,CAACpD,QAAQ,CAAC;IAC7C;IACA,IAAIoD,EAAE,CAAC/C,YAAY,IAAI,IAAI,EAAE;MACzB8C,EAAE,CAAC9C,YAAY,GAAGzB,SAAS,CAACkB,IAAI,CAACsD,EAAE,CAAC/C,YAAY,CAAC;IACrD;IACA,IAAI+C,EAAE,CAAC9C,oBAAoB,IAAI,IAAI,EAAE;MACjC6C,EAAE,CAAC7C,oBAAoB,GAAG1B,SAAS,CAACkB,IAAI,CAACsD,EAAE,CAAC9C,oBAAoB,CAAC;IACrE;IACA,IAAI8C,EAAE,CAACtD,IAAI,IAAI,IAAI,EAAE;MACjBqD,EAAE,CAACrD,IAAI,GAAGsD,EAAE,CAACtD,IAAI;IACrB;IACA,IAAIsD,EAAE,CAACjD,IAAI,IAAI,IAAI,EAAE;MACjBgD,EAAE,CAAChD,IAAI,GAAGiD,EAAE,CAACjD,IAAI;IACrB;IACA,IAAIiD,EAAE,CAAChD,UAAU,IAAI,IAAI,EAAE;MACvB+C,EAAE,CAAC/C,UAAU,GAAGb,aAAa,CAAC6D,EAAE,CAAChD,UAAU,CAAC;IAChD;IACA;IACA,IAAI+C,EAAE,CAACpD,QAAQ,IAAI,IAAI,IAAIqC,QAAQ,CAACkB,GAAG,IAAI,IAAI,EAAE;MAC7C;MACA;MACA;MACA;MACA;MACA,IAAIC,SAAS,GAAG,KAAK;MACrB,MAAMC,KAAK,GAAG3E,QAAQ,CAACgB,IAAI,CAAC;MAC5B,KAAK,IAAI4D,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,KAAK,CAACjB,MAAM,EAAEkB,CAAC,EAAE,EAAE;QACnCF,SAAS,IAAI,CAAC;QACd,IAAIC,KAAK,CAACC,CAAC,CAAC,EAAE;UACVF,SAAS,IAAI,EAAE;QACnB;MACJ;MACAJ,EAAE,CAACpD,QAAQ,GAAGnB,SAAS,CAACkB,IAAI,CAACsC,QAAQ,CAACkB,GAAG,CAAC,CAACI,GAAG,CAACH,SAAS,CAAC;IAC7D;IACA;IACA,IAAIH,EAAE,CAAC7F,KAAK,EAAE;MACV,MAAMoG,OAAO,GAAG/E,SAAS,CAACkB,IAAI,CAACsD,EAAE,CAAC7F,KAAK,CAAC;MACxC,IAAI,CAACoG,OAAO,CAACC,MAAM,EAAE,IAAI,CAACxB,QAAQ,CAACyB,OAAO,EAAE;QACxCnE,MAAM,CAACqB,UAAU,CAAC,0CAA0C,EAAEvB,MAAM,CAACwB,MAAM,CAACC,qBAAqB,EAAE;UAC/FC,SAAS,EAAE,iBAAiB;UAC5B3D,KAAK,EAAE+E,SAAS,CAAC/E;QACrB,CAAC,CAAC;MACN;MACA4F,EAAE,CAAC5F,KAAK,GAAGoG,OAAO;IACtB;IACA,IAAIP,EAAE,CAAC7C,UAAU,EAAE;MACf4C,EAAE,CAAC5C,UAAU,GAAGjB,WAAW,CAAC8D,EAAE,CAAC7C,UAAU,CAAC;IAC9C;IACA,IAAI6C,EAAE,CAAC5C,eAAe,EAAE;MACpB2C,EAAE,CAAC3C,eAAe,GAAG,CAAC,CAAC4C,EAAE,CAAC5C,eAAe;IAC7C;IACA;IACA,OAAO8B,SAAS,CAACrC,KAAK;IACtB,OAAOqC,SAAS,CAACvC,QAAQ;IACzB,OAAOuC,SAAS,CAACtC,QAAQ;IACzB,OAAOsC,SAAS,CAACxC,IAAI;IACrB,OAAOwC,SAAS,CAAC/E,KAAK;IACtB,OAAO+E,SAAS,CAACnC,IAAI;IACrB,OAAOmC,SAAS,CAAClC,UAAU;IAC3B,OAAOkC,SAAS,CAACjC,YAAY;IAC7B,OAAOiC,SAAS,CAAChC,oBAAoB;IACrC,OAAOgC,SAAS,CAAC/B,UAAU;IAC3B,OAAO+B,SAAS,CAAC9B,eAAe;IAChC;IACA;IACA,MAAMsD,SAAS,GAAGC,MAAM,CAACC,IAAI,CAAC1B,SAAS,CAAC,CAAC2B,MAAM,CAAEC,GAAG,IAAM5B,SAAS,CAAC4B,GAAG,CAAC,IAAI,IAAK,CAAC;IAClF,IAAIJ,SAAS,CAACvB,MAAM,EAAE;MAClB7C,MAAM,CAACqB,UAAU,CAAE,mBAAkB+C,SAAS,CAACrC,GAAG,CAAE0C,CAAC,IAAKC,IAAI,CAACC,SAAS,CAACF,CAAC,CAAC,CAAC,CAACG,IAAI,CAAC,GAAG,CAAE,EAAC,EAAE9E,MAAM,CAACwB,MAAM,CAACC,qBAAqB,EAAE;QAC3HC,SAAS,EAAE,WAAW;QACtBoB,SAAS,EAAEwB;MACf,CAAC,CAAC;IACN;IACA,OAAOX,EAAE;EACb,CAAC,CAAC;AACN;AACA,SAASoB,aAAa,CAACpC,QAAQ,EAAEC,QAAQ,EAAE;EACvC,OAAO,UAAU,GAAGC,IAAI,EAAE;IACtB,OAAOH,mBAAmB,CAACC,QAAQ,EAAEC,QAAQ,EAAEC,IAAI,CAAC;EACxD,CAAC;AACL;AACA,SAASmC,aAAa,CAACrC,QAAQ,EAAEC,QAAQ,EAAE;EACvC,MAAMqC,gBAAgB,GAAItC,QAAQ,CAACQ,MAAM,IAAIR,QAAQ,CAACW,QAAS;EAC/D,OAAO,UAAU,GAAGT,IAAI,EAAE;IACtB,OAAOpF,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD,IAAI,CAACwH,gBAAgB,EAAE;QACnB/E,MAAM,CAACqB,UAAU,CAAC,uCAAuC,EAAEvB,MAAM,CAACwB,MAAM,CAACC,qBAAqB,EAAE;UAC5FC,SAAS,EAAE;QACf,CAAC,CAAC;MACN;MACA,MAAMiC,EAAE,GAAG,MAAMjB,mBAAmB,CAACC,QAAQ,EAAEC,QAAQ,EAAEC,IAAI,CAAC;MAC9D,OAAO,MAAMoC,gBAAgB,CAACC,WAAW,CAACvB,EAAE,CAAC;IACjD,CAAC,CAAC;EACN,CAAC;AACL;AACA,SAASwB,eAAe,CAACxC,QAAQ,EAAEgB,EAAE,EAAE;EACnC,MAAMyB,IAAI,GAAGzB,EAAE,CAACyB,IAAI,CAACC,IAAI,CAAC1B,EAAE,CAAC;EAC7BA,EAAE,CAACyB,IAAI,GAAIE,aAAa,IAAK;IACzB,OAAOF,IAAI,CAACE,aAAa,CAAC,CAAC5G,IAAI,CAAE6G,OAAO,IAAK;MACzCA,OAAO,CAACC,MAAM,GAAGD,OAAO,CAACE,IAAI,CAACxD,GAAG,CAAEyD,GAAG,IAAK;QACvC,IAAIC,KAAK,GAAGhG,QAAQ,CAAC+F,GAAG,CAAC;QACzB,IAAIE,MAAM,GAAG,IAAI;QACjB,IAAI;UACAA,MAAM,GAAGjD,QAAQ,CAACc,SAAS,CAACoC,QAAQ,CAACH,GAAG,CAAC;QAC7C,CAAC,CACD,OAAOpH,CAAC,EAAE,CAAE;QACZ;QACA,IAAIsH,MAAM,EAAE;UACRD,KAAK,CAAC9C,IAAI,GAAG+C,MAAM,CAAC/C,IAAI;UACxB8C,KAAK,CAACG,MAAM,GAAG,CAACzF,IAAI,EAAE0F,MAAM,KAAK;YAC7B,OAAOpD,QAAQ,CAACc,SAAS,CAACuC,cAAc,CAACJ,MAAM,CAACK,aAAa,EAAE5F,IAAI,EAAE0F,MAAM,CAAC;UAChF,CAAC;UACDJ,KAAK,CAACA,KAAK,GAAGC,MAAM,CAACxE,IAAI;UACzBuE,KAAK,CAACO,cAAc,GAAGN,MAAM,CAACO,SAAS;QAC3C;QACA;QACAR,KAAK,CAACS,cAAc,GAAG,MAAM;UAAE,OAAOzD,QAAQ,CAACW,QAAQ;QAAE,CAAC;QAC1DqC,KAAK,CAACU,QAAQ,GAAG,MAAM;UACnB,OAAO1D,QAAQ,CAACW,QAAQ,CAAC+C,QAAQ,CAACd,OAAO,CAACe,SAAS,CAAC;QACxD,CAAC;QACDX,KAAK,CAACY,cAAc,GAAG,MAAM;UACzB,OAAO5D,QAAQ,CAACW,QAAQ,CAACiD,cAAc,CAAChB,OAAO,CAACiB,eAAe,CAAC;QACpE,CAAC;QACDb,KAAK,CAACc,qBAAqB,GAAG,MAAM;UAChC,OAAOxI,OAAO,CAACD,OAAO,CAACuH,OAAO,CAAC;QACnC,CAAC;QACD,OAAOI,KAAK;MAChB,CAAC,CAAC;MACF,OAAOJ,OAAO;IAClB,CAAC,CAAC;EACN,CAAC;AACL;AACA,SAASmB,SAAS,CAAC/D,QAAQ,EAAEC,QAAQ,EAAE+D,cAAc,EAAE;EACnD,MAAM1B,gBAAgB,GAAItC,QAAQ,CAACQ,MAAM,IAAIR,QAAQ,CAACW,QAAS;EAC/D,OAAO,UAAU,GAAGT,IAAI,EAAE;IACtB,OAAOpF,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD;MACA,IAAImJ,QAAQ,GAAGC,SAAS;MACxB,IAAIhE,IAAI,CAACE,MAAM,KAAKH,QAAQ,CAACI,MAAM,CAACD,MAAM,GAAG,CAAC,IAAI,OAAQF,IAAI,CAACA,IAAI,CAACE,MAAM,GAAG,CAAC,CAAE,KAAK,QAAQ,EAAE;QAC3F,MAAMD,SAAS,GAAGhD,WAAW,CAAC+C,IAAI,CAACI,GAAG,EAAE,CAAC;QACzC,IAAIH,SAAS,CAAC8D,QAAQ,IAAI,IAAI,EAAE;UAC5BA,QAAQ,GAAG,MAAM9D,SAAS,CAAC8D,QAAQ;QACvC;QACA,OAAO9D,SAAS,CAAC8D,QAAQ;QACzB/D,IAAI,CAACiE,IAAI,CAAChE,SAAS,CAAC;MACxB;MACA;MACA,IAAIH,QAAQ,CAACoE,iBAAiB,IAAI,IAAI,EAAE;QACpC,MAAMpE,QAAQ,CAACqE,SAAS,CAACJ,QAAQ,CAAC;MACtC;MACA;MACA,MAAMjD,EAAE,GAAG,MAAMjB,mBAAmB,CAACC,QAAQ,EAAEC,QAAQ,EAAEC,IAAI,CAAC;MAC9D,MAAMrE,MAAM,GAAG,MAAMyG,gBAAgB,CAACgC,IAAI,CAACtD,EAAE,EAAEiD,QAAQ,CAAC;MACxD,IAAI;QACA,IAAI7I,KAAK,GAAG4E,QAAQ,CAACc,SAAS,CAACyD,oBAAoB,CAACtE,QAAQ,EAAEpE,MAAM,CAAC;QACrE,IAAImI,cAAc,IAAI/D,QAAQ,CAACuE,OAAO,CAACpE,MAAM,KAAK,CAAC,EAAE;UACjDhF,KAAK,GAAGA,KAAK,CAAC,CAAC,CAAC;QACpB;QACA,OAAOA,KAAK;MAChB,CAAC,CACD,OAAOuD,KAAK,EAAE;QACV,IAAIA,KAAK,CAAC8F,IAAI,KAAKpH,MAAM,CAACwB,MAAM,CAAC6F,cAAc,EAAE;UAC7C/F,KAAK,CAACK,OAAO,GAAGgB,QAAQ,CAAChB,OAAO;UAChCL,KAAK,CAACuB,IAAI,GAAGA,IAAI;UACjBvB,KAAK,CAACgG,WAAW,GAAG3D,EAAE;QAC1B;QACA,MAAMrC,KAAK;MACf;IACJ,CAAC,CAAC;EACN,CAAC;AACL;AACA,SAASiG,SAAS,CAAC5E,QAAQ,EAAEC,QAAQ,EAAE;EACnC,OAAO,UAAU,GAAGC,IAAI,EAAE;IACtB,OAAOpF,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD,IAAI,CAACkF,QAAQ,CAACQ,MAAM,EAAE;QAClBjD,MAAM,CAACqB,UAAU,CAAC,yCAAyC,EAAEvB,MAAM,CAACwB,MAAM,CAACC,qBAAqB,EAAE;UAC9FC,SAAS,EAAE;QACf,CAAC,CAAC;MACN;MACA;MACA,IAAIiB,QAAQ,CAACoE,iBAAiB,IAAI,IAAI,EAAE;QACpC,MAAMpE,QAAQ,CAACqE,SAAS,EAAE;MAC9B;MACA,MAAMQ,SAAS,GAAG,MAAM9E,mBAAmB,CAACC,QAAQ,EAAEC,QAAQ,EAAEC,IAAI,CAAC;MACrE,MAAMc,EAAE,GAAG,MAAMhB,QAAQ,CAACQ,MAAM,CAACsE,eAAe,CAACD,SAAS,CAAC;MAC3D;MACArC,eAAe,CAACxC,QAAQ,EAAEgB,EAAE,CAAC;MAC7B,OAAOA,EAAE;IACb,CAAC,CAAC;EACN,CAAC;AACL;AACA,SAAS+D,YAAY,CAAC/E,QAAQ,EAAEC,QAAQ,EAAE+D,cAAc,EAAE;EACtD,IAAI/D,QAAQ,CAAC+E,QAAQ,EAAE;IACnB,OAAOjB,SAAS,CAAC/D,QAAQ,EAAEC,QAAQ,EAAE+D,cAAc,CAAC;EACxD;EACA,OAAOY,SAAS,CAAC5E,QAAQ,EAAEC,QAAQ,CAAC;AACxC;AACA,SAASgF,WAAW,CAACnD,MAAM,EAAE;EACzB,IAAIA,MAAM,CAAC9C,OAAO,KAAK8C,MAAM,CAACsB,MAAM,IAAI,IAAI,IAAItB,MAAM,CAACsB,MAAM,CAAChD,MAAM,KAAK,CAAC,CAAC,EAAE;IACzE,OAAO,GAAG;EACd;EACA,OAAO,CAAC0B,MAAM,CAAC9C,OAAO,IAAI,GAAG,IAAI,GAAG,IAAI8C,MAAM,CAACsB,MAAM,GAAGtB,MAAM,CAACsB,MAAM,CAAC9D,GAAG,CAAE4F,KAAK,IAAK;IACjF,IAAI/F,KAAK,CAACC,OAAO,CAAC8F,KAAK,CAAC,EAAE;MACtB,OAAOA,KAAK,CAAC/C,IAAI,CAAC,GAAG,CAAC;IAC1B;IACA,OAAO+C,KAAK;EAChB,CAAC,CAAC,CAAC/C,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;AACtB;AACA,MAAMgD,YAAY,CAAC;EACfC,WAAW,CAACC,GAAG,EAAEvD,MAAM,EAAE;IACrB/E,cAAc,CAAC,IAAI,EAAE,KAAK,EAAEsI,GAAG,CAAC;IAChCtI,cAAc,CAAC,IAAI,EAAE,QAAQ,EAAE+E,MAAM,CAAC;IACtC,IAAI,CAACwD,UAAU,GAAG,EAAE;EACxB;EACAC,WAAW,CAACC,QAAQ,EAAEC,IAAI,EAAE;IACxB,IAAI,CAACH,UAAU,CAACnB,IAAI,CAAC;MAAEqB,QAAQ,EAAEA,QAAQ;MAAEC,IAAI,EAAEA;IAAK,CAAC,CAAC;EAC5D;EACAhC,cAAc,CAAC+B,QAAQ,EAAE;IACrB,IAAI1J,IAAI,GAAG,KAAK;IAChB,IAAI,CAACwJ,UAAU,GAAG,IAAI,CAACA,UAAU,CAACxD,MAAM,CAAE4D,IAAI,IAAK;MAC/C,IAAI5J,IAAI,IAAI4J,IAAI,CAACF,QAAQ,KAAKA,QAAQ,EAAE;QACpC,OAAO,IAAI;MACf;MACA1J,IAAI,GAAG,IAAI;MACX,OAAO,KAAK;IAChB,CAAC,CAAC;EACN;EACA6J,kBAAkB,GAAG;IACjB,IAAI,CAACL,UAAU,GAAG,EAAE;EACxB;EACAM,SAAS,GAAG;IACR,OAAO,IAAI,CAACN,UAAU,CAAChG,GAAG,CAAEgC,CAAC,IAAKA,CAAC,CAACkE,QAAQ,CAAC;EACjD;EACAK,aAAa,GAAG;IACZ,OAAO,IAAI,CAACP,UAAU,CAAClF,MAAM;EACjC;EACA0F,GAAG,CAAC5F,IAAI,EAAE;IACN,MAAM2F,aAAa,GAAG,IAAI,CAACA,aAAa,EAAE;IAC1C,IAAI,CAACP,UAAU,GAAG,IAAI,CAACA,UAAU,CAACxD,MAAM,CAAE4D,IAAI,IAAK;MAC/C,MAAMK,QAAQ,GAAG7F,IAAI,CAAC8F,KAAK,EAAE;MAC7B;MACAC,UAAU,CAAC,MAAM;QACbP,IAAI,CAACF,QAAQ,CAACxJ,KAAK,CAAC,IAAI,EAAE+J,QAAQ,CAAC;MACvC,CAAC,EAAE,CAAC,CAAC;MACL;MACA,OAAO,CAAEL,IAAI,CAACD,IAAK;IACvB,CAAC,CAAC;IACF,OAAOI,aAAa;EACxB;EACAK,YAAY,CAAClD,KAAK,EAAE,CACpB;EACA;EACAmD,OAAO,CAACnD,KAAK,EAAE;IACX,OAAO,CAACA,KAAK,CAAC;EAClB;AACJ;AACA,MAAMoD,iBAAiB,SAASjB,YAAY,CAAC;EACzCC,WAAW,GAAG;IACV,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC;EACxB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,MAAMiB,oBAAoB,SAASlB,YAAY,CAAC;EAC5CC,WAAW,CAACpG,OAAO,EAAEsH,iBAAiB,EAAErG,QAAQ,EAAEmD,MAAM,EAAE;IACtD,MAAMtB,MAAM,GAAG;MACX9C,OAAO,EAAEA;IACb,CAAC;IACD,IAAIkG,KAAK,GAAGoB,iBAAiB,CAACC,aAAa,CAACtG,QAAQ,CAAC;IACrD,IAAImD,MAAM,EAAE;MACR,IAAI8B,KAAK,KAAK9B,MAAM,CAAC,CAAC,CAAC,EAAE;QACrB7F,MAAM,CAACmB,kBAAkB,CAAC,gBAAgB,EAAE,QAAQ,EAAE0E,MAAM,CAAC;MACjE;MACAtB,MAAM,CAACsB,MAAM,GAAGA,MAAM,CAAC4C,KAAK,EAAE;IAClC,CAAC,MACI;MACDlE,MAAM,CAACsB,MAAM,GAAG,CAAC8B,KAAK,CAAC;IAC3B;IACA,KAAK,CAACD,WAAW,CAACnD,MAAM,CAAC,EAAEA,MAAM,CAAC;IAClC/E,cAAc,CAAC,IAAI,EAAE,SAAS,EAAEiC,OAAO,CAAC;IACxCjC,cAAc,CAAC,IAAI,EAAE,WAAW,EAAEuJ,iBAAiB,CAAC;IACpDvJ,cAAc,CAAC,IAAI,EAAE,UAAU,EAAEkD,QAAQ,CAAC;EAC9C;EACAiG,YAAY,CAAClD,KAAK,EAAE;IAChB,KAAK,CAACkD,YAAY,CAAClD,KAAK,CAAC;IACzBA,KAAK,CAACA,KAAK,GAAG,IAAI,CAAC/C,QAAQ,CAACxB,IAAI;IAChCuE,KAAK,CAACO,cAAc,GAAG,IAAI,CAACtD,QAAQ,CAACuG,MAAM,EAAE;IAC7CxD,KAAK,CAACG,MAAM,GAAG,CAACzF,IAAI,EAAE0F,MAAM,KAAK;MAC7B,OAAO,IAAI,CAACtC,SAAS,CAACuC,cAAc,CAAC,IAAI,CAACpD,QAAQ,EAAEvC,IAAI,EAAE0F,MAAM,CAAC;IACrE,CAAC;IACD,IAAI;MACAJ,KAAK,CAAC9C,IAAI,GAAG,IAAI,CAACY,SAAS,CAACuC,cAAc,CAAC,IAAI,CAACpD,QAAQ,EAAE+C,KAAK,CAACtF,IAAI,EAAEsF,KAAK,CAACI,MAAM,CAAC;IACvF,CAAC,CACD,OAAOzE,KAAK,EAAE;MACVqE,KAAK,CAAC9C,IAAI,GAAG,IAAI;MACjB8C,KAAK,CAACyD,WAAW,GAAG9H,KAAK;IAC7B;EACJ;EACAwH,OAAO,CAACnD,KAAK,EAAE;IACX,MAAMnE,MAAM,GAAG5C,iBAAiB,CAAC+G,KAAK,CAAC9C,IAAI,CAAC;IAC5C,IAAIrB,MAAM,CAACuB,MAAM,EAAE;MACf,MAAMvB,MAAM,CAAC,CAAC,CAAC,CAACF,KAAK;IACzB;IACA,MAAMuB,IAAI,GAAG,CAAC8C,KAAK,CAAC9C,IAAI,IAAI,EAAE,EAAE8F,KAAK,EAAE;IACvC9F,IAAI,CAACiE,IAAI,CAACnB,KAAK,CAAC;IAChB,OAAO9C,IAAI;EACf;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,MAAMwG,oBAAoB,SAASvB,YAAY,CAAC;EAC5CC,WAAW,CAACpG,OAAO,EAAEsH,iBAAiB,EAAE;IACpC,KAAK,CAAC,GAAG,EAAE;MAAEtH,OAAO,EAAEA;IAAQ,CAAC,CAAC;IAChCjC,cAAc,CAAC,IAAI,EAAE,SAAS,EAAEiC,OAAO,CAAC;IACxCjC,cAAc,CAAC,IAAI,EAAE,WAAW,EAAEuJ,iBAAiB,CAAC;EACxD;EACAJ,YAAY,CAAClD,KAAK,EAAE;IAChB,KAAK,CAACkD,YAAY,CAAClD,KAAK,CAAC;IACzB,IAAI;MACA,MAAMC,MAAM,GAAG,IAAI,CAACnC,SAAS,CAACoC,QAAQ,CAACF,KAAK,CAAC;MAC7CA,KAAK,CAACA,KAAK,GAAGC,MAAM,CAACxE,IAAI;MACzBuE,KAAK,CAACO,cAAc,GAAGN,MAAM,CAACO,SAAS;MACvCR,KAAK,CAACG,MAAM,GAAG,CAACzF,IAAI,EAAE0F,MAAM,KAAK;QAC7B,OAAO,IAAI,CAACtC,SAAS,CAACuC,cAAc,CAACJ,MAAM,CAACK,aAAa,EAAE5F,IAAI,EAAE0F,MAAM,CAAC;MAC5E,CAAC;MACDJ,KAAK,CAAC9C,IAAI,GAAG+C,MAAM,CAAC/C,IAAI;IAC5B,CAAC,CACD,OAAOvB,KAAK,EAAE;MACV;IAAA;EAER;AACJ;AACA,OAAO,MAAMgI,YAAY,CAAC;EACtBvB,WAAW,CAACwB,aAAa,EAAEN,iBAAiB,EAAEhE,gBAAgB,EAAE;IAC5D;IACA;IACAvF,cAAc,CAAC,IAAI,EAAE,WAAW,EAAEE,SAAS,CAAC4J,GAAG,CAACC,MAAM,EAAE,cAAc,CAAC,CAACR,iBAAiB,CAAC,CAAC;IAC3F,IAAIhE,gBAAgB,IAAI,IAAI,EAAE;MAC1BvF,cAAc,CAAC,IAAI,EAAE,UAAU,EAAE,IAAI,CAAC;MACtCA,cAAc,CAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,CAAC;IACxC,CAAC,MACI,IAAIV,MAAM,CAAC0K,QAAQ,CAACzE,gBAAgB,CAAC,EAAE;MACxCvF,cAAc,CAAC,IAAI,EAAE,UAAU,EAAEuF,gBAAgB,CAAC3B,QAAQ,IAAI,IAAI,CAAC;MACnE5D,cAAc,CAAC,IAAI,EAAE,QAAQ,EAAEuF,gBAAgB,CAAC;IACpD,CAAC,MACI,IAAIlG,QAAQ,CAAC4K,UAAU,CAAC1E,gBAAgB,CAAC,EAAE;MAC5CvF,cAAc,CAAC,IAAI,EAAE,UAAU,EAAEuF,gBAAgB,CAAC;MAClDvF,cAAc,CAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,CAAC;IACxC,CAAC,MACI;MACDQ,MAAM,CAACmB,kBAAkB,CAAC,4BAA4B,EAAE,kBAAkB,EAAE4D,gBAAgB,CAAC;IACjG;IACAvF,cAAc,CAAC,IAAI,EAAE,YAAY,EAAE,CAAC,CAAC,CAAC;IACtCA,cAAc,CAAC,IAAI,EAAE,aAAa,EAAE,CAAC,CAAC,CAAC;IACvCA,cAAc,CAAC,IAAI,EAAE,WAAW,EAAE,CAAC,CAAC,CAAC;IACrCA,cAAc,CAAC,IAAI,EAAE,qBAAqB,EAAE,CAAC,CAAC,CAAC;IAC/CA,cAAc,CAAC,IAAI,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC;IACnC;MACI,MAAMkK,aAAa,GAAG,CAAC,CAAC;MACxBrF,MAAM,CAACC,IAAI,CAAC,IAAI,CAACf,SAAS,CAAC+B,MAAM,CAAC,CAACqE,OAAO,CAAE3D,cAAc,IAAK;QAC3D,MAAMP,KAAK,GAAG,IAAI,CAAClC,SAAS,CAAC+B,MAAM,CAACU,cAAc,CAAC;QACnDxG,cAAc,CAAC,IAAI,CAACoK,OAAO,EAAE5D,cAAc,EAAE,CAAC,GAAGrD,IAAI,KAAK;UACtD,OAAO;YACHlB,OAAO,EAAE,IAAI,CAACA,OAAO;YACrBoE,MAAM,EAAE,IAAI,CAACtC,SAAS,CAACsG,kBAAkB,CAACpE,KAAK,EAAE9C,IAAI;UACzD,CAAC;QACL,CAAC,CAAC;QACF,IAAI,CAAC+G,aAAa,CAACjE,KAAK,CAACvE,IAAI,CAAC,EAAE;UAC5BwI,aAAa,CAACjE,KAAK,CAACvE,IAAI,CAAC,GAAG,EAAE;QAClC;QACAwI,aAAa,CAACjE,KAAK,CAACvE,IAAI,CAAC,CAAC0F,IAAI,CAACZ,cAAc,CAAC;MAClD,CAAC,CAAC;MACF3B,MAAM,CAACC,IAAI,CAACoF,aAAa,CAAC,CAACC,OAAO,CAAEzI,IAAI,IAAK;QACzC,MAAM0I,OAAO,GAAGF,aAAa,CAACxI,IAAI,CAAC;QACnC,IAAI0I,OAAO,CAAC/G,MAAM,KAAK,CAAC,EAAE;UACtBrD,cAAc,CAAC,IAAI,CAACoK,OAAO,EAAE1I,IAAI,EAAE,IAAI,CAAC0I,OAAO,CAACA,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;QAChE,CAAC,MACI;UACD5J,MAAM,CAAC8J,IAAI,CAAE,2BAA0B5I,IAAK,KAAI0I,OAAO,CAAChF,IAAI,CAAC,IAAI,CAAE,GAAE,CAAC;QAC1E;MACJ,CAAC,CAAC;IACN;IACApF,cAAc,CAAC,IAAI,EAAE,gBAAgB,EAAE,CAAC,CAAC,CAAC;IAC1CA,cAAc,CAAC,IAAI,EAAE,eAAe,EAAE,CAAC,CAAC,CAAC;IACzC,IAAI6J,aAAa,IAAI,IAAI,EAAE;MACvBrJ,MAAM,CAACmB,kBAAkB,CAAC,sCAAsC,EAAE,eAAe,EAAEkI,aAAa,CAAC;IACrG;IACA7J,cAAc,CAAC,IAAI,EAAE,SAAS,EAAE6J,aAAa,CAAC;IAC9C,IAAI,IAAI,CAACjG,QAAQ,EAAE;MACf5D,cAAc,CAAC,IAAI,EAAE,iBAAiB,EAAEuB,WAAW,CAAC,IAAI,CAACqC,QAAQ,EAAEiG,aAAa,CAAC,CAAC;IACtF,CAAC,MACI;MACD,IAAI;QACA7J,cAAc,CAAC,IAAI,EAAE,iBAAiB,EAAEzB,OAAO,CAACD,OAAO,CAACkB,UAAU,CAACqK,aAAa,CAAC,CAAC,CAAC;MACvF,CAAC,CACD,OAAOjI,KAAK,EAAE;QACV;QACApB,MAAM,CAACqB,UAAU,CAAC,0DAA0D,EAAEvB,MAAM,CAACwB,MAAM,CAACC,qBAAqB,EAAE;UAC/GC,SAAS,EAAE;QACf,CAAC,CAAC;MACN;IACJ;IACA;IACA,IAAI,CAAC8B,eAAe,CAACyG,KAAK,CAAE3L,CAAC,IAAK,CAAE,CAAC,CAAC;IACtC,MAAM4L,WAAW,GAAG,CAAC,CAAC;IACtB,MAAMC,gBAAgB,GAAG,CAAC,CAAC;IAC3B5F,MAAM,CAACC,IAAI,CAAC,IAAI,CAACf,SAAS,CAAC2G,SAAS,CAAC,CAACP,OAAO,CAAE1D,SAAS,IAAK;MACzD,MAAMvD,QAAQ,GAAG,IAAI,CAACa,SAAS,CAAC2G,SAAS,CAACjE,SAAS,CAAC;MACpD;MACA;MACA,IAAIgE,gBAAgB,CAAChE,SAAS,CAAC,EAAE;QAC7BjG,MAAM,CAAC8J,IAAI,CAAE,2BAA0BpF,IAAI,CAACC,SAAS,CAACsB,SAAS,CAAE,EAAC,CAAC;QACnE;MACJ;MACAgE,gBAAgB,CAAChE,SAAS,CAAC,GAAG,IAAI;MAClC;MACA;MACA;QACI,MAAM/E,IAAI,GAAGwB,QAAQ,CAACxB,IAAI;QAC1B,IAAI,CAAC8I,WAAW,CAAE,IAAG9I,IAAK,EAAC,CAAC,EAAE;UAC1B8I,WAAW,CAAE,IAAG9I,IAAK,EAAC,CAAC,GAAG,EAAE;QAChC;QACA8I,WAAW,CAAE,IAAG9I,IAAK,EAAC,CAAC,CAAC0F,IAAI,CAACX,SAAS,CAAC;MAC3C;MACA,IAAI,IAAI,CAACA,SAAS,CAAC,IAAI,IAAI,EAAE;QACzBzG,cAAc,CAAC,IAAI,EAAEyG,SAAS,EAAEuB,YAAY,CAAC,IAAI,EAAE9E,QAAQ,EAAE,IAAI,CAAC,CAAC;MACvE;MACA;MACA;MACA;MACA,IAAI,IAAI,CAACwH,SAAS,CAACjE,SAAS,CAAC,IAAI,IAAI,EAAE;QACnCzG,cAAc,CAAC,IAAI,CAAC0K,SAAS,EAAEjE,SAAS,EAAEuB,YAAY,CAAC,IAAI,EAAE9E,QAAQ,EAAE,KAAK,CAAC,CAAC;MAClF;MACA,IAAI,IAAI,CAACyH,UAAU,CAAClE,SAAS,CAAC,IAAI,IAAI,EAAE;QACpCzG,cAAc,CAAC,IAAI,CAAC2K,UAAU,EAAElE,SAAS,EAAEO,SAAS,CAAC,IAAI,EAAE9D,QAAQ,EAAE,IAAI,CAAC,CAAC;MAC/E;MACA,IAAI,IAAI,CAACF,mBAAmB,CAACyD,SAAS,CAAC,IAAI,IAAI,EAAE;QAC7CzG,cAAc,CAAC,IAAI,CAACgD,mBAAmB,EAAEyD,SAAS,EAAEpB,aAAa,CAAC,IAAI,EAAEnC,QAAQ,CAAC,CAAC;MACtF;MACA,IAAI,IAAI,CAACsC,WAAW,CAACiB,SAAS,CAAC,IAAI,IAAI,EAAE;QACrCzG,cAAc,CAAC,IAAI,CAACwF,WAAW,EAAEiB,SAAS,EAAEnB,aAAa,CAAC,IAAI,EAAEpC,QAAQ,CAAC,CAAC;MAC9E;IACJ,CAAC,CAAC;IACF2B,MAAM,CAACC,IAAI,CAAC0F,WAAW,CAAC,CAACL,OAAO,CAAEzI,IAAI,IAAK;MACvC;MACA,MAAMkJ,UAAU,GAAGJ,WAAW,CAAC9I,IAAI,CAAC;MACpC,IAAIkJ,UAAU,CAACvH,MAAM,GAAG,CAAC,EAAE;QACvB;MACJ;MACA;MACA3B,IAAI,GAAGA,IAAI,CAACmJ,SAAS,CAAC,CAAC,CAAC;MACxB,MAAMpE,SAAS,GAAGmE,UAAU,CAAC,CAAC,CAAC;MAC/B;MACA,IAAI;QACA,IAAI,IAAI,CAAClJ,IAAI,CAAC,IAAI,IAAI,EAAE;UACpB1B,cAAc,CAAC,IAAI,EAAE0B,IAAI,EAAE,IAAI,CAAC+E,SAAS,CAAC,CAAC;QAC/C;MACJ,CAAC,CACD,OAAO7H,CAAC,EAAE,CAAE;MACZ,IAAI,IAAI,CAAC8L,SAAS,CAAChJ,IAAI,CAAC,IAAI,IAAI,EAAE;QAC9B1B,cAAc,CAAC,IAAI,CAAC0K,SAAS,EAAEhJ,IAAI,EAAE,IAAI,CAACgJ,SAAS,CAACjE,SAAS,CAAC,CAAC;MACnE;MACA,IAAI,IAAI,CAACkE,UAAU,CAACjJ,IAAI,CAAC,IAAI,IAAI,EAAE;QAC/B1B,cAAc,CAAC,IAAI,CAAC2K,UAAU,EAAEjJ,IAAI,EAAE,IAAI,CAACiJ,UAAU,CAAClE,SAAS,CAAC,CAAC;MACrE;MACA,IAAI,IAAI,CAACzD,mBAAmB,CAACtB,IAAI,CAAC,IAAI,IAAI,EAAE;QACxC1B,cAAc,CAAC,IAAI,CAACgD,mBAAmB,EAAEtB,IAAI,EAAE,IAAI,CAACsB,mBAAmB,CAACyD,SAAS,CAAC,CAAC;MACvF;MACA,IAAI,IAAI,CAACjB,WAAW,CAAC9D,IAAI,CAAC,IAAI,IAAI,EAAE;QAChC1B,cAAc,CAAC,IAAI,CAACwF,WAAW,EAAE9D,IAAI,EAAE,IAAI,CAAC8D,WAAW,CAACiB,SAAS,CAAC,CAAC;MACvE;IACJ,CAAC,CAAC;EACN;EACA,OAAOhH,kBAAkB,CAACmI,WAAW,EAAE;IACnC,OAAOnI,kBAAkB,CAACmI,WAAW,CAAC;EAC1C;EACA,OAAOkD,YAAY,CAACvB,iBAAiB,EAAE;IACnC,IAAInK,SAAS,CAAC2L,WAAW,CAACxB,iBAAiB,CAAC,EAAE;MAC1C,OAAOA,iBAAiB;IAC5B;IACA,OAAO,IAAInK,SAAS,CAACmK,iBAAiB,CAAC;EAC3C;EACA;EACAyB,QAAQ,GAAG;IACP,OAAO,IAAI,CAAC1D,SAAS,EAAE;EAC3B;EACAA,SAAS,CAACJ,QAAQ,EAAE;IAChB,IAAI,CAAC,IAAI,CAAC+D,gBAAgB,EAAE;MACxB;MACA,IAAI,IAAI,CAAC5D,iBAAiB,EAAE;QACxB,IAAI,CAAC4D,gBAAgB,GAAG,IAAI,CAAC5D,iBAAiB,CAAC3B,IAAI,EAAE,CAAC1G,IAAI,CAAC,MAAM;UAC7D,OAAO,IAAI;QACf,CAAC,CAAC;MACN,CAAC,MACI;QACD;QACA;QACA;QACA,IAAI,CAACiM,gBAAgB,GAAG,IAAI,CAACrH,QAAQ,CAACsH,OAAO,CAAC,IAAI,CAACjJ,OAAO,EAAEiF,QAAQ,CAAC,CAAClI,IAAI,CAAE0I,IAAI,IAAK;UACjF,IAAIA,IAAI,KAAK,IAAI,EAAE;YACflH,MAAM,CAACqB,UAAU,CAAC,uBAAuB,EAAEvB,MAAM,CAACwB,MAAM,CAACC,qBAAqB,EAAE;cAC5EoJ,eAAe,EAAE,IAAI,CAAClJ,OAAO;cAC7BD,SAAS,EAAE;YACf,CAAC,CAAC;UACN;UACA,OAAO,IAAI;QACf,CAAC,CAAC;MACN;IACJ;IACA,OAAO,IAAI,CAACiJ,gBAAgB;EAChC;EACA;EACA;EACA;EACA;EACAG,QAAQ,CAAChI,SAAS,EAAE;IAChB,IAAI,CAAC,IAAI,CAACK,MAAM,EAAE;MACdjD,MAAM,CAACqB,UAAU,CAAC,yCAAyC,EAAEvB,MAAM,CAACwB,MAAM,CAACC,qBAAqB,EAAE;QAAEC,SAAS,EAAE;MAA4B,CAAC,CAAC;IACjJ;IACA,MAAMiC,EAAE,GAAG7D,WAAW,CAACgD,SAAS,IAAI,CAAC,CAAC,CAAC;IACvC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC+G,OAAO,CAAC,UAAUnF,GAAG,EAAE;MAClC,IAAIf,EAAE,CAACe,GAAG,CAAC,IAAI,IAAI,EAAE;QACjB;MACJ;MACAxE,MAAM,CAACqB,UAAU,CAAC,kBAAkB,GAAGmD,GAAG,EAAE1E,MAAM,CAACwB,MAAM,CAACC,qBAAqB,EAAE;QAAEC,SAAS,EAAEgD;MAAI,CAAC,CAAC;IACxG,CAAC,CAAC;IACFf,EAAE,CAACjD,EAAE,GAAG,IAAI,CAAC8C,eAAe;IAC5B,OAAO,IAAI,CAACkH,QAAQ,EAAE,CAAChM,IAAI,CAAC,MAAM;MAC9B,OAAO,IAAI,CAACyE,MAAM,CAACsE,eAAe,CAAC9D,EAAE,CAAC;IAC1C,CAAC,CAAC;EACN;EACA;EACAoH,OAAO,CAAC9F,gBAAgB,EAAE;IACtB,IAAI,OAAQA,gBAAiB,KAAK,QAAQ,EAAE;MACxCA,gBAAgB,GAAG,IAAIhG,UAAU,CAACgG,gBAAgB,EAAE,IAAI,CAAC3B,QAAQ,CAAC;IACtE;IACA,MAAMX,QAAQ,GAAG,IAAK,IAAI,CAACoF,WAAW,CAAE,IAAI,CAACpG,OAAO,EAAE,IAAI,CAAC8B,SAAS,EAAEwB,gBAAgB,CAAC;IACvF,IAAI,IAAI,CAAC8B,iBAAiB,EAAE;MACxBrH,cAAc,CAACiD,QAAQ,EAAE,mBAAmB,EAAE,IAAI,CAACoE,iBAAiB,CAAC;IACzE;IACA,OAAOpE,QAAQ;EACnB;EACA;EACAqI,MAAM,CAACzB,aAAa,EAAE;IAClB,OAAO,IAAK,IAAI,CAACxB,WAAW,CAAEwB,aAAa,EAAE,IAAI,CAAC9F,SAAS,EAAE,IAAI,CAACN,MAAM,IAAI,IAAI,CAACG,QAAQ,CAAC;EAC9F;EACA,OAAO2H,SAAS,CAAClN,KAAK,EAAE;IACpB,OAAOc,OAAO,CAACoM,SAAS,CAAClN,KAAK,CAAC;EACnC;EACAmN,sBAAsB,CAACC,YAAY,EAAE;IACjC;IACA,IAAI,IAAI,CAACC,cAAc,CAACD,YAAY,CAACnD,GAAG,CAAC,EAAE;MACvC,OAAO,IAAI,CAACoD,cAAc,CAACD,YAAY,CAACnD,GAAG,CAAC;IAChD;IACA,OAAOmD,YAAY;EACvB;EACAE,gBAAgB,CAACC,SAAS,EAAE;IACxB,IAAI,OAAQA,SAAU,KAAK,QAAQ,EAAE;MACjC;MACA;MACA,IAAIA,SAAS,KAAK,OAAO,EAAE;QACvB,OAAO,IAAI,CAACJ,sBAAsB,CAAC,IAAInC,iBAAiB,EAAE,CAAC;MAC/D;MACA;MACA,IAAIuC,SAAS,KAAK,OAAO,EAAE;QACvB,OAAO,IAAI,CAACJ,sBAAsB,CAAC,IAAIpD,YAAY,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;MACvE;MACA;MACA,IAAIwD,SAAS,KAAK,GAAG,EAAE;QACnB,OAAO,IAAI,CAACJ,sBAAsB,CAAC,IAAI7B,oBAAoB,CAAC,IAAI,CAAC1H,OAAO,EAAE,IAAI,CAAC8B,SAAS,CAAC,CAAC;MAC9F;MACA;MACA,MAAMb,QAAQ,GAAG,IAAI,CAACa,SAAS,CAAC8H,QAAQ,CAACD,SAAS,CAAC;MACnD,OAAO,IAAI,CAACJ,sBAAsB,CAAC,IAAIlC,oBAAoB,CAAC,IAAI,CAACrH,OAAO,EAAE,IAAI,CAAC8B,SAAS,EAAEb,QAAQ,CAAC,CAAC;IACxG;IACA;IACA,IAAI0I,SAAS,CAACvF,MAAM,IAAIuF,SAAS,CAACvF,MAAM,CAAChD,MAAM,GAAG,CAAC,EAAE;MACjD;MACA,IAAI;QACA,MAAM8E,KAAK,GAAGyD,SAAS,CAACvF,MAAM,CAAC,CAAC,CAAC;QACjC,IAAI,OAAQ8B,KAAM,KAAK,QAAQ,EAAE;UAC7B,MAAM,IAAI2D,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC;QACtC;;QACA,MAAM5I,QAAQ,GAAG,IAAI,CAACa,SAAS,CAAC8H,QAAQ,CAAC1D,KAAK,CAAC;QAC/C,OAAO,IAAI,CAACqD,sBAAsB,CAAC,IAAIlC,oBAAoB,CAAC,IAAI,CAACrH,OAAO,EAAE,IAAI,CAAC8B,SAAS,EAAEb,QAAQ,EAAE0I,SAAS,CAACvF,MAAM,CAAC,CAAC;MAC1H,CAAC,CACD,OAAOzE,KAAK,EAAE,CAAE;MAChB;MACA,MAAMmD,MAAM,GAAG;QACX9C,OAAO,EAAE,IAAI,CAACA,OAAO;QACrBoE,MAAM,EAAEuF,SAAS,CAACvF;MACtB,CAAC;MACD,OAAO,IAAI,CAACmF,sBAAsB,CAAC,IAAIpD,YAAY,CAACF,WAAW,CAACnD,MAAM,CAAC,EAAEA,MAAM,CAAC,CAAC;IACrF;IACA,OAAO,IAAI,CAACyG,sBAAsB,CAAC,IAAI7B,oBAAoB,CAAC,IAAI,CAAC1H,OAAO,EAAE,IAAI,CAAC8B,SAAS,CAAC,CAAC;EAC9F;EACAgI,mBAAmB,CAACN,YAAY,EAAE;IAC9B,IAAIA,YAAY,CAAC3C,aAAa,EAAE,KAAK,CAAC,EAAE;MACpC,OAAO,IAAI,CAAC4C,cAAc,CAACD,YAAY,CAACnD,GAAG,CAAC;MAC5C;MACA,MAAM0D,IAAI,GAAG,IAAI,CAACC,aAAa,CAACR,YAAY,CAACnD,GAAG,CAAC;MACjD,IAAI0D,IAAI,IAAIP,YAAY,CAAC1G,MAAM,EAAE;QAC7B,IAAI,CAACnB,QAAQ,CAACsI,GAAG,CAACT,YAAY,CAAC1G,MAAM,EAAEiH,IAAI,CAAC;QAC5C,OAAO,IAAI,CAACC,aAAa,CAACR,YAAY,CAACnD,GAAG,CAAC;MAC/C;IACJ;EACJ;EACA;EACA;EACA6D,UAAU,CAACV,YAAY,EAAEzF,GAAG,EAAEyC,QAAQ,EAAE;IACpC,MAAMxC,KAAK,GAAGhG,QAAQ,CAAC+F,GAAG,CAAC;IAC3BC,KAAK,CAACS,cAAc,GAAG,MAAM;MACzB,IAAI,CAAC+B,QAAQ,EAAE;QACX;MACJ;MACAgD,YAAY,CAAC/E,cAAc,CAAC+B,QAAQ,CAAC;MACrC,IAAI,CAACsD,mBAAmB,CAACN,YAAY,CAAC;IAC1C,CAAC;IACDxF,KAAK,CAACU,QAAQ,GAAG,MAAM;MAAE,OAAO,IAAI,CAAC/C,QAAQ,CAAC+C,QAAQ,CAACX,GAAG,CAACY,SAAS,CAAC;IAAE,CAAC;IACxEX,KAAK,CAACY,cAAc,GAAG,MAAM;MAAE,OAAO,IAAI,CAACjD,QAAQ,CAACiD,cAAc,CAACb,GAAG,CAACc,eAAe,CAAC;IAAE,CAAC;IAC1Fb,KAAK,CAACc,qBAAqB,GAAG,MAAM;MAAE,OAAO,IAAI,CAACnD,QAAQ,CAACmD,qBAAqB,CAACf,GAAG,CAACc,eAAe,CAAC;IAAE,CAAC;IACxG;IACA2E,YAAY,CAACtC,YAAY,CAAClD,KAAK,CAAC;IAChC,OAAOA,KAAK;EAChB;EACAmG,iBAAiB,CAACX,YAAY,EAAEhD,QAAQ,EAAEC,IAAI,EAAE;IAC5C,IAAI,CAAC,IAAI,CAAC9E,QAAQ,EAAE;MAChBpD,MAAM,CAACqB,UAAU,CAAC,uDAAuD,EAAEvB,MAAM,CAACwB,MAAM,CAACC,qBAAqB,EAAE;QAAEC,SAAS,EAAE;MAAO,CAAC,CAAC;IAC1I;IACAyJ,YAAY,CAACjD,WAAW,CAACC,QAAQ,EAAEC,IAAI,CAAC;IACxC;IACA,IAAI,CAACgD,cAAc,CAACD,YAAY,CAACnD,GAAG,CAAC,GAAGmD,YAAY;IACpD;IACA,IAAI,CAAC,IAAI,CAACQ,aAAa,CAACR,YAAY,CAACnD,GAAG,CAAC,EAAE;MACvC,MAAM+D,WAAW,GAAIrG,GAAG,IAAK;QACzB,IAAIC,KAAK,GAAG,IAAI,CAACkG,UAAU,CAACV,YAAY,EAAEzF,GAAG,EAAEyC,QAAQ,CAAC;QACxD;QACA,IAAIxC,KAAK,CAACyD,WAAW,IAAI,IAAI,EAAE;UAC3B,IAAI;YACA,MAAMvG,IAAI,GAAGsI,YAAY,CAACrC,OAAO,CAACnD,KAAK,CAAC;YACxC,IAAI,CAAC+F,IAAI,CAACP,YAAY,CAAC1G,MAAM,EAAE,GAAG5B,IAAI,CAAC;UAC3C,CAAC,CACD,OAAOvB,KAAK,EAAE;YACVqE,KAAK,CAACyD,WAAW,GAAG9H,KAAK,CAACA,KAAK;UACnC;QACJ;QACA;QACA,IAAI6J,YAAY,CAAC1G,MAAM,IAAI,IAAI,EAAE;UAC7B,IAAI,CAACiH,IAAI,CAAC,OAAO,EAAE/F,KAAK,CAAC;QAC7B;QACA;QACA,IAAIA,KAAK,CAACyD,WAAW,IAAI,IAAI,EAAE;UAC3B,IAAI,CAACsC,IAAI,CAAC,OAAO,EAAE/F,KAAK,CAACyD,WAAW,EAAEzD,KAAK,CAAC;QAChD;MACJ,CAAC;MACD,IAAI,CAACgG,aAAa,CAACR,YAAY,CAACnD,GAAG,CAAC,GAAG+D,WAAW;MAClD;MACA,IAAIZ,YAAY,CAAC1G,MAAM,IAAI,IAAI,EAAE;QAC7B,IAAI,CAACnB,QAAQ,CAAC0I,EAAE,CAACb,YAAY,CAAC1G,MAAM,EAAEsH,WAAW,CAAC;MACtD;IACJ;EACJ;EACAE,WAAW,CAACtG,KAAK,EAAEuG,oBAAoB,EAAEC,OAAO,EAAE;IAC9C,MAAMhB,YAAY,GAAG,IAAI,CAACE,gBAAgB,CAAC1F,KAAK,CAAC;IACjD,MAAMlB,MAAM,GAAG3E,WAAW,CAACqL,YAAY,CAAC1G,MAAM,CAAC;IAC/C,IAAI,OAAQyH,oBAAqB,KAAK,QAAQ,IAAIzM,WAAW,CAACyM,oBAAoB,EAAE,EAAE,CAAC,EAAE;MACrF,IAAIC,OAAO,IAAI,IAAI,EAAE;QACjBjM,MAAM,CAACmB,kBAAkB,CAAC,uCAAuC,EAAE,SAAS,EAAE8K,OAAO,CAAC;MAC1F;MACA1H,MAAM,CAAC6B,SAAS,GAAG4F,oBAAoB;IAC3C,CAAC,MACI;MACDzH,MAAM,CAAC2H,SAAS,GAAKF,oBAAoB,IAAI,IAAI,GAAIA,oBAAoB,GAAG,CAAE;MAC9EzH,MAAM,CAAC0H,OAAO,GAAKA,OAAO,IAAI,IAAI,GAAIA,OAAO,GAAG,QAAS;IAC7D;IACA,OAAO,IAAI,CAAC7I,QAAQ,CAAC+I,OAAO,CAAC5H,MAAM,CAAC,CAAC/F,IAAI,CAAE+G,IAAI,IAAK;MAChD,OAAOA,IAAI,CAACxD,GAAG,CAAEyD,GAAG,IAAK,IAAI,CAACmG,UAAU,CAACV,YAAY,EAAEzF,GAAG,EAAE,IAAI,CAAC,CAAC;IACtE,CAAC,CAAC;EACN;EACAsG,EAAE,CAACrG,KAAK,EAAEwC,QAAQ,EAAE;IAChB,IAAI,CAAC2D,iBAAiB,CAAC,IAAI,CAACT,gBAAgB,CAAC1F,KAAK,CAAC,EAAEwC,QAAQ,EAAE,KAAK,CAAC;IACrE,OAAO,IAAI;EACf;EACAC,IAAI,CAACzC,KAAK,EAAEwC,QAAQ,EAAE;IAClB,IAAI,CAAC2D,iBAAiB,CAAC,IAAI,CAACT,gBAAgB,CAAC1F,KAAK,CAAC,EAAEwC,QAAQ,EAAE,IAAI,CAAC;IACpE,OAAO,IAAI;EACf;EACAuD,IAAI,CAACJ,SAAS,EAAE,GAAGzI,IAAI,EAAE;IACrB,IAAI,CAAC,IAAI,CAACS,QAAQ,EAAE;MAChB,OAAO,KAAK;IAChB;IACA,MAAM6H,YAAY,GAAG,IAAI,CAACE,gBAAgB,CAACC,SAAS,CAAC;IACrD,MAAM9M,MAAM,GAAI2M,YAAY,CAAC1C,GAAG,CAAC5F,IAAI,CAAC,GAAG,CAAE;IAC3C;IACA,IAAI,CAAC4I,mBAAmB,CAACN,YAAY,CAAC;IACtC,OAAO3M,MAAM;EACjB;EACAgK,aAAa,CAAC8C,SAAS,EAAE;IACrB,IAAI,CAAC,IAAI,CAAChI,QAAQ,EAAE;MAChB,OAAO,CAAC;IACZ;IACA,IAAIgI,SAAS,IAAI,IAAI,EAAE;MACnB,OAAO/G,MAAM,CAACC,IAAI,CAAC,IAAI,CAAC4G,cAAc,CAAC,CAACkB,MAAM,CAAC,CAACC,KAAK,EAAE7H,GAAG,KAAK;QAC3D,OAAO6H,KAAK,GAAG,IAAI,CAACnB,cAAc,CAAC1G,GAAG,CAAC,CAAC8D,aAAa,EAAE;MAC3D,CAAC,EAAE,CAAC,CAAC;IACT;IACA,OAAO,IAAI,CAAC6C,gBAAgB,CAACC,SAAS,CAAC,CAAC9C,aAAa,EAAE;EAC3D;EACAD,SAAS,CAAC+C,SAAS,EAAE;IACjB,IAAI,CAAC,IAAI,CAAChI,QAAQ,EAAE;MAChB,OAAO,EAAE;IACb;IACA,IAAIgI,SAAS,IAAI,IAAI,EAAE;MACnB,MAAM9M,MAAM,GAAG,EAAE;MACjB,KAAK,IAAIwJ,GAAG,IAAI,IAAI,CAACoD,cAAc,EAAE;QACjC,IAAI,CAACA,cAAc,CAACpD,GAAG,CAAC,CAACO,SAAS,EAAE,CAACsB,OAAO,CAAE1B,QAAQ,IAAK;UACvD3J,MAAM,CAACsI,IAAI,CAACqB,QAAQ,CAAC;QACzB,CAAC,CAAC;MACN;MACA,OAAO3J,MAAM;IACjB;IACA,OAAO,IAAI,CAAC6M,gBAAgB,CAACC,SAAS,CAAC,CAAC/C,SAAS,EAAE;EACvD;EACAD,kBAAkB,CAACgD,SAAS,EAAE;IAC1B,IAAI,CAAC,IAAI,CAAChI,QAAQ,EAAE;MAChB,OAAO,IAAI;IACf;IACA,IAAIgI,SAAS,IAAI,IAAI,EAAE;MACnB,KAAK,MAAMtD,GAAG,IAAI,IAAI,CAACoD,cAAc,EAAE;QACnC,MAAMD,YAAY,GAAG,IAAI,CAACC,cAAc,CAACpD,GAAG,CAAC;QAC7CmD,YAAY,CAAC7C,kBAAkB,EAAE;QACjC,IAAI,CAACmD,mBAAmB,CAACN,YAAY,CAAC;MAC1C;MACA,OAAO,IAAI;IACf;IACA;IACA,MAAMA,YAAY,GAAG,IAAI,CAACE,gBAAgB,CAACC,SAAS,CAAC;IACrDH,YAAY,CAAC7C,kBAAkB,EAAE;IACjC,IAAI,CAACmD,mBAAmB,CAACN,YAAY,CAAC;IACtC,OAAO,IAAI;EACf;EACAS,GAAG,CAACN,SAAS,EAAEnD,QAAQ,EAAE;IACrB,IAAI,CAAC,IAAI,CAAC7E,QAAQ,EAAE;MAChB,OAAO,IAAI;IACf;IACA,MAAM6H,YAAY,GAAG,IAAI,CAACE,gBAAgB,CAACC,SAAS,CAAC;IACrDH,YAAY,CAAC/E,cAAc,CAAC+B,QAAQ,CAAC;IACrC,IAAI,CAACsD,mBAAmB,CAACN,YAAY,CAAC;IACtC,OAAO,IAAI;EACf;EACA/E,cAAc,CAACkF,SAAS,EAAEnD,QAAQ,EAAE;IAChC,OAAO,IAAI,CAACyD,GAAG,CAACN,SAAS,EAAEnD,QAAQ,CAAC;EACxC;AACJ;AACA,OAAO,MAAMqE,QAAQ,SAASlD,YAAY,CAAC;AAE3C,OAAO,MAAMmD,eAAe,CAAC;EACzB1E,WAAW,CAACkB,iBAAiB,EAAEyD,QAAQ,EAAEvJ,MAAM,EAAE;IAC7C,IAAIwJ,WAAW,GAAG,IAAI;IACtB,IAAI,OAAQD,QAAS,KAAK,QAAQ,EAAE;MAChCC,WAAW,GAAGD,QAAQ;IAC1B,CAAC,MACI,IAAIlN,OAAO,CAACkN,QAAQ,CAAC,EAAE;MACxBC,WAAW,GAAGpN,OAAO,CAACmN,QAAQ,CAAC;IACnC,CAAC,MACI,IAAIA,QAAQ,IAAI,OAAQA,QAAQ,CAACE,MAAO,KAAK,QAAQ,EAAE;MACxD;MACAD,WAAW,GAAGD,QAAQ,CAACE,MAAM;IACjC,CAAC,MACI;MACD;MACAD,WAAW,GAAG,GAAG;IACrB;IACA;IACA,IAAIA,WAAW,CAACpC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,IAAI,EAAE;MACtCoC,WAAW,GAAG,IAAI,GAAGA,WAAW;IACpC;IACA;IACA,IAAI,CAAClN,WAAW,CAACkN,WAAW,CAAC,IAAKA,WAAW,CAAC5J,MAAM,GAAG,CAAE,EAAE;MACvD7C,MAAM,CAACmB,kBAAkB,CAAC,kBAAkB,EAAE,UAAU,EAAEqL,QAAQ,CAAC;IACvE;IACA;IACA,IAAIvJ,MAAM,IAAI,CAACnE,MAAM,CAAC0K,QAAQ,CAACvG,MAAM,CAAC,EAAE;MACpCjD,MAAM,CAACmB,kBAAkB,CAAC,gBAAgB,EAAE,QAAQ,EAAE8B,MAAM,CAAC;IACjE;IACAzD,cAAc,CAAC,IAAI,EAAE,UAAU,EAAEiN,WAAW,CAAC;IAC7CjN,cAAc,CAAC,IAAI,EAAE,WAAW,EAAEE,SAAS,CAAC4J,GAAG,CAACC,MAAM,EAAE,cAAc,CAAC,CAACR,iBAAiB,CAAC,CAAC;IAC3FvJ,cAAc,CAAC,IAAI,EAAE,QAAQ,EAAEyD,MAAM,IAAI,IAAI,CAAC;EAClD;EACA;EACA0J,oBAAoB,CAAC,GAAGhK,IAAI,EAAE;IAC1B,IAAIc,EAAE,GAAG,CAAC,CAAC;IACX;IACA,IAAId,IAAI,CAACE,MAAM,KAAK,IAAI,CAACU,SAAS,CAACqJ,MAAM,CAAC9J,MAAM,CAACD,MAAM,GAAG,CAAC,IAAI,OAAQF,IAAI,CAACA,IAAI,CAACE,MAAM,GAAG,CAAC,CAAE,KAAK,QAAQ,EAAE;MACxGY,EAAE,GAAG7D,WAAW,CAAC+C,IAAI,CAACI,GAAG,EAAE,CAAC;MAC5B,KAAK,MAAMyB,GAAG,IAAIf,EAAE,EAAE;QAClB,IAAI,CAACxD,sBAAsB,CAACuE,GAAG,CAAC,EAAE;UAC9B,MAAM,IAAI8G,KAAK,CAAC,+BAA+B,GAAG9G,GAAG,CAAC;QAC1D;MACJ;IACJ;IACA;IACA,CAAC,MAAM,EAAE,MAAM,EAAE,IAAI,CAAC,CAACmF,OAAO,CAAEnF,GAAG,IAAK;MACpC,IAAIf,EAAE,CAACe,GAAG,CAAC,IAAI,IAAI,EAAE;QACjB;MACJ;MACAxE,MAAM,CAACqB,UAAU,CAAC,kBAAkB,GAAGmD,GAAG,EAAE1E,MAAM,CAACwB,MAAM,CAACC,qBAAqB,EAAE;QAAEC,SAAS,EAAEgD;MAAI,CAAC,CAAC;IACxG,CAAC,CAAC;IACF,IAAIf,EAAE,CAAC5F,KAAK,EAAE;MACV,MAAMA,KAAK,GAAGqB,SAAS,CAACkB,IAAI,CAACqD,EAAE,CAAC5F,KAAK,CAAC;MACtC,IAAI,CAACA,KAAK,CAACqG,MAAM,EAAE,IAAI,CAAC,IAAI,CAACX,SAAS,CAACqJ,MAAM,CAACzI,OAAO,EAAE;QACnDnE,MAAM,CAACqB,UAAU,CAAC,+CAA+C,EAAEvB,MAAM,CAACwB,MAAM,CAACC,qBAAqB,EAAE;UACpGC,SAAS,EAAE,iBAAiB;UAC5B3D,KAAK,EAAE4F,EAAE,CAAC5F;QACd,CAAC,CAAC;MACN;IACJ;IACA;IACAmC,MAAM,CAACgD,kBAAkB,CAACL,IAAI,CAACE,MAAM,EAAE,IAAI,CAACU,SAAS,CAACqJ,MAAM,CAAC9J,MAAM,CAACD,MAAM,EAAE,0BAA0B,CAAC;IACvG;IACAY,EAAE,CAACtD,IAAI,GAAGd,OAAO,CAACD,MAAM,CAAC,CACrB,IAAI,CAACoN,QAAQ,EACb,IAAI,CAACjJ,SAAS,CAACsJ,YAAY,CAAClK,IAAI,CAAC,CACpC,CAAC,CAAC;IACH,OAAOc,EAAE;EACb;EACAmJ,MAAM,CAAC,GAAGjK,IAAI,EAAE;IACZ,OAAOpF,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD,IAAIqF,SAAS,GAAG,CAAC,CAAC;MAClB;MACA,IAAID,IAAI,CAACE,MAAM,KAAK,IAAI,CAACU,SAAS,CAACqJ,MAAM,CAAC9J,MAAM,CAACD,MAAM,GAAG,CAAC,EAAE;QACzDD,SAAS,GAAGD,IAAI,CAACI,GAAG,EAAE;MAC1B;MACA;MACA/C,MAAM,CAACgD,kBAAkB,CAACL,IAAI,CAACE,MAAM,EAAE,IAAI,CAACU,SAAS,CAACqJ,MAAM,CAAC9J,MAAM,CAACD,MAAM,EAAE,0BAA0B,CAAC;MACvG;MACA,MAAMiK,MAAM,GAAG,MAAMpL,gBAAgB,CAAC,IAAI,CAACuB,MAAM,EAAEN,IAAI,EAAE,IAAI,CAACY,SAAS,CAACqJ,MAAM,CAAC9J,MAAM,CAAC;MACtFgK,MAAM,CAAClG,IAAI,CAAChE,SAAS,CAAC;MACtB;MACA,MAAMmK,UAAU,GAAG,IAAI,CAACJ,oBAAoB,CAAC,GAAGG,MAAM,CAAC;MACvD;MACA,MAAMrJ,EAAE,GAAG,MAAM,IAAI,CAACR,MAAM,CAACsE,eAAe,CAACwF,UAAU,CAAC;MACxD,MAAMtL,OAAO,GAAG/B,SAAS,CAAC,IAAI,CAACmI,WAAW,EAAE,oBAAoB,CAAC,CAACpE,EAAE,CAAC;MACrE,MAAMhB,QAAQ,GAAG/C,SAAS,CAAC,IAAI,CAACmI,WAAW,EAAE,aAAa,CAAC,CAACpG,OAAO,EAAE,IAAI,CAAC8B,SAAS,EAAE,IAAI,CAACN,MAAM,CAAC;MACjG;MACAgC,eAAe,CAACxC,QAAQ,EAAEgB,EAAE,CAAC;MAC7BjE,cAAc,CAACiD,QAAQ,EAAE,mBAAmB,EAAEgB,EAAE,CAAC;MACjD,OAAOhB,QAAQ;IACnB,CAAC,CAAC;EACN;EACAqI,MAAM,CAACrJ,OAAO,EAAE;IACZ,OAAQ,IAAI,CAACoG,WAAW,CAAEmF,WAAW,CAACvL,OAAO,EAAE,IAAI,CAAC8B,SAAS,EAAE,IAAI,CAACN,MAAM,CAAC;EAC/E;EACA4H,OAAO,CAAC5H,MAAM,EAAE;IACZ,OAAO,IAAK,IAAI,CAAC4E,WAAW,CAAE,IAAI,CAACtE,SAAS,EAAE,IAAI,CAACiJ,QAAQ,EAAEvJ,MAAM,CAAC;EACxE;EACA,OAAOgK,YAAY,CAACC,cAAc,EAAEjK,MAAM,EAAE;IACxC,IAAIiK,cAAc,IAAI,IAAI,EAAE;MACxBlN,MAAM,CAACqB,UAAU,CAAC,yBAAyB,EAAEvB,MAAM,CAACwB,MAAM,CAAC6L,gBAAgB,EAAE;QAAE9K,QAAQ,EAAE;MAAiB,CAAC,CAAC;IAChH;IACA,IAAI,OAAQ6K,cAAe,KAAK,QAAQ,EAAE;MACtCA,cAAc,GAAGxI,IAAI,CAAC0I,KAAK,CAACF,cAAc,CAAC;IAC/C;IACA,MAAMG,GAAG,GAAGH,cAAc,CAACG,GAAG;IAC9B,IAAIb,QAAQ,GAAG,IAAI;IACnB,IAAIU,cAAc,CAACV,QAAQ,EAAE;MACzBA,QAAQ,GAAGU,cAAc,CAACV,QAAQ;IACtC,CAAC,MACI,IAAIU,cAAc,CAACI,GAAG,IAAIJ,cAAc,CAACI,GAAG,CAACd,QAAQ,EAAE;MACxDA,QAAQ,GAAGU,cAAc,CAACI,GAAG,CAACd,QAAQ;IAC1C;IACA,OAAO,IAAI,IAAI,CAACa,GAAG,EAAEb,QAAQ,EAAEvJ,MAAM,CAAC;EAC1C;EACA,OAAOqH,YAAY,CAACvB,iBAAiB,EAAE;IACnC,OAAOuD,QAAQ,CAAChC,YAAY,CAACvB,iBAAiB,CAAC;EACnD;EACA,OAAO9J,kBAAkB,CAACwE,EAAE,EAAE;IAC1B,OAAOxE,kBAAkB,CAACwE,EAAE,CAAC;EACjC;EACA,OAAOuJ,WAAW,CAACvL,OAAO,EAAEsH,iBAAiB,EAAE9F,MAAM,EAAE;IACnD,OAAO,IAAIqJ,QAAQ,CAAC7K,OAAO,EAAEsH,iBAAiB,EAAE9F,MAAM,CAAC;EAC3D;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}